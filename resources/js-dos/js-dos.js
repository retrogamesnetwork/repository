!function i(s,a,c){function u(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var o=new Error("Cannot find module '"+t+"'");throw o.code="MODULE_NOT_FOUND",o}var r=a[t]={exports:{}};s[t][0].call(r.exports,function(e){return u(s[t][1][e]||e)},r,r.exports,i,s,a,c)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";var u=e("./utils");function l(){var o={},n=0,r=0,i=0;return{add:function(e,t){t||(t=e,e=0),r<e?r=e:e<i&&(i=e),o[e]||(o[e]=[]),o[e].push(t),n++},process:function(){for(var e=i;e<=r;e++)for(var t=o[e],n=0;n<t.length;n++){(0,t[n])()}},size:function(){return n}}}t.exports=function(e){var t=(e=e||{}).reporter,n=u.getOption(e,"async",!0),o=u.getOption(e,"auto",!0);o&&!n&&(t&&t.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),n=!0);var r,i=l(),s=!1;function a(){for(s=!0;i.size();){var e=i;i=l(),e.process()}s=!1}function c(){r=setTimeout(a,0)}return{add:function(e,t){!s&&o&&n&&0===i.size()&&c(),i.add(e,t)},force:function(e){s||(void 0===e&&(e=n),r&&(clearTimeout(r),r=null),(e?c:a)())}}}},{"./utils":2}],2:[function(e,t,n){"use strict";(t.exports={}).getOption=function(e,t,n){var o=e[t];return null!=o||void 0===n?o:n}},{}],3:[function(e,t,n){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],4:[function(e,t,n){var o=e("./_wks")("unscopables"),r=Array.prototype;null==r[o]&&e("./_hide")(r,o,{}),t.exports=function(e){r[o][e]=!0}},{"./_hide":32,"./_wks":95}],5:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);t.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},{"./_string-at":77}],6:[function(e,t,n){t.exports=function(e,t,n,o){if(!(e instanceof t)||void 0!==o&&o in e)throw TypeError(n+": incorrect invocation!");return e}},{}],7:[function(e,t,n){var o=e("./_is-object");t.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":40}],8:[function(e,t,n){"use strict";var l=e("./_to-object"),d=e("./_to-absolute-index"),f=e("./_to-length");t.exports=[].copyWithin||function(e,t,n){var o=l(this),r=f(o.length),i=d(e,r),s=d(t,r),a=2<arguments.length?n:void 0,c=Math.min((void 0===a?r:d(a,r))-s,r-i),u=1;for(s<i&&i<s+c&&(u=-1,s+=c-1,i+=c-1);0<c--;)s in o?o[i]=o[s]:delete o[i],i+=u,s+=u;return o}},{"./_to-absolute-index":81,"./_to-length":85,"./_to-object":86}],9:[function(e,t,n){"use strict";var u=e("./_to-object"),l=e("./_to-absolute-index"),d=e("./_to-length");t.exports=function(e,t,n){for(var o=u(this),r=d(o.length),i=arguments.length,s=l(1<i?t:void 0,r),a=2<i?n:void 0,c=void 0===a?r:l(a,r);s<c;)o[s++]=e;return o}},{"./_to-absolute-index":81,"./_to-length":85,"./_to-object":86}],10:[function(e,t,n){var c=e("./_to-iobject"),u=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,n){var o,r=c(e),i=u(r.length),s=l(n,i);if(a&&t!=t){for(;s<i;)if((o=r[s++])!=o)return!0}else for(;s<i;s++)if((a||s in r)&&r[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":81,"./_to-iobject":84,"./_to-length":85}],11:[function(e,t,n){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),x=e("./_to-length"),o=e("./_array-species-create");t.exports=function(d,e){var f=1==d,p=2==d,h=3==d,y=4==d,v=6==d,m=5==d||v,g=e||o;return function(e,t,n){for(var o,r,i=w(e),s=b(i),a=_(t,n,3),c=x(s.length),u=0,l=f?g(e,c):p?g(e,0):void 0;u<c;u++)if((m||u in s)&&(r=a(o=s[u],u,i),d))if(f)l[u]=r;else if(r)switch(d){case 3:return!0;case 5:return o;case 6:return u;case 2:l.push(o)}else if(y)return!1;return v?-1:h||y?y:l}}},{"./_array-species-create":13,"./_ctx":18,"./_iobject":37,"./_to-length":85,"./_to-object":86}],12:[function(e,t,n){var o=e("./_is-object"),r=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return r(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!r(t.prototype)||(t=void 0),o(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":39,"./_is-object":40,"./_wks":95}],13:[function(e,t,n){var o=e("./_array-species-constructor");t.exports=function(e,t){return new(o(e))(t)}},{"./_array-species-constructor":12}],14:[function(e,t,n){var r=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==r(function(){return arguments}());t.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:s?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},{"./_cof":15,"./_wks":95}],15:[function(e,t,n){var o={}.toString;t.exports=function(e){return o.call(e).slice(8,-1)}},{}],16:[function(e,t,n){var o=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=o)},{}],17:[function(e,t,n){"use strict";var o=e("./_object-dp"),r=e("./_property-desc");t.exports=function(e,t,n){t in e?o.f(e,t,r(0,n)):e[t]=n}},{"./_object-dp":52,"./_property-desc":66}],18:[function(e,t,n){var i=e("./_a-function");t.exports=function(o,r,e){if(i(o),void 0===r)return o;switch(e){case 1:return function(e){return o.call(r,e)};case 2:return function(e,t){return o.call(r,e,t)};case 3:return function(e,t,n){return o.call(r,e,t,n)}}return function(){return o.apply(r,arguments)}}},{"./_a-function":3}],19:[function(e,t,n){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],20:[function(e,t,n){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":25}],21:[function(e,t,n){var o=e("./_is-object"),r=e("./_global").document,i=o(r)&&o(r.createElement);t.exports=function(e){return i?r.createElement(e):{}}},{"./_global":30,"./_is-object":40}],22:[function(e,t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],23:[function(e,t,n){var a=e("./_object-keys"),c=e("./_object-gops"),u=e("./_object-pie");t.exports=function(e){var t=a(e),n=c.f;if(n)for(var o,r=n(e),i=u.f,s=0;r.length>s;)i.call(e,o=r[s++])&&t.push(o);return t}},{"./_object-gops":57,"./_object-keys":60,"./_object-pie":61}],24:[function(e,t,n){var y=e("./_global"),v=e("./_core"),m=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,n){var o,r,i,s,a=e&w.F,c=e&w.G,u=e&w.S,l=e&w.P,d=e&w.B,f=c?y:u?y[t]||(y[t]={}):(y[t]||{})[b],p=c?v:v[t]||(v[t]={}),h=p[b]||(p[b]={});for(o in c&&(n=t),n)i=((r=!a&&f&&void 0!==f[o])?f:n)[o],s=d&&r?_(i,y):l&&"function"==typeof i?_(Function.call,i):i,f&&g(f,o,i,e&w.U),p[o]!=i&&m(p,o,s),l&&h[o]!=i&&(h[o]=i)};y.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":16,"./_ctx":18,"./_global":30,"./_hide":32,"./_redefine":68}],25:[function(e,t,n){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],26:[function(e,t,n){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),d=e("./_hide"),f=e("./_fails"),p=e("./_defined"),h=e("./_wks"),y=e("./_regexp-exec"),v=h("species"),m=!f(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(n,e,t){var o=h(n),i=!f(function(){var e={};return e[o]=function(){return 7},7!=""[n](e)}),r=i?!f(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===n&&(t.constructor={},t.constructor[v]=function(){return t}),t[o](""),!e}):void 0;if(!i||!r||"replace"===n&&!m||"split"===n&&!g){var s=/./[o],a=t(p,o,""[n],function(e,t,n,o,r){return t.exec===y?i&&!r?{done:!0,value:s.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}}),c=a[0],u=a[1];l(String.prototype,n,c),d(RegExp.prototype,o,2==e?function(e,t){return u.call(e,this,t)}:function(e){return u.call(e,this)})}}},{"./_defined":19,"./_fails":25,"./_hide":32,"./_redefine":68,"./_regexp-exec":70,"./_wks":95,"./es6.regexp.exec":106}],27:[function(e,t,n){"use strict";var o=e("./_an-object");t.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":7}],28:[function(e,t,n){var f=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),y=e("./_an-object"),v=e("./_to-length"),m=e("./core.get-iterator-method"),g={},_={};(n=t.exports=function(e,t,n,o,r){var i,s,a,c,u=r?function(){return e}:m(e),l=f(n,o,t?2:1),d=0;if("function"!=typeof u)throw TypeError(e+" is not iterable!");if(h(u)){for(i=v(e.length);d<i;d++)if((c=t?l(y(s=e[d])[0],s[1]):l(e[d]))===g||c===_)return c}else for(a=u.call(e);!(s=a.next()).done;)if((c=p(a,l,s.value,t))===g||c===_)return c}).BREAK=g,n.RETURN=_},{"./_an-object":7,"./_ctx":18,"./_is-array-iter":38,"./_iter-call":41,"./_to-length":85,"./core.get-iterator-method":96}],29:[function(e,t,n){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":75}],30:[function(e,t,n){var o=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=o)},{}],31:[function(e,t,n){var o={}.hasOwnProperty;t.exports=function(e,t){return o.call(e,t)}},{}],32:[function(e,t,n){var o=e("./_object-dp"),r=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},{"./_descriptors":20,"./_object-dp":52,"./_property-desc":66}],33:[function(e,t,n){var o=e("./_global").document;t.exports=o&&o.documentElement},{"./_global":30}],34:[function(e,t,n){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":20,"./_dom-create":21,"./_fails":25}],35:[function(e,t,n){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,n){var o,r=t.constructor;return r!==n&&"function"==typeof r&&(o=r.prototype)!==n.prototype&&i(o)&&s&&s(e,o),e}},{"./_is-object":40,"./_set-proto":71}],36:[function(e,t,n){t.exports=function(e,t,n){var o=void 0===n;switch(t.length){case 0:return o?e():e.call(n);case 1:return o?e(t[0]):e.call(n,t[0]);case 2:return o?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return o?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return o?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},{}],37:[function(e,t,n){var o=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},{"./_cof":15}],38:[function(e,t,n){var o=e("./_iterators"),r=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(o.Array===e||i[r]===e)}},{"./_iterators":46,"./_wks":95}],39:[function(e,t,n){var o=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==o(e)}},{"./_cof":15}],40:[function(e,t,n){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],41:[function(e,t,n){var i=e("./_an-object");t.exports=function(t,e,n,o){try{return o?e(i(n)[0],n[1]):e(n)}catch(e){var r=t.return;throw void 0!==r&&i(r.call(t)),e}}},{"./_an-object":7}],42:[function(e,t,n){"use strict";var o=e("./_object-create"),r=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,n){e.prototype=o(s,{next:r(1,n)}),i(e,t+" Iterator")}},{"./_hide":32,"./_object-create":51,"./_property-desc":66,"./_set-to-string-tag":73,"./_wks":95}],43:[function(e,t,n){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),x=e("./_redefine"),D=e("./_hide"),k=e("./_iterators"),E=e("./_iter-create"),j=e("./_set-to-string-tag"),B=e("./_object-gpo"),K=e("./_wks")("iterator"),C=!([].keys&&"next"in[].keys()),O="values";t.exports=function(e,t,n,o,r,i,s){E(n,t,o);function a(e){if(!C&&e in h)return h[e];switch(e){case"keys":case O:return function(){return new n(this,e)}}return function(){return new n(this,e)}}var c,u,l,d=t+" Iterator",f=r==O,p=!1,h=e.prototype,y=h[K]||h["@@iterator"]||r&&h[r],v=y||a(r),m=r?f?a("entries"):v:void 0,g="Array"==t&&h.entries||y;if(g&&(l=B(g.call(new e)))!==Object.prototype&&l.next&&(j(l,d,!0),b||"function"==typeof l[K]||D(l,K,_)),f&&y&&y.name!==O&&(p=!0,v=function(){return y.call(this)}),b&&!s||!C&&!p&&h[K]||D(h,K,v),k[t]=v,k[d]=_,r)if(c={values:f?v:a(O),keys:i?v:a("keys"),entries:m},s)for(u in c)u in h||x(h,u,c[u]);else w(w.P+w.F*(C||p),t,c);return c}},{"./_export":24,"./_hide":32,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":58,"./_redefine":68,"./_set-to-string-tag":73,"./_wks":95}],44:[function(e,t,n){var i=e("./_wks")("iterator"),s=!1;try{var o=[7][i]();o.return=function(){s=!0},Array.from(o,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var n=!1;try{var o=[7],r=o[i]();r.next=function(){return{done:n=!0}},o[i]=function(){return r},e(o)}catch(e){}return n}},{"./_wks":95}],45:[function(e,t,n){t.exports=function(e,t){return{value:t,done:!!e}}},{}],46:[function(e,t,n){t.exports={}},{}],47:[function(e,t,n){t.exports=!1},{}],48:[function(e,t,n){function o(e){a(e,r,{value:{i:"O"+ ++c,w:{}}})}var r=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,c=0,u=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),d=t.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,r)){if(!u(e))return"F";if(!t)return"E";o(e)}return e[r].i},getWeak:function(e,t){if(!s(e,r)){if(!u(e))return!0;if(!t)return!1;o(e)}return e[r].w},onFreeze:function(e){return l&&d.NEED&&u(e)&&!s(e,r)&&o(e),e}}},{"./_fails":25,"./_has":31,"./_is-object":40,"./_object-dp":52,"./_uid":91}],49:[function(e,t,n){var a=e("./_global"),c=e("./_task").set,u=a.MutationObserver||a.WebKitMutationObserver,l=a.process,d=a.Promise,f="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(f&&(e=l.domain)&&e.exit();n;){t=n.fn,n=n.next;try{t()}catch(e){throw n?r():o=void 0,e}}o=void 0,e&&e.enter()}var n,o,r;if(f)r=function(){l.nextTick(e)};else if(!u||a.navigator&&a.navigator.standalone)if(d&&d.resolve){var t=d.resolve(void 0);r=function(){t.then(e)}}else r=function(){c.call(a,e)};else{var i=!0,s=document.createTextNode("");new u(e).observe(s,{characterData:!0}),r=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};o&&(o.next=t),n||(n=t,r()),o=t}}},{"./_cof":15,"./_global":30,"./_task":80}],50:[function(e,t,n){"use strict";var r=e("./_a-function");function o(e){var n,o;this.promise=new e(function(e,t){if(void 0!==n||void 0!==o)throw TypeError("Bad Promise constructor");n=e,o=t}),this.resolve=r(n),this.reject=r(o)}t.exports.f=function(e){return new o(e)}},{"./_a-function":3}],51:[function(o,e,t){function r(){}var i=o("./_an-object"),s=o("./_object-dps"),a=o("./_enum-bug-keys"),c=o("./_shared-key")("IE_PROTO"),u="prototype",l=function(){var e,t=o("./_dom-create")("iframe"),n=a.length;for(t.style.display="none",o("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;n--;)delete l[u][a[n]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(r[u]=i(e),n=new r,r[u]=null,n[c]=e):n=l(),void 0===t?n:s(n,t)}},{"./_an-object":7,"./_dom-create":21,"./_enum-bug-keys":22,"./_html":33,"./_object-dps":53,"./_shared-key":74}],52:[function(e,t,n){var o=e("./_an-object"),r=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;n.f=e("./_descriptors")?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},{"./_an-object":7,"./_descriptors":20,"./_ie8-dom-define":34,"./_to-primitive":87}],53:[function(e,t,n){var s=e("./_object-dp"),a=e("./_an-object"),c=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var n,o=c(t),r=o.length,i=0;i<r;)s.f(e,n=o[i++],t[n]);return e}},{"./_an-object":7,"./_descriptors":20,"./_object-dp":52,"./_object-keys":60}],54:[function(e,t,n){var o=e("./_object-pie"),r=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),c=e("./_ie8-dom-define"),u=Object.getOwnPropertyDescriptor;n.f=e("./_descriptors")?u:function(e,t){if(e=i(e),t=s(t,!0),c)try{return u(e,t)}catch(e){}if(a(e,t))return r(!o.f.call(e,t),e[t])}},{"./_descriptors":20,"./_has":31,"./_ie8-dom-define":34,"./_object-pie":61,"./_property-desc":66,"./_to-iobject":84,"./_to-primitive":87}],55:[function(e,t,n){var o=e("./_to-iobject"),r=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return r(e)}catch(e){return s.slice()}}(e):r(o(e))}},{"./_object-gopn":56,"./_to-iobject":84}],56:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys").concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},{"./_enum-bug-keys":22,"./_object-keys-internal":59}],57:[function(e,t,n){n.f=Object.getOwnPropertySymbols},{}],58:[function(e,t,n){var o=e("./_has"),r=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=r(e),o(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":31,"./_shared-key":74,"./_to-object":86}],59:[function(e,t,n){var s=e("./_has"),a=e("./_to-iobject"),c=e("./_array-includes")(!1),u=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var n,o=a(e),r=0,i=[];for(n in o)n!=u&&s(o,n)&&i.push(n);for(;t.length>r;)s(o,n=t[r++])&&(~c(i,n)||i.push(n));return i}},{"./_array-includes":10,"./_has":31,"./_shared-key":74,"./_to-iobject":84}],60:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return o(e,r)}},{"./_enum-bug-keys":22,"./_object-keys-internal":59}],61:[function(e,t,n){n.f={}.propertyIsEnumerable},{}],62:[function(e,t,n){var r=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],o={};o[e]=t(n),r(r.S+r.F*s(function(){n(1)}),"Object",o)}},{"./_core":16,"./_export":24,"./_fails":25}],63:[function(e,t,n){var o=e("./_global").parseInt,r=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==o(i+"08")||22!==o(i+"0x16")?function(e,t){var n=r(String(e),3);return o(n,t>>>0||(s.test(n)?16:10))}:o},{"./_global":30,"./_string-trim":78,"./_string-ws":79}],64:[function(e,t,n){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],65:[function(e,t,n){var o=e("./_an-object"),r=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(o(e),r(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},{"./_an-object":7,"./_is-object":40,"./_new-promise-capability":50}],66:[function(e,t,n){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,n){var r=e("./_redefine");t.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},{"./_redefine":68}],68:[function(e,t,n){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),c=e("./_uid")("src"),o=e("./_function-to-string"),r="toString",u=(""+o).split(r);e("./_core").inspectSource=function(e){return o.call(e)},(t.exports=function(e,t,n,o){var r="function"==typeof n;r&&(a(n,"name")||s(n,"name",t)),e[t]!==n&&(r&&(a(n,c)||s(n,c,e[t]?""+e[t]:u.join(String(t)))),e===i?e[t]=n:o?e[t]?e[t]=n:s(e,t,n):(delete e[t],s(e,t,n)))})(Function.prototype,r,function(){return"function"==typeof this&&this[c]||o.call(this)})},{"./_core":16,"./_function-to-string":29,"./_global":30,"./_has":31,"./_hide":32,"./_uid":91}],69:[function(e,t,n){"use strict";var r=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":14}],70:[function(e,t,n){"use strict";var o,r,s=e("./_flags"),a=RegExp.prototype.exec,c=String.prototype.replace,i=a,u="lastIndex",l=(o=/a/,r=/b*/g,a.call(o,"a"),a.call(r,"a"),0!==o[u]||0!==r[u]),d=void 0!==/()??/.exec("")[1];(l||d)&&(i=function(e){var t,n,o,r,i=this;return d&&(n=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[u]),o=a.call(i,e),l&&o&&(i[u]=i.global?o.index+o[0].length:t),d&&o&&1<o.length&&c.call(o[0],n,function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)}),o}),t.exports=i},{"./_flags":27}],71:[function(t,e,n){function r(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var o=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,o){try{(o=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(e,t){return r(e,t),n?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:r}},{"./_an-object":7,"./_ctx":18,"./_is-object":40,"./_object-gopd":54}],72:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=o[e];i&&t&&!t[s]&&r.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":20,"./_global":30,"./_object-dp":52,"./_wks":95}],73:[function(e,t,n){var o=e("./_object-dp").f,r=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,i)&&o(e,i,{configurable:!0,value:t})}},{"./_has":31,"./_object-dp":52,"./_wks":95}],74:[function(e,t,n){var o=e("./_shared")("keys"),r=e("./_uid");t.exports=function(e){return o[e]||(o[e]=r(e))}},{"./_shared":75,"./_uid":91}],75:[function(e,t,n){var o=e("./_core"),r=e("./_global"),i="__core-js_shared__",s=r[i]||(r[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":16,"./_global":30,"./_library":47}],76:[function(e,t,n){var r=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[s])?t:i(n)}},{"./_a-function":3,"./_an-object":7,"./_wks":95}],77:[function(e,t,n){var c=e("./_to-integer"),u=e("./_defined");t.exports=function(a){return function(e,t){var n,o,r=String(u(e)),i=c(t),s=r.length;return i<0||s<=i?a?"":void 0:(n=r.charCodeAt(i))<55296||56319<n||i+1===s||(o=r.charCodeAt(i+1))<56320||57343<o?a?r.charAt(i):n:a?r.slice(i,i+2):o-56320+(n-55296<<10)+65536}}},{"./_defined":19,"./_to-integer":83}],78:[function(e,t,n){function o(e,t,n){var o={},r=a(function(){return!!c[e]()||"​"!="​"[e]()}),i=o[e]=r?t(d):c[e];n&&(o[n]=i),s(s.P+s.F*r,"String",o)}var s=e("./_export"),r=e("./_defined"),a=e("./_fails"),c=e("./_string-ws"),i="["+c+"]",u=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),d=o.trim=function(e,t){return e=String(r(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(l,"")),e};t.exports=o},{"./_defined":19,"./_export":24,"./_fails":25,"./_string-ws":79}],79:[function(e,t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],80:[function(e,t,n){function o(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function r(e){o.call(e.data)}var i,s,a,c=e("./_ctx"),u=e("./_invoke"),l=e("./_html"),d=e("./_dom-create"),f=e("./_global"),p=f.process,h=f.setImmediate,y=f.clearImmediate,v=f.MessageChannel,m=f.Dispatch,g=0,_={},b="onreadystatechange";h&&y||(h=function(e){for(var t=[],n=1;n<arguments.length;)t.push(arguments[n++]);return _[++g]=function(){u("function"==typeof e?e:Function(e),t)},i(g),g},y=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(c(o,e,1))}:m&&m.now?i=function(e){m.now(c(o,e,1))}:v?(a=(s=new v).port2,s.port1.onmessage=r,i=c(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(i=function(e){f.postMessage(e+"","*")},f.addEventListener("message",r,!1)):i=b in d("script")?function(e){l.appendChild(d("script"))[b]=function(){l.removeChild(this),o.call(e)}}:function(e){setTimeout(c(o,e,1),0)}),t.exports={set:h,clear:y}},{"./_cof":15,"./_ctx":18,"./_dom-create":21,"./_global":30,"./_html":33,"./_invoke":36}],81:[function(e,t,n){var o=e("./_to-integer"),r=Math.max,i=Math.min;t.exports=function(e,t){return(e=o(e))<0?r(e+t,0):i(e,t)}},{"./_to-integer":83}],82:[function(e,t,n){var o=e("./_to-integer"),r=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=o(e),n=r(t);if(t!==n)throw RangeError("Wrong length!");return n}},{"./_to-integer":83,"./_to-length":85}],83:[function(e,t,n){var o=Math.ceil,r=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?r:o)(e)}},{}],84:[function(e,t,n){var o=e("./_iobject"),r=e("./_defined");t.exports=function(e){return o(r(e))}},{"./_defined":19,"./_iobject":37}],85:[function(e,t,n){var o=e("./_to-integer"),r=Math.min;t.exports=function(e){return 0<e?r(o(e),9007199254740991):0}},{"./_to-integer":83}],86:[function(e,t,n){var o=e("./_defined");t.exports=function(e){return Object(o(e))}},{"./_defined":19}],87:[function(e,t,n){var r=e("./_is-object");t.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":40}],88:[function(e,t,n){"use strict";if(e("./_descriptors")){var m=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),o=e("./_typed-buffer"),h=e("./_ctx"),x=e("./_an-instance"),r=e("./_property-desc"),D=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),k=e("./_to-length"),E=e("./_to-index"),a=e("./_to-absolute-index"),c=e("./_to-primitive"),u=e("./_has"),j=e("./_classof"),B=e("./_is-object"),y=e("./_to-object"),v=e("./_is-array-iter"),K=e("./_object-create"),C=e("./_object-gpo"),O=e("./_object-gopn").f,S=e("./core.get-iterator-method"),l=e("./_uid"),d=e("./_wks"),f=e("./_array-methods"),p=e("./_array-includes"),P=e("./_species-constructor"),T=e("./es6.array.iterator"),M=e("./_iterators"),L=e("./_iter-detect"),A=e("./_set-species"),I=e("./_array-fill"),N=e("./_array-copy-within"),F=e("./_object-dp"),R=e("./_object-gopd"),U=F.f,z=R.f,H=g.RangeError,G=g.TypeError,V=g.Uint8Array,W="ArrayBuffer",Y="Shared"+W,X="BYTES_PER_ELEMENT",q="prototype",J=Array[q],$=o.ArrayBuffer,Q=o.DataView,Z=f(0),ee=f(2),te=f(3),ne=f(4),oe=f(5),re=f(6),ie=p(!0),se=p(!1),ae=T.values,ce=T.keys,ue=T.entries,le=J.lastIndexOf,de=J.reduce,fe=J.reduceRight,pe=J.join,he=J.sort,ye=J.slice,ve=J.toString,me=J.toLocaleString,ge=d("iterator"),_e=d("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),xe=w.CONSTR,De=w.TYPED,ke=w.VIEW,Ee="Wrong length!",je=f(1,function(e,t){return Se(P(e,e[we]),t)}),Be=_(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Ke=!!V&&!!V[q].set&&_(function(){new V(1).set({})}),Ce=function(e,t){var n=s(e);if(n<0||n%t)throw H("Wrong offset!");return n},Oe=function(e){if(B(e)&&De in e)return e;throw G(e+" is not a typed array!")},Se=function(e,t){if(!(B(e)&&be in e))throw G("It is not a typed array constructor!");return new e(t)},Pe=function(e,t){return Te(P(e,e[we]),t)},Te=function(e,t){for(var n=0,o=t.length,r=Se(e,o);n<o;)r[n]=t[n++];return r},Me=function(e,t,n){U(e,t,{get:function(){return this._d[n]}})},Le=function(e,t,n){var o,r,i,s,a,c,u=y(e),l=arguments.length,d=1<l?t:void 0,f=void 0!==d,p=S(u);if(null!=p&&!v(p)){for(c=p.call(u),i=[],o=0;!(a=c.next()).done;o++)i.push(a.value);u=i}for(f&&2<l&&(d=h(d,n,2)),o=0,r=k(u.length),s=Se(this,r);o<r;o++)s[o]=f?d(u[o],o):u[o];return s},Ae=function(){for(var e=0,t=arguments.length,n=Se(this,t);e<t;)n[e]=arguments[e++];return n},Ie=!!V&&_(function(){me.call(new V(1))}),Ne=function(){return me.apply(Ie?ye.call(Oe(this)):Oe(this),arguments)},Fe={copyWithin:function(e,t,n){return N.call(Oe(this),e,t,2<arguments.length?n:void 0)},every:function(e,t){return ne(Oe(this),e,1<arguments.length?t:void 0)},fill:function(e){return I.apply(Oe(this),arguments)},filter:function(e,t){return Pe(this,ee(Oe(this),e,1<arguments.length?t:void 0))},find:function(e,t){return oe(Oe(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return re(Oe(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Oe(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Oe(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Oe(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Oe(this),arguments)},lastIndexOf:function(e){return le.apply(Oe(this),arguments)},map:function(e,t){return je(Oe(this),e,1<arguments.length?t:void 0)},reduce:function(e){return de.apply(Oe(this),arguments)},reduceRight:function(e){return fe.apply(Oe(this),arguments)},reverse:function(){for(var e,t=this,n=Oe(t).length,o=Math.floor(n/2),r=0;r<o;)e=t[r],t[r++]=t[--n],t[n]=e;return t},some:function(e,t){return te(Oe(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Oe(this),e)},subarray:function(e,t){var n=Oe(this),o=n.length,r=a(e,o);return new(P(n,n[we]))(n.buffer,n.byteOffset+r*n.BYTES_PER_ELEMENT,k((void 0===t?o:a(t,o))-r))}},Re=function(e,t){return Pe(this,ye.call(Oe(this),e,t))},Ue=function(e,t){Oe(this);var n=Ce(t,1),o=this.length,r=y(e),i=k(r.length),s=0;if(o<i+n)throw H(Ee);for(;s<i;)this[n+s]=r[s++]},ze={entries:function(){return ue.call(Oe(this))},keys:function(){return ce.call(Oe(this))},values:function(){return ae.call(Oe(this))}},He=function(e,t){return B(e)&&e[De]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ge=function(e,t){return He(e,t=c(t,!0))?r(2,e[t]):z(e,t)},Ve=function(e,t,n){return!(He(e,t=c(t,!0))&&B(n)&&u(n,"value"))||u(n,"get")||u(n,"set")||n.configurable||u(n,"writable")&&!n.writable||u(n,"enumerable")&&!n.enumerable?U(e,t,n):(e[t]=n.value,e)};xe||(R.f=Ge,F.f=Ve),b(b.S+b.F*!xe,"Object",{getOwnPropertyDescriptor:Ge,defineProperty:Ve}),_(function(){ve.call({})})&&(ve=me=function(){return pe.call(this)});var We=i({},Fe);i(We,ze),D(We,ge,ze.values),i(We,{slice:Re,set:Ue,constructor:function(){},toString:ve,toLocaleString:Ne}),Me(We,"buffer","b"),Me(We,"byteOffset","o"),Me(We,"byteLength","l"),Me(We,"length","e"),U(We,_e,{get:function(){return this[De]}}),t.exports=function(e,d,t,i){function f(e,r){U(e,r,{get:function(){return e=r,(t=this._d).v[n](e*d+t.o,Be);var e,t},set:function(e){return t=r,n=e,o=this._d,i&&(n=(n=Math.round(n))<0?0:255<n?255:255&n),void o.v[s](t*d+o.o,n,Be);var t,n,o},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",n="get"+e,s="set"+e,h=g[p],a=h||{},o=h&&C(h),r=!h||!w.ABV,c={},u=h&&h[q];r?(h=t(function(e,t,n,o){x(e,h,p,"_d");var r,i,s,a,c=0,u=0;if(B(t)){if(!(t instanceof $||(a=j(t))==W||a==Y))return De in t?Te(h,t):Le.call(h,t);r=t,u=Ce(n,d);var l=t.byteLength;if(void 0===o){if(l%d)throw H(Ee);if((i=l-u)<0)throw H(Ee)}else if(l<(i=k(o)*d)+u)throw H(Ee);s=i/d}else s=E(t),r=new $(i=s*d);for(D(e,"_d",{b:r,o:u,l:i,e:s,v:new Q(r)});c<s;)f(e,c++)}),u=h[q]=K(We),D(u,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&L(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,n,o){var r;return x(e,h,p),B(t)?t instanceof $||(r=j(t))==W||r==Y?void 0!==o?new a(t,Ce(n,d),o):void 0!==n?new a(t,Ce(n,d)):new a(t):De in t?Te(h,t):Le.call(h,t):new a(E(t))}),Z(o!==Function.prototype?O(a).concat(O(o)):O(a),function(e){e in h||D(h,e,a[e])}),h[q]=u,m||(u.constructor=h));var l=u[ge],y=!!l&&("values"==l.name||null==l.name),v=ze.values;D(h,be,!0),D(u,De,p),D(u,ke,!0),D(u,we,h),(i?new h(1)[_e]==p:_e in u)||U(u,_e,{get:function(){return p}}),c[p]=h,b(b.G+b.W+b.F*(h!=a),c),b(b.S,p,{BYTES_PER_ELEMENT:d}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Le,of:Ae}),X in u||D(u,X,d),b(b.P,p,Fe),A(p),b(b.P+b.F*Ke,p,{set:Ue}),b(b.P+b.F*!y,p,ze),m||u.toString==ve||(u.toString=ve),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:Re}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){u.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),M[p]=y?l:v,m||y||D(u,ge,v)}}else t.exports=function(){}},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":10,"./_array-methods":11,"./_classof":14,"./_ctx":18,"./_descriptors":20,"./_export":24,"./_fails":25,"./_global":30,"./_has":31,"./_hide":32,"./_is-array-iter":38,"./_is-object":40,"./_iter-detect":44,"./_iterators":46,"./_library":47,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_object-gpo":58,"./_property-desc":66,"./_redefine-all":67,"./_set-species":72,"./_species-constructor":76,"./_to-absolute-index":81,"./_to-index":82,"./_to-integer":83,"./_to-length":85,"./_to-object":86,"./_to-primitive":87,"./_typed":90,"./_typed-buffer":89,"./_uid":91,"./_wks":95,"./core.get-iterator-method":96,"./es6.array.iterator":99}],89:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),c=e("./_redefine-all"),u=e("./_fails"),l=e("./_an-instance"),d=e("./_to-integer"),f=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,y=e("./_object-dp").f,v=e("./_array-fill"),m=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",x=o[g],D=o[_],k=o.Math,E=o.RangeError,j=o.Infinity,B=x,K=k.abs,C=k.pow,O=k.floor,S=k.log,P=k.LN2,T="byteLength",M="byteOffset",L=r?"_b":"buffer",A=r?"_l":T,I=r?"_o":M;function N(e,t,n){var o,r,i,s=new Array(n),a=8*n-t-1,c=(1<<a)-1,u=c>>1,l=23===t?C(2,-24)-C(2,-77):0,d=0,f=e<0||0===e&&1/e<0?1:0;for((e=K(e))!=e||e===j?(r=e!=e?1:0,o=c):(o=O(S(e)/P),e*(i=C(2,-o))<1&&(o--,i*=2),2<=(e+=1<=o+u?l/i:l*C(2,1-u))*i&&(o++,i/=2),c<=o+u?(r=0,o=c):1<=o+u?(r=(e*i-1)*C(2,t),o+=u):(r=e*C(2,u-1)*C(2,t),o=0));8<=t;s[d++]=255&r,r/=256,t-=8);for(o=o<<t|r,a+=t;0<a;s[d++]=255&o,o/=256,a-=8);return s[--d]|=128*f,s}function F(e,t,n){var o,r=8*n-t-1,i=(1<<r)-1,s=i>>1,a=r-7,c=n-1,u=e[c--],l=127&u;for(u>>=7;0<a;l=256*l+e[c],c--,a-=8);for(o=l&(1<<-a)-1,l>>=-a,a+=t;0<a;o=256*o+e[c],c--,a-=8);if(0===l)l=1-s;else{if(l===i)return o?NaN:u?-j:j;o+=C(2,t),l-=s}return(u?-1:1)*o*C(2,l-t)}function R(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function z(e){return[255&e,e>>8&255]}function H(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function G(e){return N(e,52,8)}function V(e){return N(e,23,4)}function W(e,t,n){y(e[b],t,{get:function(){return this[n]}})}function Y(e,t,n,o){var r=p(+n);if(r+t>e[A])throw E(w);var i=e[L]._b,s=r+e[I],a=i.slice(s,s+t);return o?a:a.reverse()}function X(e,t,n,o,r,i){var s=p(+n);if(s+t>e[A])throw E(w);for(var a=e[L]._b,c=s+e[I],u=o(+r),l=0;l<t;l++)a[c+l]=u[i?l:t-l-1]}if(s.ABV){if(!u(function(){x(1)})||!u(function(){new x(-1)})||u(function(){return new x,new x(1.5),new x(NaN),x.name!=g})){for(var q,J=(x=function(e){return l(this,x),new B(p(e))})[b]=B[b],$=h(B),Q=0;$.length>Q;)(q=$[Q++])in x||a(x,q,B[q]);i||(J.constructor=x)}var Z=new D(new x(2)),ee=D[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||c(D[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else x=function(e){l(this,x,g);var t=p(e);this._b=v.call(new Array(t),0),this[A]=t},D=function(e,t,n){l(this,D,_),l(e,x,_);var o=e[A],r=d(t);if(r<0||o<r)throw E("Wrong offset!");if(o<r+(n=void 0===n?o-r:f(n)))throw E("Wrong length!");this[L]=e,this[I]=r,this[A]=n},r&&(W(x,T,"_l"),W(D,"buffer","_b"),W(D,T,"_l"),W(D,M,"_o")),c(D[b],{getInt8:function(e){return Y(this,1,e)[0]<<24>>24},getUint8:function(e){return Y(this,1,e)[0]},getInt16:function(e,t){var n=Y(this,2,e,t);return(n[1]<<8|n[0])<<16>>16},getUint16:function(e,t){var n=Y(this,2,e,t);return n[1]<<8|n[0]},getInt32:function(e,t){return R(Y(this,4,e,t))},getUint32:function(e,t){return R(Y(this,4,e,t))>>>0},getFloat32:function(e,t){return F(Y(this,4,e,t),23,4)},getFloat64:function(e,t){return F(Y(this,8,e,t),52,8)},setInt8:function(e,t){X(this,1,e,U,t)},setUint8:function(e,t){X(this,1,e,U,t)},setInt16:function(e,t,n){X(this,2,e,z,t,n)},setUint16:function(e,t,n){X(this,2,e,z,t,n)},setInt32:function(e,t,n){X(this,4,e,H,t,n)},setUint32:function(e,t,n){X(this,4,e,H,t,n)},setFloat32:function(e,t,n){X(this,4,e,V,t,n)},setFloat64:function(e,t,n){X(this,8,e,G,t,n)}});m(x,g),m(D,_),a(D[b],s.VIEW,!0),n[g]=x,n[_]=D},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":20,"./_fails":25,"./_global":30,"./_hide":32,"./_library":47,"./_object-dp":52,"./_object-gopn":56,"./_redefine-all":67,"./_set-to-string-tag":73,"./_to-index":82,"./_to-integer":83,"./_to-length":85,"./_typed":90}],90:[function(e,t,n){for(var o,r=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),c=s("view"),u=!(!r.ArrayBuffer||!r.DataView),l=u,d=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");d<9;)(o=r[f[d++]])?(i(o.prototype,a,!0),i(o.prototype,c,!0)):l=!1;t.exports={ABV:u,CONSTR:l,TYPED:a,VIEW:c}},{"./_global":30,"./_hide":32,"./_uid":91}],91:[function(e,t,n){var o=0,r=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++o+r).toString(36))}},{}],92:[function(e,t,n){var o=e("./_global").navigator;t.exports=o&&o.userAgent||""},{"./_global":30}],93:[function(e,t,n){var o=e("./_global"),r=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=r.Symbol||(r.Symbol=!i&&o.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":16,"./_global":30,"./_library":47,"./_object-dp":52,"./_wks-ext":94}],94:[function(e,t,n){n.f=e("./_wks")},{"./_wks":95}],95:[function(e,t,n){var o=e("./_shared")("wks"),r=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return o[e]||(o[e]=s&&i[e]||(s?i:r)("Symbol."+e))}).store=o},{"./_global":30,"./_shared":75,"./_uid":91}],96:[function(e,t,n){var o=e("./_classof"),r=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[r]||e["@@iterator"]||i[o(e)]}},{"./_classof":14,"./_core":16,"./_iterators":46,"./_wks":95}],97:[function(e,t,n){var o=e("./_export");o(o.P,"Array",{fill:e("./_array-fill")}),e("./_add-to-unscopables")("fill")},{"./_add-to-unscopables":4,"./_array-fill":9,"./_export":24}],98:[function(e,t,n){"use strict";var h=e("./_ctx"),o=e("./_export"),y=e("./_to-object"),v=e("./_iter-call"),m=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");o(o.S+o.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,n){var o,r,i,s,a=y(e),c="function"==typeof this?this:Array,u=arguments.length,l=1<u?t:void 0,d=void 0!==l,f=0,p=b(a);if(d&&(l=h(l,2<u?n:void 0,2)),null==p||c==Array&&m(p))for(r=new c(o=g(a.length));f<o;f++)_(r,f,d?l(a[f],f):a[f]);else for(s=p.call(a),r=new c;!(i=s.next()).done;f++)_(r,f,d?v(s,l,[i.value,f],!0):i.value);return r.length=f,r}})},{"./_create-property":17,"./_ctx":18,"./_export":24,"./_is-array-iter":38,"./_iter-call":41,"./_iter-detect":44,"./_to-length":85,"./_to-object":86,"./core.get-iterator-method":96}],99:[function(e,t,n){"use strict";var o=e("./_add-to-unscopables"),r=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"./_add-to-unscopables":4,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":84}],100:[function(e,t,n){var o=e("./_object-dp").f,r=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in r||e("./_descriptors")&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":20,"./_object-dp":52}],101:[function(e,t,n){"use strict";function o(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var n,o,r,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+t}for(var s,a=t.slice(2),c=0,u=a.length;c<u;c++)if((s=a.charCodeAt(c))<48||r<s)return NaN;return parseInt(a,o)}}return+t}var r=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),c=e("./_fails"),u=e("./_object-gopn").f,d=e("./_object-gopd").f,f=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",y=r[h],v=y,m=y.prototype,g=s(e("./_object-create")(m))==h,_="trim"in String.prototype;if(!y(" 0o1")||!y("0b1")||y("+0x1")){y=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof y&&(g?c(function(){m.valueOf.call(n)}):s(n)!=h)?a(new v(o(t)),n,y):o(t)};for(var b,w=e("./_descriptors")?u(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)i(v,b=w[x])&&!i(y,b)&&f(y,b,d(v,b));(y.prototype=m).constructor=y,e("./_redefine")(r,h,y)}},{"./_cof":15,"./_descriptors":20,"./_fails":25,"./_global":30,"./_has":31,"./_inherit-if-required":35,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_redefine":68,"./_string-trim":78,"./_to-primitive":87}],102:[function(e,t,n){var o=e("./_export"),r=e("./_parse-int");o(o.S+o.F*(Number.parseInt!=r),"Number",{parseInt:r})},{"./_export":24,"./_parse-int":63}],103:[function(e,t,n){var o=e("./_to-object"),r=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return r(o(e))}})},{"./_object-keys":60,"./_object-sap":62,"./_to-object":86}],104:[function(e,t,n){"use strict";var o=e("./_classof"),r={};r[e("./_wks")("toStringTag")]="z",r+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+o(this)+"]"},!0)},{"./_classof":14,"./_redefine":68,"./_wks":95}],105:[function(n,e,t){"use strict";function o(){}function d(e){var t;return!(!v(e)||"function"!=typeof(t=e.then))&&t}function r(l,n){if(!l._n){l._n=!0;var o=l._c;x(function(){for(var c=l._v,u=1==l._s,e=0,t=function(e){var t,n,o,r=u?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{r?(u||(2==l._h&&N(l),l._h=1),!0===r?t=c:(a&&a.enter(),t=r(c),a&&(a.exit(),o=!0)),t===e.promise?s(K("Promise-chain cycle")):(n=d(t))?n.call(t,i,s):i(t)):s(c)}catch(e){a&&!o&&a.exit(),s(e)}};o.length>e;)t(o[e++]);l._c=[],l._n=!1,n&&!l._h&&A(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),r(t,!0))}var s,a,c,u,l=n("./_library"),f=n("./_global"),p=n("./_ctx"),h=n("./_classof"),y=n("./_export"),v=n("./_is-object"),m=n("./_a-function"),g=n("./_an-instance"),_=n("./_for-of"),b=n("./_species-constructor"),w=n("./_task").set,x=n("./_microtask")(),D=n("./_new-promise-capability"),k=n("./_perform"),E=n("./_user-agent"),j=n("./_promise-resolve"),B="Promise",K=f.TypeError,C=f.process,O=C&&C.versions,S=O&&O.v8||"",P=f[B],T="process"==h(C),M=a=D.f,L=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n("./_wks")("species")]=function(e){e(o,o)};return(T||"function"==typeof PromiseRejectionEvent)&&e.then(o)instanceof t&&0!==S.indexOf("6.6")&&-1===E.indexOf("Chrome/66")}catch(e){}}(),A=function(i){w.call(f,function(){var e,t,n,o=i._v,r=I(i);if(r&&(e=k(function(){T?C.emit("unhandledRejection",o,i):(t=f.onunhandledrejection)?t({promise:i,reason:o}):(n=f.console)&&n.error&&n.error("Unhandled promise rejection",o)}),i._h=T||I(i)?2:1),i._a=void 0,r&&e.e)throw e.v})},I=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(f,function(){var e;T?C.emit("rejectionHandled",t):(e=f.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(e){var n,o=this;if(!o._d){o._d=!0,o=o._w||o;try{if(o===e)throw K("Promise can't be resolved itself");(n=d(e))?x(function(){var t={_w:o,_d:!1};try{n.call(e,p(F,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(o._v=e,o._s=1,r(o,!1))}catch(e){i.call({_w:o,_d:!1},e)}}};L||(P=function(e){g(this,P,B,"_h"),m(e),s.call(this);try{e(p(F,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n("./_redefine-all")(P.prototype,{then:function(e,t){var n=M(b(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=T?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&r(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),c=function(){var e=new s;this.promise=e,this.resolve=p(F,e,1),this.reject=p(i,e,1)},D.f=M=function(e){return e===P||e===u?new c:a(e)}),y(y.G+y.W+y.F*!L,{Promise:P}),n("./_set-to-string-tag")(P,B),n("./_set-species")(B),u=n("./_core")[B],y(y.S+y.F*!L,B,{reject:function(e){var t=M(this);return(0,t.reject)(e),t.promise}}),y(y.S+y.F*(l||!L),B,{resolve:function(e){return j(l&&this===u?P:this,e)}}),y(y.S+y.F*!(L&&n("./_iter-detect")(function(e){P.all(e).catch(o)})),B,{all:function(e){var s=this,t=M(s),a=t.resolve,c=t.reject,n=k(function(){var o=[],r=0,i=1;_(e,!1,function(e){var t=r++,n=!1;o.push(void 0),i++,s.resolve(e).then(function(e){n||(n=!0,o[t]=e,--i||a(o))},c)}),--i||a(o)});return n.e&&c(n.v),t.promise},race:function(e){var t=this,n=M(t),o=n.reject,r=k(function(){_(e,!1,function(e){t.resolve(e).then(n.resolve,o)})});return r.e&&o(r.v),n.promise}})},{"./_a-function":3,"./_an-instance":6,"./_classof":14,"./_core":16,"./_ctx":18,"./_export":24,"./_for-of":28,"./_global":30,"./_is-object":40,"./_iter-detect":44,"./_library":47,"./_microtask":49,"./_new-promise-capability":50,"./_perform":64,"./_promise-resolve":65,"./_redefine-all":67,"./_set-species":72,"./_set-to-string-tag":73,"./_species-constructor":76,"./_task":80,"./_user-agent":92,"./_wks":95}],106:[function(e,t,n){"use strict";var o=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:o!==/./.exec},{exec:o})},{"./_export":24,"./_regexp-exec":70}],107:[function(e,t,n){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":20,"./_flags":27,"./_object-dp":52}],108:[function(e,t,n){"use strict";var d=e("./_an-object"),f=e("./_to-length"),p=e("./_advance-string-index"),h=e("./_regexp-exec-abstract");e("./_fix-re-wks")("match",1,function(o,r,u,l){return[function(e){var t=o(this),n=null==e?void 0:e[r];return void 0!==n?n.call(e,t):new RegExp(e)[r](String(t))},function(e){var t=l(u,e,this);if(t.done)return t.value;var n=d(e),o=String(this);if(!n.global)return h(n,o);for(var r,i=n.unicode,s=[],a=n.lastIndex=0;null!==(r=h(n,o));){var c=String(r[0]);""===(s[a]=c)&&(n.lastIndex=p(o,f(n.lastIndex),i)),a++}return 0===a?null:s}]})},{"./_advance-string-index":5,"./_an-object":7,"./_fix-re-wks":26,"./_regexp-exec-abstract":69,"./_to-length":85}],109:[function(t,e,n){"use strict";t("./es6.regexp.flags");function o(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var r=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",c=/./[a];t("./_fails")(function(){return"/a/b"!=c.call({source:"a",flags:"b"})})?o(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):c.name!=a&&o(function(){return c.call(this)})},{"./_an-object":7,"./_descriptors":20,"./_fails":25,"./_flags":27,"./_redefine":68,"./es6.regexp.flags":107}],110:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=o(t,n),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":43,"./_string-at":77}],111:[function(e,t,n){"use strict";function o(e){var t=Y[e]=O(F[z]);return t._k=e,t}function r(e,t){k(e);for(var n,o=x(t=B(t)),r=0,i=o.length;r<i;)te(e,n=o[r++],t[n]);return e}function i(e){var t=V.call(this,e=K(e,!0));return!(this===q&&l(Y,e)&&!l(X,e))&&(!(t||!l(this,e)||!l(Y,e)||l(this,H)&&this[H][e])||t)}function s(e,t){if(e=B(e),t=K(t,!0),e!==q||!l(Y,t)||l(X,t)){var n=A(e,t);return!n||!l(Y,t)||l(e,H)&&e[H][t]||(n.enumerable=!0),n}}function a(e){for(var t,n=N(B(e)),o=[],r=0;n.length>r;)l(Y,t=n[r++])||t==H||t==h||o.push(t);return o}function c(e){for(var t,n=e===q,o=N(n?X:B(e)),r=[],i=0;o.length>i;)!l(Y,t=o[i++])||n&&!l(q,t)||r.push(Y[t]);return r}var u=e("./_global"),l=e("./_has"),d=e("./_descriptors"),f=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,y=e("./_fails"),v=e("./_shared"),m=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),x=e("./_enum-keys"),D=e("./_is-array"),k=e("./_an-object"),E=e("./_is-object"),j=e("./_to-object"),B=e("./_to-iobject"),K=e("./_to-primitive"),C=e("./_property-desc"),O=e("./_object-create"),S=e("./_object-gopn-ext"),P=e("./_object-gopd"),T=e("./_object-gops"),M=e("./_object-dp"),L=e("./_object-keys"),A=P.f,I=M.f,N=S.f,F=u.Symbol,R=u.JSON,U=R&&R.stringify,z="prototype",H=_("_hidden"),G=_("toPrimitive"),V={}.propertyIsEnumerable,W=v("symbol-registry"),Y=v("symbols"),X=v("op-symbols"),q=Object[z],J="function"==typeof F&&!!T.f,$=u.QObject,Q=!$||!$[z]||!$[z].findChild,Z=d&&y(function(){return 7!=O(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(e,t,n){var o=A(q,t);o&&delete q[t],I(e,t,n),o&&e!==q&&I(q,t,o)}:I,ee=J&&"symbol"==typeof F.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof F},te=function(e,t,n){return e===q&&te(X,t,n),k(e),t=K(t,!0),k(n),l(Y,t)?(n.enumerable?(l(e,H)&&e[H][t]&&(e[H][t]=!1),n=O(n,{enumerable:C(0,!1)})):(l(e,H)||I(e,H,C(1,{})),e[H][t]=!0),Z(e,t,n)):I(e,t,n)};J||(p((F=function(e){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),n=function(e){this===q&&n.call(X,e),l(this,H)&&l(this[H],t)&&(this[H][t]=!1),Z(this,t,C(1,e))};return d&&Q&&Z(q,t,{configurable:!0,set:n}),o(t)})[z],"toString",function(){return this._k}),P.f=s,M.f=te,e("./_object-gopn").f=S.f=a,e("./_object-pie").f=i,T.f=c,d&&!e("./_library")&&p(q,"propertyIsEnumerable",i,!0),b.f=function(e){return o(_(e))}),f(f.G+f.W+f.F*!J,{Symbol:F});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),oe=0;ne.length>oe;)_(ne[oe++]);for(var re=L(_.store),ie=0;re.length>ie;)w(re[ie++]);f(f.S+f.F*!J,"Symbol",{for:function(e){return l(W,e+="")?W[e]:W[e]=F(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in W)if(W[t]===e)return t},useSetter:function(){Q=!0},useSimple:function(){Q=!1}}),f(f.S+f.F*!J,"Object",{create:function(e,t){return void 0===t?O(e):r(O(e),t)},defineProperty:te,defineProperties:r,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:c});var se=y(function(){T.f(1)});f(f.S+f.F*se,"Object",{getOwnPropertySymbols:function(e){return T.f(j(e))}}),R&&f(f.S+f.F*(!J||y(function(){var e=F();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,n,o=[e],r=1;r<arguments.length;)o.push(arguments[r++]);if(n=t=o[1],(E(t)||void 0!==e)&&!ee(e))return D(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ee(t))return t}),o[1]=t,U.apply(R,o)}}),F[z][G]||e("./_hide")(F[z],G,F[z].valueOf),m(F,"Symbol"),m(Math,"Math",!0),m(u.JSON,"JSON",!0)},{"./_an-object":7,"./_descriptors":20,"./_enum-keys":23,"./_export":24,"./_fails":25,"./_global":30,"./_has":31,"./_hide":32,"./_is-array":39,"./_is-object":40,"./_library":47,"./_meta":48,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_object-gopn-ext":55,"./_object-gops":57,"./_object-keys":60,"./_object-pie":61,"./_property-desc":66,"./_redefine":68,"./_set-to-string-tag":73,"./_shared":75,"./_to-iobject":84,"./_to-object":86,"./_to-primitive":87,"./_uid":91,"./_wks":95,"./_wks-define":93,"./_wks-ext":94}],112:[function(e,t,n){e("./_typed-array")("Float32",4,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":88}],113:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":88}],114:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}},!0)},{"./_typed-array":88}],115:[function(e,t,n){e("./_wks-define")("asyncIterator")},{"./_wks-define":93}],116:[function(e,t,n){for(var o=e("./es6.array.iterator"),r=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),c=e("./_iterators"),u=e("./_wks"),l=u("iterator"),d=u("toStringTag"),f=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=r(p),y=0;y<h.length;y++){var v,m=h[y],g=p[m],_=s[m],b=_&&_.prototype;if(b&&(b[l]||a(b,l,f),b[d]||a(b,d,m),c[m]=f,g))for(v in o)b[v]||i(b,v,o[v],!0)}},{"./_global":30,"./_hide":32,"./_iterators":46,"./_object-keys":60,"./_redefine":68,"./_wks":95,"./es6.array.iterator":99}],117:[function(e,t,n){"use strict";var o=t.exports={};o.isIE=function(e){return(-1!==(t=navigator.userAgent.toLowerCase()).indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/"))&&(!e||e===function(){for(var e=3,t=document.createElement("div"),n=t.getElementsByTagName("i");t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e",n[0];);return 4<e?e:void 0}());var t},o.isLegacyOpera=function(){return!!window.opera}},{}],118:[function(e,t,n){"use strict";(t.exports={}).forEach=function(e,t){for(var n=0;n<e.length;n++){var o=t(e[n]);if(o)return o}}},{}],119:[function(e,t,n){"use strict";var m=e("../browser-detector");t.exports=function(p){var h=(p=p||{}).reporter,y=p.batchProcessor,v=p.stateHandler.getState;if(!h)throw new Error("Missing required dependency: reporter.");function r(e){return v(e).object}return{makeDetectable:function(i,e,t){var n,o,r,s,a,c,u,l,d;function f(){function e(){if("static"===u.position){n.style.setProperty("position","relative",i.important?"important":"");var e=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style.setProperty(o,"0",i.important?"important":""))};e(h,n,u,"top"),e(h,n,u,"right"),e(h,n,u,"bottom"),e(h,n,u,"left")}}""!==u.position&&(e(),c=!0);var t=document.createElement("object");t.style.cssText=a,t.tabIndex=-1,t.type="text/html",t.setAttribute("aria-hidden","true"),t.onload=function(){c||e(),function e(t,n){if(!t.contentDocument){var o=v(t);return o.checkForObjectDocumentTimeoutId&&window.clearTimeout(o.checkForObjectDocumentTimeoutId),void(o.checkForObjectDocumentTimeoutId=setTimeout(function(){o.checkForObjectDocumentTimeoutId=0,e(t,n)},100))}n(t.contentDocument)}(this,function(){o(n)})},m.isIE()||(t.data="about:blank"),v(n)&&(n.appendChild(t),v(n).object=t,m.isIE()&&(t.data="about:blank"))}t||(t=e,e=i,i=null),i=i||{},m.isIE(8)?t(e):(n=e,o=t,r=["display: block","position: absolute","top: 0","left: 0","width: 100%","height: 100%","border: none","padding: 0","margin: 0","opacity: 0","z-index: -1000","pointer-events: none"],s=p.important?" !important; ":"; ",a=(r.join(s)+s).trim(),c=!1,u=window.getComputedStyle(n),l=n.offsetWidth,d=n.offsetHeight,v(n).startSize={width:l,height:d},y?y.add(f):f())},addListener:function(e,t){function n(){t(e)}if(m.isIE(8))v(e).object={proxy:n},e.attachEvent("onresize",n);else{var o=r(e);if(!o)throw new Error("Element is not detectable by this strategy.");o.contentDocument.defaultView.addEventListener("resize",n)}},uninstall:function(e){if(v(e)){var t=r(e);t&&(m.isIE(8)?e.detachEvent("onresize",t.proxy):e.removeChild(t),v(e).checkForObjectDocumentTimeoutId&&window.clearTimeout(v(e).checkForObjectDocumentTimeoutId),delete v(e).object)}}}}},{"../browser-detector":117}],120:[function(e,t,n){"use strict";var S=e("../collection-utils").forEach;t.exports=function(n){var E=(n=n||{}).reporter,m=n.batchProcessor,j=n.stateHandler.getState,g=(n.stateHandler.hasState,n.idHandler);if(!m)throw new Error("Missing required dependency: batchProcessor");if(!E)throw new Error("Missing required dependency: reporter.");var B=function(){var e=document.createElement("div");e.style.cssText=C(["position: absolute","width: 1000px","height: 1000px","visibility: hidden","margin: 0","padding: 0"]);var t=document.createElement("div");t.style.cssText=C(["position: absolute","width: 500px","height: 500px","overflow: scroll","visibility: none","top: -1500px","left: -1500px","visibility: hidden","margin: 0","padding: 0"]),t.appendChild(e),document.body.insertBefore(t,document.body.firstChild);var n=500-t.clientWidth,o=500-t.clientHeight;return document.body.removeChild(t),{width:n,height:o}}(),K="erd_scroll_detection_container";function e(e){!function(o,r,e){if(!o.getElementById(r)){var t=e+"_animation",n=e+"_animation_active",i="/* Created by the element-resize-detector library. */\n";i+="."+e+" > div::-webkit-scrollbar { "+C(["display: none"])+" }\n\n",i+="."+n+" { "+C(["-webkit-animation-duration: 0.1s","animation-duration: 0.1s","-webkit-animation-name: "+t,"animation-name: "+t])+" }\n",i+="@-webkit-keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(e,t){t=t||function(e){o.head.appendChild(e)};var n=o.createElement("style");n.innerHTML=e,n.id=r,t(n)}(i+="@keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}(e,"erd_scroll_detection_scrollbar_style",K)}function C(e){var t=n.important?" !important; ":"; ";return(e.join(t)+t).trim()}function O(e,t,n){if(e.addEventListener)e.addEventListener(t,n);else{if(!e.attachEvent)return E.error("[scroll] Don't know how to add event listeners.");e.attachEvent("on"+t,n)}}function o(e,t,n){if(e.removeEventListener)e.removeEventListener(t,n);else{if(!e.detachEvent)return E.error("[scroll] Don't know how to remove event listeners.");e.detachEvent("on"+t,n)}}function _(e){return j(e).container.childNodes[0].childNodes[0].childNodes[0]}function b(e){return j(e).container.childNodes[0].childNodes[0].childNodes[1]}return e(window.document),{makeDetectable:function(w,x,e){function D(){if(w.debug){var e=Array.prototype.slice.call(arguments);if(e.unshift(g.get(x),"Scroll: "),E.log.apply)E.log.apply(null,e);else for(var t=0;t<e.length;t++)E.log(e[t])}}function r(e){var t=j(e).container.childNodes[0],n=window.getComputedStyle(t);return!n.width||-1===n.width.indexOf("px")}function t(){var e=window.getComputedStyle(x),t={};return t.position=e.position,t.width=x.offsetWidth,t.height=x.offsetHeight,t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left,t.widthCSS=e.width,t.heightCSS=e.height,t}function n(){if(D("storeStyle invoked."),j(x)){var e=t();j(x).style=e}else D("Aborting because element has been uninstalled")}function a(e,t,n){j(e).lastWidth=t,j(e).lastHeight=n}function u(){return 2*B.width+1}function l(){return 2*B.height+1}function d(e){return e+10+u()}function f(e){return e+10+l()}function c(e,t,n){var o=_(e),r=b(e),i=d(t),s=f(n),a=2*t+u(),c=2*n+l();o.scrollLeft=i,o.scrollTop=s,r.scrollLeft=a,r.scrollTop=c}function k(){var e=j(x).container;if(!e){(e=document.createElement("div")).className=K,e.style.cssText=C(["visibility: hidden","display: inline","width: 0px","height: 0px","z-index: -1","overflow: hidden","margin: 0","padding: 0"]),j(x).container=e,e.className+=" "+K+"_animation_active",x.appendChild(e);var t=function(){j(x).onRendered&&j(x).onRendered()};O(e,"animationstart",t),j(x).onAnimationStart=t}return e}function o(){if(D("Injecting elements"),j(x)){!function(){var e=j(x).style;if("static"===e.position){x.style.setProperty("position","relative",w.important?"important":"");var t=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style[o]=0)};t(E,x,e,"top"),t(E,x,e,"right"),t(E,x,e,"bottom"),t(E,x,e,"left")}}();var e=j(x).container;e=e||k();var t,n,o,r,i=B.width,s=B.height,a=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden","width: 100%","height: 100%","left: 0px","top: 0px"]),c=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden"].concat(["left: "+(t=(t=-(1+i))?t+"px":"0"),"top: "+(n=(n=-(1+s))?n+"px":"0"),"right: "+(r=(r=-i)?r+"px":"0"),"bottom: "+(o=(o=-s)?o+"px":"0")])),u=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),l=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),d=C(["position: absolute","left: 0","top: 0"]),f=C(["position: absolute","width: 200%","height: 200%"]),p=document.createElement("div"),h=document.createElement("div"),y=document.createElement("div"),v=document.createElement("div"),m=document.createElement("div"),g=document.createElement("div");p.dir="ltr",p.style.cssText=a,p.className=K,h.className=K,h.style.cssText=c,y.style.cssText=u,v.style.cssText=d,m.style.cssText=l,g.style.cssText=f,y.appendChild(v),m.appendChild(g),h.appendChild(y),h.appendChild(m),p.appendChild(h),e.appendChild(p),O(y,"scroll",_),O(m,"scroll",b),j(x).onExpandScroll=_,j(x).onShrinkScroll=b}else D("Aborting because element has been uninstalled");function _(){j(x).onExpand&&j(x).onExpand()}function b(){j(x).onShrink&&j(x).onShrink()}}function i(){function i(e,t,n){var o=_(e).childNodes[0],r=d(t),i=f(n);o.style.setProperty("width",r+"px",w.important?"important":""),o.style.setProperty("height",i+"px",w.important?"important":"")}function n(e){var n=x.offsetWidth,o=x.offsetHeight,r=n!==j(x).lastWidth||o!==j(x).lastHeight;D("Storing current size",n,o),a(x,n,o),m.add(0,function(){if(r)if(j(x))if(s()){if(w.debug){var e=x.offsetWidth,t=x.offsetHeight;e===n&&t===o||E.warn(g.get(x),"Scroll: Size changed before updating detector elements.")}i(x,n,o)}else D("Aborting because element container has not been initialized");else D("Aborting because element has been uninstalled")}),m.add(1,function(){j(x)?s()?c(x,n,o):D("Aborting because element container has not been initialized"):D("Aborting because element has been uninstalled")}),r&&e&&m.add(2,function(){j(x)?s()?e():D("Aborting because element container has not been initialized"):D("Aborting because element has been uninstalled")})}function s(){return j(x).container}function o(){D("notifyListenersIfNeeded invoked");var e=j(x);return void 0===j(x).lastNotifiedWidth&&e.lastWidth===e.startSize.width&&e.lastHeight===e.startSize.height?D("Not notifying: Size is the same as the start size, and there has been no notification yet."):e.lastWidth===e.lastNotifiedWidth&&e.lastHeight===e.lastNotifiedHeight?D("Not notifying: Size already notified"):(D("Current size not notified, notifying..."),e.lastNotifiedWidth=e.lastWidth,e.lastNotifiedHeight=e.lastHeight,void S(j(x).listeners,function(e){e(x)}))}function e(){D("Scroll detected."),r(x)?D("Scroll event fired while unrendered. Ignoring..."):n(o)}if(D("registerListenersAndPositionElements invoked."),j(x)){j(x).onRendered=function(){if(D("startanimation triggered."),r(x))D("Ignoring since element is still unrendered...");else{D("Element rendered.");var e=_(x),t=b(x);0!==e.scrollLeft&&0!==e.scrollTop&&0!==t.scrollLeft&&0!==t.scrollTop||(D("Scrollbars out of sync. Updating detector elements..."),n(o))}},j(x).onExpand=e,j(x).onShrink=e;var t=j(x).style;i(x,t.width,t.height)}else D("Aborting because element has been uninstalled")}function s(){if(D("finalizeDomMutation invoked."),j(x)){var e=j(x).style;a(x,e.width,e.height),c(x,e.width,e.height)}else D("Aborting because element has been uninstalled")}function p(){e(x)}function h(){var e;D("Installing..."),j(x).listeners=[],e=t(),j(x).startSize={width:e.width,height:e.height},D("Element start size",j(x).startSize),m.add(0,n),m.add(1,o),m.add(2,i),m.add(3,s),m.add(4,p)}var y,v;e||(e=x,x=w,w=null),w=w||{},D("Making detectable..."),(v=y=x)!==v.ownerDocument.body&&!v.ownerDocument.body.contains(v)||null===window.getComputedStyle(y)?(D("Element is detached"),k(),D("Waiting until element is attached..."),j(x).onRendered=function(){D("Element is now attached"),h()}):h()},addListener:function(e,t){if(!j(e).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");j(e).listeners.push(t)},uninstall:function(e){var t=j(e);t&&(t.onExpandScroll&&o(_(e),"scroll",t.onExpandScroll),t.onShrinkScroll&&o(b(e),"scroll",t.onShrinkScroll),t.onAnimationStart&&o(t.container,"animationstart",t.onAnimationStart),t.container&&e.removeChild(t.container))},initDocument:e}}},{"../collection-utils":118}],121:[function(e,t,n){"use strict";var b=e("./collection-utils").forEach,a=e("./element-utils"),c=e("./listener-handler"),u=e("./id-generator"),l=e("./id-handler"),d=e("./reporter"),f=e("./browser-detector"),w=e("batch-processor"),x=e("./state-handler"),D=e("./detection-strategy/object.js"),k=e("./detection-strategy/scroll.js");function E(e){return Array.isArray(e)||void 0!==e.length}function j(e){if(Array.isArray(e))return e;var t=[];return b(e,function(e){t.push(e)}),t}function B(e){return e&&1===e.nodeType}function K(e,t,n){var o=e[t];return null==o&&void 0!==n?n:o}t.exports=function(t){var n;if((t=t||{}).idHandler)n={get:function(e){return t.idHandler.get(e,!0)},set:t.idHandler.set};else{var e=u(),o=l({idGenerator:e,stateHandler:x});n=o}var p=t.reporter;p=p||d(!1===p);var r=K(t,"batchProcessor",w({reporter:p})),h={};h.callOnAdd=!!K(t,"callOnAdd",!0),h.debug=!!K(t,"debug",!1);var y,v=c(n),m=a({stateHandler:x}),i=K(t,"strategy","object"),g=K(t,"important",!1),s={reporter:p,batchProcessor:r,stateHandler:x,idHandler:n,important:g};if("scroll"===i&&(f.isLegacyOpera()?(p.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),i="object"):f.isIE(9)&&(p.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),i="object")),"scroll"===i)y=k(s);else{if("object"!==i)throw new Error("Invalid strategy name: "+i);y=D(s)}var _={};return{listenTo:function(e,i,s){function a(t){var e=v.get(t);b(e,function(e){e(t)})}function c(e,t,n){v.add(t,n),e&&n(t)}if(s||(s=i,i=e,e={}),!i)throw new Error("At least one element required.");if(!s)throw new Error("Listener required.");if(B(i))i=[i];else{if(!E(i))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");i=j(i)}var u=0,l=K(e,"callOnAdd",h.callOnAdd),d=K(e,"onReady",function(){}),f=K(e,"debug",h.debug);b(i,function(e){x.getState(e)||(x.initState(e),n.set(e));var r=n.get(e);if(f&&p.log("Attaching listener to element",r,e),!m.isDetectable(e))return f&&p.log(r,"Not detectable."),m.isBusy(e)?(f&&p.log(r,"System busy making it detectable"),c(l,e,s),_[r]=_[r]||[],void _[r].push(function(){++u===i.length&&d()})):(f&&p.log(r,"Making detectable..."),m.markBusy(e,!0),y.makeDetectable({debug:f,important:g},e,function(e){if(f&&p.log(r,"onElementDetectable"),x.getState(e)){m.markAsDetectable(e),m.markBusy(e,!1),y.addListener(e,a),c(l,e,s);var t=x.getState(e);if(t&&t.startSize){var n=e.offsetWidth,o=e.offsetHeight;t.startSize.width===n&&t.startSize.height===o||a(e)}_[r]&&b(_[r],function(e){e()})}else f&&p.log(r,"Element uninstalled before being detectable.");delete _[r],++u===i.length&&d()}));f&&p.log(r,"Already detecable, adding listener."),c(l,e,s),u++}),u===i.length&&d()},removeListener:v.removeListener,removeAllListeners:v.removeAllListeners,uninstall:function(e){if(!e)return p.error("At least one element is required.");if(B(e))e=[e];else{if(!E(e))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");e=j(e)}b(e,function(e){v.removeAllListeners(e),y.uninstall(e),x.cleanState(e)})},initDocument:function(e){y.initDocument&&y.initDocument(e)}}}},{"./browser-detector":117,"./collection-utils":118,"./detection-strategy/object.js":119,"./detection-strategy/scroll.js":120,"./element-utils":122,"./id-generator":123,"./id-handler":124,"./listener-handler":125,"./reporter":126,"./state-handler":127,"batch-processor":1}],122:[function(e,t,n){"use strict";t.exports=function(e){var n=e.stateHandler.getState;return{isDetectable:function(e){var t=n(e);return t&&!!t.isDetectable},markAsDetectable:function(e){n(e).isDetectable=!0},isBusy:function(e){return!!n(e).busy},markBusy:function(e,t){n(e).busy=!!t}}}},{}],123:[function(e,t,n){"use strict";t.exports=function(){var e=1;return{generate:function(){return e++}}}},{}],124:[function(e,t,n){"use strict";t.exports=function(e){var o=e.idGenerator,r=e.stateHandler.getState;return{get:function(e){var t=r(e);return t&&void 0!==t.id?t.id:null},set:function(e){var t=r(e);if(!t)throw new Error("setId required the element to have a resize detection state.");var n=o.generate();return t.id=n}}}},{}],125:[function(e,t,n){"use strict";t.exports=function(o){var r={};function i(e){var t=o.get(e);return void 0!==t&&r[t]||[]}return{get:i,add:function(e,t){var n=o.get(e);r[n]||(r[n]=[]),r[n].push(t)},removeListener:function(e,t){for(var n=i(e),o=0,r=n.length;o<r;++o)if(n[o]===t){n.splice(o,1);break}},removeAllListeners:function(e){var t=i(e);t&&(t.length=0)}}}},{}],126:[function(e,t,n){"use strict";t.exports=function(e){function t(){}var n={log:t,warn:t,error:t};if(!e&&window.console){var o=function(e,n){e[n]=function(){var e=console[n];if(e.apply)e.apply(console,arguments);else for(var t=0;t<arguments.length;t++)e(arguments[t])}};o(n,"log"),o(n,"warn"),o(n,"error")}return n}},{}],127:[function(e,t,n){"use strict";var o="_erd";function r(e){return e[o]}t.exports={initState:function(e){return e[o]={},r(e)},getState:r,cleanState:function(e){delete e[o]}}},{}],128:[function(e,t,n){var o,r;o=window,r=function(){return o={},r.m=n=[function(e,t,n){"use strict";n.r(t);function S(e,t){var n=t.x-e.x,o=t.y-e.y;return Math.sqrt(n*n+o*o)}function P(e){return e*(Math.PI/180)}function r(e){f.has(e)&&clearTimeout(f.get(e)),f.set(e,setTimeout(e,100))}function i(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.addEventListener?e.addEventListener(o,n,!1):e.attachEvent&&e.attachEvent(o,n)}function o(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.removeEventListener?e.removeEventListener(o,n):e.detachEvent&&e.detachEvent(o,n)}function s(e){return e.preventDefault(),e.type.match(/^touch/)?e.changedTouches:e}function a(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}}function T(e,t){t.top||t.right||t.bottom||t.left?(e.style.top=t.top,e.style.right=t.right,e.style.bottom=t.bottom,e.style.left=t.left):(e.style.left=t.x+"px",e.style.top=t.y+"px")}function c(e,t,n){var o=p(e);for(var r in o)if(o.hasOwnProperty(r))if("string"==typeof t)o[r]=t+" "+n;else{for(var i="",s=0,a=t.length;s<a;s+=1)i+=t[s]+" "+n+", ";o[r]=i.slice(0,-2)}return o}function u(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function l(e,t){if(e.length)for(var n=0,o=e.length;n<o;n+=1)t(e[n]);else t(e)}var d,f=new Map,p=function(t){var n={};return n[t]="",["webkit","Moz","o"].forEach(function(e){n[e+t.charAt(0).toUpperCase()+t.slice(1)]=""}),n},h=!!("ontouchstart"in window),y=!!window.PointerEvent,v=!!window.MSPointerEvent,m={start:"mousedown",move:"mousemove",end:"mouseup"},g={};function _(){}y?d={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:v?d={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:h?(d={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},g=m):d=m,_.prototype.on=function(e,t){var n,o=e.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var r=0;r<o.length;r+=1)n=o[r],this._handlers_[n]=this._handlers_[n]||[],this._handlers_[n].push(t);return this},_.prototype.off=function(e,t){return this._handlers_=this._handlers_||{},void 0===e?this._handlers_={}:void 0===t?this._handlers_[e]=null:this._handlers_[e]&&0<=this._handlers_[e].indexOf(t)&&this._handlers_[e].splice(this._handlers_[e].indexOf(t),1),this},_.prototype.trigger=function(e,t){var n,o=this,r=e.split(/[ ,]+/g);o._handlers_=o._handlers_||{};for(var i=0;i<r.length;i+=1)n=r[i],o._handlers_[n]&&o._handlers_[n].length&&o._handlers_[n].forEach(function(e){e.call(o,{type:n,target:o},t)})},_.prototype.config=function(e){this.options=this.defaults||{},e&&(this.options=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&t.hasOwnProperty(o)?n[o]=t[o]:e.hasOwnProperty(o)&&(n[o]=e[o]);return n}(this.options,e))},_.prototype.bindEvt=function(e,t){var n=this;return n._domHandlers_=n._domHandlers_||{},n._domHandlers_[t]=function(){"function"==typeof n["on"+t]?n["on"+t].apply(n,arguments):console.warn('[WARNING] : Missing "on'+t+'" handler.')},i(e,d[t],n._domHandlers_[t]),g[t]&&i(e,g[t],n._domHandlers_[t]),n},_.prototype.unbindEvt=function(e,t){return this._domHandlers_=this._domHandlers_||{},o(e,d[t],this._domHandlers_[t]),g[t]&&o(e,g[t],this._domHandlers_[t]),delete this._domHandlers_[t],this};var b=_;function w(e,t){return this.identifier=t.identifier,this.position=t.position,this.frontPosition=t.frontPosition,this.collection=e,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1,shape:"circle"},this.config(t),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=w.id,w.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),setPosition:this.setPosition.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}w.prototype=new b,(w.constructor=w).id=0,w.prototype.buildEl=function(e){return this.ui={},this.options.dataOnly||(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front)),this},w.prototype.stylize=function(){if(this.options.dataOnly)return this;var e=this.options.fadeTime+"ms",t=function(){var e=p("borderRadius");for(var t in e)e.hasOwnProperty(t)&&(e[t]="50%");return e}(),n=c("transition","opacity",e),o={};return o.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},o.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},o.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5"},u(o.el,n),"circle"===this.options.shape&&u(o.back,t),u(o.front,t),this.applyStyles(o),this},w.prototype.applyStyles=function(e){for(var t in this.ui)if(this.ui.hasOwnProperty(t))for(var n in e[t])this.ui[t].style[n]=e[t][n];return this},w.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)||this.options.zone.appendChild(this.ui.el),this},w.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)||this.options.zone.removeChild(this.ui.el),this},w.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},w.prototype.show=function(e){var t=this;return t.options.dataOnly||(clearTimeout(t.removeTimeout),clearTimeout(t.showTimeout),clearTimeout(t.restTimeout),t.addToDom(),t.restCallback(),setTimeout(function(){t.ui.el.style.opacity=1},0),t.showTimeout=setTimeout(function(){t.trigger("shown",t.instance),"function"==typeof e&&e.call(this)},t.options.fadeTime)),t},w.prototype.hide=function(t){var n=this;return n.options.dataOnly||(n.ui.el.style.opacity=n.options.restOpacity,clearTimeout(n.removeTimeout),clearTimeout(n.showTimeout),clearTimeout(n.restTimeout),n.removeTimeout=setTimeout(function(){var e="dynamic"===n.options.mode?"none":"block";n.ui.el.style.display=e,"function"==typeof t&&t.call(n),n.trigger("hidden",n.instance)},n.options.fadeTime),n.options.restJoystick&&n.setPosition(t,{x:0,y:0})),n},w.prototype.setPosition=function(e,t){var n=this;n.frontPosition={x:t.x,y:t.y};var o=n.options.fadeTime+"ms",r={};r.front=c("transition",["top","left"],o);var i={front:{}};i.front={left:n.frontPosition.x+"px",top:n.frontPosition.y+"px"},n.applyStyles(r),n.applyStyles(i),n.restTimeout=setTimeout(function(){"function"==typeof e&&e.call(n),n.restCallback()},n.options.fadeTime)},w.prototype.restCallback=function(){var e={};e.front=c("transition","none",""),this.applyStyles(e),this.trigger("rested",this.instance)},w.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},w.prototype.computeDirection=function(e){var t,n,o,r=e.angle.radian,i=Math.PI/4,s=Math.PI/2;if(i<r&&r<3*i&&!e.lockX?t="up":-i<r&&r<=i&&!e.lockY?t="left":3*-i<r&&r<=-i&&!e.lockX?t="down":e.lockY||(t="right"),e.lockY||(n=-s<r&&r<s?"left":"right"),e.lockX||(o=0<r?"up":"down"),e.force>this.options.threshold){var a,c={};for(a in this.direction)this.direction.hasOwnProperty(a)&&(c[a]=this.direction[a]);var u={};for(a in this.direction={x:n,y:o,angle:t},e.direction=this.direction,c)c[a]===this.direction[a]&&(u[a]=!0);if(u.x&&u.y&&u.angle)return e;u.x&&u.y||this.trigger("plain",e),u.x||this.trigger("plain:"+n,e),u.y||this.trigger("plain:"+o,e),u.angle||this.trigger("dir dir:"+t,e)}else this.resetDirection();return e};var x=w;function D(e,t){return this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=e,this.id=D.id,D.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1,shape:"circle",dynamicPage:!1,follow:!1},this.config(t),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}D.prototype=new b,(D.constructor=D).id=0,D.prototype.prepareNipples=function(){var o=this.nipples;o.on=this.on.bind(this),o.off=this.off.bind(this),o.options=this.options,o.destroy=this.destroy.bind(this),o.ids=this.ids,o.id=this.id,o.processOnMove=this.processOnMove.bind(this),o.processOnEnd=this.processOnEnd.bind(this),o.get=function(e){if(void 0===e)return o[0];for(var t=0,n=o.length;t<n;t+=1)if(o[t].identifier===e)return o[t];return!1}},D.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},D.prototype.begin=function(){var e=this.options;if("static"===e.mode){var t=this.createNipple(e.position,this.manager.getIdentifier());t.add(),this.idles.push(t)}},D.prototype.createNipple=function(e,t){var n=this.manager.scroll,o={},r=this.options;if(e.x&&e.y)o={x:e.x-(n.x+this.box.left),y:e.y-(n.y+this.box.top)};else if(e.top||e.right||e.bottom||e.left){var i=document.createElement("DIV");i.style.display="hidden",i.style.top=e.top,i.style.right=e.right,i.style.bottom=e.bottom,i.style.left=e.left,i.style.position="absolute",r.zone.appendChild(i);var s=i.getBoundingClientRect();r.zone.removeChild(i),o=e,e={x:s.left+n.x,y:s.top+n.y}}var a=new x(this,{color:r.color,size:r.size,threshold:r.threshold,fadeTime:r.fadeTime,dataOnly:r.dataOnly,restJoystick:r.restJoystick,restOpacity:r.restOpacity,mode:r.mode,identifier:t,position:e,zone:r.zone,frontPosition:{x:0,y:0},shape:r.shape});return r.dataOnly||(T(a.ui.el,o),T(a.ui.front,a.frontPosition)),this.nipples.push(a),this.trigger("added "+a.identifier+":added",a),this.manager.trigger("added "+a.identifier+":added",a),this.bindNipple(a),a},D.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},D.prototype.bindNipple=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},D.prototype.pressureFn=function(t,n,e){var o=this,r=0;clearInterval(o.pressureIntervals[e]),o.pressureIntervals[e]=setInterval(function(){var e=t.force||t.pressure||t.webkitForce||0;e!==r&&(n.trigger("pressure",e),o.trigger("pressure "+n.identifier+":pressure",e),r=e)}.bind(o),100)},D.prototype.onstart=function(n){var o=this,t=o.options,r=n;return n=s(n),o.updateBox(),l(n,function(e){o.actives.length<t.maxNumberOfNipples?o.processOnStart(e):r.type.match(/^touch/)&&(Object.keys(o.manager.ids).forEach(function(t){if(Object.values(r.touches).findIndex(function(e){return e.identifier===t})<0){var e=[n[0]];e.identifier=t,o.processOnEnd(e)}}),o.actives.length<t.maxNumberOfNipples&&o.processOnStart(e))}),o.manager.bindDocument(),!1},D.prototype.processOnStart=function(t){var e,n=this,o=n.options,r=n.manager.getIdentifier(t),i=t.force||t.pressure||t.webkitForce||0,s={x:t.pageX,y:t.pageY},a=n.getOrCreate(r,s);a.identifier!==r&&n.manager.removeIdentifier(a.identifier),a.identifier=r;function c(e){e.trigger("start",e),n.trigger("start "+e.id+":start",e),e.show(),0<i&&n.pressureFn(t,e,e.identifier),n.processOnMove(t)}if(0<=(e=n.idles.indexOf(a))&&n.idles.splice(e,1),n.actives.push(a),n.ids.push(a.identifier),"semi"!==o.mode)c(a);else{if(!(S(s,a.position)<=o.catchDistance))return a.destroy(),void n.processOnStart(t);c(a)}return a},D.prototype.getOrCreate=function(e,t){var n,o=this.options;return/(semi|static)/.test(o.mode)?(n=this.idles[0])?(this.idles.splice(0,1),n):"semi"===o.mode?this.createNipple(t,e):(console.warn("Coudln't find the needed nipple."),!1):n=this.createNipple(t,e)},D.prototype.processOnMove=function(e){var t,n,o,r,i=this.options,s=this.manager.getIdentifier(e),a=this.nipples.get(s),c=this.manager.scroll;if(r=e,isNaN(r.buttons)?0!==r.pressure:0!==r.buttons){if(!a)return console.error("Found zombie joystick with ID "+s),void this.manager.removeIdentifier(s);if(i.dynamicPage){var u=a.el.getBoundingClientRect();a.position={x:c.x+u.left,y:c.y+u.top}}a.identifier=s;var l=a.options.size/2,d={x:e.pageX,y:e.pageY};i.lockX&&(d.y=a.position.y),i.lockY&&(d.x=a.position.x);var f,p,h,y,v,m,g,_,b,w=S(d,a.position),x=(p=(f=a.position).x-d.x,h=f.y-d.y,Math.atan2(h,p)*(180/Math.PI)),D=P(x),k=w/l,E={distance:w,position:d};if("circle"===a.options.shape?(y=Math.min(w,l),m=a.position,g=y,b={x:0,y:0},_=P(_=x),b.x=m.x-g*Math.cos(_),b.y=m.y-g*Math.sin(_),v=b):(t=d,n=a.position,o=l,v={x:Math.min(Math.max(t.x,n.x-o),n.x+o),y:Math.min(Math.max(t.y,n.y-o),n.y+o)},y=S(v,a.position)),i.follow){if(l<w){var j=d.x-v.x,B=d.y-v.y;a.position.x+=j,a.position.y+=B,a.el.style.top=a.position.y-(this.box.top+c.y)+"px",a.el.style.left=a.position.x-(this.box.left+c.x)+"px",w=S(d,a.position)}}else d=v,w=y;var K=d.x-a.position.x,C=d.y-a.position.y;a.frontPosition={x:K,y:C},i.dataOnly||T(a.ui.front,a.frontPosition);var O={identifier:a.identifier,position:d,force:k,pressure:e.force||e.pressure||e.webkitForce||0,distance:w,angle:{radian:D,degree:x},vector:{x:K/l,y:-C/l},raw:E,instance:a,lockX:i.lockX,lockY:i.lockY};(O=a.computeDirection(O)).angle={radian:P(180-x),degree:180-x},a.trigger("move",O),this.trigger("move "+a.id+":move",O)}else this.processOnEnd(e)},D.prototype.processOnEnd=function(e){var t=this,n=t.options,o=t.manager.getIdentifier(e),r=t.nipples.get(o),i=t.manager.removeIdentifier(r.identifier);r&&(n.dataOnly||r.hide(function(){"dynamic"===n.mode&&(r.trigger("removed",r),t.trigger("removed "+r.id+":removed",r),t.manager.trigger("removed "+r.id+":removed",r),r.destroy())}),clearInterval(t.pressureIntervals[r.identifier]),r.resetDirection(),r.trigger("end",r),t.trigger("end "+r.id+":end",r),0<=t.ids.indexOf(r.identifier)&&t.ids.splice(t.ids.indexOf(r.identifier),1),0<=t.actives.indexOf(r)&&t.actives.splice(t.actives.indexOf(r),1),/(semi|static)/.test(n.mode)?t.idles.push(r):0<=t.nipples.indexOf(r)&&t.nipples.splice(t.nipples.indexOf(r),1),t.manager.unbindDocument(),/(semi|static)/.test(n.mode)&&(t.manager.ids[i.id]=i.identifier))},D.prototype.onDestroyed=function(e,t){0<=this.nipples.indexOf(t)&&this.nipples.splice(this.nipples.indexOf(t),1),0<=this.actives.indexOf(t)&&this.actives.splice(this.actives.indexOf(t),1),0<=this.idles.indexOf(t)&&this.idles.splice(this.idles.indexOf(t),1),0<=this.ids.indexOf(t.identifier)&&this.ids.splice(this.ids.indexOf(t.identifier),1),this.manager.removeIdentifier(t.identifier),this.manager.unbindDocument()},D.prototype.destroy=function(){for(var e in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach(function(e){e.destroy()}),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(e)&&clearInterval(this.pressureIntervals[e]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var k=D;function E(e){var n=this;n.ids={},n.index=0,n.collections=[],n.scroll=a(),n.config(e),n.prepareCollections();function t(){var t;n.collections.forEach(function(e){e.forEach(function(e){t=e.el.getBoundingClientRect(),e.position={x:n.scroll.x+t.left,y:n.scroll.y+t.top}})})}i(window,"resize",function(){r(t)});function o(){n.scroll=a()}return i(window,"scroll",function(){r(o)}),n.collections}E.prototype=new b,(E.constructor=E).prototype.prepareCollections=function(){var e=this;e.collections.create=e.create.bind(e),e.collections.on=e.on.bind(e),e.collections.off=e.off.bind(e),e.collections.destroy=e.destroy.bind(e),e.collections.get=function(t){var n;return e.collections.every(function(e){return!(n=e.get(t))}),n}},E.prototype.create=function(e){return this.createCollection(e)},E.prototype.createCollection=function(e){var t=new k(this,e);return this.bindCollection(t),this.collections.push(t),t},E.prototype.bindCollection=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},E.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},E.prototype.unbindDocument=function(e){Object.keys(this.ids).length&&!0!==e||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},E.prototype.getIdentifier=function(e){var t;return e?void 0===(t=void 0===e.identifier?e.pointerId:e.identifier)&&(t=this.latest||0):t=this.index,void 0===this.ids[t]&&(this.ids[t]=this.index,this.index+=1),this.latest=t,this.ids[t]},E.prototype.removeIdentifier=function(e){var t={};for(var n in this.ids)if(this.ids[n]===e){t.id=n,t.identifier=this.ids[n],delete this.ids[n];break}return t},E.prototype.onmove=function(e){return this.onAny("move",e),!1},E.prototype.onend=function(e){return this.onAny("end",e),!1},E.prototype.oncancel=function(e){return this.onAny("end",e),!1},E.prototype.onAny=function(e,t){var n,o=this,r="processOn"+e.charAt(0).toUpperCase()+e.slice(1);return t=s(t),l(t,function(e){n=o.getIdentifier(e),l(o.collections,function(e,t,n){0<=n.ids.indexOf(t)&&(n[r](e),e._found_=!0)}.bind(null,e,n)),e._found_||o.removeIdentifier(n)}),!1},E.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach(function(e){e.destroy()}),this.off()},E.prototype.onDestroyed=function(e,t){if(this.collections.indexOf(t)<0)return!1;this.collections.splice(this.collections.indexOf(t),1)};var j=new E;t.default={create:function(e){return j.create(e)},factory:j}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0).default;function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("nipplejs",[],r):"object"==typeof n?n.nipplejs=r():o.nipplejs=r()},{}],129:[function(e,t,v){"use strict";Object.defineProperty(v,"__esModule",{value:!0});var n,r=function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=(o.prototype.on=function(e,t){var n=this.listeners[e]||[];this.listeners[e]=n.concat([t])},o.prototype.triggerEvent=function(e,t){var n=this;(this.listeners[e]||[]).forEach(function(e){return e({target:n,event:t})})},o);function o(e){this.options=e,this.listeners={}}(n=v.NotyfArrayEvent||(v.NotyfArrayEvent={}))[n.Add=0]="Add",n[n.Remove=1]="Remove";var s,a=(c.prototype.push=function(e){this.notifications.push(e),this.updateFn(e,v.NotyfArrayEvent.Add,this.notifications)},c.prototype.splice=function(e,t){var n=this.notifications.splice(e,t)[0];return this.updateFn(n,v.NotyfArrayEvent.Remove,this.notifications),n},c.prototype.indexOf=function(e){return this.notifications.indexOf(e)},c.prototype.onUpdate=function(e){this.updateFn=e},c);function c(){this.notifications=[]}(s=v.NotyfEvent||(v.NotyfEvent={})).Dismiss="dismiss";var u={types:[{type:"success",className:"notyf__toast--success",backgroundColor:"#3dc763",icon:{className:"notyf__icon--success",tagName:"i"}},{type:"error",className:"notyf__toast--error",backgroundColor:"#ed3d3d",icon:{className:"notyf__icon--error",tagName:"i"}}],duration:2e3,ripple:!0,position:{x:"right",y:"bottom"},dismissible:!(s.Click="click")},l=(d.prototype.on=function(e,t){var n;this.events=r(r({},this.events),((n={})[e]=t,n))},d.prototype.update=function(e,t){t===v.NotyfArrayEvent.Add?this.addNotification(e):t===v.NotyfArrayEvent.Remove&&this.removeNotification(e)},d.prototype.removeNotification=function(e){var t,n,o=this,r=this._popRenderedNotification(e);r&&((t=r.node).classList.add("notyf__toast--disappear"),t.addEventListener(this.animationEndEventName,n=function(e){e.target===t&&(t.removeEventListener(o.animationEndEventName,n),o.container.removeChild(t))}))},d.prototype.addNotification=function(e){var t=this._renderNotification(e);this.notifications.push({notification:e,node:t}),this._announce(e.options.message||"Notification")},d.prototype._renderNotification=function(e){var t,n=this._buildNotificationCard(e),o=e.options.className;return o&&(t=n.classList).add.apply(t,o.split(" ")),this.container.appendChild(n),n},d.prototype._popRenderedNotification=function(e){for(var t=-1,n=0;n<this.notifications.length&&t<0;n++)this.notifications[n].notification===e&&(t=n);if(-1!==t)return this.notifications.splice(t,1)[0]},d.prototype.getXPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.x)||"right"},d.prototype.getYPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.y)||"bottom"},d.prototype.adjustContainerAlignment=function(e){var t=this.X_POSITION_FLEX_MAP[this.getXPosition(e)],n=this.Y_POSITION_FLEX_MAP[this.getYPosition(e)],o=this.container.style;o.setProperty("justify-content",n),o.setProperty("align-items",t)},d.prototype._buildNotificationCard=function(o){var e,r=this,t=o.options,n=t.icon;this.adjustContainerAlignment(t);var i=this._createHTLMElement({tagName:"div",className:"notyf__toast"}),s=this._createHTLMElement({tagName:"div",className:"notyf__ripple"}),a=this._createHTLMElement({tagName:"div",className:"notyf__wrapper"}),c=this._createHTLMElement({tagName:"div",className:"notyf__message"});c.innerHTML=t.message||"";var u=t.background||t.backgroundColor;if(n&&"object"==typeof n){var l=this._createHTLMElement({tagName:"div",className:"notyf__icon"}),d=this._createHTLMElement({tagName:n.tagName||"i",className:n.className,text:n.text}),f=null!==(e=n.color)&&void 0!==e?e:u;f&&(d.style.color=f),l.appendChild(d),a.appendChild(l)}if(a.appendChild(c),i.appendChild(a),u&&(t.ripple?(s.style.background=u,i.appendChild(s)):i.style.background=u),t.dismissible){var p=this._createHTLMElement({tagName:"div",className:"notyf__dismiss"}),h=this._createHTLMElement({tagName:"button",className:"notyf__dismiss-btn"});p.appendChild(h),a.appendChild(p),i.classList.add("notyf__toast--dismissible"),h.addEventListener("click",function(e){var t,n;null!==(n=(t=r.events)[v.NotyfEvent.Dismiss])&&void 0!==n&&n.call(t,{target:o,event:e}),e.stopPropagation()})}i.addEventListener("click",function(e){var t,n;return null===(n=(t=r.events)[v.NotyfEvent.Click])||void 0===n?void 0:n.call(t,{target:o,event:e})});var y="top"===this.getYPosition(t)?"upper":"lower";return i.classList.add("notyf__toast--"+y),i},d.prototype._createHTLMElement=function(e){var t=e.tagName,n=e.className,o=e.text,r=document.createElement(t);return n&&(r.className=n),r.textContent=o||null,r},d.prototype._createA11yContainer=function(){var e=this._createHTLMElement({tagName:"div",className:"notyf-announcer"});e.setAttribute("aria-atomic","true"),e.setAttribute("aria-live","polite"),e.style.border="0",e.style.clip="rect(0 0 0 0)",e.style.height="1px",e.style.margin="-1px",e.style.overflow="hidden",e.style.padding="0",e.style.position="absolute",e.style.width="1px",e.style.outline="0",document.body.appendChild(e),this.a11yContainer=e},d.prototype._announce=function(e){var t=this;this.a11yContainer.textContent="",setTimeout(function(){t.a11yContainer.textContent=e},100)},d.prototype._getAnimationEndEventName=function(){var e,t=document.createElement("_fake"),n={MozTransition:"animationend",OTransition:"oAnimationEnd",WebkitTransition:"webkitAnimationEnd",transition:"animationend"};for(e in n)if(void 0!==t.style[e])return n[e];return"animationend"},d);function d(){this.notifications=[],this.events={},this.X_POSITION_FLEX_MAP={left:"flex-start",center:"center",right:"flex-end"},this.Y_POSITION_FLEX_MAP={top:"flex-start",center:"center",bottom:"flex-end"};var e=document.createDocumentFragment(),t=this._createHTLMElement({tagName:"div",className:"notyf"});e.appendChild(t),document.body.appendChild(e),this.container=t,this.animationEndEventName=this._getAnimationEndEventName(),this._createA11yContainer()}var f=(p.prototype.error=function(e){var t=this.normalizeOptions("error",e);return this.open(t)},p.prototype.success=function(e){var t=this.normalizeOptions("success",e);return this.open(t)},p.prototype.open=function(t){var e=this.options.types.find(function(e){return e.type===t.type})||{},n=r(r({},e),t);this.assignProps(["ripple","position","dismissible"],n);var o=new i(n);return this._pushNotification(o),o},p.prototype.dismissAll=function(){for(;this.notifications.splice(0,1););},p.prototype.assignProps=function(e,t){var n=this;e.forEach(function(e){t[e]=null==t[e]?n.options[e]:t[e]})},p.prototype._pushNotification=function(e){var t=this;this.notifications.push(e);var n=void 0!==e.options.duration?e.options.duration:this.options.duration;n&&setTimeout(function(){return t._removeNotification(e)},n)},p.prototype._removeNotification=function(e){var t=this.notifications.indexOf(e);-1!==t&&this.notifications.splice(t,1)},p.prototype.normalizeOptions=function(e,t){var n={type:e};return"string"==typeof t?n.message=t:"object"==typeof t&&(n=r(r({},n),t)),n},p.prototype.registerTypes=function(e){var t=(e&&e.types||[]).slice();return u.types.map(function(n){var o=-1;t.forEach(function(e,t){e.type===n.type&&(o=t)});var e=-1!==o?t.splice(o,1)[0]:{};return r(r({},n),e)}).concat(t)},p);function p(e){var o=this;this.dismiss=this._removeNotification,this.notifications=new a,this.view=new l;var t=this.registerTypes(e);this.options=r(r({},u),e),this.options.types=t,this.notifications.onUpdate(function(e,t){return o.view.update(e,t)}),this.view.on(v.NotyfEvent.Dismiss,function(e){var t=e.target,n=e.event;o._removeNotification(t),t.triggerEvent(v.NotyfEvent.Dismiss,n)}),this.view.on(v.NotyfEvent.Click,function(e){var t=e.target,n=e.event;return t.triggerEvent(v.NotyfEvent.Click,n)})}v.DEFAULT_OPTIONS=u,v.Notyf=f,v.NotyfArray=a,v.NotyfNotification=i,v.NotyfView=l},{}],130:[function(e,t,n){var o=function(s){"use strict";var c,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function a(e,t,n,o){var i,s,a,c,r=t&&t.prototype instanceof m?t:m,u=Object.create(r.prototype),l=new B(o||[]);return u._invoke=(i=e,s=n,a=l,c=f,function(e,t){if(c===h)throw new Error("Generator is already running");if(c===y){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){var o=k(n,a);if(o){if(o===v)continue;return o}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===f)throw c=y,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=h;var r=d(i,s,a);if("normal"===r.type){if(c=a.done?y:p,r.arg===v)continue;return{value:r.arg,done:a.done}}"throw"===r.type&&(c=y,a.method="throw",a.arg=r.arg)}}),u}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var f="suspendedStart",p="suspendedYield",h="executing",y="completed",v={};function m(){}function i(){}function u(){}var g={};g[r]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(K([])));b&&b!==e&&l.call(b,r)&&(g=b);var w=u.prototype=m.prototype=Object.create(g);function x(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function D(c,u){var t;this._invoke=function(n,o){function e(){return new u(function(e,t){!function t(e,n,o,r){var i=d(c[e],c,n);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?u.resolve(a.__await).then(function(e){t("next",e,o,r)},function(e){t("throw",e,o,r)}):u.resolve(a).then(function(e){s.value=e,o(s)},function(e){return t("throw",e,o,r)})}r(i.arg)}(n,o,e,t)})}return t=t?t.then(e,e):e()}}function k(e,t){var n=e.iterator[t.method];if(n===c){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=c,k(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var r=o.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=c),t.delegate=null,v):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function B(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function K(t){if(t){var e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(l.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=c,e.done=!0,e};return o.next=o}}return{next:C}}function C(){return{value:c,done:!0}}return i.prototype=w.constructor=u,u.constructor=i,u[o]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},x(D.prototype),D.prototype[n]=function(){return this},s.AsyncIterator=D,s.async=function(e,t,n,o,r){void 0===r&&(r=Promise);var i=new D(a(e,t,n,o),r);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(w),w[o]="Generator",w[r]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(n){var o=[];for(var e in n)o.push(e);return o.reverse(),function e(){for(;o.length;){var t=o.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=K,B.prototype={constructor:B,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=c)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var o=this;function e(e,t){return i.type="throw",i.arg=n,o.next=e,t&&(o.method="next",o.arg=c),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t],i=r.completion;if("root"===r.tryLoc)return e("end");if(r.tryLoc<=this.prev){var s=l.call(r,"catchLoc"),a=l.call(r,"finallyLoc");if(s&&a){if(this.prev<r.catchLoc)return e(r.catchLoc,!0);if(this.prev<r.finallyLoc)return e(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return e(r.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return e(r.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&l.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var r=o.arg;j(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:K(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=c),v}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=o}catch(e){Function("r","regeneratorRuntime = r")(o)}},{}],131:[function(e,t,n){var o,r;o=this,r=function(){return o={},r.m=n=[function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var r,i,s,u,l=(u=[{key:"bindMethods",value:function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e){if(e){if("string"==typeof e)return c(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,i=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw i}}}}(Object.getOwnPropertyNames(e.prototype));try{for(o.s();!(n=o.n()).done;){var r=n.value;"constructor"===r||"bindMethods"===r||(t[r]=t[r].bind(t))}}catch(e){o.e(e)}finally{o.f()}}}],o((s=d).prototype,[{key:"getButtonClass",value:function(e){var t=e.includes("{")&&e.includes("}")&&"{//}"!==e?"functionBtn":"standardBtn",n=e.replace("{","").replace("}",""),o="";return"standardBtn"!=t&&(o=" hg-button-".concat(n)),"hg-".concat(t).concat(o)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(e,t,n){return(t=n?Object.assign({},this.getDefaultDiplay(),t):t||this.getDefaultDiplay())[e]||e}},{key:"getUpdatedInput",value:function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:n,r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],i=this.getOptions(),s=[n,o,r],a=t;return("{bksp}"===e||"{backspace}"===e)&&0<a.length?a=this.removeAt.apply(this,[a].concat(s)):"{space}"===e?a=this.addStringAt.apply(this,[a," "].concat(s)):"{tab}"!==e||"boolean"==typeof i.tabCharOnTab&&!1===i.tabCharOnTab?"{enter}"!==e&&"{numpadenter}"!==e||!i.newLineOnEnter?e.includes("numpad")&&Number.isInteger(Number(e[e.length-2]))?a=this.addStringAt.apply(this,[a,e[e.length-2]].concat(s)):"{numpaddivide}"===e?a=this.addStringAt.apply(this,[a,"/"].concat(s)):"{numpadmultiply}"===e?a=this.addStringAt.apply(this,[a,"*"].concat(s)):"{numpadsubtract}"===e?a=this.addStringAt.apply(this,[a,"-"].concat(s)):"{numpadadd}"===e?a=this.addStringAt.apply(this,[a,"+"].concat(s)):"{numpaddecimal}"===e?a=this.addStringAt.apply(this,[a,"."].concat(s)):"{"!==e&&"}"!==e&&(e.includes("{")||e.includes("}"))||(a=this.addStringAt.apply(this,[a,e].concat(s))):a=this.addStringAt.apply(this,[a,"\n"].concat(s)):a=this.addStringAt.apply(this,[a,"\t"].concat(s)),a}},{key:"updateCaretPos",value:function(e,t){var n=this.updateCaretPosAction(e,t);this.dispatch(function(e){e.setCaretPosition(n)})}},{key:"updateCaretPosAction",value:function(e,t){var n=this.getOptions(),o=this.getCaretPosition();return t?0<o&&(o-=e):o+=e,n.debug&&console.log("Caret at:",o,"(".concat(this.keyboardDOMClass,")")),o}},{key:"addStringAt",value:function(e,t){var n,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:e.length,i=4<arguments.length&&void 0!==arguments[4]&&arguments[4];return o||0===o?(n=[e.slice(0,o),t,e.slice(r)].join(""),this.isMaxLengthReached()||i&&this.updateCaretPos(t.length)):n=e+t,n}},{key:"removeAt",value:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.length,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]&&arguments[3];if(0===n&&0===o)return e;if(n===o){var i=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;n&&0<=n?e.substring(n-2,n).match(i)?(t=e.substr(0,n-2)+e.substr(n),r&&this.updateCaretPos(2,!0)):(t=e.substr(0,n-1)+e.substr(n),r&&this.updateCaretPos(1,!0)):e.slice(-2).match(i)?(t=e.slice(0,-2),r&&this.updateCaretPos(2,!0)):(t=e.slice(0,-1),r&&this.updateCaretPos(1,!0))}else t=e.slice(0,n)+e.slice(o),r&&this.dispatch(function(e){e.setCaretPosition(n)});return t}},{key:"handleMaxLength",value:function(e,t){var n=this.getOptions(),o=n.maxLength,r=e[n.inputName],i=t.length-1>=o;if(t.length<=r.length)return!1;if(Number.isInteger(o))return n.debug&&console.log("maxLength (num) reached:",i),this.maxLengthReached=i;if("object"===a(o)){var s=t.length-1>=o[n.inputName];return n.debug&&console.log("maxLength (obj) reached:",s),this.maxLengthReached=s}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(e){return!!e&&e.toLowerCase().trim().split(/[.\-_\s]/g).reduce(function(e,t){return t.length?e+t[0].toUpperCase()+t.slice(1):e})}}]),o(s,u),d);function d(e){var t=e.getOptions,n=e.getCaretPosition,o=e.getCaretPositionEnd,r=e.dispatch;!function(e){if(!(e instanceof d))throw new TypeError("Cannot call a class as a function")}(this),this.getOptions=t,this.getCaretPosition=n,this.getCaretPositionEnd=o,this.dispatch=r,d.bindMethods(d,this)}i=function(){},"noop"in(r=l)?Object.defineProperty(r,"noop",{value:i,enumerable:!0,configurable:!0,writable:!0}):r.noop=i;var f=l;function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var h=(p(y.prototype,[{key:"handleHighlightKeyDown",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&(t.style.backgroundColor=n.physicalKeyboardHighlightBgColor||"#dadce4",t.style.color=n.physicalKeyboardHighlightTextColor||"black",n.physicalKeyboardHighlightPress&&(t.onpointerdown||t.onmousedown||t.ontouchstart||f.noop)())})}},{key:"handleHighlightKeyUp",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&t.removeAttribute&&(t.removeAttribute("style"),n.physicalKeyboardHighlightPress&&(t.onpointerup||t.onmouseup||t.ontouchend||f.noop)())})}},{key:"getSimpleKeyboardLayoutKey",value:function(e){var t;return((t=e.code.includes("Numpad")||e.code.includes("Shift")||e.code.includes("Space")||e.code.includes("Backspace")||e.code.includes("Control")||e.code.includes("Alt")||e.code.includes("Meta")?e.code:e.key)!==t.toUpperCase()||"F"===e.code[0]&&Number.isInteger(Number(e.code[1]))&&e.code.length<=3)&&(t=t.toLowerCase()),t}}]),y);function y(e){var t=e.dispatch,n=e.getOptions;!function(e){if(!(e instanceof y))throw new TypeError("Cannot call a class as a function")}(this),this.dispatch=t,this.getOptions=n,f.bindMethods(y,this)}function _(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e){if(e){if("string"==typeof e)return v(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?v(e,void 0):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function m(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=(m(w.prototype,[{key:"setCaretPosition",value:function(e,t){this.caretPosition=e,this.caretPositionEnd=t||e}},{key:"handleButtonClicked",value:function(e){var t=this.options.debug;if("{//}"===e)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(e),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var n=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==n&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(n))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,n))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),t&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}t&&console.log("Key pressed:",e)}},{key:"handleButtonMouseDown",value:function(e,t){var n=this;this.options.preventMouseDownDefault&&t.preventDefault(),this.options.stopMouseDownPropagation&&t.stopPropagation(),t&&t.target.classList.add(this.activeButtonClass),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout(function(){(!n.isMouseHold||(e.includes("{")||e.includes("}"))&&"{delete}"!==e&&"{backspace}"!==e&&"{bksp}"!==e&&"{space}"!==e&&"{tab}"!==e)&&"{arrowright}"!==e&&"{arrowleft}"!==e&&"{arrowup}"!==e&&"{arrowdown}"!==e||(n.options.debug&&console.log("Button held:",e),n.handleButtonHold(e,t)),clearTimeout(n.holdTimeout)},500))}},{key:"handleButtonMouseUp",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;n&&(this.options.preventMouseUpDefault&&n.preventDefault(),this.options.stopMouseUpPropagation&&n.stopPropagation()),this.recurseButtons(function(e){e.classList.remove(t.activeButtonClass)}),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),e&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(e)}},{key:"handleKeyboardContainerMouseDown",value:function(e){this.options.preventMouseDownDefault&&e.preventDefault()}},{key:"handleButtonHold",value:function(e){var t=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout(function(){t.isMouseHold?(t.handleButtonClicked(e),t.handleButtonHold(e)):clearTimeout(t.holdInteractionTimeout)},100)}},{key:"syncInstanceInputs",value:function(){var t=this;this.dispatch(function(e){e.replaceInput(t.input),e.setCaretPosition(t.caretPosition,t.caretPositionEnd)})}},{key:"clearInput",value:function(e){e=e||this.options.inputName,this.input[e]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return e=e||this.options.inputName,this.options.syncInstanceInputs&&!t&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[e].replace("‫","").replace("‬","")+"‬":this.input[e]}},{key:"getAllInputs",value:function(){var t=this,n={};return Object.keys(this.input).forEach(function(e){n[e]=t.getInput(e,!0)}),n}},{key:"setInput",value:function(e,t){t=t||this.options.inputName,this.input[t]=e,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(e){this.input=e}},{key:"setOptions",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=this.changedOptions(e);this.options=Object.assign(this.options,e),t.length&&(this.options.debug&&console.log("changedOptions",t),this.onSetOptions(e),this.render())}},{key:"changedOptions",value:function(t){var n=this;return Object.keys(t).filter(function(e){return JSON.stringify(t[e])!==JSON.stringify(n.options[e])})}},{key:"onSetOptions",value:function(e){e.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(t){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach(function(e){t(window.SimpleKeyboardInstances[e],e)})}},{key:"addButtonTheme",value:function(e,t){var i=this;if(!t||!e)return!1;e.split(" ").forEach(function(r){t.split(" ").forEach(function(n){i.options.buttonTheme||(i.options.buttonTheme=[]);var o=!1;i.options.buttonTheme.map(function(e){if(e.class.split(" ").includes(n)){o=!0;var t=e.buttons.split(" ");t.includes(r)||(o=!0,t.push(r),e.buttons=t.join(" "))}return e}),o||i.options.buttonTheme.push({class:n,buttons:e})})}),this.render()}},{key:"removeButtonTheme",value:function(e,r){var i=this;if(!e&&!r)return this.options.buttonTheme=[],this.render(),!1;e&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(e.split(" ").forEach(function(o){i.options.buttonTheme.map(function(e,t){if(r&&r.includes(e.class)||!r){var n=e.buttons.split(" ").filter(function(e){return e!==o});n.length?e.buttons=n.join(" "):(i.options.buttonTheme.splice(t,1),e=null)}return e})}),this.render())}},{key:"getButtonElement",value:function(e){var t,n=this.buttonElements[e];return n&&(t=1<n.length?n:n[0]),t}},{key:"inputPatternIsValid",value:function(e){var t,n=this.options.inputPattern;if((t=n instanceof RegExp?n:n[this.options.inputName])&&e){var o=t.test(e);return this.options.debug&&console.log('inputPattern ("'.concat(t,'"): ').concat(o?"passed":"did not pass!")),o}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(e){this.caretEventHandler(e),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(e)}},{key:"handleKeyDown",value:function(e){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(e)}},{key:"handleMouseUp",value:function(e){this.caretEventHandler(e)}},{key:"handleTouchEnd",value:function(e){this.caretEventHandler(e)}},{key:"caretEventHandler",value:function(n){var o;n.target.tagName&&(o=n.target.tagName.toLowerCase()),this.dispatch(function(e){var t=n.target===e.keyboardDOM||n.target&&e.keyboardDOM.contains(n.target);e.isMouseHold&&(e.isMouseHold=!1),"textarea"!==o&&"input"!==o||e.options.disableCaretPositioning?!e.options.disableCaretPositioning&&t||e.setCaretPosition(null):(e.setCaretPosition(n.target.selectionStart,n.target.selectionEnd),e.options.debug&&console.log("Caret at: ",e.getCaretPosition(),e.getCaretPositionEnd(),n&&n.target.tagName.toLowerCase(),"(".concat(e.keyboardDOMClass,")")))})}},{key:"recurseButtons",value:function(t){var n=this;if(!t)return!1;Object.keys(this.buttonElements).forEach(function(e){return n.buttonElements[e].forEach(t)})}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var e=function(e){e.onpointerdown=null,e.onpointerup=null,e.onpointercancel=null,e.ontouchstart=null,e.ontouchend=null,e.ontouchcancel=null,e.onclick=null,e.onmousedown=null,e.onmouseup=null,e.remove(),e=null};this.recurseButtons(e),e=this.recurseButtons=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(n){var e=this.options.buttonTheme,o=[];return Array.isArray(e)&&e.forEach(function(e){if(e.class&&"string"==typeof e.class&&e.buttons&&"string"==typeof e.buttons){var t=e.class.split(" ");e.buttons.split(" ").includes(n)&&(o=[].concat(_(o),_(t)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',e)}),o}},{key:"setDOMButtonAttributes",value:function(t,n){var e=this.options.buttonAttributes;Array.isArray(e)&&e.forEach(function(e){e.attribute&&"string"==typeof e.attribute&&e.value&&"string"==typeof e.value&&e.buttons&&"string"==typeof e.buttons?e.buttons.split(" ").includes(t)&&n(e.attribute,e.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',e)})}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(e){if(e.target.classList.contains("hg-button"))return e.preventDefault(),e.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var t=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach(function(e){(new e).init(t)}),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(e,t){return!!this.modules[e]&&this.modules[e][t]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(c,u,e,l){var d=this,f=Array.from(c.children),p=0;return f.length&&e.forEach(function(e,t){var n=l[t];if(!(n&&e<n))return!1;var o=e-p,r=n-p,i=document.createElement("div");i.className+="hg-button-container";var s="".concat(d.options.layoutName,"-r").concat(u,"c").concat(t);i.setAttribute("data-skUID",s);var a=f.splice(o,r-o+1);p=r-o,a.forEach(function(e){return i.appendChild(e)}),f.splice(o,0,i),c.innerHTML="",f.forEach(function(e){return c.appendChild(e)}),d.options.debug&&console.log("rowDOMContainer",a,o,r,p+1)}),c}},{key:"render",value:function(){var y=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var e="hg-layout-".concat(this.options.layoutName),t=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},v=this.options.useTouchEvents||!1,n=v?"hg-touch-events":"",m=this.options.useMouseEvents||!1,g=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,e,this.keyboardPluginClasses,n),t[this.options.layoutName].forEach(function(e,d){var t=e.split(" "),f=document.createElement("div");f.className+="hg-row";var p=[],h=[];t.forEach(function(t,e){var n,o=!g&&"string"==typeof t&&1<t.length&&0===t.indexOf("["),r=!g&&"string"==typeof t&&1<t.length&&t.indexOf("]")===t.length-1;o&&(p.push(e),t=t.replace(/\[/g,"")),r&&(h.push(e),t=t.replace(/\]/g,""));var i=y.utilities.getButtonClass(t),s=y.utilities.getButtonDisplayName(t,y.options.display,y.options.mergeDisplay),a=y.options.useButtonTag?"button":"div",c=document.createElement(a);c.className+="hg-button ".concat(i),(n=c.classList).add.apply(n,_(y.getButtonThemeClasses(t))),y.setDOMButtonAttributes(t,function(e,t){c.setAttribute(e,t)}),y.activeButtonClass="hg-activeButton",!y.utilities.pointerEventsSupported()||v||m?v?(c.ontouchstart=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.ontouchend=function(e){y.handleButtonMouseUp(t,e)},c.ontouchcancel=function(e){y.handleButtonMouseUp(t,e)}):(c.onclick=function(){y.isMouseHold=!1,y.handleButtonClicked(t)},c.onmousedown=function(e){y.handleButtonMouseDown(t,e)},c.onmouseup=function(e){y.handleButtonMouseUp(t,e)}):(c.onpointerdown=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.onpointerup=function(e){y.handleButtonMouseUp(t,e)},c.onpointercancel=function(e){y.handleButtonMouseUp(t,e)}),c.setAttribute("data-skBtn",t);var u="".concat(y.options.layoutName,"-r").concat(d,"b").concat(e);c.setAttribute("data-skBtnUID",u);var l=document.createElement("span");l.innerHTML=s,c.appendChild(l),y.buttonElements[t]||(y.buttonElements[t]=[]),y.buttonElements[t].push(c),f.appendChild(c)}),f=y.parseRowDOMContainers(f,d,p,h),y.keyboardDOM.appendChild(f)}),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||v||m?v?(document.ontouchend=function(){return y.handleButtonMouseUp()},document.ontouchcancel=function(){return y.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(e){return y.handleKeyboardContainerMouseDown(e)}):v||(document.onmouseup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(e){return y.handleKeyboardContainerMouseDown(e)}):(document.onpointerup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(e){return y.handleKeyboardContainerMouseDown(e)}),this.onInit())}}]),w);function w(){var o=this;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,w),g(this,"handleParams",function(e){var t,n,o;if("string"==typeof e[0])t=e[0].split(".").join(""),n=document.querySelector(".".concat(t)),o=e[1];else if(e[0]instanceof HTMLDivElement){if(!e[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");t=e[0].className.split(" ")[0],n=e[0],o=e[1]}else t="simple-keyboard",n=document.querySelector(".".concat(t)),o=e[0];return{keyboardDOMClass:t,keyboardDOM:n,options:o}}),g(this,"getOptions",function(){return o.options}),g(this,"getCaretPosition",function(){return o.caretPosition}),g(this,"getCaretPositionEnd",function(){return o.caretPositionEnd}),g(this,"registerModule",function(e,t){o.modules[e]||(o.modules[e]={}),t(o.modules[e])}),g(this,"getKeyboardClassString",function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[o.keyboardDOMClass].concat(t).filter(function(e){return!!e}).join(" ")});for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.handleParams(t),i=r.keyboardDOMClass,s=r.keyboardDOM,a=r.options,c=void 0===a?{}:a;if(this.utilities=new f({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=s,this.options=c,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",f.bindMethods(w,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=i,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),(window.SimpleKeyboardInstances[this.currentInstanceName]=this).allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new h({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(i,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}t.default=b}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0);function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("SimpleKeyboard",[],r):"object"==typeof n?n.SimpleKeyboard=r():o.SimpleKeyboard=r()},{}],132:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Build={short:"0.71.5",version:"0.71.5 (f186a9bdfa8ab2ed786f1797c060a314)",buildSeed:1630573154118}},{}],133:[function(e,t,n){"use strict";function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0});var g=e("../dom/keys"),S=e("../dom/pointer"),o=function(){for(var e={},t=0,n=Object.keys(g.namedKeyCodes);t<n.length;t++){var o=n[t];e[g.namedKeyCodes[o]]=o.substr(4,2)}return e}();function _(e,t,n){var o=Math.round(.6*n),r=Math.round(.5*n),i=Math.max(1,Math.round(n/20)),s=T[e.toLowerCase()],a=void 0===s?e:"",c=P("emulator-button-touch-zone"),u=P("emulator-button"),l=P("emulator-button-text",void 0===s?void 0===a||0===a.length?"□":a.substr(0,1).toUpperCase():"");void 0!==s&&(u.style.backgroundImage='url("'+s+'")'),u.style.width=o+"px",u.style.height=o+"px",l.style.fontSize=r+"px",c.widthPx=n-2*i,c.heightPx=n-2*i,c.style.width=c.widthPx+"px",c.style.height=c.heightPx+"px",c.style.borderWidth=i+"px",c.appendChild(u),c.appendChild(l);function d(e){void 0!==t.onDown&&t.onDown(),void 0!==t.onClick&&t.onClick(),e.stopPropagation(),e.preventDefault()}function f(e){void 0!==t.onUp&&t.onUp(),e.stopPropagation(),e.preventDefault()}function p(e){e.stopPropagation(),e.preventDefault()}var h,y={capture:!0},v=O(S.pointer.starters);try{for(v.s();!(h=v.n()).done;){var m=h.value;c.addEventListener(m,d,y)}}catch(e){v.e(e)}finally{v.f()}var g,_=O(S.pointer.enders);try{for(_.s();!(g=_.n()).done;){var b=g.value;c.addEventListener(b,f,y)}}catch(e){_.e(e)}finally{_.f()}var w,x=O(S.pointer.changers);try{for(x.s();!(w=x.n()).done;){var D=w.value;c.addEventListener(D,p,y)}}catch(e){x.e(e)}finally{x.f()}var k,E=O(S.pointer.leavers);try{for(E.s();!(k=E.n()).done;){var j=k.value;c.addEventListener(j,p,y)}}catch(e){E.e(e)}finally{E.f()}var B,K=O(S.pointer.prevents);try{for(K.s();!(B=K.n()).done;){var C=B.value;c.addEventListener(C,p,y)}}catch(e){K.e(e)}finally{K.f()}return c}function P(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n}function b(e){return"number"==typeof e?o[e]:e}function w(e,t){return"click"===e.action?{onClick:function(){return t.fireKeyPress(e.mapTo)}}:{onDown:function(){return t.fireKeyDown(e.mapTo)},onUp:function(){return t.fireKeyUp(e.mapTo)}}}n.createButton=_,n.deprecatedButton=function(o,e,t,n){var r,i=Math.round(n/4),s=[],a=O(t);try{for(a.s();!(r=a.n()).done;){var c=r.value;if(c.mapTo!==g.KBD_NONE){var u=_((c.symbol||b(c.mapTo)).toUpperCase(),w(c,o),n);u.style.position="absolute";var l=c.style;if(l)for(var d=0,f=Object.keys(l);d<f.length;d++){var p=f[d];u.style[p]=l[p]}if(void 0!==c.position){var h=c.position.left,y=c.position.top,v=c.position.bottom,m=c.position.right;void 0!==h&&(u.style.left=i*h+n*(h-1)+"px"),void 0!==m&&(u.style.right=i*m+n*(m-1)+"px"),void 0!==y&&(u.style.top=i*y+n*(y-1)+"px"),void 0!==v&&(u.style.bottom=i*v+n*(v-1)+"px")}o.mouseOverlay.appendChild(u),s.push(u)}}}catch(e){a.e(e)}finally{a.f()}return function(){var e,t=O(s);try{for(t.s();!(e=t.n()).done;){var n=e.value;n.parentElement===o.mouseOverlay&&o.mouseOverlay.removeChild(n)}}catch(e){t.e(e)}finally{t.f()}}};var r="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19,12c-0.3,0-0.5,0.1-0.7,0.3L14,16.6V3c0-0.5-0.4-1-1-1s-1,0.5-1,1v13.6 l-4.3-4.3C7.5,12.1,7.3,12,7,12c-0.5,0-1,0.4-1,1c0,0.3,0.1,0.5,0.3,0.7l6,6c0.2,0.2,0.4,0.3,0.7,0.3s0.5-0.1,0.7-0.3l6-6 c0.2-0.2,0.3-0.4,0.3-0.7C20,12.4,19.5,12,19,12L19,12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",i="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='left_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,9H4.41l4.29-4.29C8.89,4.53,9,4.28,9,4c0-0.55-0.45-1-1-1 C7.72,3,7.47,3.11,7.29,3.29l-6,6C1.11,9.47,1,9.72,1,10c0,0.28,0.11,0.53,0.29,0.71l6,6C7.47,16.89,7.72,17,8,17 c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,11H18c0.55,0,1-0.45,1-1C19,9.45,18.55,9,18,9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",s="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='right_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18.71,9.29l-6-6C12.53,3.11,12.28,3,12,3c-0.55,0-1,0.45-1,1 c0,0.28,0.11,0.53,0.29,0.71L15.59,9H2c-0.55,0-1,0.45-1,1c0,0.55,0.45,1,1,1h13.59l-4.29,4.29C11.11,15.47,11,15.72,11,16 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l6-6C18.89,10.53,19,10.28,19,10C19,9.72,18.89,9.47,18.71,9.29z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",c="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='key_enter_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,2c-0.55,0-1,0.45-1,1v5c0,2.21-1.79,4-4,4H4.41l2.29-2.29 C6.89,9.53,7,9.28,7,9c0-0.55-0.45-1-1-1C5.72,8,5.47,8.11,5.29,8.29l-4,4C1.11,12.47,1,12.72,1,13c0,0.28,0.11,0.53,0.29,0.71 l4,4C5.47,17.89,5.72,18,6,18c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,14H13c3.31,0,6-2.69,6-6V3C19,2.45,18.55,2,18,2 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",T={fullscreen:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='maximize_1_' fill='%23FFFFFF'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M5.99,8.99c-0.28,0-0.53,0.11-0.71,0.29l-3.29,3.29v-1.59c0-0.55-0.45-1-1-1 s-1,0.45-1,1v4c0,0.55,0.45,1,1,1h4c0.55,0,1-0.45,1-1s-0.45-1-1-1H3.41L6.7,10.7c0.18-0.18,0.29-0.43,0.29-0.71 C6.99,9.44,6.54,8.99,5.99,8.99z M14.99-0.01h-4c-0.55,0-1,0.45-1,1s0.45,1,1,1h1.59L9.28,5.29C9.1,5.47,8.99,5.72,8.99,5.99 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l3.29-3.29v1.59c0,0.55,0.45,1,1,1s1-0.45,1-1v-4C15.99,0.44,15.54-0.01,14.99-0.01 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",save:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' fill='%23FFFFFF' xml:space='preserve'%3E%3Cg id='floppy_disk'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M15.71,2.29l-2-2C13.53,0.11,13.28,0,13,0h-1v6H4V0H1C0.45,0,0,0.45,0,1v14 c0,0.55,0.45,1,1,1h14c0.55,0,1-0.45,1-1V3C16,2.72,15.89,2.47,15.71,2.29z M14,15H2V9c0-0.55,0.45-1,1-1h10c0.55,0,1,0.45,1,1V15 z M11,1H9v4h2V1z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E%0A",options:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='cog_2_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M19,8h-2.31c-0.14-0.46-0.33-0.89-0.56-1.3l1.7-1.7c0.39-0.39,0.39-1.02,0-1.41 l-1.41-1.41c-0.39-0.39-1.02-0.39-1.41,0l-1.7,1.7c-0.41-0.22-0.84-0.41-1.3-0.55V1c0-0.55-0.45-1-1-1H9C8.45,0,8,0.45,8,1v2.33 C7.52,3.47,7.06,3.67,6.63,3.91L5,2.28c-0.37-0.37-0.98-0.37-1.36,0L2.28,3.64C1.91,4.02,1.91,4.63,2.28,5l1.62,1.62 C3.66,7.06,3.46,7.51,3.31,8H1C0.45,8,0,8.45,0,9v2c0,0.55,0.45,1,1,1h2.31c0.14,0.46,0.33,0.89,0.56,1.3L2.17,15 c-0.39,0.39-0.39,1.02,0,1.41l1.41,1.41c0.39,0.39,1.02,0.39,1.41,0l1.7-1.7c0.41,0.22,0.84,0.41,1.3,0.55V19c0,0.55,0.45,1,1,1h2 c0.55,0,1-0.45,1-1v-2.33c0.48-0.14,0.94-0.35,1.37-0.59L15,17.72c0.37,0.37,0.98,0.37,1.36,0l1.36-1.36 c0.37-0.37,0.37-0.98,0-1.36l-1.62-1.62c0.24-0.43,0.45-0.89,0.6-1.38H19c0.55,0,1-0.45,1-1V9C20,8.45,19.55,8,19,8z M10,14 c-2.21,0-4-1.79-4-4c0-2.21,1.79-4,4-4s4,1.79,4,4C14,12.21,12.21,14,10,14z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",keyboard:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='manually_entered_data_2_'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' fill-rule='evenodd' clip-rule='evenodd' d='M1,8h3.76l2-2H1C0.45,6,0,6.45,0,7C0,7.55,0.45,8,1,8z M15.49,3.99 C15.8,3.67,16,3.23,16,2.75C16,1.78,15.22,1,14.25,1c-0.48,0-0.92,0.2-1.24,0.51l-1.44,1.44l2.47,2.47L15.49,3.99z M1,4h7.76l2-2 H1C0.45,2,0,2.45,0,3C0,3.55,0.45,4,1,4z M1,10c-0.55,0-1,0.45-1,1c0,0.48,0.35,0.86,0.8,0.96L2.76,10H1z M10.95,3.57l-6.69,6.69 l2.47,2.47l6.69-6.69L10.95,3.57z M15.2,6.04L13.24,8H15c0.55,0,1-0.45,1-1C16,6.52,15.65,6.14,15.2,6.04z M2,15l3.86-1.39 l-2.46-2.44L2,15z M15,10h-3.76l-2,2H15c0.55,0,1-0.45,1-1C16,10.45,15.55,10,15,10z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",up:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19.7,8.3l-6-6C13.5,2.1,13.3,2,13,2s-0.5,0.1-0.7,0.3l-6,6C6.1,8.5,6,8.7,6,9 c0,0.6,0.5,1,1,1c0.3,0,0.5-0.1,0.7-0.3L12,5.4V19c0,0.5,0.4,1,1,1s1-0.5,1-1V5.4l4.3,4.3C18.5,9.9,18.7,10,19,10c0.5,0,1-0.4,1-1 C20,8.7,19.9,8.5,19.7,8.3L19.7,8.3z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",down:r,do:r,dw:r,dwn:r,left:i,le:i,lft:i,right:s,ri:s,rght:s,rgh:s,enter:c,en:c,enr:c,ent:c,entr:c}},{"../dom/keys":144,"../dom/pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],134:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}Object.defineProperty(n,"__esModule",{value:!0}),n.getGrid=function(e){switch(e){case"square":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=0;h<n;++h)p.push({centerX:h<r?s+l*(h+.5):e-s-l*(n-h-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"square",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}());case"honeycomb":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=f%2==0?n:n-1,y=f%2==0?0:l/2,v=0;v<h;++v)p.push({centerX:v<r?y+s+l*(v+.5):y+e-s-l*(n-v-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"honeycomb",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}())}throw new Error("Unknown grid type "+e)}},{}],135:[function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),Object.defineProperty(n,"__esModule",{value:!0}),n.keyboard=function(e,t,n){var o=n||{};function r(e){return void 0!==o[e]?o[e]:e}return e.setOnKeyDown(function(e){t.sendKeyEvent(r(e),!0)}),e.setOnKeyUp(function(e){t.sendKeyEvent(r(e),!1)}),e.setOnKeyPress(function(e){t.simulateKeyPress(r(e))}),e.setOnKeysPress(function(e){t.simulateKeyPress.apply(t,i(e))}),function(){e.setOnKeyDown(function(e){}),e.setOnKeyUp(function(e){}),e.setOnKeyPress(function(e){}),e.setOnKeysPress(function(e){})}}},{"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],136:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.extractLayersConfig=function(e){return void 0!==e.layersConfig?e.layersConfig:void 0!==e.layers?e.layers:null}},{}],137:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var m=e("./grid"),g=e("./button"),_=e("./keyboard"),b=e("./mouse"),v=e("./options"),S=e("../dom/pointer"),P=e("nipplejs");n.initLayersControl=function(e,t,n,o,r){var d,f,p,h,i,s,y,a=t.layers[0];if(void 0!==r){var c,u=O(t.layers);try{for(u.s();!(c=u.n()).done;){var l=c.value;if(l.title===r){a=l;break}}}catch(e){u.e(e)}finally{u.f()}}return d=a,f=e,p=n,h=o,i=_.keyboard(f,p),s=b.mouse(f,p),y=[],f.addOnResize(v),v(f.width,f.height),function(){f.removeOnResize(v),i(),s();var e,t=O(y);try{for(t.s();!(e=t.n()).done;)(0,e.value)()}catch(e){t.e(e)}finally{t.f()}};function v(e,t){var n,o=O(y);try{for(o.s();!(n=o.n()).done;){(0,n.value)()}}catch(e){o.e(e)}finally{o.f()}y.splice(0,y.length);var r,i=m.getGrid(d.grid).getConfiguration(e,t),s=new w,a=O(d.controls);try{for(a.s();!(r=a.n()).done;){var c=r.value,u=x[c.type];if(void 0!==u){var l=u(c,f,p,i,s,h);y.push(l)}else console.error("Factory for control '"+c.type+"' is not defined")}}catch(e){a.e(e)}finally{a.f()}}};var w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sensors={}}var t,n,o;return t=e,(n=[{key:"activate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.activate()}},{key:"deactivate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.deactivate()}},{key:"register",value:function(e,t,n){this.sensors[t+"_"+e]=n}}])&&r(t.prototype,n),o&&r(t,o),e}(),x={Key:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){return n.sendKeyEvent(e.mapTo,!0)},onUp:function(){return n.sendKeyEvent(e.mapTo,!1)}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:p.onUp}),t.mouseOverlay.appendChild(h),function(){return t.mouseOverlay.removeChild(h)}},Options:function(e,t,n,o,r,i){if(void 0!==t.options.optionControls&&1===t.options.optionControls.length&&"keyboard"===t.options.optionControls[0])return D(e,t,0,o);var s=o.cells,a=o.columnWidth,c=o.rowHeight,u=e.row,l=e.column,d=s[u][l],f=d.centerX,p=d.centerY-c/2,h=f-a/2,y=o.width-h-a;return v.options(t,["default"],function(){},a,p,y)},Keyboard:D,Switch:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=g.createButton(e.symbol,{onUp:function(){return i.setLayersConfig(i.getLayersConfig(),e.layerName)}},a);return p.style.position="absolute",p.style.left=d-p.widthPx/2+"px",p.style.top=f-p.heightPx/2+"px",t.mouseOverlay.appendChild(p),function(){t.mouseOverlay.removeChild(p)}},ScreenMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=.5,h=.5;0<=e.direction.indexOf("up")&&(h=0);0<=e.direction.indexOf("down")&&(h=1);0<=e.direction.indexOf("left")&&(p=0);0<=e.direction.indexOf("right")&&(p=1);var y={onDown:function(){n.sendMouseMotion(p,h)},onUp:function(){n.sendMouseMotion(.5,.5)}},v=g.createButton(e.symbol,y,a);return v.style.position="absolute",v.style.left=d-v.widthPx/2+"px",v.style.top=f-v.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(v),function(){t.mouseOverlay.removeChild(v)}},PointerButton:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.click,d=s[c][u],f=d.centerX,p=d.centerY,h={onDown:function(){l?n.sendMouseButton(e.button,!0):t.pointerButton=e.button},onUp:function(){l?n.sendMouseButton(e.button,!1):t.pointerButton=0}},y=g.createButton(e.symbol,h,a);return y.style.position="absolute",y.style.left=f-y.widthPx/2+"px",y.style.top=p-y.heightPx/2+"px",r.register(c,u,{activate:h.onDown,deactivate:h.onUp}),t.mouseOverlay.appendChild(y),function(){t.mouseOverlay.removeChild(y)}},PointerMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.x,d=e.y,f=s[c][u],p=f.centerX,h=f.centerY,y={onDown:function(){n.sendMouseMotion(l,d)},onUp:function(){n.sendMouseMotion(l,d)}},v=g.createButton(e.symbol,y,a);return v.style.position="absolute",v.style.left=p-v.widthPx/2+"px",v.style.top=h-v.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(v),function(){t.mouseOverlay.removeChild(v)}},PointerReset:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){n.sendMouseSync()}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},PointerToggle:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){t.pointerDisabled=!t.pointerDisabled,t.pointerDisabled?h.classList.contains("emulator-button-highlight")||h.classList.add("emulator-button-highlight"):h.classList.remove("emulator-button-highlight")}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},NippleActivator:function(e,o,t,n,s,r){var i=n.cells,a=n.columnWidth,c=n.rowHeight,u=n.width,l=n.height,d=e.row,f=e.column,p=i[d][f],h=p.centerX,y=p.centerY,v=document.createElement("div"),m=Math.max(0,h-1.5*a),g=Math.max(0,y-1.5*c),_=Math.max(0,u-h-1.5*a),b=Math.max(0,l-y-1.5*c);v.style.position="absolute",v.style.zIndex="999",v.style.left=m+"px",v.style.top=g+"px",v.style.right=_+"px",v.style.bottom=b+"px",o.mouseOverlay.appendChild(v);var w=P.create({zone:v,multitouch:!1,maxNumberOfNipples:1,mode:"static",follow:!1,dynamicPage:!0,size:1.5*Math.max(a,c),position:{left:(u-_-m)/2+"px",top:(l-b-g)/2+"px"}}),x=-1,D=-1;w.on("move",function(e,t){if(t.distance<10)return s.deactivate(D,x),void(D=x=-1);var n=-1,o=-1,r=22.5,i=t.angle.degree;o=r<i&&i<=67.5?(n=f+1,d-1):67.5<i&&i<=112.5?(n=f,d-1):112.5<i&&i<=157.5?(n=f-1,d-1):157.5<i&&i<=202.5?(n=f-1,d):202.5<i&&i<=247.5?(n=f-1,d+1):247.5<i&&i<=292.5?(n=f,d+1):292.5<i&&i<=337.5?(n=f+1,d+1):(n=f+1,d),x===n&&D===o||(s.deactivate(D,x),s.activate(o,n),x=n,D=o)});var k=!1;w.on("start",function(){k=!0}),w.on("end",function(){k=!1,s.deactivate(D,x),x=D=-1});var E={capture:!0};function j(e){k&&(k=!1,w.processOnEnd(e),e.stopPropagation())}var B,K=O(S.pointer.enders);try{for(K.s();!(B=K.n()).done;){var C=B.value;o.mouseOverlay.addEventListener(C,j,E)}}catch(e){K.e(e)}finally{K.f()}return function(){w.destroy(),o.mouseOverlay.removeChild(v);var e,t=O(S.pointer.enders);try{for(t.s();!(e=t.n()).done;){var n=e.value;o.mouseOverlay.removeEventListener(n,j,E)}}catch(e){t.e(e)}finally{t.f()}}}};function D(e,t,n,o,r,i){function s(e){e?h.children[0].classList.add("emulator-control-close-icon"):h.children[0].classList.remove("emulator-control-close-icon")}var a=o.cells,c=o.columnWidth,u=e.row,l=e.column,d=a[u][l],f=d.centerX,p=d.centerY,h=g.createButton("keyboard",{onUp:function(){return t.toggleKeyboard()}},c);return t.setOnKeyboardVisibility(s),h.style.position="absolute",h.style.left=f-h.widthPx/2+"px",h.style.top=p-h.heightPx/2+"px",t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h),t.removeOnKeyboardVisibility(s)}}},{"../dom/pointer":147,"./button":133,"./grid":134,"./keyboard":135,"./mouse":139,"./options":142,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,nipplejs:128}],138:[function(e,t,n){"use strict";e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0});var a=e("./button"),c=e("./mouse"),u=e("./nipple"),l=e("./options"),d=e("./keyboard");n.initLegacyLayersControl=function(n,o,r){function e(e){i.keyboard(),i.mouse(),i.gestures(),i.buttons(),i.keyboard=function(){},i.mouse=function(){},i.gestures=function(){},i.buttons=function(){};var t=o[e];void 0!==t&&(i.keyboard=d.keyboard(n,r,t.mapper),void 0!==t.gestures&&0<t.gestures.length?i.gestures=u.nipple(n,r,t.gestures):i.mouse=c.mouse(n,r),void 0!==t.buttons&&t.buttons.length&&(i.buttons=a.deprecatedButton(n,r,t.buttons,54)))}var t=Object.keys(o),i={keyboard:function(){},mouse:function(){},gestures:function(){},buttons:function(){}},s=l.options(n,t,e,54,13.5,0);return e("default"),function(){i.gestures(),i.buttons(),i.mouse(),i.keyboard(),s()}}},{"./button":133,"./keyboard":135,"./mouse":139,"./nipple":140,"./options":142,"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/web.dom.iterable":116}],139:[function(e,t,n){"use strict";function C(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var O=e("../dom/pointer");n.mouse=function(p,h){var r=!1;O.pointer.canLock&&h.config().then(function(e){var t,n,o;return r=!0===(null===(t=e.output)||void 0===t||null===(n=t.options)||void 0===n||null===(o=n.autolock)||void 0===o?void 0:o.value)}).catch(console.error);var y=.01;function i(e,t){var n=h.width(),o=h.height(),r=p.width,i=p.height,s=n/o,a=r,c=r/s;i<c&&(a=(c=i)*s);var u=(i-c)/2,l=(r-a)/2,d=Math.max(0,Math.min(1,(e-l)/a)),f=Math.max(0,Math.min(1,(t-u)/c));return d<=y&&(d=0),1-y<=d&&(d=1),f<=y&&(f=0),1-y<=f&&(f=1),{x:d,y:f}}function s(){return document.pointerLockElement!==v}var v=p.mouseOverlay;function m(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);n=t.button||p.pointerButton,function(e,t,n){if(r&&s()&&(v.requestPointerLock||v.mozRequestPointerLock||v.webkitRequestPointerLock).call(v),s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!0)}(t.x,t.y,n),e.stopPropagation()}}function g(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);!function(e,t,n,o){if(s()){var r=i(e,t);h.sendMouseMotion(r.x,r.y)}else h.sendMouseRelativeMotion(n,o)}(t.x,t.y,t.mX,t.mY),e.stopPropagation()}}function _(e){if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);!function(e,t,n){if(s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!1)}(t.x,t.y,n),e.stopPropagation()}}function b(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t,n,o,r=O.getPointerState(e,v);t=r.x,n=r.y,o=i(t,n),h.sendMouseMotion(o.x,o.y),e.stopPropagation()}}function w(e){e.stopPropagation()}var e,n=0,x={capture:!1},t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var o=e.value;v.addEventListener(o,m,x)}}catch(e){t.e(e)}finally{t.f()}var a,c=C(O.pointer.changers);try{for(c.s();!(a=c.n()).done;){var u=a.value;v.addEventListener(u,g,x)}}catch(e){c.e(e)}finally{c.f()}var l,d=C(O.pointer.enders);try{for(d.s();!(l=d.n()).done;){var f=l.value;v.addEventListener(f,_,x)}}catch(e){d.e(e)}finally{d.f()}var D,k=C(O.pointer.prevents);try{for(k.s();!(D=k.n()).done;){var E=D.value;v.addEventListener(E,w,x)}}catch(e){k.e(e)}finally{k.f()}var j,B=C(O.pointer.leavers);try{for(B.s();!(j=B.n()).done;){var K=j.value;v.addEventListener(K,b,x)}}catch(e){B.e(e)}finally{B.f()}return function(){var e,t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var n=e.value;v.removeEventListener(n,m,x)}}catch(e){t.e(e)}finally{t.f()}var o,r=C(O.pointer.changers);try{for(r.s();!(o=r.n()).done;){var i=o.value;v.removeEventListener(i,g,x)}}catch(e){r.e(e)}finally{r.f()}var s,a=C(O.pointer.enders);try{for(a.s();!(s=a.n()).done;){var c=s.value;v.removeEventListener(c,_,x)}}catch(e){a.e(e)}finally{a.f()}var u,l=C(O.pointer.prevents);try{for(l.s();!(u=l.n()).done;){var d=u.value;v.removeEventListener(d,w,x)}}catch(e){l.e(e)}finally{l.f()}var f,p=C(O.pointer.leavers);try{for(p.s();!(f=p.n()).done;){var h=f.value;v.removeEventListener(h,b,x)}}catch(e){p.e(e)}finally{p.f()}}}},{"../dom/pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],140:[function(e,t,n){"use strict";function p(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var h=e("nipplejs"),y=e("../dom/keys");n.nipple=function(n,e,t){function o(){-1!==s&&(n.fireKeyUp(s),s=-1)}var r,i=h.create({zone:n.mouseOverlay,multitouch:!0,maxNumberOfNipples:2}),s=-1,a={},c={},u={},l=p(t);try{var d=function(){var t=r.value;"end:release"===t.event?a[t.joystickId]=!0:t.mapTo!==y.KBD_NONE&&("tap"===t.event?c[t.joystickId]=t.mapTo:i.on(t.event,function(){var e;u[t.joystickId]=Date.now(),o(),e=t.mapTo,n.fireKeyDown(e),s=e}))};for(l.s();!(r=l.n()).done;)d()}catch(e){l.e(e)}finally{l.f()}var f={};return i.on("start",function(){var e=i.ids.length-1;f[e]=Date.now()}),i.on("end",function(){var e=i.ids.length-1,t=Date.now()-f[e];!0===a[e]&&o(),c[e]&&t<500&&u[e]<f[e]&&n.fireKeyPress(c[e])}),function(){return i.destroy()}}},{"../dom/keys":144,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,nipplejs:128}],141:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("./keyboard"),s=e("./mouse"),a=e("./options");n.initNullLayersControl=function(e,t){var n=i.keyboard(e,t),o=s.mouse(e,t),r=a.options(e,["default"],function(){},54,13.5,0);return function(){n(),o(),r()}}},{"./keyboard":135,"./mouse":139,"./options":142}],142:[function(e,t,n){"use strict";function w(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var x=e("./button"),D=e("../dom/helpers");n.options=function(e,t,n,o,r,i){function s(){var e,t=l?"flex":"none",n=w(f);try{for(n.s();!(e=n.n()).done;){var o=e.value;o!=p&&(o.style.display=t)}}catch(e){n.e(e)}finally{n.f()}}function a(){!(l=!l)&&d&&e.toggleKeyboard(),s()}function c(e){(d=e)?y.classList.add("emulator-control-close-icon"):y.classList.remove("emulator-control-close-icon")}var u=Math.round(o/4),l=!1,d=!1,f=[function(e,n){if(e.length<=1)return document.createElement("div");var t=document.createElement("select");t.classList.add("emulator-control-select");var o,r=w(e);try{for(r.s();!(o=r.n()).done;){var i=o.value,s=document.createElement("option");s.value=i,s.innerHTML=i,t.appendChild(s)}}catch(e){r.e(e)}finally{r.f()}return t.onchange=function(e){var t=e.target.value;n(t)},D.stopPropagation(t,!1),t}(t,n),x.createButton("keyboard",{onClick:function(){e.toggleKeyboard(),l&&!d&&(l=!1,s())}},o),x.createButton("save",{onClick:function(){e.save(),l&&a()}},o),x.createButton("fullscreen",{onClick:function(){e.toggleFullscreen(),l&&a()}},o),x.createButton("options",{onClick:a},o)],p=f[f.length-1],h=f[f.length-2].children[0],y=f[f.length-4].children[0];e.setOnKeyboardVisibility(c),c(e.keyboardVisible),e.setOnFullscreen(function(e){e?h.classList.contains("emulator-control-exit-fullscreen-icon")||h.classList.add("emulator-control-exit-fullscreen-icon"):h.classList.remove("emulator-control-exit-fullscreen-icon")}),e.fullscreen&&h.classList.add("emulator-control-exit-fullscreen-icon");for(var v=D.createDiv("emulator-options"),m=d?"flex":"none",g=0,_=f;g<_.length;g++){var b=_[g];b!==p&&b.classList.add("emulator-button-control"),b.style.marginRight=u+"px",b.style.marginBottom=u+"px",b!==p&&(b.style.display=m),v.appendChild(b)}return v.style.position="absolute",v.style.right=i+"px",v.style.top=r+"px",e.mouseOverlay.appendChild(v),function(){e.mouseOverlay.removeChild(v),e.setOnFullscreen(function(){}),e.removeOnKeyboardVisibility(c)}}},{"../dom/helpers":143,"./button":133,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],143:[function(e,t,n){"use strict";function h(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var y=e("./pointer");n.createDiv=function(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n},n.stopPropagation=function(e){function t(e){e.stopPropagation()}function n(e){e.stopPropagation(),r&&e.preventDefault()}var o,r=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],i={capture:!1},s=h(y.pointer.starters);try{for(s.s();!(o=s.n()).done;){var a=o.value;e.addEventListener(a,t,i)}}catch(e){s.e(e)}finally{s.f()}var c,u=h(y.pointer.enders);try{for(u.s();!(c=u.n()).done;){var l=c.value;e.addEventListener(l,t,i)}}catch(e){u.e(e)}finally{u.f()}var d,f=h(y.pointer.prevents);try{for(f.s();!(d=f.n()).done;){var p=d.value;e.addEventListener(p,n,i)}}catch(e){f.e(e)}finally{f.f()}}},{"./pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],144:[function(e,t,n){"use strict";e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0}),n.KBD_NONE=0,n.KBD_0=48,n.KBD_1=49,n.KBD_2=50,n.KBD_3=51,n.KBD_4=52,n.KBD_5=53,n.KBD_6=54,n.KBD_7=55,n.KBD_8=56,n.KBD_9=57,n.KBD_a=65,n.KBD_b=66,n.KBD_c=67,n.KBD_d=68,n.KBD_e=69,n.KBD_f=70,n.KBD_g=71,n.KBD_h=72,n.KBD_i=73,n.KBD_j=74,n.KBD_k=75,n.KBD_l=76,n.KBD_m=77,n.KBD_n=78,n.KBD_o=79,n.KBD_p=80,n.KBD_q=81,n.KBD_r=82,n.KBD_s=83,n.KBD_t=84,n.KBD_u=85,n.KBD_v=86,n.KBD_w=87,n.KBD_x=88,n.KBD_y=89,n.KBD_z=90,n.KBD_f1=290,n.KBD_f2=291,n.KBD_f3=292,n.KBD_f4=293,n.KBD_f5=294,n.KBD_f6=295,n.KBD_f7=296,n.KBD_f8=297,n.KBD_f9=298,n.KBD_f10=299,n.KBD_f11=300,n.KBD_f12=301,n.KBD_kp0=320,n.KBD_kp1=321,n.KBD_kp2=322,n.KBD_kp3=323,n.KBD_kp4=324,n.KBD_kp5=325,n.KBD_kp6=326,n.KBD_kp7=327,n.KBD_kp8=328,n.KBD_kp9=329,n.KBD_kpperiod=330,n.KBD_kpdivide=331,n.KBD_kpmultiply=332,n.KBD_kpminus=333,n.KBD_kpplus=334,n.KBD_kpenter=335,n.KBD_esc=256,n.KBD_tab=258,n.KBD_backspace=259,n.KBD_enter=257,n.KBD_space=32,n.KBD_leftalt=342,n.KBD_rightalt=346,n.KBD_leftctrl=341,n.KBD_rightctrl=345,n.KBD_leftshift=340,n.KBD_rightshift=344,n.KBD_capslock=280,n.KBD_scrolllock=281,n.KBD_numlock=282,n.KBD_grave=96,n.KBD_minus=45,n.KBD_equals=61,n.KBD_backslash=92,n.KBD_leftbracket=91,n.KBD_rightbracket=93,n.KBD_semicolon=59,n.KBD_quote=39,n.KBD_period=46,n.KBD_comma=44,n.KBD_slash=47,n.KBD_printscreen=283,n.KBD_pause=284,n.KBD_insert=260,n.KBD_home=268,n.KBD_pageup=266,n.KBD_delete=261,n.KBD_end=269,n.KBD_pagedown=267,n.KBD_left=263,n.KBD_up=265,n.KBD_down=264,n.KBD_right=262,n.KBD_extra_lt_gt=348,n.domToKeyCodes={8:n.KBD_backspace,9:n.KBD_tab,13:n.KBD_enter,16:n.KBD_leftshift,17:n.KBD_leftctrl,18:n.KBD_leftalt,19:n.KBD_pause,27:n.KBD_esc,32:n.KBD_space,33:n.KBD_pageup,34:n.KBD_pagedown,35:n.KBD_end,36:n.KBD_home,37:n.KBD_left,38:n.KBD_up,39:n.KBD_right,40:n.KBD_down,45:n.KBD_insert,46:n.KBD_delete,48:n.KBD_0,49:n.KBD_1,50:n.KBD_2,51:n.KBD_3,52:n.KBD_4,53:n.KBD_5,54:n.KBD_6,55:n.KBD_7,56:n.KBD_8,57:n.KBD_9,59:n.KBD_semicolon,64:n.KBD_equals,65:n.KBD_a,66:n.KBD_b,67:n.KBD_c,68:n.KBD_d,69:n.KBD_e,70:n.KBD_f,71:n.KBD_g,72:n.KBD_h,73:n.KBD_i,74:n.KBD_j,75:n.KBD_k,76:n.KBD_l,77:n.KBD_m,78:n.KBD_n,79:n.KBD_o,80:n.KBD_p,81:n.KBD_q,82:n.KBD_r,83:n.KBD_s,84:n.KBD_t,85:n.KBD_u,86:n.KBD_v,87:n.KBD_w,88:n.KBD_x,89:n.KBD_y,90:n.KBD_z,91:n.KBD_leftbracket,93:n.KBD_rightbracket,96:n.KBD_kp0,97:n.KBD_kp1,98:n.KBD_kp2,99:n.KBD_kp3,100:n.KBD_kp4,101:n.KBD_kp5,102:n.KBD_kp6,103:n.KBD_kp7,104:n.KBD_kp8,105:n.KBD_kp9,111:n.KBD_kpdivide,112:n.KBD_f1,113:n.KBD_f2,114:n.KBD_f3,115:n.KBD_f4,116:n.KBD_f5,117:n.KBD_f6,118:n.KBD_f7,119:n.KBD_f8,120:n.KBD_f9,121:n.KBD_f10,122:n.KBD_f11,123:n.KBD_f12,144:n.KBD_numlock,145:n.KBD_scrolllock,173:n.KBD_minus,186:n.KBD_semicolon,187:n.KBD_equals,188:n.KBD_comma,189:n.KBD_minus,190:n.KBD_period,191:n.KBD_slash,219:n.KBD_leftbracket,220:n.KBD_backslash,221:n.KBD_rightbracket},n.namedKeyCodes={KBD_NONE:n.KBD_NONE,KBD_0:n.KBD_0,KBD_1:n.KBD_1,KBD_2:n.KBD_2,KBD_3:n.KBD_3,KBD_4:n.KBD_4,KBD_5:n.KBD_5,KBD_6:n.KBD_6,KBD_7:n.KBD_7,KBD_8:n.KBD_8,KBD_9:n.KBD_9,KBD_a:n.KBD_a,KBD_b:n.KBD_b,KBD_c:n.KBD_c,KBD_d:n.KBD_d,KBD_e:n.KBD_e,KBD_f:n.KBD_f,KBD_g:n.KBD_g,KBD_h:n.KBD_h,KBD_i:n.KBD_i,KBD_j:n.KBD_j,KBD_k:n.KBD_k,KBD_l:n.KBD_l,KBD_m:n.KBD_m,KBD_n:n.KBD_n,KBD_o:n.KBD_o,KBD_p:n.KBD_p,KBD_q:n.KBD_q,KBD_r:n.KBD_r,KBD_s:n.KBD_s,KBD_t:n.KBD_t,KBD_u:n.KBD_u,KBD_v:n.KBD_v,KBD_w:n.KBD_w,KBD_x:n.KBD_x,KBD_y:n.KBD_y,KBD_z:n.KBD_z,KBD_f1:n.KBD_f1,KBD_f2:n.KBD_f2,KBD_f3:n.KBD_f3,KBD_f4:n.KBD_f4,KBD_f5:n.KBD_f5,KBD_f6:n.KBD_f6,KBD_f7:n.KBD_f7,KBD_f8:n.KBD_f8,KBD_f9:n.KBD_f9,KBD_f10:n.KBD_f10,KBD_f11:n.KBD_f11,KBD_f12:n.KBD_f12,KBD_kp0:n.KBD_kp0,KBD_kp1:n.KBD_kp1,KBD_kp2:n.KBD_kp2,KBD_kp3:n.KBD_kp3,KBD_kp4:n.KBD_kp4,KBD_kp5:n.KBD_kp5,KBD_kp6:n.KBD_kp6,KBD_kp7:n.KBD_kp7,KBD_kp8:n.KBD_kp8,KBD_kp9:n.KBD_kp9,KBD_kpperiod:n.KBD_kpperiod,KBD_kpdivide:n.KBD_kpdivide,KBD_kpmultiply:n.KBD_kpmultiply,KBD_kpminus:n.KBD_kpminus,KBD_kpplus:n.KBD_kpplus,KBD_kpenter:n.KBD_kpenter,KBD_esc:n.KBD_esc,KBD_tab:n.KBD_tab,KBD_backspace:n.KBD_backspace,KBD_enter:n.KBD_enter,KBD_space:n.KBD_space,KBD_leftalt:n.KBD_leftalt,KBD_rightalt:n.KBD_rightalt,KBD_leftctrl:n.KBD_leftctrl,KBD_rightctrl:n.KBD_rightctrl,KBD_leftshift:n.KBD_leftshift,KBD_rightshift:n.KBD_rightshift,KBD_capslock:n.KBD_capslock,KBD_scrolllock:n.KBD_scrolllock,KBD_numlock:n.KBD_numlock,KBD_grave:n.KBD_grave,KBD_minus:n.KBD_minus,KBD_equals:n.KBD_equals,KBD_backslash:n.KBD_backslash,KBD_leftbracket:n.KBD_leftbracket,KBD_rightbracket:n.KBD_rightbracket,KBD_semicolon:n.KBD_semicolon,KBD_quote:n.KBD_quote,KBD_period:n.KBD_period,KBD_comma:n.KBD_comma,KBD_slash:n.KBD_slash,KBD_printscreen:n.KBD_printscreen,KBD_pause:n.KBD_pause,KBD_insert:n.KBD_insert,KBD_home:n.KBD_home,KBD_pageup:n.KBD_pageup,KBD_delete:n.KBD_delete,KBD_end:n.KBD_end,KBD_pagedown:n.KBD_pagedown,KBD_left:n.KBD_left,KBD_up:n.KBD_up,KBD_down:n.KBD_down,KBD_right:n.KBD_right,KBD_extra_lt_gt:n.KBD_extra_lt_gt},n.keyCodesToDom={};for(var o=0,r=Object.keys(n.domToKeyCodes);o<r.length;o++){var i=r[o],s=Number.parseInt(i,10);n.keyCodesToDom[n.domToKeyCodes[s]]=s}n.domToKeyCode=function(e){return n.domToKeyCodes[e]||0}},{"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.number.constructor":101,"core-js/modules/es6.number.parse-int":102,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/web.dom.iterable":116}],145:[function(e,t,n){"use strict";function c(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var i=e("notyf"),u=o(e("simple-keyboard")),l=e("./helpers"),d=e("./keys"),s=e("element-resize-detector")({});n.layers=function(e,t){return new f(e,t||{})};var f=function(){function t(o,e){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.fullscreen=!1,this.keyboardVisible=!1,this.pointerLock=!1,this.pointerDisabled=!1,this.pointerButton=0,this.notyf=new i.Notyf,this.toggleKeyboard=function(){return!1},this.onFullscreenChanged=[],this.onKeyboardChanged=[],this.options=e,this.root=o,this.root.classList.add("emulator-root"),this.fullscreenElement=e.fullscreenElement||this.root,this.canvas=document.createElement("canvas"),this.canvas.className="emulator-canvas",this.video=document.createElement("video"),this.video.setAttribute("autoplay",""),this.video.setAttribute("playsinline",""),this.video.className="emulator-video",this.loading=l.createDiv("emulator-loading","\n<div class='emulator-loading-inner'>\n<pre class='emulator-loading-pre-1'>\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n</pre>\n<pre class='emulator-loading-pre-2'>\n</pre>\n<div class='emulator-loader'>\n</div>\n</div>\n"),this.loaderText=this.loading.querySelector(".emulator-loading-pre-2"),this.mouseOverlay=l.createDiv("emulator-mouse-overlay",""),this.clickToStart=l.createDiv("emulator-click-to-start-overlay",'\n<div class="emulator-click-to-start-text">Press to start</div>\n<div class="emulator-click-to-start-icon"></div>\n'),this.clickToStart.onclick=function(){r.clickToStart.style.display="none",r.video.play()},this.root.appendChild(this.canvas),this.root.appendChild(this.video),this.root.appendChild(this.mouseOverlay),this.root.appendChild(this.clickToStart),this.root.appendChild(this.loading),this.width=o.offsetWidth,this.height=o.offsetHeight,this.onResize=[],this.onKeyDown=function(){},this.onKeyUp=function(){},this.onKeyPress=function(){},this.onKeysPress=function(){},this.onSave=function(){return Promise.reject(new Error("Not implemented"))},this.onSaveStarted=function(){},this.onSaveEnded=function(){},s.listenTo(this.root,function(e){if(e===o){r.width=e.offsetWidth,r.height=e.offsetHeight;var t,n=c(r.onResize);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r.width,r.height)}}catch(e){n.e(e)}finally{n.f()}}}),this.initKeyEvents(),this.initKeyboard(),this.preventContextMenu(),this.fullscreenElement.onfullscreenchange=function(){if(document.fullscreenElement!==r.fullscreenElement){r.fullscreen=!1;var e,t=c(r.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(r.fullscreen)}}catch(e){t.e(e)}finally{t.f()}}}}var e,n,o;return e=t,(n=[{key:"initKeyEvents",value:function(){var n=this;window.addEventListener("keydown",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyDown(t)}),window.addEventListener("keyup",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyUp(t)})}},{key:"preventContextMenu",value:function(){this.root.addEventListener("contextmenu",function(e){return e.stopPropagation(),e.preventDefault(),!1})}},{key:"addOnResize",value:function(e){this.onResize.push(e)}},{key:"removeOnResize",value:function(t){this.onResize=this.onResize.filter(function(e){return e!==t})}},{key:"setOnKeyDown",value:function(e){this.onKeyDown=e}},{key:"fireKeyDown",value:function(e){this.onKeyDown(e)}},{key:"setOnKeyUp",value:function(e){this.onKeyUp=e}},{key:"fireKeyUp",value:function(e){this.onKeyUp(e)}},{key:"setOnKeyPress",value:function(e){this.onKeyPress=e}},{key:"fireKeyPress",value:function(e){this.onKeyPress(e)}},{key:"setOnKeysPress",value:function(e){this.onKeysPress=e}},{key:"fireKeysPress",value:function(e){this.onKeysPress(e)}},{key:"toggleFullscreen",value:function(){if(this.fullscreen){this.fullscreen=!1,this.fullscreenElement.classList.contains("emulator-fullscreen-workaround")?this.fullscreenElement.classList.remove("emulator-fullscreen-workaround"):document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen&&document.msExitFullscreen();var e,t=c(this.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(!1)}}catch(e){t.e(e)}finally{t.f()}}else{this.fullscreen=!0;var n=this.fullscreenElement;n.requestFullscreen?n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen():n.mozRequestFullScreen?n.mozRequestFullScreen():n.msRequestFullscreen?n.msRequestFullscreen():n.webkitEnterFullscreen?n.webkitEnterFullscreen():this.fullscreenElement.classList.add("emulator-fullscreen-workaround");var o,r=c(this.onFullscreenChanged);try{for(r.s();!(o=r.n()).done;){(0,o.value)(!0)}}catch(e){r.e(e)}finally{r.f()}}}},{key:"setOnFullscreen",value:function(e){this.onFullscreenChanged.push(e)}},{key:"removeOnFullscreen",value:function(t){this.onFullscreenChanged=this.onFullscreenChanged.filter(function(e){return e!==t})}},{key:"setOnKeyboardVisibility",value:function(e){this.onKeyboardChanged.push(e)}},{key:"removeOnKeyboardVisibility",value:function(t){this.onKeyboardChanged=this.onKeyboardChanged.filter(function(e){return e!==t})}},{key:"save",value:function(){var t=this;return this.onSaveStarted(),this.onSave().then(function(){t.notyf.success("Saved"),t.onSaveEnded()}).catch(function(e){t.notyf.error(e.message),t.onSaveEnded()})}},{key:"setOnSave",value:function(e){this.onSave=e}},{key:"setOnSaveStarted",value:function(e){this.onSaveStarted=e}},{key:"setOnSaveEnded",value:function(e){this.onSaveEnded=e}},{key:"hideLoadingLayer",value:function(){this.loading.style.visibility="hidden"}},{key:"showLoadingLayer",value:function(){this.loading.style.visibility="visible"}},{key:"setLoadingMessage",value:function(e){this.loaderText.innerHTML=e}},{key:"switchToVideo",value:function(){this.video.style.display="block",this.canvas.style.display="none"}},{key:"showClickToStart",value:function(){this.clickToStart.style.display="flex"}},{key:"initKeyboard",value:function(){var o=this,r=!1,n=[{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space"},{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space",q:"й",w:"ц",e:"у",r:"к",t:"е",y:"н",u:"г",i:"ш",o:"щ",p:"з","{":"х","}":"ъ",a:"ф",s:"ы",d:"в",f:"а",g:"п",h:"р",j:"о",k:"л",l:"д",";":"ж","'":"э",z:"я",x:"ч",c:"с",v:"м",b:"и",n:"т",m:"ь",",":"б",".":"ю"}],i=0,s=this.options.keyboardDiv||l.createDiv("");s.classList.add("emulator-keyboard"),s.style.display="none",l.stopPropagation(s);var a=new u.default(s,{layout:{en:["{esc} ` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","q w e r t y u i o p { } \\","a s d f g h j k l ; ' [ {enter}","⎘ z x c v b n m , . / ] {space}"]},layoutName:"en",display:n[i],onKeyPress:function(e){if("⎘"===e)return i=(i+1)%n.length,void a.setOptions({display:n[i]});var t=function(e){{if(1<e.length)return"{enter}"===e?[d.KBD_enter]:"{shift}"===e?[d.KBD_leftshift]:"{bksp}"===e?[d.KBD_backspace]:"{lock}"===e?[d.KBD_capslock]:"{tab}"===e?[d.KBD_tab]:"{space}"===e?[d.KBD_space]:"{esc}"===e?[d.KBD_esc]:"ctrl"===e?[d.KBD_leftctrl]:"{alt}"===e?[d.KBD_leftalt]:(console.warn("Unknown button",e),[]);if(","===e)return[d.KBD_comma];if("."===e)return[d.KBD_period];if("'"===e)return[d.KBD_quote];if(":"===e)return[d.KBD_semicolon];if("{"===e)return[d.KBD_leftshift,d.KBD_leftbracket];if("}"===e)return[d.KBD_leftshift,d.KBD_rightbracket]}var t=d.domToKeyCode(e.toUpperCase().charCodeAt(0));return 0!==t?[t]:[]}(e);1===t.length?o.fireKeyPress(t[0]):0<t.length&&o.fireKeysPress(t)},preventMouseDownDefault:!0,preventMouseUpDefault:!0,stopMouseDownPropagation:!0,stopMouseUpPropagation:!0,autoUseTouchEvents:!0,useMouseEvents:!0});this.toggleKeyboard=function(){var e=(r=!r)?"block":"none";s.style.display=e;var t,n=c(o.onKeyboardChanged);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r)}}catch(e){n.e(e)}finally{n.f()}return o.keyboardVisible=r},this.options.keyboardDiv||this.mouseOverlay.appendChild(s)}}])&&r(e.prototype,n),o&&r(e,o),t}();n.Layers=f},{"./helpers":143,"./keys":144,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,"element-resize-detector":121,notyf:129,"simple-keyboard":131}],146:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.lifecycle=function(e){var t="",n="";function o(){document[t]?e.pause():e.resume()}void 0!==document.hidden?(t="hidden",n="visibilitychange"):void 0!==document.mozHidden?(t="mozHidden",n="mozvisibilitychange"):void 0!==document.msHidden?(t="msHidden",n="msvisibilitychange"):void 0!==document.webkitHidden&&(t="webkitHidden",n="webkitvisibilitychange"),document.addEventListener(n,o),e.events().onExit(function(){document.removeEventListener(n,o)})}},{}],147:[function(e,t,n){"use strict";function o(e,t){if(e.type.match(/^touch/)){var n=e,o=t.getBoundingClientRect();return{x:n.targetTouches[0].clientX-o.x,y:n.targetTouches[0].clientY-o.y,mX:0,mY:0}}if(e.type.match(/^pointer/)){return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY}}return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY,button:0===e.button?0:1}}e("core-js/modules/es6.regexp.match"),Object.defineProperty(n,"__esModule",{value:!0}),n.pointer=function(){var e=/iPhone|iPad|iPod|Android/i.test(navigator.userAgent),t=e&&!!("ontouchstart"in window),n=e&&!!window.PointerEvent,o=e&&!!window.MSPointerEvent,r=!0,i=[],s=[],a=[],c=[],u=[];n?(i.push("pointerdown"),a.push("pointerup","pointercancel"),s.push("pointermove"),u.push("touchstart","touchmove","touchend")):o?(i.push("MSPointerDown"),s.push("MSPointerMove"),a.push("MSPointerUp")):t?(r=!1,i.push("touchstart","mousedown"),s.push("touchmove"),a.push("touchend","touchcancel","mouseup")):(i.push("mousedown"),s.push("mousemove"),a.push("mouseup"),c.push("mouseleave"));return{mobile:e,canLock:r,starters:i,changers:s,enders:a,prevents:u,leavers:c}}(),n.getPointerState=o,n.pointers={bind:n.pointer,getPointerState:o}},{"core-js/modules/es6.regexp.match":108}],148:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});function o(){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.dom={layers:r.layers,lifecycle:i.lifecycle,pointers:_.pointers},this.network={resolveBundle:s.resolveBundle},this.graphics={webGl:c.webGl,_2d:a._2d,video:u.video},this.sound={audioNode:y.audioNode},this.persist={save:m.save,load:m.load},this.controls={getGrid:g.getGrid,namedKeyCodes:h.namedKeyCodes,domToKeyCodes:h.domToKeyCodes,domToKeyCode:h.domToKeyCode,keyCodesToDom:h.keyCodesToDom,keyboard:l.keyboard,mouse:d.mouse,nipple:f.nipple,options:p.options},this.notifications={notyf:v.notyf},this.dos=function(e,t){return new b.DosInstance(e,n,t||{})}}var r=e("./dom/layers"),i=e("./dom/lifecycle"),s=e("./network/xhr"),a=e("./graphics/_2d"),c=e("./graphics/webgl"),u=e("./graphics/video"),l=e("./controls/keyboard"),d=e("./controls/mouse"),f=e("./controls/nipple"),p=e("./controls/options"),h=e("./dom/keys"),y=e("./sound/audio-node"),v=e("./notification/notyf"),m=e("./persist/save-load"),g=e("./controls/grid"),_=e("./dom/pointer"),b=e("./js-dos"),w=new(n.EmulatorsUi=o);window.emulatorsUi=w,window.Dos=w.dos},{"./controls/grid":134,"./controls/keyboard":135,"./controls/mouse":139,"./controls/nipple":140,"./controls/options":142,"./dom/keys":144,"./dom/layers":145,"./dom/lifecycle":146,"./dom/pointer":147,"./graphics/_2d":149,"./graphics/video":150,"./graphics/webgl":151,"./js-dos":152,"./network/xhr":153,"./notification/notyf":154,"./persist/save-load":155,"./sound/audio-node":156}],149:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.uint8-clamped-array"),Object.defineProperty(n,"__esModule",{value:!0}),n._2d=function(e,t){var o=e.canvas,r=o.getContext("2d");if(null===r)throw new Error("Unable to create 2d context on given canvas");function n(){var e=c/u,t=s,n=s/e;a<n&&(t=(n=a)*e),o.style.position="relative",o.style.top=(a-n)/2+"px",o.style.left=(s-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function i(e,t){s=e,a=t,n()}var s=e.width,a=e.height,c=0,u=0;function l(e,t){c=e,u=t,o.width=c,o.height=u,d=new Uint8ClampedArray(e*t*4),n()}e.addOnResize(i);var d=new Uint8ClampedArray(0);t.events().onFrameSize(l),t.events().onFrame(function(e){for(var t=0,n=0;n<d.length;)d[n++]=e[t++],d[n++]=e[t++],d[n++]=e[t++],d[n++]=255;r.putImageData(new ImageData(d,c,u),0,0)}),l(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(i)})}},{"core-js/modules/es6.typed.uint8-clamped-array":114}],150:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.video=function(n,e){n.switchToVideo(),e.events().onMessage(function(e,t){"onremotestream"===e&&window.Janus.attachMediaStream(n.video,t)})}},{}],151:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.float32-array"),e("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(n,"__esModule",{value:!0});function m(e,t,n){var o=e.createShader(t);if(e.shaderSource(o,n),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS))return o;var r=e.getShaderInfoLog(o);throw e.deleteShader(o),new Error("An error occurred compiling the shaders: "+r)}n.webGl=function(e,t){var o=e.canvas,n=o.getContext("webgl");if(null===n)throw new Error("Unable to create webgl context on given canvas");var r=function(e,t,n){var o=m(e,e.VERTEX_SHADER,t),r=m(e,e.FRAGMENT_SHADER,n),i=e.createProgram();if(e.attachShader(i,o),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS))return i;throw new Error("Unable to initialize the shader program: "+e.getProgramInfoLog(i))}(n,"\nattribute vec4 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main(void) {\n  gl_Position = aVertexPosition;\n  vTextureCoord = aTextureCoord;\n}\n","\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\n\nvoid main(void) {\n  highp vec4 color = texture2D(uSampler, vTextureCoord);\n  gl_FragColor = vec4(color.r, color.g, color.b, 1.0);\n}\n"),i=n.getAttribLocation(r,"aVertexPosition"),s=n.getAttribLocation(r,"aTextureCoord"),a=n.getUniformLocation(r,"uSampler");!function(e,t,n){var o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,-1,0,1,1,0,-1,1,0]),e.STATIC_DRAW),e.vertexAttribPointer(t,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t);var r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,1,1,1,1,0,0,1,1,0,0,0]),e.STATIC_DRAW),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(n)}(n,i,s);var c=n.createTexture();n.bindTexture(n.TEXTURE_2D,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR);var u=new Uint8Array([0,0,0]);function l(){var e=h/y,t=f,n=f/e;p<n&&(t=(n=p)*e),o.style.position="relative",o.style.top=(p-n)/2+"px",o.style.left=(f-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function d(e,t){f=e,p=t,l()}n.texImage2D(n.TEXTURE_2D,0,n.RGB,1,1,0,n.RGB,n.UNSIGNED_BYTE,u),n.useProgram(r),n.activeTexture(n.TEXTURE0),n.uniform1i(a,0);var f=e.width,p=e.height,h=0,y=0;function v(e,t){h=e,y=t,o.width=h,o.height=y,n.viewport(0,0,h,y),l()}e.addOnResize(d),t.events().onFrameSize(v),t.events().onFrame(function(e){n.texImage2D(n.TEXTURE_2D,0,n.RGB,h,y,0,n.RGB,n.UNSIGNED_BYTE,e),n.drawArrays(n.TRIANGLES,0,6)}),v(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(d)})}},{"core-js/modules/es6.typed.float32-array":112,"core-js/modules/es6.typed.uint8-array":113}],152:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function u(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),Object.defineProperty(n,"__esModule",{value:!0});var d=e("./build"),f=e("./controls/layers-config"),p=e("./controls/legacy-layers-control"),h=e("./controls/null-layers-control"),y=e("./controls/layers-control"),v=e("./dom/pointer"),o=function(){function o(e,t,n){if(!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.layersConfig=null,this.unbindControls=function(){},this.storedLayersConfig=null,o.initialRun&&(emulators.cacheSeed+=" ui ("+d.Build.short+")",o.initialRun=!1),this.options=n,this.emulatorsUi=t,this.emulatorFunction=n.emulatorFunction||"dosboxWorker",this.clickToStart=n.clickToStart||!1,this.layers=this.emulatorsUi.dom.layers(e,n.layersOptions),this.layers.showLoadingLayer(),this.createTransportLayer=n.createTransportLayer,this.mobileControls=v.pointers.bind.mobile,this.onMobileControlsChanged=function(){},"backend"===this.emulatorFunction&&void 0===this.createTransportLayer)throw new Error("Emulator function set to 'backend' but 'createTransportLayer' is not a function")}var e,t,n,r,i,s,a;return e=o,(t=[{key:"run",value:(a=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.stop();case 2:return this.layers.setLoadingMessage("Starting..."),r=null!=o&&0<o.length?o:t+".changes",e.prev=4,e.next=7,this.runBundle(t,n,r);case 7:i=e.sent,e.next=16;break;case 10:throw e.prev=10,e.t0=e.catch(4),this.layers.setLoadingMessage("Unexpected error occured..."),this.layers.notyf.error({message:"Can't start emulator look browser logs for more info"}),console.error(e.t0),e.t0;case 16:if(s=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=21;break}s.graphics.video(this.layers,i),e.next=33;break;case 21:if(s.persist.save(r,this.layers,i,emulators),e.prev=22,!0===this.options.noWebGL)throw new Error("WebGL is disabled by options");e.next=25;break;case 25:s.graphics.webGl(this.layers,i),e.next=32;break;case 28:e.prev=28,e.t1=e.catch(22),console.error("Unable to create webgl canvas, fallback to 2d rendering"),s.graphics._2d(this.layers,i);case 32:s.sound.audioNode(i);case 33:return s.dom.lifecycle(i),e.next=36,i.config();case 36:return a=e.sent,e.next=39,this.setLayersConfig(f.extractLayersConfig(a));case 39:return this.mobileControls||this.disableMobileControls(),this.layers.setLoadingMessage("Ready"),this.layers.hideLoadingLayer(),this.clickToStart&&this.layers.showClickToStart(),e.abrupt("return",i);case 44:case"end":return e.stop()}},e,this,[[4,10],[22,28]])})),function(e,t,n){return a.apply(this,arguments)})},{key:"stop",value:(s=u(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.layers.showLoadingLayer(),void 0===this.ciPromise)return e.abrupt("return");e.next=3;break;case 3:return e.next=5,this.ciPromise;case 5:return t=e.sent,delete this.ciPromise,e.next=9,t.exit();case 9:return e.abrupt("return");case 10:case"end":return e.stop()}},e,this)})),function(){return s.apply(this,arguments)})},{key:"setLayersConfig",value:(i=u(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===this.ciPromise)return e.abrupt("return");e.next=2;break;case 2:return e.next=4,this.ciPromise;case 4:o=e.sent,this.layersConfig=t,this.unbindControls(),null===t?this.unbindControls=h.initNullLayersControl(this.layers,o):void 0===t.version?this.unbindControls=p.initLegacyLayersControl(this.layers,t,o):this.unbindControls=y.initLayersControl(this.layers,t,o,this,n);case 8:case"end":return e.stop()}},e,this)})),function(e,t){return i.apply(this,arguments)})},{key:"getLayersConfig",value:function(){return this.layersConfig}},{key:"enableMobileControls",value:function(){this.mobileControls=!0,this.setLayersConfig(this.storedLayersConfig),this.storedLayersConfig=null,this.onMobileControlsChanged(!0)}},{key:"disableMobileControls",value:function(){this.mobileControls=!1,this.storedLayersConfig=this.layersConfig,this.setLayersConfig(null),this.onMobileControlsChanged(!1)}},{key:"setOnMobileControlsChanged",value:function(e){this.onMobileControlsChanged=e}},{key:"runBundle",value:(r=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a,c,u=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=6;break}this.layers.setLoadingMessage("Connecting..."),this.ciPromise=emulators.janus(t),e.next=30;break;case 6:if(this.layers.setLoadingMessage("Downloading bundle ..."),i=r.network.resolveBundle(t,{onprogress:function(e){return u.layers.setLoadingMessage("Downloading bundle "+e+"%")}}),e.prev=8,null!=n&&0<n.length)return e.next=12,r.network.resolveBundle(n,{httpCache:!1});e.next=15;break;case 12:s=e.sent,e.next=18;break;case 15:return e.next=17,r.persist.load(o,emulators);case 17:s=e.sent;case 18:return e.next=20,i;case 20:a=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([a,s],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([a,s]),e.next=30;break;case 24:return e.prev=24,e.t0=e.catch(8),e.next=28,i;case 28:c=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([c],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([c]);case 30:return e.abrupt("return",this.ciPromise);case 31:case"end":return e.stop()}},e,this,[[8,24]])})),function(e,t,n){return r.apply(this,arguments)})}])&&l(e.prototype,t),n&&l(e,n),o}();(n.DosInstance=o).initialRun=!0},{"./build":132,"./controls/layers-config":136,"./controls/layers-control":137,"./controls/legacy-layers-control":138,"./controls/null-layers-control":141,"./dom/pointer":147,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"regenerator-runtime/runtime":130}],153:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function o(){var a;return a=regeneratorRuntime.mark(function e(o,t){var n,r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(null==t?void 0:t.cache)||null,r=null==t?void 0:t.onprogress,i=!(!1===(null==t?void 0:t.httpCache)),e.prev=3,null===n)throw new Error("no-cache");e.next=6;break;case 6:if(e.t0=n,e.t0){e.next=11;break}return e.next=10,emulators.cache();case 10:e.t0=e.sent;case 11:return s=e.t0,e.next=14,s.get(o);case 14:return a=e.sent,void 0!==r&&r(100),e.abrupt("return",new Uint8Array(a));case 19:return e.prev=19,e.t1=e.catch(3),e.abrupt("return",new Promise(function(e,t){var n=new XMLHttpRequest;n.open("GET",o,!0),n.overrideMimeType("text/plain; charset=x-user-defined"),n.addEventListener("error",function(){t(new Error("Network error, can't download "+o))}),n.addEventListener("abort",function(){t(new Error("Request canceled for url "+o))},!1),n.responseType="arraybuffer",n.onreadystatechange=function(){4===n.readyState&&(200===n.status?(void 0!==r&&r(100),e(new Uint8Array(n.response))):t(new Error("Network error, can't download "+o)))},void 0!==r&&(n.onprogress=function(e){if(e.total&&0<e.total){var t=Math.round(1e4*e.loaded/e.total)/100;r(t)}}),!1===i&&(n.setRequestHeader("Cache-Control","no-cache, no-store, max-age=0"),n.setRequestHeader("Expires","Tue, 01 Jan 1980 1:00:00 GMT"),n.setRequestHeader("Pragma","no-cache")),n.send()}));case 22:case"end":return e.stop()}},e,null,[[3,19]])}),(o=function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}).apply(this,arguments)}e("core-js/modules/es6.typed.uint8-array"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0}),n.resolveBundle=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.typed.uint8-array":113,"regenerator-runtime/runtime":130}],154:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.notyf=function(e,t){var r=e.notyf;t.events().onMessage(function(e){if("error"===e){for(var t=arguments.length,n=new Array(1<t?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.error({message:JSON.stringify(n)})}})}},{}],155:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function s(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),Object.defineProperty(n,"__esModule",{value:!0});var a="emulators-ui-saves";function o(){return(o=s(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.cache(a);case 2:return o=e.sent,e.abrupt("return",o.get(t).then(function(e){return new Uint8Array(e)}));case 4:case"end":return e.stop()}},e)}))).apply(this,arguments)}n.save=function(o,e,r,i){e.setOnSave(s(regeneratorRuntime.mark(function e(){var t,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.cache(a);case 2:return t=e.sent,e.next=5,r.persist();case 5:return n=e.sent,e.abrupt("return",t.put(o,n.buffer));case 7:case"end":return e.stop()}},e)})))},n.load=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.typed.uint8-array":113,"regenerator-runtime/runtime":130}],156:[function(e,t,n){"use strict";function r(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.array.fill"),Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.samplesQueue=[]}var t,n,o;return t=e,(n=[{key:"push",value:function(e){this.samplesQueue.push(e)}},{key:"length",value:function(){var e,t=0,n=r(this.samplesQueue);try{for(n.s();!(e=n.n()).done;){t+=e.value.length}}catch(e){n.e(e)}finally{n.f()}return t}},{key:"writeTo",value:function(e,t){for(var n=0;0<this.samplesQueue.length;){var o=this.samplesQueue[0],r=Math.min(t-n,o.length);if(r===o.length?(e.set(o,n),this.samplesQueue.shift()):(e.set(o.slice(0,r),n),this.samplesQueue[0]=o.slice(r)),(n+=r)===t)break}n<t&&e.fill(0,n)}}])&&i(t.prototype,n),o&&i(t,o),e}();n.audioNode=function(e){var t=e.soundFrequency();if(0!==t){var n=null;if("undefined"!=typeof AudioContext?n=new AudioContext({sampleRate:t,latencyHint:"interactive"}):void 0!==window.webkitAudioContext&&(n=new window.webkitAudioContext({sampleRate:t,latencyHint:"interactive"})),null!=n){var s=new c;e.events().onSoundPush(function(e){s.length()<6144&&s.push(e)});var o=n.createScriptProcessor(2048,0,1),a=!1;o.onaudioprocess=function(e){var t=e.outputBuffer.length,n=e.outputBuffer.numberOfChannels,o=s.length();if(a=a||2048<=o)for(var r=0;r<n;r++){var i=e.outputBuffer.getChannelData(r);s.writeTo(i,t)}},o.connect(n.destination);var r=function(){null!==n&&"suspended"===n.state&&n.resume()};document.addEventListener("click",r,{once:!0}),document.addEventListener("touchstart",r,{once:!0}),document.addEventListener("keydown",r,{once:!0}),e.events().onExit(function(){null!==n&&(o.disconnect(),n.close()),document.removeEventListener("click",r),document.removeEventListener("touchstart",r),document.removeEventListener("keydown",r)})}}else console.warn("Can't create audio node with sampleRate === 0, ingnoring")}},{"core-js/modules/es6.array.fill":97,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}]},{},[148]);


!function i(s,a,u){function c(t,e){if(!a[t]){if(!s[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=a[t]={exports:{}};s[t][0].call(o.exports,function(e){return c(s[t][1][e]||e)},o,o.exports,i,s,a,u)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],2:[function(e,t,r){var n=e("./_wks")("unscopables"),o=Array.prototype;null==o[n]&&e("./_hide")(o,n,{}),t.exports=function(e){o[n][e]=!0}},{"./_hide":31,"./_wks":99}],3:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);t.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},{"./_string-at":80}],4:[function(e,t,r){t.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},{}],5:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":39}],6:[function(e,t,r){"use strict";var l=e("./_to-object"),f=e("./_to-absolute-index"),d=e("./_to-length");t.exports=[].copyWithin||function(e,t,r){var n=l(this),o=d(n.length),i=f(e,o),s=f(t,o),a=2<arguments.length?r:void 0,u=Math.min((void 0===a?o:f(a,o))-s,o-i),c=1;for(s<i&&i<s+u&&(c=-1,s+=u-1,i+=u-1);0<u--;)s in n?n[i]=n[s]:delete n[i],i+=c,s+=c;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],7:[function(e,t,r){"use strict";var c=e("./_to-object"),l=e("./_to-absolute-index"),f=e("./_to-length");t.exports=function(e,t,r){for(var n=c(this),o=f(n.length),i=arguments.length,s=l(1<i?t:void 0,o),a=2<i?r:void 0,u=void 0===a?o:l(a,o);s<u;)n[s++]=e;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],8:[function(e,t,r){var u=e("./_to-iobject"),c=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,r){var n,o=u(e),i=c(o.length),s=l(r,i);if(a&&t!=t){for(;s<i;)if((n=o[s++])!=n)return!0}else for(;s<i;s++)if((a||s in o)&&o[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":85,"./_to-iobject":88,"./_to-length":89}],9:[function(e,t,r){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),j=e("./_to-length"),n=e("./_array-species-create");t.exports=function(f,e){var d=1==f,p=2==f,h=3==f,m=4==f,v=6==f,y=5==f||v,g=e||n;return function(e,t,r){for(var n,o,i=w(e),s=b(i),a=_(t,r,3),u=j(s.length),c=0,l=d?g(e,u):p?g(e,0):void 0;c<u;c++)if((y||c in s)&&(o=a(n=s[c],c,i),f))if(d)l[c]=o;else if(o)switch(f){case 3:return!0;case 5:return n;case 6:return c;case 2:l.push(n)}else if(m)return!1;return v?-1:h||m?m:l}}},{"./_array-species-create":11,"./_ctx":16,"./_iobject":36,"./_to-length":89,"./_to-object":90}],10:[function(e,t,r){var n=e("./_is-object"),o=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":38,"./_is-object":39,"./_wks":99}],11:[function(e,t,r){var n=e("./_array-species-constructor");t.exports=function(e,t){return new(n(e))(t)}},{"./_array-species-constructor":10}],12:[function(e,t,r){var o=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==o(function(){return arguments}());t.exports=function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?r:s?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},{"./_cof":13,"./_wks":99}],13:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],14:[function(e,t,r){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},{}],15:[function(e,t,r){"use strict";var n=e("./_object-dp"),o=e("./_property-desc");t.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},{"./_object-dp":54,"./_property-desc":69}],16:[function(e,t,r){var i=e("./_a-function");t.exports=function(n,o,e){if(i(n),void 0===o)return n;switch(e){case 1:return function(e){return n.call(o,e)};case 2:return function(e,t){return n.call(o,e,t)};case 3:return function(e,t,r){return n.call(o,e,t,r)}}return function(){return n.apply(o,arguments)}}},{"./_a-function":1}],17:[function(e,t,r){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],18:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":24}],19:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":29,"./_is-object":39}],20:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],21:[function(e,t,r){var a=e("./_object-keys"),u=e("./_object-gops"),c=e("./_object-pie");t.exports=function(e){var t=a(e),r=u.f;if(r)for(var n,o=r(e),i=c.f,s=0;o.length>s;)i.call(e,n=o[s++])&&t.push(n);return t}},{"./_object-gops":59,"./_object-keys":62,"./_object-pie":63}],22:[function(e,t,r){var m=e("./_global"),v=e("./_core"),y=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,r){var n,o,i,s,a=e&w.F,u=e&w.G,c=e&w.S,l=e&w.P,f=e&w.B,d=u?m:c?m[t]||(m[t]={}):(m[t]||{})[b],p=u?v:v[t]||(v[t]={}),h=p[b]||(p[b]={});for(n in u&&(r=t),r)i=((o=!a&&d&&void 0!==d[n])?d:r)[n],s=f&&o?_(i,m):l&&"function"==typeof i?_(Function.call,i):i,d&&g(d,n,i,e&w.U),p[n]!=i&&y(p,n,s),l&&h[n]!=i&&(h[n]=i)};m.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":14,"./_ctx":16,"./_global":29,"./_hide":31,"./_redefine":71}],23:[function(e,t,r){var n=e("./_wks")("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(e){try{return r[n]=!1,!"/./"[t](r)}catch(e){}}return!0}},{"./_wks":99}],24:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],25:[function(e,t,r){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),f=e("./_hide"),d=e("./_fails"),p=e("./_defined"),h=e("./_wks"),m=e("./_regexp-exec"),v=h("species"),y=!d(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(r,e,t){var n=h(r),i=!d(function(){var e={};return e[n]=function(){return 7},7!=""[r](e)}),o=i?!d(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===r&&(t.constructor={},t.constructor[v]=function(){return t}),t[n](""),!e}):void 0;if(!i||!o||"replace"===r&&!y||"split"===r&&!g){var s=/./[n],a=t(p,n,""[r],function(e,t,r,n,o){return t.exec===m?i&&!o?{done:!0,value:s.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),u=a[0],c=a[1];l(String.prototype,r,u),f(RegExp.prototype,n,2==e?function(e,t){return c.call(e,this,t)}:function(e){return c.call(e,this)})}}},{"./_defined":17,"./_fails":24,"./_hide":31,"./_redefine":71,"./_regexp-exec":73,"./_wks":99,"./es6.regexp.exec":115}],26:[function(e,t,r){"use strict";var n=e("./_an-object");t.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":5}],27:[function(e,t,r){var d=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),m=e("./_an-object"),v=e("./_to-length"),y=e("./core.get-iterator-method"),g={},_={};(r=t.exports=function(e,t,r,n,o){var i,s,a,u,c=o?function(){return e}:y(e),l=d(r,n,t?2:1),f=0;if("function"!=typeof c)throw TypeError(e+" is not iterable!");if(h(c)){for(i=v(e.length);f<i;f++)if((u=t?l(m(s=e[f])[0],s[1]):l(e[f]))===g||u===_)return u}else for(a=c.call(e);!(s=a.next()).done;)if((u=p(a,l,s.value,t))===g||u===_)return u}).BREAK=g,r.RETURN=_},{"./_an-object":5,"./_ctx":16,"./_is-array-iter":37,"./_iter-call":41,"./_to-length":89,"./core.get-iterator-method":100}],28:[function(e,t,r){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":78}],29:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],30:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],31:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":18,"./_object-dp":54,"./_property-desc":69}],32:[function(e,t,r){var n=e("./_global").document;t.exports=n&&n.documentElement},{"./_global":29}],33:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":18,"./_dom-create":19,"./_fails":24}],34:[function(e,t,r){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,r){var n,o=t.constructor;return o!==r&&"function"==typeof o&&(n=o.prototype)!==r.prototype&&i(n)&&s&&s(e,n),e}},{"./_is-object":39,"./_set-proto":74}],35:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],36:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":13}],37:[function(e,t,r){var n=e("./_iterators"),o=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./_iterators":46,"./_wks":99}],38:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":13}],39:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],40:[function(e,t,r){var n=e("./_is-object"),o=e("./_cof"),i=e("./_wks")("match");t.exports=function(e){var t;return n(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},{"./_cof":13,"./_is-object":39,"./_wks":99}],41:[function(e,t,r){var i=e("./_an-object");t.exports=function(t,e,r,n){try{return n?e(i(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&i(o.call(t)),e}}},{"./_an-object":5}],42:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(s,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":31,"./_object-create":53,"./_property-desc":69,"./_set-to-string-tag":76,"./_wks":99}],43:[function(e,t,r){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),j=e("./_redefine"),x=e("./_hide"),k=e("./_iterators"),S=e("./_iter-create"),P=e("./_set-to-string-tag"),M=e("./_object-gpo"),E=e("./_wks")("iterator"),O=!([].keys&&"next"in[].keys()),I="values";t.exports=function(e,t,r,n,o,i,s){S(r,t,n);function a(e){if(!O&&e in h)return h[e];switch(e){case"keys":case I:return function(){return new r(this,e)}}return function(){return new r(this,e)}}var u,c,l,f=t+" Iterator",d=o==I,p=!1,h=e.prototype,m=h[E]||h["@@iterator"]||o&&h[o],v=m||a(o),y=o?d?a("entries"):v:void 0,g="Array"==t&&h.entries||m;if(g&&(l=M(g.call(new e)))!==Object.prototype&&l.next&&(P(l,f,!0),b||"function"==typeof l[E]||x(l,E,_)),d&&m&&m.name!==I&&(p=!0,v=function(){return m.call(this)}),b&&!s||!O&&!p&&h[E]||x(h,E,v),k[t]=v,k[f]=_,o)if(u={values:d?v:a(I),keys:i?v:a("keys"),entries:y},s)for(c in u)c in h||j(h,c,u[c]);else w(w.P+w.F*(O||p),t,u);return u}},{"./_export":22,"./_hide":31,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":60,"./_redefine":71,"./_set-to-string-tag":76,"./_wks":99}],44:[function(e,t,r){var i=e("./_wks")("iterator"),s=!1;try{var n=[7][i]();n.return=function(){s=!0},Array.from(n,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var r=!1;try{var n=[7],o=n[i]();o.next=function(){return{done:r=!0}},n[i]=function(){return o},e(n)}catch(e){}return r}},{"./_wks":99}],45:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],46:[function(e,t,r){t.exports={}},{}],47:[function(e,t,r){t.exports=!1},{}],48:[function(e,t,r){var i=e("./_math-sign"),n=Math.pow,s=n(2,-52),a=n(2,-23),u=n(2,127)*(2-a),c=n(2,-126);t.exports=Math.fround||function(e){var t,r,n=Math.abs(e),o=i(e);return n<c?o*(n/c/a+1/s-1/s)*c*a:u<(r=(t=(1+a/s)*n)-(t-n))||r!=r?o*(1/0):o*r}},{"./_math-sign":49}],49:[function(e,t,r){t.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},{}],50:[function(e,t,r){function n(e){a(e,o,{value:{i:"O"+ ++u,w:{}}})}var o=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,u=0,c=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return c(Object.preventExtensions({}))}),f=t.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,o)){if(!c(e))return"F";if(!t)return"E";n(e)}return e[o].i},getWeak:function(e,t){if(!s(e,o)){if(!c(e))return!0;if(!t)return!1;n(e)}return e[o].w},onFreeze:function(e){return l&&f.NEED&&c(e)&&!s(e,o)&&n(e),e}}},{"./_fails":24,"./_has":30,"./_is-object":39,"./_object-dp":54,"./_uid":95}],51:[function(e,t,r){var a=e("./_global"),u=e("./_task").set,c=a.MutationObserver||a.WebKitMutationObserver,l=a.process,f=a.Promise,d="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(d&&(e=l.domain)&&e.exit();r;){t=r.fn,r=r.next;try{t()}catch(e){throw r?o():n=void 0,e}}n=void 0,e&&e.enter()}var r,n,o;if(d)o=function(){l.nextTick(e)};else if(!c||a.navigator&&a.navigator.standalone)if(f&&f.resolve){var t=f.resolve(void 0);o=function(){t.then(e)}}else o=function(){u.call(a,e)};else{var i=!0,s=document.createTextNode("");new c(e).observe(s,{characterData:!0}),o=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};n&&(n.next=t),r||(r=t,o()),n=t}}},{"./_cof":13,"./_global":29,"./_task":84}],52:[function(e,t,r){"use strict";var o=e("./_a-function");function n(e){var r,n;this.promise=new e(function(e,t){if(void 0!==r||void 0!==n)throw TypeError("Bad Promise constructor");r=e,n=t}),this.resolve=o(r),this.reject=o(n)}t.exports.f=function(e){return new n(e)}},{"./_a-function":1}],53:[function(n,e,t){function o(){}var i=n("./_an-object"),s=n("./_object-dps"),a=n("./_enum-bug-keys"),u=n("./_shared-key")("IE_PROTO"),c="prototype",l=function(){var e,t=n("./_dom-create")("iframe"),r=a.length;for(t.style.display="none",n("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l[c][a[r]];return l()};e.exports=Object.create||function(e,t){var r;return null!==e?(o[c]=i(e),r=new o,o[c]=null,r[u]=e):r=l(),void 0===t?r:s(r,t)}},{"./_an-object":5,"./_dom-create":19,"./_enum-bug-keys":20,"./_html":32,"./_object-dps":55,"./_shared-key":77}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":5,"./_descriptors":18,"./_ie8-dom-define":33,"./_to-primitive":91}],55:[function(e,t,r){var s=e("./_object-dp"),a=e("./_an-object"),u=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var r,n=u(t),o=n.length,i=0;i<o;)s.f(e,r=n[i++],t[r]);return e}},{"./_an-object":5,"./_descriptors":18,"./_object-dp":54,"./_object-keys":62}],56:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=s(t,!0),u)try{return c(e,t)}catch(e){}if(a(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":18,"./_has":30,"./_ie8-dom-define":33,"./_object-pie":63,"./_property-desc":69,"./_to-iobject":88,"./_to-primitive":91}],57:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return s.slice()}}(e):o(n(e))}},{"./_object-gopn":58,"./_to-iobject":88}],58:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],59:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],60:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":30,"./_shared-key":77,"./_to-object":90}],61:[function(e,t,r){var s=e("./_has"),a=e("./_to-iobject"),u=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,n=a(e),o=0,i=[];for(r in n)r!=c&&s(n,r)&&i.push(r);for(;t.length>o;)s(n,r=t[o++])&&(~u(i,r)||i.push(r));return i}},{"./_array-includes":8,"./_has":30,"./_shared-key":77,"./_to-iobject":88}],62:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],63:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],64:[function(e,t,r){var o=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var r=(i.Object||{})[e]||Object[e],n={};n[e]=t(r),o(o.S+o.F*s(function(){r(1)}),"Object",n)}},{"./_core":14,"./_export":22,"./_fails":24}],65:[function(e,t,r){var n=e("./_object-gopn"),o=e("./_object-gops"),i=e("./_an-object"),s=e("./_global").Reflect;t.exports=s&&s.ownKeys||function(e){var t=n.f(i(e)),r=o.f;return r?t.concat(r(e)):t}},{"./_an-object":5,"./_global":29,"./_object-gopn":58,"./_object-gops":59}],66:[function(e,t,r){var n=e("./_global").parseInt,o=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(e,t){var r=o(String(e),3);return n(r,t>>>0||(s.test(r)?16:10))}:n},{"./_global":29,"./_string-trim":82,"./_string-ws":83}],67:[function(e,t,r){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],68:[function(e,t,r){var n=e("./_an-object"),o=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},{"./_an-object":5,"./_is-object":39,"./_new-promise-capability":52}],69:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],70:[function(e,t,r){var o=e("./_redefine");t.exports=function(e,t,r){for(var n in t)o(e,n,t[n],r);return e}},{"./_redefine":71}],71:[function(e,t,r){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),u=e("./_uid")("src"),n=e("./_function-to-string"),o="toString",c=(""+n).split(o);e("./_core").inspectSource=function(e){return n.call(e)},(t.exports=function(e,t,r,n){var o="function"==typeof r;o&&(a(r,"name")||s(r,"name",t)),e[t]!==r&&(o&&(a(r,u)||s(r,u,e[t]?""+e[t]:c.join(String(t)))),e===i?e[t]=r:n?e[t]?e[t]=r:s(e,t,r):(delete e[t],s(e,t,r)))})(Function.prototype,o,function(){return"function"==typeof this&&this[u]||n.call(this)})},{"./_core":14,"./_function-to-string":28,"./_global":29,"./_has":30,"./_hide":31,"./_uid":95}],72:[function(e,t,r){"use strict";var o=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var r=e.exec;if("function"==typeof r){var n=r.call(e,t);if("object"!=typeof n)throw new TypeError("RegExp exec method returned something other than an Object or null");return n}if("RegExp"!==o(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":12}],73:[function(e,t,r){"use strict";var n,o,s=e("./_flags"),a=RegExp.prototype.exec,u=String.prototype.replace,i=a,c="lastIndex",l=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n[c]||0!==o[c]),f=void 0!==/()??/.exec("")[1];(l||f)&&(i=function(e){var t,r,n,o,i=this;return f&&(r=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[c]),n=a.call(i,e),l&&n&&(i[c]=i.global?n.index+n[0].length:t),f&&n&&1<n.length&&u.call(n[0],r,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)}),n}),t.exports=i},{"./_flags":26}],74:[function(t,e,r){function o(e,t){if(i(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var n=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,r,n){try{(n=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),r=!(e instanceof Array)}catch(e){r=!0}return function(e,t){return o(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:o}},{"./_an-object":5,"./_ctx":16,"./_is-object":39,"./_object-gopd":56}],75:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=n[e];i&&t&&!t[s]&&o.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":18,"./_global":29,"./_object-dp":54,"./_wks":99}],76:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":30,"./_object-dp":54,"./_wks":99}],77:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":78,"./_uid":95}],78:[function(e,t,r){var n=e("./_core"),o=e("./_global"),i="__core-js_shared__",s=o[i]||(o[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":14,"./_global":29,"./_library":47}],79:[function(e,t,r){var o=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var r,n=o(e).constructor;return void 0===n||null==(r=o(n)[s])?t:i(r)}},{"./_a-function":1,"./_an-object":5,"./_wks":99}],80:[function(e,t,r){var u=e("./_to-integer"),c=e("./_defined");t.exports=function(a){return function(e,t){var r,n,o=String(c(e)),i=u(t),s=o.length;return i<0||s<=i?a?"":void 0:(r=o.charCodeAt(i))<55296||56319<r||i+1===s||(n=o.charCodeAt(i+1))<56320||57343<n?a?o.charAt(i):r:a?o.slice(i,i+2):n-56320+(r-55296<<10)+65536}}},{"./_defined":17,"./_to-integer":87}],81:[function(e,t,r){var n=e("./_is-regexp"),o=e("./_defined");t.exports=function(e,t,r){if(n(t))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(e))}},{"./_defined":17,"./_is-regexp":40}],82:[function(e,t,r){function n(e,t,r){var n={},o=a(function(){return!!u[e]()||"​"!="​"[e]()}),i=n[e]=o?t(f):u[e];r&&(n[r]=i),s(s.P+s.F*o,"String",n)}var s=e("./_export"),o=e("./_defined"),a=e("./_fails"),u=e("./_string-ws"),i="["+u+"]",c=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),f=n.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(l,"")),e};t.exports=n},{"./_defined":17,"./_export":22,"./_fails":24,"./_string-ws":83}],83:[function(e,t,r){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],84:[function(e,t,r){function n(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function o(e){n.call(e.data)}var i,s,a,u=e("./_ctx"),c=e("./_invoke"),l=e("./_html"),f=e("./_dom-create"),d=e("./_global"),p=d.process,h=d.setImmediate,m=d.clearImmediate,v=d.MessageChannel,y=d.Dispatch,g=0,_={},b="onreadystatechange";h&&m||(h=function(e){for(var t=[],r=1;r<arguments.length;)t.push(arguments[r++]);return _[++g]=function(){c("function"==typeof e?e:Function(e),t)},i(g),g},m=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(u(n,e,1))}:y&&y.now?i=function(e){y.now(u(n,e,1))}:v?(a=(s=new v).port2,s.port1.onmessage=o,i=u(a.postMessage,a,1)):d.addEventListener&&"function"==typeof postMessage&&!d.importScripts?(i=function(e){d.postMessage(e+"","*")},d.addEventListener("message",o,!1)):i=b in f("script")?function(e){l.appendChild(f("script"))[b]=function(){l.removeChild(this),n.call(e)}}:function(e){setTimeout(u(n,e,1),0)}),t.exports={set:h,clear:m}},{"./_cof":13,"./_ctx":16,"./_dom-create":19,"./_global":29,"./_html":32,"./_invoke":35}],85:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return(e=n(e))<0?o(e+t,0):i(e,t)}},{"./_to-integer":87}],86:[function(e,t,r){var n=e("./_to-integer"),o=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=n(e),r=o(t);if(t!==r)throw RangeError("Wrong length!");return r}},{"./_to-integer":87,"./_to-length":89}],87:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?o:n)(e)}},{}],88:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":17,"./_iobject":36}],89:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return 0<e?o(n(e),9007199254740991):0}},{"./_to-integer":87}],90:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":17}],91:[function(e,t,r){var o=e("./_is-object");t.exports=function(e,t){if(!o(e))return e;var r,n;if(t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;if("function"==typeof(r=e.valueOf)&&!o(n=r.call(e)))return n;if(!t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":39}],92:[function(e,t,r){"use strict";if(e("./_descriptors")){var y=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),n=e("./_typed-buffer"),h=e("./_ctx"),j=e("./_an-instance"),o=e("./_property-desc"),x=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),k=e("./_to-length"),S=e("./_to-index"),a=e("./_to-absolute-index"),u=e("./_to-primitive"),c=e("./_has"),P=e("./_classof"),M=e("./_is-object"),m=e("./_to-object"),v=e("./_is-array-iter"),E=e("./_object-create"),O=e("./_object-gpo"),I=e("./_object-gopn").f,A=e("./core.get-iterator-method"),l=e("./_uid"),f=e("./_wks"),d=e("./_array-methods"),p=e("./_array-includes"),T=e("./_species-constructor"),C=e("./es6.array.iterator"),R=e("./_iterators"),F=e("./_iter-detect"),D=e("./_set-species"),L=e("./_array-fill"),N=e("./_array-copy-within"),z=e("./_object-dp"),W=e("./_object-gopd"),U=z.f,q=W.f,B=g.RangeError,H=g.TypeError,G=g.Uint8Array,V="ArrayBuffer",K="Shared"+V,Y="BYTES_PER_ELEMENT",$="prototype",J=Array[$],Q=n.ArrayBuffer,X=n.DataView,Z=d(0),ee=d(2),te=d(3),re=d(4),ne=d(5),oe=d(6),ie=p(!0),se=p(!1),ae=C.values,ue=C.keys,ce=C.entries,le=J.lastIndexOf,fe=J.reduce,de=J.reduceRight,pe=J.join,he=J.sort,me=J.slice,ve=J.toString,ye=J.toLocaleString,ge=f("iterator"),_e=f("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),je=w.CONSTR,xe=w.TYPED,ke=w.VIEW,Se="Wrong length!",Pe=d(1,function(e,t){return Ae(T(e,e[we]),t)}),Me=_(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ee=!!G&&!!G[$].set&&_(function(){new G(1).set({})}),Oe=function(e,t){var r=s(e);if(r<0||r%t)throw B("Wrong offset!");return r},Ie=function(e){if(M(e)&&xe in e)return e;throw H(e+" is not a typed array!")},Ae=function(e,t){if(!(M(e)&&be in e))throw H("It is not a typed array constructor!");return new e(t)},Te=function(e,t){return Ce(T(e,e[we]),t)},Ce=function(e,t){for(var r=0,n=t.length,o=Ae(e,n);r<n;)o[r]=t[r++];return o},Re=function(e,t,r){U(e,t,{get:function(){return this._d[r]}})},Fe=function(e,t,r){var n,o,i,s,a,u,c=m(e),l=arguments.length,f=1<l?t:void 0,d=void 0!==f,p=A(c);if(null!=p&&!v(p)){for(u=p.call(c),i=[],n=0;!(a=u.next()).done;n++)i.push(a.value);c=i}for(d&&2<l&&(f=h(f,r,2)),n=0,o=k(c.length),s=Ae(this,o);n<o;n++)s[n]=d?f(c[n],n):c[n];return s},De=function(){for(var e=0,t=arguments.length,r=Ae(this,t);e<t;)r[e]=arguments[e++];return r},Le=!!G&&_(function(){ye.call(new G(1))}),Ne=function(){return ye.apply(Le?me.call(Ie(this)):Ie(this),arguments)},ze={copyWithin:function(e,t,r){return N.call(Ie(this),e,t,2<arguments.length?r:void 0)},every:function(e,t){return re(Ie(this),e,1<arguments.length?t:void 0)},fill:function(e){return L.apply(Ie(this),arguments)},filter:function(e,t){return Te(this,ee(Ie(this),e,1<arguments.length?t:void 0))},find:function(e,t){return ne(Ie(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return oe(Ie(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Ie(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Ie(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Ie(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Ie(this),arguments)},lastIndexOf:function(e){return le.apply(Ie(this),arguments)},map:function(e,t){return Pe(Ie(this),e,1<arguments.length?t:void 0)},reduce:function(e){return fe.apply(Ie(this),arguments)},reduceRight:function(e){return de.apply(Ie(this),arguments)},reverse:function(){for(var e,t=this,r=Ie(t).length,n=Math.floor(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t},some:function(e,t){return te(Ie(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Ie(this),e)},subarray:function(e,t){var r=Ie(this),n=r.length,o=a(e,n);return new(T(r,r[we]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,k((void 0===t?n:a(t,n))-o))}},We=function(e,t){return Te(this,me.call(Ie(this),e,t))},Ue=function(e,t){Ie(this);var r=Oe(t,1),n=this.length,o=m(e),i=k(o.length),s=0;if(n<i+r)throw B(Se);for(;s<i;)this[r+s]=o[s++]},qe={entries:function(){return ce.call(Ie(this))},keys:function(){return ue.call(Ie(this))},values:function(){return ae.call(Ie(this))}},Be=function(e,t){return M(e)&&e[xe]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},He=function(e,t){return Be(e,t=u(t,!0))?o(2,e[t]):q(e,t)},Ge=function(e,t,r){return!(Be(e,t=u(t,!0))&&M(r)&&c(r,"value"))||c(r,"get")||c(r,"set")||r.configurable||c(r,"writable")&&!r.writable||c(r,"enumerable")&&!r.enumerable?U(e,t,r):(e[t]=r.value,e)};je||(W.f=He,z.f=Ge),b(b.S+b.F*!je,"Object",{getOwnPropertyDescriptor:He,defineProperty:Ge}),_(function(){ve.call({})})&&(ve=ye=function(){return pe.call(this)});var Ve=i({},ze);i(Ve,qe),x(Ve,ge,qe.values),i(Ve,{slice:We,set:Ue,constructor:function(){},toString:ve,toLocaleString:Ne}),Re(Ve,"buffer","b"),Re(Ve,"byteOffset","o"),Re(Ve,"byteLength","l"),Re(Ve,"length","e"),U(Ve,_e,{get:function(){return this[xe]}}),t.exports=function(e,f,t,i){function d(e,o){U(e,o,{get:function(){return e=o,(t=this._d).v[r](e*f+t.o,Me);var e,t},set:function(e){return t=o,r=e,n=this._d,i&&(r=(r=Math.round(r))<0?0:255<r?255:255&r),void n.v[s](t*f+n.o,r,Me);var t,r,n},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",r="get"+e,s="set"+e,h=g[p],a=h||{},n=h&&O(h),o=!h||!w.ABV,u={},c=h&&h[$];o?(h=t(function(e,t,r,n){j(e,h,p,"_d");var o,i,s,a,u=0,c=0;if(M(t)){if(!(t instanceof Q||(a=P(t))==V||a==K))return xe in t?Ce(h,t):Fe.call(h,t);o=t,c=Oe(r,f);var l=t.byteLength;if(void 0===n){if(l%f)throw B(Se);if((i=l-c)<0)throw B(Se)}else if(l<(i=k(n)*f)+c)throw B(Se);s=i/f}else s=S(t),o=new Q(i=s*f);for(x(e,"_d",{b:o,o:c,l:i,e:s,v:new X(o)});u<s;)d(e,u++)}),c=h[$]=E(Ve),x(c,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&F(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,r,n){var o;return j(e,h,p),M(t)?t instanceof Q||(o=P(t))==V||o==K?void 0!==n?new a(t,Oe(r,f),n):void 0!==r?new a(t,Oe(r,f)):new a(t):xe in t?Ce(h,t):Fe.call(h,t):new a(S(t))}),Z(n!==Function.prototype?I(a).concat(I(n)):I(a),function(e){e in h||x(h,e,a[e])}),h[$]=c,y||(c.constructor=h));var l=c[ge],m=!!l&&("values"==l.name||null==l.name),v=qe.values;x(h,be,!0),x(c,xe,p),x(c,ke,!0),x(c,we,h),(i?new h(1)[_e]==p:_e in c)||U(c,_e,{get:function(){return p}}),u[p]=h,b(b.G+b.W+b.F*(h!=a),u),b(b.S,p,{BYTES_PER_ELEMENT:f}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Fe,of:De}),Y in c||x(c,Y,f),b(b.P,p,ze),D(p),b(b.P+b.F*Ee,p,{set:Ue}),b(b.P+b.F*!m,p,qe),y||c.toString==ve||(c.toString=ve),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:We}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){c.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),R[p]=m?l:v,y||m||x(c,ge,v)}}else t.exports=function(){}},{"./_an-instance":4,"./_array-copy-within":6,"./_array-fill":7,"./_array-includes":8,"./_array-methods":9,"./_classof":12,"./_ctx":16,"./_descriptors":18,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array-iter":37,"./_is-object":39,"./_iter-detect":44,"./_iterators":46,"./_library":47,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gpo":60,"./_property-desc":69,"./_redefine-all":70,"./_set-species":75,"./_species-constructor":79,"./_to-absolute-index":85,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_to-object":90,"./_to-primitive":91,"./_typed":94,"./_typed-buffer":93,"./_uid":95,"./_wks":99,"./core.get-iterator-method":100,"./es6.array.iterator":103}],93:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),u=e("./_redefine-all"),c=e("./_fails"),l=e("./_an-instance"),f=e("./_to-integer"),d=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,m=e("./_object-dp").f,v=e("./_array-fill"),y=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",j=n[g],x=n[_],k=n.Math,S=n.RangeError,P=n.Infinity,M=j,E=k.abs,O=k.pow,I=k.floor,A=k.log,T=k.LN2,C="byteLength",R="byteOffset",F=o?"_b":"buffer",D=o?"_l":C,L=o?"_o":R;function N(e,t,r){var n,o,i,s=new Array(r),a=8*r-t-1,u=(1<<a)-1,c=u>>1,l=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=E(e))!=e||e===P?(o=e!=e?1:0,n=u):(n=I(A(e)/T),e*(i=O(2,-n))<1&&(n--,i*=2),2<=(e+=1<=n+c?l/i:l*O(2,1-c))*i&&(n++,i/=2),u<=n+c?(o=0,n=u):1<=n+c?(o=(e*i-1)*O(2,t),n+=c):(o=e*O(2,c-1)*O(2,t),n=0));8<=t;s[f++]=255&o,o/=256,t-=8);for(n=n<<t|o,a+=t;0<a;s[f++]=255&n,n/=256,a-=8);return s[--f]|=128*d,s}function z(e,t,r){var n,o=8*r-t-1,i=(1<<o)-1,s=i>>1,a=o-7,u=r-1,c=e[u--],l=127&c;for(c>>=7;0<a;l=256*l+e[u],u--,a-=8);for(n=l&(1<<-a)-1,l>>=-a,a+=t;0<a;n=256*n+e[u],u--,a-=8);if(0===l)l=1-s;else{if(l===i)return n?NaN:c?-P:P;n+=O(2,t),l-=s}return(c?-1:1)*n*O(2,l-t)}function W(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function q(e){return[255&e,e>>8&255]}function B(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function H(e){return N(e,52,8)}function G(e){return N(e,23,4)}function V(e,t,r){m(e[b],t,{get:function(){return this[r]}})}function K(e,t,r,n){var o=p(+r);if(o+t>e[D])throw S(w);var i=e[F]._b,s=o+e[L],a=i.slice(s,s+t);return n?a:a.reverse()}function Y(e,t,r,n,o,i){var s=p(+r);if(s+t>e[D])throw S(w);for(var a=e[F]._b,u=s+e[L],c=n(+o),l=0;l<t;l++)a[u+l]=c[i?l:t-l-1]}if(s.ABV){if(!c(function(){j(1)})||!c(function(){new j(-1)})||c(function(){return new j,new j(1.5),new j(NaN),j.name!=g})){for(var $,J=(j=function(e){return l(this,j),new M(p(e))})[b]=M[b],Q=h(M),X=0;Q.length>X;)($=Q[X++])in j||a(j,$,M[$]);i||(J.constructor=j)}var Z=new x(new j(2)),ee=x[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||u(x[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else j=function(e){l(this,j,g);var t=p(e);this._b=v.call(new Array(t),0),this[D]=t},x=function(e,t,r){l(this,x,_),l(e,j,_);var n=e[D],o=f(t);if(o<0||n<o)throw S("Wrong offset!");if(n<o+(r=void 0===r?n-o:d(r)))throw S("Wrong length!");this[F]=e,this[L]=o,this[D]=r},o&&(V(j,C,"_l"),V(x,"buffer","_b"),V(x,C,"_l"),V(x,R,"_o")),u(x[b],{getInt8:function(e){return K(this,1,e)[0]<<24>>24},getUint8:function(e){return K(this,1,e)[0]},getInt16:function(e,t){var r=K(this,2,e,t);return(r[1]<<8|r[0])<<16>>16},getUint16:function(e,t){var r=K(this,2,e,t);return r[1]<<8|r[0]},getInt32:function(e,t){return W(K(this,4,e,t))},getUint32:function(e,t){return W(K(this,4,e,t))>>>0},getFloat32:function(e,t){return z(K(this,4,e,t),23,4)},getFloat64:function(e,t){return z(K(this,8,e,t),52,8)},setInt8:function(e,t){Y(this,1,e,U,t)},setUint8:function(e,t){Y(this,1,e,U,t)},setInt16:function(e,t,r){Y(this,2,e,q,t,r)},setUint16:function(e,t,r){Y(this,2,e,q,t,r)},setInt32:function(e,t,r){Y(this,4,e,B,t,r)},setUint32:function(e,t,r){Y(this,4,e,B,t,r)},setFloat32:function(e,t,r){Y(this,4,e,G,t,r)},setFloat64:function(e,t,r){Y(this,8,e,H,t,r)}});y(j,g),y(x,_),a(x[b],s.VIEW,!0),r[g]=j,r[_]=x},{"./_an-instance":4,"./_array-fill":7,"./_descriptors":18,"./_fails":24,"./_global":29,"./_hide":31,"./_library":47,"./_object-dp":54,"./_object-gopn":58,"./_redefine-all":70,"./_set-to-string-tag":76,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_typed":94}],94:[function(e,t,r){for(var n,o=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),u=s("view"),c=!(!o.ArrayBuffer||!o.DataView),l=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(n=o[d[f++]])?(i(n.prototype,a,!0),i(n.prototype,u,!0)):l=!1;t.exports={ABV:c,CONSTR:l,TYPED:a,VIEW:u}},{"./_global":29,"./_hide":31,"./_uid":95}],95:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],96:[function(e,t,r){var n=e("./_global").navigator;t.exports=n&&n.userAgent||""},{"./_global":29}],97:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=!i&&n.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":14,"./_global":29,"./_library":47,"./_object-dp":54,"./_wks-ext":98}],98:[function(e,t,r){r.f=e("./_wks")},{"./_wks":99}],99:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return n[e]||(n[e]=s&&i[e]||(s?i:o)("Symbol."+e))}).store=n},{"./_global":29,"./_shared":78,"./_uid":95}],100:[function(e,t,r){var n=e("./_classof"),o=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]}},{"./_classof":12,"./_core":14,"./_iterators":46,"./_wks":99}],101:[function(e,t,r){"use strict";var n=e("./_export"),o=e("./_array-methods")(5),i="find",s=!0;i in[]&&Array(1)[i](function(){s=!1}),n(n.P+n.F*s,"Array",{find:function(e,t){return o(this,e,1<arguments.length?t:void 0)}}),e("./_add-to-unscopables")(i)},{"./_add-to-unscopables":2,"./_array-methods":9,"./_export":22}],102:[function(e,t,r){"use strict";var h=e("./_ctx"),n=e("./_export"),m=e("./_to-object"),v=e("./_iter-call"),y=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");n(n.S+n.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,r){var n,o,i,s,a=m(e),u="function"==typeof this?this:Array,c=arguments.length,l=1<c?t:void 0,f=void 0!==l,d=0,p=b(a);if(f&&(l=h(l,2<c?r:void 0,2)),null==p||u==Array&&y(p))for(o=new u(n=g(a.length));d<n;d++)_(o,d,f?l(a[d],d):a[d]);else for(s=p.call(a),o=new u;!(i=s.next()).done;d++)_(o,d,f?v(s,l,[i.value,d],!0):i.value);return o.length=d,o}})},{"./_create-property":15,"./_ctx":16,"./_export":22,"./_is-array-iter":37,"./_iter-call":41,"./_iter-detect":44,"./_to-length":89,"./_to-object":90,"./core.get-iterator-method":100}],103:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":2,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":88}],104:[function(e,t,r){var n=e("./_object-dp").f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e("./_descriptors")&&n(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":18,"./_object-dp":54}],105:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},{"./_export":22}],106:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{fround:e("./_math-fround")})},{"./_export":22,"./_math-fround":48}],107:[function(e,t,r){var n=e("./_export"),o=Math.imul;n(n.S+n.F*e("./_fails")(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var r=65535,n=+e,o=+t,i=r&n,s=r&o;return 0|i*s+((r&n>>>16)*s+i*(r&o>>>16)<<16>>>0)}})},{"./_export":22,"./_fails":24}],108:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{trunc:function(e){return(0<e?Math.floor:Math.ceil)(e)}})},{"./_export":22}],109:[function(e,t,r){"use strict";function n(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var r,n,o,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=t.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+t}for(var s,a=t.slice(2),u=0,c=a.length;u<c;u++)if((s=a.charCodeAt(u))<48||o<s)return NaN;return parseInt(a,n)}}return+t}var o=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),u=e("./_fails"),c=e("./_object-gopn").f,f=e("./_object-gopd").f,d=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",m=o[h],v=m,y=m.prototype,g=s(e("./_object-create")(y))==h,_="trim"in String.prototype;if(!m(" 0o1")||!m("0b1")||m("+0x1")){m=function(e){var t=arguments.length<1?0:e,r=this;return r instanceof m&&(g?u(function(){y.valueOf.call(r)}):s(r)!=h)?a(new v(n(t)),r,m):n(t)};for(var b,w=e("./_descriptors")?c(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),j=0;w.length>j;j++)i(v,b=w[j])&&!i(m,b)&&d(m,b,f(v,b));(m.prototype=y).constructor=m,e("./_redefine")(o,h,m)}},{"./_cof":13,"./_descriptors":18,"./_fails":24,"./_global":29,"./_has":30,"./_inherit-if-required":34,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_redefine":71,"./_string-trim":82,"./_to-primitive":91}],110:[function(e,t,r){var n=e("./_export"),o=e("./_parse-int");n(n.S+n.F*(Number.parseInt!=o),"Number",{parseInt:o})},{"./_export":22,"./_parse-int":66}],111:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":62,"./_object-sap":64,"./_to-object":90}],112:[function(e,t,r){"use strict";var n=e("./_classof"),o={};o[e("./_wks")("toStringTag")]="z",o+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},{"./_classof":12,"./_redefine":71,"./_wks":99}],113:[function(r,e,t){"use strict";function n(){}function f(e){var t;return!(!v(e)||"function"!=typeof(t=e.then))&&t}function o(l,r){if(!l._n){l._n=!0;var n=l._c;j(function(){for(var u=l._v,c=1==l._s,e=0,t=function(e){var t,r,n,o=c?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{o?(c||(2==l._h&&N(l),l._h=1),!0===o?t=u:(a&&a.enter(),t=o(u),a&&(a.exit(),n=!0)),t===e.promise?s(E("Promise-chain cycle")):(r=f(t))?r.call(t,i,s):i(t)):s(u)}catch(e){a&&!n&&a.exit(),s(e)}};n.length>e;)t(n[e++]);l._c=[],l._n=!1,r&&!l._h&&D(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),o(t,!0))}var s,a,u,c,l=r("./_library"),d=r("./_global"),p=r("./_ctx"),h=r("./_classof"),m=r("./_export"),v=r("./_is-object"),y=r("./_a-function"),g=r("./_an-instance"),_=r("./_for-of"),b=r("./_species-constructor"),w=r("./_task").set,j=r("./_microtask")(),x=r("./_new-promise-capability"),k=r("./_perform"),S=r("./_user-agent"),P=r("./_promise-resolve"),M="Promise",E=d.TypeError,O=d.process,I=O&&O.versions,A=I&&I.v8||"",T=d[M],C="process"==h(O),R=a=x.f,F=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[r("./_wks")("species")]=function(e){e(n,n)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(n)instanceof t&&0!==A.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(e){}}(),D=function(i){w.call(d,function(){var e,t,r,n=i._v,o=L(i);if(o&&(e=k(function(){C?O.emit("unhandledRejection",n,i):(t=d.onunhandledrejection)?t({promise:i,reason:n}):(r=d.console)&&r.error&&r.error("Unhandled promise rejection",n)}),i._h=C||L(i)?2:1),i._a=void 0,o&&e.e)throw e.v})},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(d,function(){var e;C?O.emit("rejectionHandled",t):(e=d.onrejectionhandled)&&e({promise:t,reason:t._v})})},z=function(e){var r,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(r=f(e))?j(function(){var t={_w:n,_d:!1};try{r.call(e,p(z,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(n._v=e,n._s=1,o(n,!1))}catch(e){i.call({_w:n,_d:!1},e)}}};F||(T=function(e){g(this,T,M,"_h"),y(e),s.call(this);try{e(p(z,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r("./_redefine-all")(T.prototype,{then:function(e,t){var r=R(b(this,T));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=C?O.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&o(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),u=function(){var e=new s;this.promise=e,this.resolve=p(z,e,1),this.reject=p(i,e,1)},x.f=R=function(e){return e===T||e===c?new u:a(e)}),m(m.G+m.W+m.F*!F,{Promise:T}),r("./_set-to-string-tag")(T,M),r("./_set-species")(M),c=r("./_core")[M],m(m.S+m.F*!F,M,{reject:function(e){var t=R(this);return(0,t.reject)(e),t.promise}}),m(m.S+m.F*(l||!F),M,{resolve:function(e){return P(l&&this===c?T:this,e)}}),m(m.S+m.F*!(F&&r("./_iter-detect")(function(e){T.all(e).catch(n)})),M,{all:function(e){var s=this,t=R(s),a=t.resolve,u=t.reject,r=k(function(){var n=[],o=0,i=1;_(e,!1,function(e){var t=o++,r=!1;n.push(void 0),i++,s.resolve(e).then(function(e){r||(r=!0,n[t]=e,--i||a(n))},u)}),--i||a(n)});return r.e&&u(r.v),t.promise},race:function(e){var t=this,r=R(t),n=r.reject,o=k(function(){_(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},{"./_a-function":1,"./_an-instance":4,"./_classof":12,"./_core":14,"./_ctx":16,"./_export":22,"./_for-of":27,"./_global":29,"./_is-object":39,"./_iter-detect":44,"./_library":47,"./_microtask":51,"./_new-promise-capability":52,"./_perform":67,"./_promise-resolve":68,"./_redefine-all":70,"./_set-species":75,"./_set-to-string-tag":76,"./_species-constructor":79,"./_task":84,"./_user-agent":96,"./_wks":99}],114:[function(e,t,r){var n=e("./_global"),i=e("./_inherit-if-required"),o=e("./_object-dp").f,s=e("./_object-gopn").f,a=e("./_is-regexp"),u=e("./_flags"),c=n.RegExp,l=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(e("./_descriptors")&&(!h||e("./_fails")(function(){return p[e("./_wks")("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")}))){c=function(e,t){var r=this instanceof c,n=a(e),o=void 0===t;return!r&&n&&e.constructor===c&&o?e:i(h?new l(n&&!o?e.source:e,t):l((n=e instanceof c)?e.source:e,n&&o?u.call(e):t),r?this:f,c)};function m(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})}for(var v=s(l),y=0;v.length>y;)m(v[y++]);(f.constructor=c).prototype=f,e("./_redefine")(n,"RegExp",c)}e("./_set-species")("RegExp")},{"./_descriptors":18,"./_fails":24,"./_flags":26,"./_global":29,"./_inherit-if-required":34,"./_is-regexp":40,"./_object-dp":54,"./_object-gopn":58,"./_redefine":71,"./_set-species":75,"./_wks":99}],115:[function(e,t,r){"use strict";var n=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},{"./_export":22,"./_regexp-exec":73}],116:[function(e,t,r){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":18,"./_flags":26,"./_object-dp":54}],117:[function(e,t,r){"use strict";var k=e("./_an-object"),n=e("./_to-object"),S=e("./_to-length"),P=e("./_to-integer"),M=e("./_advance-string-index"),E=e("./_regexp-exec-abstract"),O=Math.max,I=Math.min,d=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;e("./_fix-re-wks")("replace",2,function(o,i,w,j){return[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):w.call(String(r),e,t)},function(e,t){var r=j(w,e,this,t);if(r.done)return r.value;var n=k(e),o=String(this),i="function"==typeof t;i||(t=String(t));var s=n.global;if(s){var a=n.unicode;n.lastIndex=0}for(var u=[];;){var c=E(n,o);if(null===c)break;if(u.push(c),!s)break;""===String(c[0])&&(n.lastIndex=M(o,S(n.lastIndex),a))}for(var l,f="",d=0,p=0;p<u.length;p++){c=u[p];for(var h=String(c[0]),m=O(I(P(c.index),o.length),0),v=[],y=1;y<c.length;y++)v.push(void 0===(l=c[y])?l:String(l));var g=c.groups;if(i){var _=[h].concat(v,m,o);void 0!==g&&_.push(g);var b=String(t.apply(void 0,_))}else b=x(h,o,m,v,g,t);d<=m&&(f+=o.slice(d,m)+b,d=m+h.length)}return f+o.slice(d)}];function x(i,s,a,u,c,e){var l=a+i.length,f=u.length,t=h;return void 0!==c&&(c=n(c),t=p),w.call(e,t,function(e,t){var r;switch(t.charAt(0)){case"$":return"$";case"&":return i;case"`":return s.slice(0,a);case"'":return s.slice(l);case"<":r=c[t.slice(1,-1)];break;default:var n=+t;if(0==n)return e;if(f<n){var o=d(n/10);return 0===o?e:o<=f?void 0===u[o-1]?t.charAt(1):u[o-1]+t.charAt(1):e}r=u[n-1]}return void 0===r?"":r})}})},{"./_advance-string-index":3,"./_an-object":5,"./_fix-re-wks":25,"./_regexp-exec-abstract":72,"./_to-integer":87,"./_to-length":89,"./_to-object":90}],118:[function(e,t,r){"use strict";var f=e("./_is-regexp"),_=e("./_an-object"),b=e("./_species-constructor"),w=e("./_advance-string-index"),j=e("./_to-length"),x=e("./_regexp-exec-abstract"),d=e("./_regexp-exec"),n=e("./_fails"),k=Math.min,p=[].push,s="split",h="length",m="lastIndex",S=4294967295,P=!n(function(){RegExp(S,"y")});e("./_fix-re-wks")("split",2,function(o,i,v,y){var g;return g="c"=="abbc"[s](/(b)*/)[1]||4!="test"[s](/(?:)/,-1)[h]||2!="ab"[s](/(?:ab)*/)[h]||4!="."[s](/(.?)(.?)/)[h]||1<"."[s](/()()/)[h]||""[s](/.?/)[h]?function(e,t){var r=String(this);if(void 0===e&&0===t)return[];if(!f(e))return v.call(r,e,t);for(var n,o,i,s=[],a=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),u=0,c=void 0===t?S:t>>>0,l=new RegExp(e.source,a+"g");(n=d.call(l,r))&&!(u<(o=l[m])&&(s.push(r.slice(u,n.index)),1<n[h]&&n.index<r[h]&&p.apply(s,n.slice(1)),i=n[0][h],u=o,s[h]>=c));)l[m]===n.index&&l[m]++;return u===r[h]?!i&&l.test("")||s.push(""):s.push(r.slice(u)),s[h]>c?s.slice(0,c):s}:"0"[s](void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:v.call(this,e,t)}:v,[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):g.call(String(r),e,t)},function(e,t){var r=y(g,e,this,t,g!==v);if(r.done)return r.value;var n=_(e),o=String(this),i=b(n,RegExp),s=n.unicode,a=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(P?"y":"g"),u=new i(P?n:"^(?:"+n.source+")",a),c=void 0===t?S:t>>>0;if(0==c)return[];if(0===o.length)return null===x(u,o)?[o]:[];for(var l=0,f=0,d=[];f<o.length;){u.lastIndex=P?f:0;var p,h=x(u,P?o:o.slice(f));if(null===h||(p=k(j(u.lastIndex+(P?0:f)),o.length))===l)f=w(o,f,s);else{if(d.push(o.slice(l,f)),d.length===c)return d;for(var m=1;m<=h.length-1;m++)if(d.push(h[m]),d.length===c)return d;f=l=p}}return d.push(o.slice(l)),d}]})},{"./_advance-string-index":3,"./_an-object":5,"./_fails":24,"./_fix-re-wks":25,"./_is-regexp":40,"./_regexp-exec":73,"./_regexp-exec-abstract":72,"./_species-constructor":79,"./_to-length":89}],119:[function(t,e,r){"use strict";t("./es6.regexp.flags");function n(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var o=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",u=/./[a];t("./_fails")(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?n(function(){var e=o(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):u.name!=a&&n(function(){return u.call(this)})},{"./_an-object":5,"./_descriptors":18,"./_fails":24,"./_flags":26,"./_redefine":71,"./es6.regexp.flags":116}],120:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":43,"./_string-at":80}],121:[function(e,t,r){"use strict";var n=e("./_export"),i=e("./_to-length"),s=e("./_string-context"),a="startsWith",u=""[a];n(n.P+n.F*e("./_fails-is-regexp")(a),"String",{startsWith:function(e,t){var r=s(this,e,a),n=i(Math.min(1<arguments.length?t:void 0,r.length)),o=String(e);return u?u.call(r,o,n):r.slice(n,n+o.length)===o}})},{"./_export":22,"./_fails-is-regexp":23,"./_string-context":81,"./_to-length":89}],122:[function(e,t,r){"use strict";function n(e){var t=K[e]=I(z[q]);return t._k=e,t}function o(e,t){k(e);for(var r,n=j(t=M(t)),o=0,i=n.length;o<i;)te(e,r=n[o++],t[r]);return e}function i(e){var t=G.call(this,e=E(e,!0));return!(this===$&&l(K,e)&&!l(Y,e))&&(!(t||!l(this,e)||!l(K,e)||l(this,B)&&this[B][e])||t)}function s(e,t){if(e=M(e),t=E(t,!0),e!==$||!l(K,t)||l(Y,t)){var r=D(e,t);return!r||!l(K,t)||l(e,B)&&e[B][t]||(r.enumerable=!0),r}}function a(e){for(var t,r=N(M(e)),n=[],o=0;r.length>o;)l(K,t=r[o++])||t==B||t==h||n.push(t);return n}function u(e){for(var t,r=e===$,n=N(r?Y:M(e)),o=[],i=0;n.length>i;)!l(K,t=n[i++])||r&&!l($,t)||o.push(K[t]);return o}var c=e("./_global"),l=e("./_has"),f=e("./_descriptors"),d=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,m=e("./_fails"),v=e("./_shared"),y=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),j=e("./_enum-keys"),x=e("./_is-array"),k=e("./_an-object"),S=e("./_is-object"),P=e("./_to-object"),M=e("./_to-iobject"),E=e("./_to-primitive"),O=e("./_property-desc"),I=e("./_object-create"),A=e("./_object-gopn-ext"),T=e("./_object-gopd"),C=e("./_object-gops"),R=e("./_object-dp"),F=e("./_object-keys"),D=T.f,L=R.f,N=A.f,z=c.Symbol,W=c.JSON,U=W&&W.stringify,q="prototype",B=_("_hidden"),H=_("toPrimitive"),G={}.propertyIsEnumerable,V=v("symbol-registry"),K=v("symbols"),Y=v("op-symbols"),$=Object[q],J="function"==typeof z&&!!C.f,Q=c.QObject,X=!Q||!Q[q]||!Q[q].findChild,Z=f&&m(function(){return 7!=I(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=D($,t);n&&delete $[t],L(e,t,r),n&&e!==$&&L($,t,n)}:L,ee=J&&"symbol"==typeof z.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof z},te=function(e,t,r){return e===$&&te(Y,t,r),k(e),t=E(t,!0),k(r),l(K,t)?(r.enumerable?(l(e,B)&&e[B][t]&&(e[B][t]=!1),r=I(r,{enumerable:O(0,!1)})):(l(e,B)||L(e,B,O(1,{})),e[B][t]=!0),Z(e,t,r)):L(e,t,r)};J||(p((z=function(e){if(this instanceof z)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),r=function(e){this===$&&r.call(Y,e),l(this,B)&&l(this[B],t)&&(this[B][t]=!1),Z(this,t,O(1,e))};return f&&X&&Z($,t,{configurable:!0,set:r}),n(t)})[q],"toString",function(){return this._k}),T.f=s,R.f=te,e("./_object-gopn").f=A.f=a,e("./_object-pie").f=i,C.f=u,f&&!e("./_library")&&p($,"propertyIsEnumerable",i,!0),b.f=function(e){return n(_(e))}),d(d.G+d.W+d.F*!J,{Symbol:z});for(var re="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;re.length>ne;)_(re[ne++]);for(var oe=F(_.store),ie=0;oe.length>ie;)w(oe[ie++]);d(d.S+d.F*!J,"Symbol",{for:function(e){return l(V,e+="")?V[e]:V[e]=z(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in V)if(V[t]===e)return t},useSetter:function(){X=!0},useSimple:function(){X=!1}}),d(d.S+d.F*!J,"Object",{create:function(e,t){return void 0===t?I(e):o(I(e),t)},defineProperty:te,defineProperties:o,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:u});var se=m(function(){C.f(1)});d(d.S+d.F*se,"Object",{getOwnPropertySymbols:function(e){return C.f(P(e))}}),W&&d(d.S+d.F*(!J||m(function(){var e=z();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;o<arguments.length;)n.push(arguments[o++]);if(r=t=n[1],(S(t)||void 0!==e)&&!ee(e))return x(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!ee(t))return t}),n[1]=t,U.apply(W,n)}}),z[q][H]||e("./_hide")(z[q],H,z[q].valueOf),y(z,"Symbol"),y(Math,"Math",!0),y(c.JSON,"JSON",!0)},{"./_an-object":5,"./_descriptors":18,"./_enum-keys":21,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array":38,"./_is-object":39,"./_library":47,"./_meta":50,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gopn-ext":57,"./_object-gops":59,"./_object-keys":62,"./_object-pie":63,"./_property-desc":69,"./_redefine":71,"./_set-to-string-tag":76,"./_shared":78,"./_to-iobject":88,"./_to-object":90,"./_to-primitive":91,"./_uid":95,"./_wks":99,"./_wks-define":97,"./_wks-ext":98}],123:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}})},{"./_typed-array":92}],124:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}},!0)},{"./_typed-array":92}],125:[function(e,t,r){var n=e("./_export"),u=e("./_own-keys"),c=e("./_to-iobject"),l=e("./_object-gopd"),f=e("./_create-property");n(n.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,r,n=c(e),o=l.f,i=u(n),s={},a=0;i.length>a;)void 0!==(r=o(n,t=i[a++]))&&f(s,t,r);return s}})},{"./_create-property":15,"./_export":22,"./_object-gopd":56,"./_own-keys":65,"./_to-iobject":88}],126:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":97}],127:[function(e,t,r){for(var n=e("./es6.array.iterator"),o=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),u=e("./_iterators"),c=e("./_wks"),l=c("iterator"),f=c("toStringTag"),d=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),m=0;m<h.length;m++){var v,y=h[m],g=p[y],_=s[y],b=_&&_.prototype;if(b&&(b[l]||a(b,l,d),b[f]||a(b,f,y),u[y]=d,g))for(v in n)b[v]||i(b,v,n[v],!0)}},{"./_global":29,"./_hide":31,"./_iterators":46,"./_object-keys":62,"./_redefine":71,"./_wks":99,"./es6.array.iterator":103}],128:[function(e,t,r){var n=function(s){"use strict";var u,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",r=t.asyncIterator||"@@asyncIterator",n=t.toStringTag||"@@toStringTag";function a(e,t,r,n){var i,s,a,u,o=t&&t.prototype instanceof y?t:y,c=Object.create(o.prototype),l=new M(n||[]);return c._invoke=(i=e,s=r,a=l,u=d,function(e,t){if(u===h)throw new Error("Generator is already running");if(u===m){if("throw"===e)throw t;return O()}for(a.method=e,a.arg=t;;){var r=a.delegate;if(r){var n=k(r,a);if(n){if(n===v)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(u===d)throw u=m,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);u=h;var o=f(i,s,a);if("normal"===o.type){if(u=a.done?m:p,o.arg===v)continue;return{value:o.arg,done:a.done}}"throw"===o.type&&(u=m,a.method="throw",a.arg=o.arg)}}),c}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function i(){}function c(){}var g={};g[o]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(E([])));b&&b!==e&&l.call(b,o)&&(g=b);var w=c.prototype=y.prototype=Object.create(g);function j(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function x(u,c){var t;this._invoke=function(r,n){function e(){return new c(function(e,t){!function t(e,r,n,o){var i=f(u[e],u,r);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?c.resolve(a.__await).then(function(e){t("next",e,n,o)},function(e){t("throw",e,n,o)}):c.resolve(a).then(function(e){s.value=e,n(s)},function(e){return t("throw",e,n,o)})}o(i.arg)}(r,n,e,t)})}return t=t?t.then(e,e):e()}}function k(e,t){var r=e.iterator[t.method];if(r===u){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=u,k(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var n=f(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,v;var o=n.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=u),t.delegate=null,v):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(l.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=u,e.done=!0,e};return n.next=n}}return{next:O}}function O(){return{value:u,done:!0}}return i.prototype=w.constructor=c,c.constructor=i,c[n]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,n in e||(e[n]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},j(x.prototype),x.prototype[r]=function(){return this},s.AsyncIterator=x,s.async=function(e,t,r,n,o){void 0===o&&(o=Promise);var i=new x(a(e,t,r,n),o);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},j(w),w[n]="Generator",w[o]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(r){var n=[];for(var e in r)n.push(e);return n.reverse(),function e(){for(;n.length;){var t=n.pop();if(t in r)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=E,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=u,this.done=!1,this.delegate=null,this.method="next",this.arg=u,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=u)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function e(e,t){return i.type="throw",i.arg=r,n.next=e,t&&(n.method="next",n.arg=u),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var s=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(s&&a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:E(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=u),v}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},{}],129:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Build={version:"0.71.0 (d4bfb2efc0046f1c59c6bf222cd30533)",buildSeed:1630491930431,"wdosbox.wasm":{size:1461250,gzSize:491232},"wdosbox.js":{size:107589,gzSize:27656},"wlibzip.wasm":{size:112300,gzSize:54090},"wlibzip.js":{size:80251,gzSize:20720}}},{}],130:[function(e,t,r){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var i=function(){function e(){s(this,e)}return o(e,[{key:"close",value:function(){}},{key:"put",value:function(){return Promise.resolve()}},{key:"get",value:function(e,t){return void 0!==t?Promise.resolve(t):Promise.reject("Cache is not supported on this host")}},{key:"forEach",value:function(e,t){t()}}]),e}();r.CacheNoop=i,r.CacheDb=function(e,r){return new Promise(function(t){new a(e,t,function(e){r.onErr(e),t(new i)})})};var a=function(){function i(e,t,r){var n=this;if(s(this,i),this.storeName="files",this.db=null,this.version=e,this.indexedDB="undefined"==typeof window?void 0:window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,this.indexedDB){var o=this.indexedDB.open("js-dos-cache ("+e+")",1);o.onerror=function(e){var t;r("Can't open cache database: "+(null===(t=o.error)||void 0===t?void 0:t.message))},o.onsuccess=function(e){n.db=o.result,t(n)},o.onupgradeneeded=function(e){try{n.db=o.result,n.db.onerror=function(e){r("Can't upgrade cache database")},n.db.createObjectStore(n.storeName)}catch(e){r("Can't upgrade cache database")}}}else r("Indexed db is not supported on this host")}return o(i,[{key:"close",value:function(){null!==this.db&&(this.db.close(),this.db=null)}},{key:"put",value:function(r,n){var o=this;return new Promise(function(e){if(null!==o.db){var t=o.db.transaction(o.storeName,"readwrite");t.oncomplete=function(){return e()},t.objectStore(o.storeName).put(n,r)}else e()})}},{key:"get",value:function(o,i){var s=this;return new Promise(function(t,r){function e(e){void 0===i?r(new Error(e)):t(i)}if(null!==s.db){var n=s.db.transaction(s.storeName,"readonly").objectStore(s.storeName).get(o);n.onerror=function(){return r(new Error("Can't read value for key '"+o+"'"))},n.onsuccess=function(){n.result?t(n.result):e("Result is empty for key '"+o+"', result: "+n.result)}}else e("db is not initalized")})}},{key:"forEach",value:function(r,n){if(null!==this.db){var e=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).openCursor();e.onerror=function(){return n()},e.onsuccess=function(e){var t=e.target.result;t?(r(t.key.toString(),t.value),t.continue()):n()}}else n()}}]),i}()},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119}],131:[function(e,t,r){"use strict";function v(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=a(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.array.from"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("regenerator-runtime/runtime");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var y=e("./dos-conf"),g=o(e("../../libzip/libzip")),_=e("../../http"),c=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.config=y.createDosConfig(),this.sources=[],this.libzipWasm=e,this.cache=t}var e,t,n,a,o;return e=r,(t=[{key:"autoexec",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.config.autoexec.options.script.value=t.join("\n"),this}},{key:"cycles",value:function(e){return this.config.cpu.options.cycles.value=e,this}},{key:"extract",value:function(e,t,r){var n=1<arguments.length&&void 0!==t?t:"/",o=2<arguments.length&&void 0!==r?r:"zip";return this.extractAll([{url:e,path:n,type:o}])}},{key:"extractAll",value:function(e){var t;return(t=this.sources).push.apply(t,i(e)),this}},{key:"toUint8Array",value:(a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d,p,h=this,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=0<m.length&&void 0!==m[0]&&m[0],r={},e.next=4,this.libzipWasm.instantiate(r);case 4:return n=new g.default(r,"/home/web_user"),e.next=7,y.toDosboxConf(this.config);case 7:o=e.sent,i=[],s=v(this.sources);try{for(u=function(){var t=a.value;if("zip"!==t.type)throw new Error("Only Zip is supported");var e=_.HTTPRequest(t.url,{cache:h.cache,responseType:"arraybuffer"}).then(function(e){return{source:t,data:new Uint8Array(e)}});i.push(e)},s.s();!(a=s.n()).done;)u()}catch(e){s.e(e)}finally{s.f()}if(t){e.next=18;break}return e.next=14,n.writeFile(".jsdos/dosbox.conf",o);case 14:return e.next=16,n.writeFile(".jsdos/readme.txt",b);case 16:return e.next=18,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 18:return e.next=20,Promise.all(i);case 20:c=e.sent,l=v(c);try{for(l.s();!(f=l.n()).done;)d=f.value,n.zipToFs(d.data,d.source.path)}catch(e){l.e(e)}finally{l.f()}if(t)return e.next=26,n.writeFile(".jsdos/dosbox.conf",o);e.next=30;break;case 26:return e.next=28,n.writeFile(".jsdos/readme.txt",b);case 28:return e.next=30,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 30:return e.next=32,n.zipFromFs();case 32:return p=e.sent,n.destroy(),e.abrupt("return",p);case 35:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(){return o.apply(this,arguments)})}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=c;var b="\nPlease visit our website:\n\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n"},{"../../http":136,"../../libzip/libzip":141,"./dos-conf":132,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],132:[function(e,t,r){"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){o(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("regenerator-runtime/runtime"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.string.starts-with"),e("core-js/modules/es6.array.find"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var f=function e(){l(this,e),this.name="sdl",this.description="This section contains all of the low level system settings for how DOSBox interacts with your real hardware. You can define what resolutions are emulated, how DOSBox should treat errors or listen to your keyboard and mouse. You can often achieve a fair level of optimization by working with these setting, though for the most part leaving them at their default settings will create the best experience. These settings are passed on to the SDL Library which handles low level things like input and thread priority.",this.options={autolock:{name:"autolock",description:"Mouse will automatically lock, if you click on the screen.",value:!1,allowedValues:[!0,!1]}}};r.OutputCategory=f;var d=function e(){l(this,e),this.name="dosbox",this.description="The [dosbox] section contains various settings that do not pertain to any other section (e.g. setting the language used in DOSBox help texts, where to store screen captures, etc.)",this.options={machine:{name:"machine",description:"The type of machine tries to emulate.",value:"svga_s3",allowedValues:["hercules","cga","tandy","pcjr","ega","vgaonly","svga_s3","svga_et3000","svga_et4000","svga_paradise","vesa_nolfb","vesa_oldvbe"]}}};r.DosboxCategory=d;var p=function e(){l(this,e),this.name="cpu",this.description="The CPU section controls how DOSBox tries to emulate the CPU, how fast the emulation should be, and to adjust it. DOSBox offers 4 different methods of CPU emulation.",this.options={core:{name:"core",description:"CPU Core used in emulation. auto will switch to dynamic if available and appropriate.",value:"auto",allowedValues:["auto","normal","simple"]},cputype:{name:"cputype",description:"CPU Type used in emulation. auto is the fastest choice.",value:"auto",allowedValues:["auto","386","386_slow","486_slow","pentium_slow","386_prefetch"]},cycles:{name:"cycles",description:"Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags.\nCycles can be set in 3 ways:\n'auto'          tries to guess what a game needs.\n                It usually works, but can fail for certain games.\n'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n                (Example: fixed 4000).\n'max'           will allocate as much cycles as your computer is able to handle.\n",value:"auto",allowedValues:["auto","fixed","max"]}}};r.CpuCategory=p;var m=function e(){l(this,e),this.name="mixer",this.description="Here you can define the quality of emulated audio.",this.options={rate:{name:"rate",description:"Frequency rate of sound",value:44100,allowedValues:[]},nosound:{name:"nosound",description:"Enable silent mode, sound is still emulated though.",value:!1,allowedValues:[!0,!1]}}};r.MixerCategory=m;var v=function e(){l(this,e),this.name="autoexec",this.description="Lines in this section will be run at startup",this.options={script:{name:"lines",description:"Use \\n to separate lines",value:"",allowedValues:[]}}};function y(){return{output:new f,dosbox:new d,cpu:new p,mixer:new m,autoexec:new v}}function g(f,d){var p="sdl"===d.name?"output":d.name;return new Promise(function(e,n){if(f)if(f.name===d.name){for(var t=0,r=Object.keys(f.options);t<r.length;t++){var o=r[t],i=f.options[o],s=d.options[o];if(void 0===s)return void n(new Error("Unknown option '"+(i.name||o)+"' in '"+f.name+"'"));if(0<s.allowedValues.length){var a=function(){var t=i.value,e=s.allowedValues.find(function(e){return e===t});if("cpu"===p&&"cycles"===i.name&&(t+"").startsWith("fixed ")){var r=Number.parseInt(t.substr("fixed ".length),10);if(isNaN(r))return n(new Error("Fixed value should conatain number")),{v:void 0}}else if(void 0===e)return n(new Error("Incorrect value '"+t+"' ("+h(t)+") for '"+f.name+"."+(i.name||o)+"' allowed is "+JSON.stringify(s.allowedValues))),{v:void 0}}();if("object"===h(a))return a.v}}for(var u=0,c=Object.keys(d.options);u<c.length;u++){var l=c[u];if(!(l in f.options))return void n(new Error("Option '"+l+"' is missed in '"+p+"'"))}e()}else n(new Error("Incorrect category name '"+f.name+"' should be '"+d.name+"'"));else n(new Error("Category '"+p+"' is missed"))})}function _(){return b.apply(this,arguments)}function b(){return(b=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,g(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function w(){return j.apply(this,arguments)}function j(){return(j=i(regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===t)return e.abrupt("return");e.next=2;break;case 2:n=0,o=Object.keys(t.options||{});case 3:if(!(n<o.length)){e.next=16;break}if(i=o[n],"string"!=typeof(s=t.options[i])&&"number"!=typeof s&&!Array.isArray(s)){e.next=13;break}if(a=r.options[i]){e.next=10;break}return e.abrupt("continue",13);case 10:u=s,t.options[i]=c({},a),t.options[i].value=u;case 13:n++,e.next=3;break;case 16:case"end":return e.stop()}},e)}))).apply(this,arguments)}function x(){return k.apply(this,arguments)}function k(){return(k=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,w(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function S(){return(S=i(regeneratorRuntime.mark(function e(r){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(r);case 2:return e.next=4,_(r);case 4:return n=P(r.output)+"\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n"+P(r.dosbox)+"\nlanguage=\ncaptures=capture\nmemsize=16\n"+P(r.cpu)+"\ncycleup=10\ncycledown=20\n"+P(r.mixer)+"\nblocksize=1024\nprebuffer=20\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n"+(t=r.autoexec,"[autoexec]\necho off\nmount c .\nc:\n\ntype jsdos~1/readme.txt\necho on\n\n".concat(t.options.script.value,"\n\n# Generated using https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█\n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n")),e.abrupt("return",Promise.resolve(n));case 6:case"end":return e.stop()}var t},e)}))).apply(this,arguments)}function P(e){var t="";t+="[".concat(e.name,"]\n");var r,n=s(Object.keys(e.options).sort());try{for(n.s();!(r=n.n()).done;){var o=r.value,i=e.options[o];t+="".concat(i.name,"=").concat(i.value,"\n")}}catch(e){n.e(e)}finally{n.f()}return t}r.AutoexecCategory=v,r.createDosConfig=y,r.toDosboxConf=function(e){return S.apply(this,arguments)}},{"core-js/modules/es6.array.find":101,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],133:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=new c.MessagesQueue,o=n.handler.bind(n),s=function(e){var t=e.data;"ws-sync-sleep"===(null==t?void 0:t.name)&&t.props.sessionId===r&&postMessage({name:"wc-sync-sleep",props:t.props},"*")},(a={sessionId:r,sendMessageToServer:function(e,t){i.messageHandler({data:{name:e,props:t}})},initMessageHandler:function(e){o=e,n.sendTo(o)},exit:function(){"undefined"!=typeof window&&window.removeEventListener("message",s)}}).module=i={postMessage:function(e,t){o(e,t)}},"undefined"!=typeof window&&window.addEventListener("message",s,{passive:!0}),e.next=10,t.instantiate(i);case 10:return i.callMain([r]),e.abrupt("return",a);case 12:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosDirect=function(e,t){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],134:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r,n){var o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=new c.MessagesQueue,i=o.handler.bind(o),(s=new Worker(t)).onerror=function(e){i("ws-err",{type:e.type,filename:e.filename,message:e.message})},s.onmessage=function(e){var t=e.data;void 0!==(null==t?void 0:t.name)&&i(t.name,t.props)},e.next=7,r.instantiate({});case 7:a={sessionId:n,sendMessageToServer:function(e,t){s.postMessage({name:e,props:t})},initMessageHandler:function(e){i=e,o.sendTo(i)},exit:function(){s.terminate()}};try{a.sendMessageToServer("wc-install",{module:r.wasmModule,sessionId:n})}catch(e){a.sendMessageToServer("wc-install",{sessionId:n})}return e.abrupt("return",a);case 10:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosWorker=function(e,t,r){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],135:[function(n,e,o){(function(e){"use strict";var t=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});var r=t(n("./impl/emulators-impl"));"undefined"!=typeof window&&(window.emulators=r.default),void 0!==e&&(e.emulators=r.default)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./impl/emulators-impl":138}],136:[function(e,t,r){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){s(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.symbol"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("./cache");r.HTTPRequest=function(r,n){return new Promise(function(e,t){new u(r,i(i({},n),{},{success:e,fail:function(e){t(new Error(e))}}))})};var u=function(){function n(e,t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.xhr=null,this.total=0,this.loaded=0,this.resource=e,this.options=t,this.options.method=t.method||"GET",this.cache=t.cache||new a.CacheNoop,"GET"===this.options.method&&this.cache.get(this.resource).then(function(e){void 0!==r.options.success&&r.options.success(e)}).catch(function(){r.makeHttpRequest()})}var e,t,r;return e=n,(t=[{key:"makeHttpRequest",value:function(){var e,t,r=this;this.xhr=new XMLHttpRequest,this.xhr.open(this.options.method||"GET",this.resource,!0),"POST"===this.options.method&&this.xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded"),this.xhr.overrideMimeType("text/plain; charset=x-user-defined"),"function"==typeof(e=this.xhr).addEventListener&&e.addEventListener("progress",function(e){if(r.total=e.total,r.loaded=e.loaded,r.options.progress)return r.options.progress(e.total,e.loaded)}),"function"==typeof(t=this.xhr).addEventListener&&t.addEventListener("error",function(){if(r.options.fail)return r.options.fail("Unalbe to download '"+r.resource+"', code: "+r.xhr.status),delete r.options.fail}),this.xhr.onreadystatechange=function(){return r.onReadyStateChange()},this.options.responseType&&(this.xhr.responseType=this.options.responseType),this.xhr.send(this.options.data)}},{key:"onReadyStateChange",value:function(){var e=this.xhr;if(4===e.readyState)if(200===e.status){if(this.options.success){var t=Math.max(this.total,this.loaded);return void 0!==this.options.progress&&this.options.progress(t,t),"GET"===this.options.method&&this.resource.indexOf("?")<0&&this.cache.put(this.resource,e.response),this.options.success(e.response)}}else if(this.options.fail)return this.options.fail("Unable to download '"+this.resource+"', code: "+e.status),delete this.options.fail}}])&&o(e.prototype,t),r&&o(e,r),n}()},{"./cache":130,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/web.dom.iterable":127}],137:[function(e,t,r){"use strict";function a(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});r.CommandInterfaceEventsImpl=function e(){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.delayedStdout=[],this.onStdoutConsumers=[],this.onFrameSizeConsumers=[],this.onFrameConsumers=[],this.onSoundPushConsumers=[],this.onExitConsumers=[],this.onMessageConsumers=[],this.onStdout=function(e){if(s.onStdoutConsumers.push(e),1===s.onStdoutConsumers.length){var t,r=a(s.delayedStdout);try{for(r.s();!(t=r.n()).done;){var n=t.value;s.fireStdout(n)}}catch(e){r.e(e)}finally{r.f()}s.delayedStdout=[]}},this.onFrameSize=function(e){s.onFrameSizeConsumers.push(e)},this.onFrame=function(e){s.onFrameConsumers.push(e)},this.onSoundPush=function(e){s.onSoundPushConsumers.push(e)},this.onExit=function(e){s.onExitConsumers.push(e)},this.onMessage=function(e){s.onMessageConsumers.push(e)},this.fireStdout=function(e){if(0!==s.onStdoutConsumers.length){var t,r=a(s.onStdoutConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}}else s.delayedStdout.push(e)},this.fireFrameSize=function(e,t){var r,n=a(s.onFrameSizeConsumers);try{for(n.s();!(r=n.n()).done;){(0,r.value)(e,t)}}catch(e){n.e(e)}finally{n.f()}},this.fireFrame=function(e){var t,r=a(s.onFrameConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireSoundPush=function(e){var t,r=a(s.onSoundPushConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireExit=function(){var e,t=a(s.onExitConsumers);try{for(t.s();!(e=t.n()).done;){(0,e.value)()}}catch(e){t.e(e)}finally{t.f()}s.onStdoutConsumers=[],s.onFrameSizeConsumers=[],s.onFrameConsumers=[],s.onSoundPushConsumers=[],s.onExitConsumers=[],s.onMessageConsumers=[]},this.fireMessage=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o,i=a(s.onMessageConsumers);try{for(i.s();!(o=i.n()).done;){o.value.apply(void 0,[e].concat(r))}}catch(e){i.e(e)}finally{i.f()}}}},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],138:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function d(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime");var n=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var h=e("../build"),m=e("../cache"),v=e("./modules"),y=n(e("../dos/bundle/dos-bundle")),g=e("../dos/dosbox/ts/direct"),_=e("../dos/dosbox/ts/worker"),b=n(e("../janus/janus-impl")),w=e("../protocol/protocol"),o=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.pathPrefix="",this.cacheSeed="",this.cachePromises={}}var t,r,n,o,i,s,a,u,c,l,f;return t=e,(r=[{key:"cache",value:function(e){if(null!=e&&0!==e.length||(e=h.Build.version+" "+this.cacheSeed),void 0===this.cachePromises[e]){var t=m.CacheDb(e,{onErr:console.error});this.cachePromises[e]=t}return this.cachePromises[e]}},{key:"dosBundle",value:(f=d(regeneratorRuntime.mark(function e(){var t,r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return t=e.sent,e.next=5,t.libzip();case 5:return r=e.sent,e.next=8,this.cache();case 8:return n=e.sent,e.abrupt("return",new y.default(r,n));case 10:case"end":return e.stop()}},e,this)})),function(){return f.apply(this,arguments)})},{key:"dosboxNode",value:(l=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return l.apply(this,arguments)})},{key:"dosboxDirect",value:(c=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,g.dosDirect(n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return c.apply(this,arguments)})},{key:"dosboxWorker",value:(u=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,_.dosWorker(this.pathPrefix+"wdosbox.js",n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return u.apply(this,arguments)})},{key:"janus",value:(a=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",b.default(t));case 1:case"end":return e.stop()}},e)})),function(e){return a.apply(this,arguments)})},{key:"backend",value:(s=d(regeneratorRuntime.mark(function e(o,i){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(t,r){var n=new w.CommandInterfaceOverTransportLayer(Array.isArray(o)?o:[o],i,function(e){null!==e?r(e):setTimeout(function(){return t(n)},4)})}));case 1:case"end":return e.stop()}},e)})),function(e,t){return s.apply(this,arguments)})},{key:"wasmModules",value:function(){var r=this;if(void 0!==this.wasmModulesPromise)return this.wasmModulesPromise;var e=function(){var e=d(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.cache();case 2:return t=e.sent,e.abrupt("return",new v.WasmModulesImpl(r.pathPrefix,t));case 4:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}();return this.wasmModulesPromise=e(),this.wasmModulesPromise}},{key:"dosDirect",value:(i=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return i.apply(this,arguments)})},{key:"dosWorker",value:(o=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxWorker(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})}])&&p(t.prototype,r),n&&p(t,n),e}());r.default=o},{"../build":129,"../cache":130,"../dos/bundle/dos-bundle":131,"../dos/dosbox/ts/direct":133,"../dos/dosbox/ts/worker":134,"../janus/janus-impl":140,"../protocol/protocol":143,"./modules":139,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],139:[function(o,e,y){"use strict";function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}o("core-js/modules/es6.array.from"),o("core-js/modules/es6.function.name"),o("core-js/modules/es6.regexp.to-string"),o("core-js/modules/web.dom.iterable"),o("core-js/modules/es6.array.iterator"),o("core-js/modules/es6.string.iterator"),o("core-js/modules/es6.regexp.replace"),o("regenerator-runtime/runtime"),o("core-js/modules/es6.promise"),o("core-js/modules/es6.object.to-string"),o("core-js/modules/es7.symbol.async-iterator"),o("core-js/modules/es6.symbol"),o("core-js/modules/es6.math.trunc"),o("core-js/modules/es6.math.clz32"),o("core-js/modules/es6.math.fround"),o("core-js/modules/es6.math.imul"),o("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(y,"__esModule",{value:!0});var _=o("../http");y.host=new function e(){if(a(this,e),this.wasmSupported=!1,this.globals="undefined"==typeof window?{}:window,this.globals.exports||(this.globals.exports={}),this.globals.compiled||(this.globals.compiled={}),"object"===("undefined"==typeof WebAssembly?"undefined":r(WebAssembly))&&"function"==typeof WebAssembly.instantiate&&"function"==typeof WebAssembly.compile){var t=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));t instanceof WebAssembly.Module&&(this.wasmSupported=new WebAssembly.Instance(t)instanceof WebAssembly.Instance)}Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(e,t){var r=65535&e,n=65535&t;return r*n+((e>>>16)*n+r*(t>>>16)<<16)|0}),Math.imul=Math.imul,Math.fround||(Math.fround=function(e){return e}),Math.fround=Math.fround,Math.clz32||(Math.clz32=function(e){e>>>=0;for(var t=0;t<32;t++)if(e&1<<31-t)return t;return 32}),Math.clz32=Math.clz32,Math.trunc||(Math.trunc=function(e){return e<0?Math.ceil(e):Math.floor(e)}),Math.trunc=Math.trunc};var t=function(){function r(e,t){a(this,r),this.wasmSupported=!1,0<e.length&&"/"!==e[e.length-1]&&(e+="/"),this.pathPrefix=e,this.cache=t}return s(r,[{key:"libzip",value:function(){return void 0!==this.libzipPromise||(this.libzipPromise=this.loadModule(this.pathPrefix+"wlibzip.js","WLIBZIP")),this.libzipPromise}},{key:"dosbox",value:function(){return void 0!==this.dosboxPromise||(this.dosboxPromise=this.loadModule(this.pathPrefix+"wdosbox.js","WDOSBOX")),this.dosboxPromise}},{key:"loadModule",value:function(e,t){return c(e,t,this.cache,function(){})}}]),r}();function c(e,t,r,n){return"undefined"==typeof XMLHttpRequest?function(e,t){if(void 0!==y.host.globals.compiled[t])return y.host.globals.compiled[t];var r=o(e),n=Promise.resolve(new l(r));t&&(y.host.globals.compiled[t]=n);return n}(e,t):function(p,h,m,v){if(void 0!==y.host.globals.compiled[h])return y.host.globals.compiled[h];function e(){var a;return a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=p.lastIndexOf("/"),r=p.indexOf("w",t),n=r===t+1&&0<=r,y.host.wasmSupported&&n){e.next=5;break}throw new Error("Starting from js-dos 6.22.60 js environment is not supported");case 5:return o=p.replace(".js",".wasm"),i=_.HTTPRequest(o,{cache:m,responseType:"arraybuffer",progress:function(e,t){v("Resolving DosBox ("+p+")",e,t)}}),s=_.HTTPRequest(p,{cache:m,progress:function(e,t){v("Resolving DosBox",e,t)}}),e.next=10,Promise.all([i,s]);case 10:return a=e.sent,u=g(a,2),c=u[0],l=u[1],e.next=16,WebAssembly.compile(c);case 16:return f=e.sent,d=function(e,t){e.env=e.env||{},WebAssembly.instantiate(f,e).then(function(e){return t(e,f)})},eval.call(window,l),e.abrupt("return",new b(f,y.host.globals.exports[h],d));case 20:case"end":return e.stop()}},e)}),(e=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}var t=function(){return e.apply(this,arguments)}();h&&(y.host.globals.compiled[h]=t);return t}(e,t,r,n)}y.WasmModulesImpl=t,y.loadWasmModule=c;var l=function(){function t(e){a(this,t),this.emModule=e}return s(t,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.onRuntimeInitialized=function(){e()},new r.emModule(t)})}}]),t}(),b=function(){function n(e,t,r){a(this,n),this.wasmModule=e,this.module=t,this.instantiateWasm=r}return s(n,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.instantiateWasm=r.instantiateWasm,t.onRuntimeInitialized=function(){e()},new r.module(t)})}}]),n}()},{"../http":136,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.math.clz32":105,"core-js/modules/es6.math.fround":106,"core-js/modules/es6.math.imul":107,"core-js/modules/es6.math.trunc":108,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],140:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function c(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.string.starts-with"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("../impl/ci-impl");function l(o,i){var s="";return function e(t){var r=t.indexOf("\n");if(-1===r)s+=t;else{var n=s+t.substr(0,r);s="";try{o(function(e){for(var t=atob(e),r=new Uint8Array(t.length),n=0;n<r.length;n++)r[n]=t.charCodeAt(n);return(new TextDecoder).decode(r)}(n))}catch(e){i(e)}e(t.substr(r+1))}}}var f=function(){function r(e,t){var h=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.live=!0,this.startedAt=Date.now(),this.exitResolveFn=function(){},this.configResolveFn=function(){},this.handleResolveFn=function(){},this.keyMatrix={},this.frameWidth=0,this.frameHeight=0,this.eventQueue="",this.eventIntervalId=-1,this.rttIntervalId=-1,this.logIntervalId=-1,this.logColor="not set",this.logWhiteMs=0,this.logRedMs=0,this.logYellowMs=0,this.onDataMessage=function(e){if(e.startsWith("config="))h.configResolveFn(JSON.parse(e.substr("config=".length)));else if(e.startsWith("frame=")){var t=m(e.substr("frame=".length).split("x"),2),r=t[0],n=t[1];h.frameWidth=Number.parseInt(r,10)||0,h.frameHeight=Number.parseInt(n,10)||0}else if(e.startsWith("rtt=")){var o,i=m(e.substr("rtt=".length).split(" "),3),s=i[0],a=i[1],u=i[2],c=Number.parseInt(a,10),l=Number.parseInt(u,10),f=Date.now(),d=(null===(o=h.handle)||void 0===o?void 0:o.getBitrate())||"0 kbits/sec",p=Number.parseInt(d.split(" ")[0],10);h.sendPipeMessage("rtt-data",Date.now(),c,l,f,p),s===h.opaqueId&&h.eventsImpl.fireStdout("rtt-data="+(f-c)+" "+p)}else if(e.startsWith("log-visual-"))switch(e){case"log-visual-white":h.eventsImpl.fireStdout("yellow-frame:"+(Date.now()-h.logYellowMs));break;case"log-visual-red":h.eventsImpl.fireStdout("white-frame:"+(Date.now()-h.logWhiteMs));break;case"log-visual-yellow":h.eventsImpl.fireStdout("red-frame:"+(Date.now()-h.logRedMs))}else if(e.startsWith("log-command-"))switch(e){case"log-command-white":h.eventsImpl.fireStdout("yellow-pipe:"+(Date.now()-h.logYellowMs));break;case"log-command-red":h.eventsImpl.fireStdout("white-pipe:"+(Date.now()-h.logWhiteMs));break;case"log-command-yellow":h.eventsImpl.fireStdout("red-pipe:"+(Date.now()-h.logRedMs))}else h.eventsImpl.fireStdout(e)},this.onJanusMessage=function(t,e,r){null!=r&&t.createAnswer({jsep:r,media:{audioSend:!1,videoSend:!1,data:!0},success:function(e){h.fireMessage("started"),t.send({message:{request:"start"},jsep:e})},error:h.onError})},this.onError=function(e){h.fireMessage("error",e)},this.eventsImpl=new a.CommandInterfaceEventsImpl,this.janus=e,this.opaqueId=t,this.exitPromise=new Promise(function(e){h.exitResolveFn=e}),this.configPromise=new Promise(function(e){h.configResolveFn=e}),this.handlePromise=new Promise(function(t,r){h.handleResolveFn=function(e){h.handle=e,h.live?(setTimeout(function(){h.live&&e.data({text:"pipe "+h.opaqueId+" config"})},1e3),h.config().then(function(){h.live&&(h.eventIntervalId=setInterval(function(){h.sendEventsData(e)},8),h.rttIntervalId=setInterval(function(){h.sendPipeMessage("rtt",Date.now())},1e3))}),t(e)):r(new Error("exit() was called"))}}),this.attach()}var e,t,n,o,i;return e=r,(t=[{key:"fireMessage",value:function(e){for(var t,r=arguments.length,n=new Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(t=this.eventsImpl).fireMessage.apply(t,[e].concat(n))}},{key:"attach",value:function(){var r,n=this;this.janus.attach({plugin:"janus.plugin.streaming",opaqueId:this.opaqueId,error:this.onError,success:function(e){r=e,n.fireMessage("attached"),e.send({message:{request:"watch",id:1}})},onmessage:function(e,t){n.onJanusMessage(r,e,t)},onremotestream:function(e){n.fireMessage("onremotestream",e)},ondataopen:function(){return n.handleResolveFn(r)},ondata:l(this.onDataMessage,this.onError)})}},{key:"onDestroyed",value:function(){this.fireMessage("destroyed"),this.exitResolveFn()}},{key:"config",value:(i=c(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.configPromise);case 1:case"end":return e.stop()}},e,this)})),function(){return i.apply(this,arguments)})},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return 44100}},{key:"screenshot",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){if(!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendPipeMessage("k"+(t?"down":"up"),e,r),-1!==this.logIntervalId&&t))switch(this.logColor){case"white":this.logWhiteMs=Date.now();break;case"red":this.logRedMs=Date.now();break;case"yellow":this.logYellowMs=Date.now()}}},{key:"sendMouseMotion",value:function(e,t){this.sendPipeMessage("mmove",e,t,Date.now()-this.startedAt)}},{key:"sendMouseRelativeMotion",value:function(){throw new Error("not implemented")}},{key:"sendMouseButton",value:function(e,t){this.sendPipeMessage("m"+(t?"down":"up"),e,Date.now()-this.startedAt)}},{key:"sendMouseSync",value:function(){this.sendPipeMessage("msync",Date.now()-this.startedAt)}},{key:"logVisual",value:function(s){var a=this;this.sendPipeMessage("log-visual-on");var e=document.createElement("canvas"),u=e.getContext("2d");e.width=1,e.height=1,this.logIntervalId=setInterval(c(regeneratorRuntime.mark(function e(){var t,r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=Date.now(),null!=u&&u.drawImage(s,0,0,1,1,0,0,1,1),n=null==u||null===(t=u.getImageData(0,0,1,1))||void 0===t?void 0:t.data,o=Date.now()-r,i="not set",200<n[0]&&200<n[1]&&200<n[2]?i="white":200<n[0]&&n[1]<200&&n[2]<200?i="red":200<n[0]&&200<n[1]&&n[2]<200&&(i="yellow"),i===a.logColor){e.next=17;break}e.t0=i,e.next="white"===e.t0?10:"red"===e.t0?12:"yellow"===e.t0?14:16;break;case 10:return a.eventsImpl.fireStdout("yellow-stream:"+(Date.now()-a.logYellowMs-o)),e.abrupt("break",16);case 12:return a.eventsImpl.fireStdout("white-stream:"+(Date.now()-a.logWhiteMs-o)),e.abrupt("break",16);case 14:return a.eventsImpl.fireStdout("red-stream:"+(Date.now()-a.logRedMs-o)),e.abrupt("break",16);case 16:a.logColor=i;case 17:case"end":return e.stop()}},e)})),16)}},{key:"sendPipeMessage",value:function(){this.eventQueue+="pipe "+this.opaqueId;for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,o=t;n<o.length;n++){var i=o[n];this.eventQueue+=" "+i}this.eventQueue+="\n"}},{key:"sendEventsData",value:(o=c(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0===this.eventQueue.length)return e.abrupt("return");e.next=2;break;case 2:t.data({text:this.eventQueue}),this.eventQueue="";case 4:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"persist",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"pause",value:function(){console.warn("pause/resume is not implemented")}},{key:"resume",value:function(){}},{key:"mute",value:function(){console.warn("mute/unmute is not implemented")}},{key:"unmute",value:function(){}},{key:"exit",value:function(){return this.live=!1,clearInterval(this.logIntervalId),this.logIntervalId=-1,clearInterval(this.eventIntervalId),this.eventIntervalId=-1,clearInterval(this.rttIntervalId),this.rttIntervalId=-1,this.janus.destroy(),this.exitPromise}},{key:"events",value:function(){return this.eventsImpl}}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=function(s,e){var a=e||window.Janus;return void 0===a?Promise.reject(new Error("Janus is not defined, you should load janus.js before this")):a.isWebrtcSupported()?new Promise(function(e,t){var r=null,n={error:function(e){null===r?t(e):r.onError(e)},destroyed:function(){null!==r&&r.onDestroyed()}},o={server:s,success:function(){r=new f(i,"js-dos-"+a.randomString(12)),e(r)},error:n.error,destroyed:n.destroyed,destroyOnUnload:!0},i=new a(o)}):Promise.reject(new Error("WebRTC not supported"))}},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],141:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.regexp.constructor"),e("core-js/modules/es6.regexp.replace"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.module=e,this.home=t,this.module.callMain([]),this.chdirToHome()}var e,t,n,a,o;return e=r,(t=[{key:"zipFromFs",value:function(e){var t=0<arguments.length&&void 0!==e?e:-1;this.chdirToHome();var r=this.module._zip_from_fs(t);if(0===r)return Promise.reject(new Error("Can't create zip, see more info in logs"));var n=this.module.HEAPU32[r/4],o=this.module.HEAPU8.slice(r+4,r+4+n);return this.module._free(r),Promise.resolve(o)}},{key:"zipToFs",value:function(e,t){var r=1<arguments.length&&void 0!==t?t:"/";r=this.normalizeFilename(r);var n=this.normalizeFilename(r).split("/");this.createPath(n,0,n.length),this.chdir(r);var o=new Uint8Array(e),i=this.module._malloc(o.length);this.module.HEAPU8.set(o,i);var s=this.module._zip_to_fs(i,o.length);return this.module._free(i),this.chdirToHome(),0===s?Promise.resolve():Promise.reject(new Error("Can't extract zip, retcode "+s+", see more info in logs"))}},{key:"writeFile",value:function(e,t){e=this.normalizeFilename(e),t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r=e.split("/");if(0===r.length)throw new Error("Can't create file '"+e+"', because it's not valid file path");var n=r[r.length-1].trim();if(0===n.length)throw new Error("Can't create file '"+e+"', because file name is empty");var o=this.createPath(r,0,r.length-1);this.module.FS.writeFile(o+"/"+n,t)}},{key:"readFile",value:(a=regeneratorRuntime.mark(function e(t){var r,n=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=1<n.length&&void 0!==n[1]?n[1]:"utf8",t=this.normalizeFilename(t),e.abrupt("return",this.module.FS.readFile(t,{encoding:r}));case 3:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(e){return o.apply(this,arguments)})},{key:"exists",value:function(e){e=this.normalizeFilename(e);try{return this.module.FS.lookupPath(e),!0}catch(e){return!1}}},{key:"destroy",value:function(){try{this.module._libzip_destroy()}catch(e){return e}}},{key:"normalizeFilename",value:function(e){for(e=e.replace(new RegExp("^[a-zA-z]+:"),"").replace(new RegExp("\\\\","g"),"/");"/"===e[0];)e=e.substr(1);return e}},{key:"createPath",value:function(e,t,r){for(var n=".",o=t;o<r;++o){var i=e[o].trim();0!==i.length&&(this.module.FS.createPath(n,i,!0,!0),n=n+"/"+i)}return n}},{key:"chdirToHome",value:function(){this.module.FS.chdir(this.home)}},{key:"chdir",value:function(e){this.module.FS.chdir(this.home+"/"+e)}}])&&i(e.prototype,t),n&&i(e,n),r}();r.default=n},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.constructor":114,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.typed.uint8-array":123,"regenerator-runtime/runtime":128}],142:[function(e,t,r){"use strict";function o(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.messages=[]}var t,r,n;return t=e,(r=[{key:"handler",value:function(e,t){this.messages.push({name:e,props:t})}},{key:"sendTo",value:function(e){var t,r=o(this.messages);try{for(r.s();!(t=r.n()).done;){var n=t.value;e(n.name,n.props)}}catch(e){r.e(e)}finally{r.f()}this.messages=[]}}])&&i(t.prototype,r),n&&i(t,n),e}();r.MessagesQueue=n},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],143:[function(e,t,r){"use strict";function i(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.typed.uint8-clamped-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(r,"__esModule",{value:!0});var s=e("../impl/ci-impl"),o=function(){function o(e,t,r){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.startedAt=Date.now(),this.frameWidth=0,this.frameHeight=0,this.rgb=new Uint8Array,this.freq=0,this.eventsImpl=new s.CommandInterfaceEventsImpl,this.keyMatrix={},this.configResolve=function(){},this.panicMessages=[],this.bundles=e,this.transport=t,this.ready=r,this.configPromise=new Promise(function(e){return n.configResolve=e}),this.transport.initMessageHandler(this.onServerMessage.bind(this))}var e,t,r;return e=o,(t=[{key:"sendClientMessage",value:function(e,t){(t=t||{}).sessionId=t.sessionId||this.transport.sessionId,this.transport.sendMessageToServer(e,t)}},{key:"onServerMessage",value:function(e,t){if(!(void 0===e||e.length<3||"w"!==e[0]||"s"!==e[1]||"-"!==e[2])&&void 0!==t&&t.sessionId===this.transport.sessionId)switch(e){case"ws-ready":this.sendClientMessage("wc-run",{bundles:this.bundles}),delete this.bundles;break;case"ws-server-ready":0<this.panicMessages.length?(void 0!==this.transport.exit&&this.transport.exit(),this.ready(new Error(JSON.stringify(this.panicMessages)))):this.ready(null),delete this.ready;break;case"ws-frame-set-size":this.onFrameSize(t.width,t.height);break;case"ws-update-lines":this.onFrameLines(t.lines);break;case"ws-exit":this.onExit();break;case"ws-log":this.onLog(t.tag,t.message);break;case"ws-warn":this.onWarn(t.tag,t.message);break;case"ws-err":this.onErr(t.tag,t.message);break;case"ws-stdout":this.onStdout(t.message);break;case"ws-persist":this.onPersist(t.bundle);break;case"ws-sound-init":this.onSoundInit(t.freq);break;case"ws-sound-push":this.onSoundPush(t.samples);break;case"ws-config":this.onConfig(JSON.parse(t.content));break;case"ws-sync-sleep":this.sendClientMessage("wc-sync-sleep",t);break;default:console.log("Unknown server message (ws):",e)}}},{key:"onConfig",value:function(e){this.configResolve(e)}},{key:"onFrameSize",value:function(e,t){this.frameWidth===e&&this.frameHeight===t||(this.frameWidth=e,this.frameHeight=t,this.rgb=new Uint8Array(e*t*3),this.eventsImpl.fireFrameSize(e,t))}},{key:"onFrameLines",value:function(e){var t,r=i(e);try{for(r.s();!(t=r.n()).done;){var n=t.value;this.rgb.set(n.heapu8,n.start*this.frameWidth*3)}}catch(e){r.e(e)}finally{r.f()}this.eventsImpl.fireFrame(this.rgb)}},{key:"onSoundInit",value:function(e){this.freq=e}},{key:"onSoundPush",value:function(e){this.eventsImpl.fireSoundPush(e)}},{key:"onLog",value:function(e,t){this.eventsImpl.fireMessage("log","["+e+"]"+t)}},{key:"onWarn",value:function(e,t){this.eventsImpl.fireMessage("warn","["+e+"]"+t)}},{key:"onErr",value:function(e,t){"panic"===e?(this.panicMessages.push(t),console.error("["+e+"]"+t)):console.log("["+e+"]"+t),this.eventsImpl.fireMessage("error","["+e+"]"+t)}},{key:"onStdout",value:function(e){this.eventsImpl.fireStdout(e)}},{key:"config",value:function(){return this.configPromise}},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return this.freq}},{key:"screenshot",value:function(){for(var e=new Uint8ClampedArray(this.rgb.length/3*4),t=0,r=0;r<e.length;)e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=255;return Promise.resolve(new ImageData(e,this.frameWidth,this.frameHeight))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendClientMessage("wc-add-key",{key:e,pressed:t,timeMs:r}))}},{key:"sendMouseMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!1,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseRelativeMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!0,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseButton",value:function(e,t){this.sendClientMessage("wc-mouse-button",{button:e,pressed:t,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseSync",value:function(){this.sendClientMessage("wc-mouse-sync",{timeMs:Date.now()-this.startedAt})}},{key:"persist",value:function(){var t=this;if(void 0!==this.persistPromise)return this.persistPromise;var e=new Promise(function(e){return t.persistResolve=e});return this.persistPromise=e,this.sendClientMessage("wc-pack-fs-to-bundle"),e}},{key:"onPersist",value:function(e){this.persistResolve&&(this.persistResolve(e),delete this.persistPromise,delete this.persistResolve)}},{key:"pause",value:function(){this.sendClientMessage("wc-pause")}},{key:"resume",value:function(){this.sendClientMessage("wc-resume")}},{key:"mute",value:function(){this.sendClientMessage("wc-mute")}},{key:"unmute",value:function(){this.sendClientMessage("wc-unmute")}},{key:"exit",value:function(){var t=this;return void 0!==this.exitPromise||(this.exitPromise=new Promise(function(e){return t.exitResolve=e}),this.exitPromise.then(function(){t.events().fireExit()}),this.resume(),this.sendClientMessage("wc-exit")),this.exitPromise}},{key:"onExit",value:function(){void 0!==this.transport.exit&&this.transport.exit(),this.exitResolve&&(this.exitResolve(),delete this.exitPromise,delete this.exitResolve)}},{key:"events",value:function(){return this.eventsImpl}}])&&n(e.prototype,t),r&&n(e,r),o}();r.CommandInterfaceOverTransportLayer=o},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es6.typed.uint8-clamped-array":124,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}]},{},[135]);


!function r(o,i,s){function a(n,t){if(!i[n]){if(!o[n]){var e="function"==typeof require&&require;if(!t&&e)return e(n,!0);if(l)return l(n,!0);throw(e=new Error("Cannot find module '"+n+"'")).code="MODULE_NOT_FOUND",e}e=i[n]={exports:{}},o[n][0].call(e.exports,function(t){return a(o[n][1][t]||t)},e,e.exports,r,o,i,s)}return i[n].exports}for(var l="function"==typeof require&&require,t=0;t<s.length;t++)a(s[t]);return a}({1:[function(t,n,e){n.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},{}],2:[function(t,n,e){var r=t("../internals/is-object");n.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},{"../internals/is-object":46}],3:[function(t,n,e){var r=t("../internals/well-known-symbol"),o=t("../internals/object-create"),t=t("../internals/object-define-property"),i=r("unscopables"),s=Array.prototype;null==s[i]&&t.f(s,i,{configurable:!0,value:o(null)}),n.exports=function(t){s[i][t]=!0}},{"../internals/object-create":54,"../internals/object-define-property":56,"../internals/well-known-symbol":90}],4:[function(t,n,e){var r=t("../internals/is-object");n.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},{"../internals/is-object":46}],5:[function(t,n,e){"use strict";var d=t("../internals/function-bind-context"),y=t("../internals/to-object"),b=t("../internals/call-with-safe-iteration-closing"),v=t("../internals/is-array-iterator-method"),h=t("../internals/to-length"),m=t("../internals/create-property"),g=t("../internals/get-iterator"),j=t("../internals/get-iterator-method");n.exports=function(t){var n,e,r,o,i,s,a=y(t),l="function"==typeof this?this:Array,c=arguments.length,u=1<c?arguments[1]:void 0,p=void 0!==u,t=j(a),f=0;if(p&&(u=d(u,2<c?arguments[2]:void 0,2)),null==t||l==Array&&v(t))for(e=new l(n=h(a.length));f<n;f++)s=p?u(a[f],f):a[f],m(e,f,s);else for(i=(o=g(a,t)).next,e=new l;!(r=i.call(o)).done;f++)s=p?b(o,u,[r.value,f],!0):r.value,m(e,f,s);return e.length=f,e}},{"../internals/call-with-safe-iteration-closing":11,"../internals/create-property":20,"../internals/function-bind-context":31,"../internals/get-iterator":34,"../internals/get-iterator-method":33,"../internals/is-array-iterator-method":43,"../internals/to-length":81,"../internals/to-object":82}],6:[function(t,n,e){var l=t("../internals/to-indexed-object"),c=t("../internals/to-length"),u=t("../internals/to-absolute-index"),t=function(a){return function(t,n,e){var r,o=l(t),i=c(o.length),s=u(e,i);if(a&&n!=n){for(;s<i;)if((r=o[s++])!=r)return!0}else for(;s<i;s++)if((a||s in o)&&o[s]===n)return a||s||0;return!a&&-1}};n.exports={includes:t(!0),indexOf:t(!1)}},{"../internals/to-absolute-index":78,"../internals/to-indexed-object":79,"../internals/to-length":81}],7:[function(t,n,e){var j=t("../internals/function-bind-context"),w=t("../internals/indexed-object"),x=t("../internals/to-object"),k=t("../internals/to-length"),S=t("../internals/array-species-create"),O=[].push,t=function(f){var d=1==f,y=2==f,b=3==f,v=4==f,h=6==f,m=7==f,g=5==f||h;return function(t,n,e,r){for(var o,i,s=x(t),a=w(s),l=j(n,e,3),c=k(a.length),u=0,r=r||S,p=d?r(t,c):y||m?r(t,0):void 0;u<c;u++)if((g||u in a)&&(i=l(o=a[u],u,s),f))if(d)p[u]=i;else if(i)switch(f){case 3:return!0;case 5:return o;case 6:return u;case 2:O.call(p,o)}else switch(f){case 4:return!1;case 7:O.call(p,o)}return h?-1:b||v?v:p}};n.exports={forEach:t(0),map:t(1),filter:t(2),some:t(3),every:t(4),find:t(5),findIndex:t(6),filterReject:t(7)}},{"../internals/array-species-create":10,"../internals/function-bind-context":31,"../internals/indexed-object":40,"../internals/to-length":81,"../internals/to-object":82}],8:[function(t,n,e){var r=t("../internals/fails"),o=t("../internals/well-known-symbol"),i=t("../internals/engine-v8-version"),s=o("species");n.exports=function(n){return 51<=i||!r(function(){var t=[];return(t.constructor={})[s]=function(){return{foo:1}},1!==t[n](Boolean).foo})}},{"../internals/engine-v8-version":27,"../internals/fails":30,"../internals/well-known-symbol":90}],9:[function(t,n,e){var r=t("../internals/is-object"),o=t("../internals/is-array"),i=t("../internals/well-known-symbol")("species");n.exports=function(t){var n;return void 0===(n=o(t)&&("function"==typeof(n=t.constructor)&&(n===Array||o(n.prototype))||r(n)&&null===(n=n[i]))?void 0:n)?Array:n}},{"../internals/is-array":44,"../internals/is-object":46,"../internals/well-known-symbol":90}],10:[function(t,n,e){var r=t("../internals/array-species-constructor");n.exports=function(t,n){return new(r(t))(0===n?0:n)}},{"../internals/array-species-constructor":9}],11:[function(t,n,e){var o=t("../internals/an-object"),i=t("../internals/iterator-close");n.exports=function(n,t,e,r){try{return r?t(o(e)[0],e[1]):t(e)}catch(t){i(n,"throw",t)}}},{"../internals/an-object":4,"../internals/iterator-close":49}],12:[function(t,n,e){var o=t("../internals/well-known-symbol")("iterator"),i=!1;try{var r=0,s={next:function(){return{done:!!r++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,function(){throw 2})}catch(t){}n.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var r={};r[o]=function(){return{next:function(){return{done:e=!0}}}},t(r)}catch(t){}return e}},{"../internals/well-known-symbol":90}],13:[function(t,n,e){var r={}.toString;n.exports=function(t){return r.call(t).slice(8,-1)}},{}],14:[function(t,n,e){var r=t("../internals/to-string-tag-support"),o=t("../internals/classof-raw"),i=t("../internals/well-known-symbol")("toStringTag"),s="Arguments"==o(function(){return arguments}());n.exports=r?o:function(t){var n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(t=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?t:s?o(n):"Object"==(t=o(n))&&"function"==typeof n.callee?"Arguments":t}},{"../internals/classof-raw":13,"../internals/to-string-tag-support":85,"../internals/well-known-symbol":90}],15:[function(t,n,e){var a=t("../internals/has"),l=t("../internals/own-keys"),c=t("../internals/object-get-own-property-descriptor"),u=t("../internals/object-define-property");n.exports=function(t,n){for(var e=l(n),r=u.f,o=c.f,i=0;i<e.length;i++){var s=e[i];a(t,s)||r(t,s,o(n,s))}}},{"../internals/has":36,"../internals/object-define-property":56,"../internals/object-get-own-property-descriptor":57,"../internals/own-keys":68}],16:[function(t,n,e){t=t("../internals/fails");n.exports=!t(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})},{"../internals/fails":30}],17:[function(t,n,e){"use strict";function r(){return this}var o=t("../internals/iterators-core").IteratorPrototype,i=t("../internals/object-create"),s=t("../internals/create-property-descriptor"),a=t("../internals/set-to-string-tag"),l=t("../internals/iterators");n.exports=function(t,n,e){n+=" Iterator";return t.prototype=i(o,{next:s(1,e)}),a(t,n,!1,!0),l[n]=r,t}},{"../internals/create-property-descriptor":19,"../internals/iterators":51,"../internals/iterators-core":50,"../internals/object-create":54,"../internals/set-to-string-tag":73}],18:[function(t,n,e){var r=t("../internals/descriptors"),o=t("../internals/object-define-property"),i=t("../internals/create-property-descriptor");n.exports=r?function(t,n,e){return o.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},{"../internals/create-property-descriptor":19,"../internals/descriptors":23,"../internals/object-define-property":56}],19:[function(t,n,e){n.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},{}],20:[function(t,n,e){"use strict";var r=t("../internals/to-property-key"),o=t("../internals/object-define-property"),i=t("../internals/create-property-descriptor");n.exports=function(t,n,e){n=r(n);n in t?o.f(t,n,i(0,e)):t[n]=e}},{"../internals/create-property-descriptor":19,"../internals/object-define-property":56,"../internals/to-property-key":84}],21:[function(t,n,e){"use strict";function b(){return this}var v=t("../internals/export"),h=t("../internals/create-iterator-constructor"),m=t("../internals/object-get-prototype-of"),g=t("../internals/object-set-prototype-of"),j=t("../internals/set-to-string-tag"),w=t("../internals/create-non-enumerable-property"),x=t("../internals/redefine"),r=t("../internals/well-known-symbol"),k=t("../internals/is-pure"),S=t("../internals/iterators"),t=t("../internals/iterators-core"),O=t.IteratorPrototype,L=t.BUGGY_SAFARI_ITERATORS,A=r("iterator"),P="values",M="entries";n.exports=function(t,n,e,r,o,i,s){h(e,n,r);function a(t){if(t===o&&y)return y;if(!L&&t in f)return f[t];switch(t){case"keys":case P:case M:return function(){return new e(this,t)}}return function(){return new e(this)}}var l,c,u=n+" Iterator",p=!1,f=t.prototype,d=f[A]||f["@@iterator"]||o&&f[o],y=!L&&d||a(o),r="Array"==n&&f.entries||d;if(r&&(t=m(r.call(new t)),O!==Object.prototype&&t.next&&(k||m(t)===O||(g?g(t,O):"function"!=typeof t[A]&&w(t,A,b)),j(t,u,!0,!0),k&&(S[u]=b))),o==P&&d&&d.name!==P&&(p=!0,y=function(){return d.call(this)}),k&&!s||f[A]===y||w(f,A,y),S[n]=y,o)if(l={values:a(P),keys:i?y:a("keys"),entries:a(M)},s)for(c in l)!L&&!p&&c in f||x(f,c,l[c]);else v({target:n,proto:!0,forced:L||p},l);return l}},{"../internals/create-iterator-constructor":17,"../internals/create-non-enumerable-property":18,"../internals/export":29,"../internals/is-pure":47,"../internals/iterators":51,"../internals/iterators-core":50,"../internals/object-get-prototype-of":61,"../internals/object-set-prototype-of":65,"../internals/redefine":70,"../internals/set-to-string-tag":73,"../internals/well-known-symbol":90}],22:[function(t,n,e){var r=t("../internals/path"),o=t("../internals/has"),i=t("../internals/well-known-symbol-wrapped"),s=t("../internals/object-define-property").f;n.exports=function(t){var n=r.Symbol||(r.Symbol={});o(n,t)||s(n,t,{value:i.f(t)})}},{"../internals/has":36,"../internals/object-define-property":56,"../internals/path":69,"../internals/well-known-symbol-wrapped":89}],23:[function(t,n,e){t=t("../internals/fails");n.exports=!t(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})},{"../internals/fails":30}],24:[function(t,n,e){var r=t("../internals/global"),t=t("../internals/is-object"),o=r.document,i=t(o)&&t(o.createElement);n.exports=function(t){return i?o.createElement(t):{}}},{"../internals/global":35,"../internals/is-object":46}],25:[function(t,n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},{}],26:[function(t,n,e){t=t("../internals/get-built-in");n.exports=t("navigator","userAgent")||""},{"../internals/get-built-in":32}],27:[function(t,n,e){var r,o,i=t("../internals/global"),s=t("../internals/engine-user-agent"),t=i.process,i=i.Deno,i=t&&t.versions||i&&i.version,i=i&&i.v8;i?o=(r=i.split("."))[0]<4?1:r[0]+r[1]:s&&(!(r=s.match(/Edge\/(\d+)/))||74<=r[1])&&(r=s.match(/Chrome\/(\d+)/))&&(o=r[1]),n.exports=o&&+o},{"../internals/engine-user-agent":26,"../internals/global":35}],28:[function(t,n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},{}],29:[function(t,n,e){var c=t("../internals/global"),u=t("../internals/object-get-own-property-descriptor").f,p=t("../internals/create-non-enumerable-property"),f=t("../internals/redefine"),d=t("../internals/set-global"),y=t("../internals/copy-constructor-properties"),b=t("../internals/is-forced");n.exports=function(t,n){var e,r,o,i=t.target,s=t.global,a=t.stat,l=s?c:a?c[i]||d(i,{}):(c[i]||{}).prototype;if(l)for(e in n){if(r=n[e],o=t.noTargetGet?(o=u(l,e))&&o.value:l[e],!b(s?e:i+(a?".":"#")+e,t.forced)&&void 0!==o){if(typeof r==typeof o)continue;y(r,o)}(t.sham||o&&o.sham)&&p(r,"sham",!0),f(l,e,r,t)}}},{"../internals/copy-constructor-properties":15,"../internals/create-non-enumerable-property":18,"../internals/global":35,"../internals/is-forced":45,"../internals/object-get-own-property-descriptor":57,"../internals/redefine":70,"../internals/set-global":72}],30:[function(t,n,e){n.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],31:[function(t,n,e){var i=t("../internals/a-function");n.exports=function(r,o,t){if(i(r),void 0===o)return r;switch(t){case 0:return function(){return r.call(o)};case 1:return function(t){return r.call(o,t)};case 2:return function(t,n){return r.call(o,t,n)};case 3:return function(t,n,e){return r.call(o,t,n,e)}}return function(){return r.apply(o,arguments)}}},{"../internals/a-function":1}],32:[function(t,n,e){var r=t("../internals/global");n.exports=function(t,n){return arguments.length<2?"function"==typeof(e=r[t])?e:void 0:r[t]&&r[t][n];var e}},{"../internals/global":35}],33:[function(t,n,e){var r=t("../internals/classof"),o=t("../internals/iterators"),i=t("../internals/well-known-symbol")("iterator");n.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},{"../internals/classof":14,"../internals/iterators":51,"../internals/well-known-symbol":90}],34:[function(t,n,e){var r=t("../internals/an-object"),o=t("../internals/get-iterator-method");n.exports=function(t,n){var e=arguments.length<2?o(t):n;if("function"!=typeof e)throw TypeError(String(t)+" is not iterable");return r(e.call(t))}},{"../internals/an-object":4,"../internals/get-iterator-method":33}],35:[function(t,e,n){!function(n){!function(){function t(t){return t&&t.Math==Math&&t}e.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof n&&n)||function(){return this}()||Function("return this")()}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],36:[function(t,n,e){var r=t("../internals/to-object"),o={}.hasOwnProperty;n.exports=Object.hasOwn||function(t,n){return o.call(r(t),n)}},{"../internals/to-object":82}],37:[function(t,n,e){n.exports={}},{}],38:[function(t,n,e){t=t("../internals/get-built-in");n.exports=t("document","documentElement")},{"../internals/get-built-in":32}],39:[function(t,n,e){var r=t("../internals/descriptors"),o=t("../internals/fails"),i=t("../internals/document-create-element");n.exports=!r&&!o(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a})},{"../internals/descriptors":23,"../internals/document-create-element":24,"../internals/fails":30}],40:[function(t,n,e){var r=t("../internals/fails"),o=t("../internals/classof-raw"),i="".split;n.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},{"../internals/classof-raw":13,"../internals/fails":30}],41:[function(t,n,e){var t=t("../internals/shared-store"),r=Function.toString;"function"!=typeof t.inspectSource&&(t.inspectSource=function(t){return r.call(t)}),n.exports=t.inspectSource},{"../internals/shared-store":75}],42:[function(t,n,e){var r,o,i,s,a,l,c,u,p=t("../internals/native-weak-map"),f=t("../internals/global"),d=t("../internals/is-object"),y=t("../internals/create-non-enumerable-property"),b=t("../internals/has"),v=t("../internals/shared-store"),h=t("../internals/shared-key"),t=t("../internals/hidden-keys"),m="Object already initialized",f=f.WeakMap;c=p||v.state?(r=v.state||(v.state=new f),o=r.get,i=r.has,s=r.set,a=function(t,n){if(i.call(r,t))throw new TypeError(m);return n.facade=t,s.call(r,t,n),n},l=function(t){return o.call(r,t)||{}},function(t){return i.call(r,t)}):(t[u=h("state")]=!0,a=function(t,n){if(b(t,u))throw new TypeError(m);return n.facade=t,y(t,u,n),n},l=function(t){return b(t,u)?t[u]:{}},function(t){return b(t,u)}),n.exports={set:a,get:l,has:c,enforce:function(t){return c(t)?l(t):a(t,{})},getterFor:function(e){return function(t){var n;if(!d(t)||(n=l(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},{"../internals/create-non-enumerable-property":18,"../internals/global":35,"../internals/has":36,"../internals/hidden-keys":37,"../internals/is-object":46,"../internals/native-weak-map":53,"../internals/shared-key":74,"../internals/shared-store":75}],43:[function(t,n,e){var r=t("../internals/well-known-symbol"),o=t("../internals/iterators"),i=r("iterator"),s=Array.prototype;n.exports=function(t){return void 0!==t&&(o.Array===t||s[i]===t)}},{"../internals/iterators":51,"../internals/well-known-symbol":90}],44:[function(t,n,e){var r=t("../internals/classof-raw");n.exports=Array.isArray||function(t){return"Array"==r(t)}},{"../internals/classof-raw":13}],45:[function(t,n,e){var r=t("../internals/fails"),o=/#|\.prototype\./,t=function(t,n){t=s[i(t)];return t==l||t!=a&&("function"==typeof n?r(n):!!n)},i=t.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=t.data={},a=t.NATIVE="N",l=t.POLYFILL="P";n.exports=t},{"../internals/fails":30}],46:[function(t,n,e){n.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],47:[function(t,n,e){n.exports=!1},{}],48:[function(t,n,e){var r=t("../internals/get-built-in"),t=t("../internals/use-symbol-as-uid");n.exports=t?function(t){return"symbol"==typeof t}:function(t){var n=r("Symbol");return"function"==typeof n&&Object(t)instanceof n}},{"../internals/get-built-in":32,"../internals/use-symbol-as-uid":88}],49:[function(t,n,e){var i=t("../internals/an-object");n.exports=function(t,n,e){var r,o;i(t);try{if(void 0===(r=t.return)){if("throw"===n)throw e;return e}r=r.call(t)}catch(t){o=!0,r=t}if("throw"===n)throw e;if(o)throw r;return i(r),e}},{"../internals/an-object":4}],50:[function(t,n,e){"use strict";var r,o=t("../internals/fails"),i=t("../internals/object-get-prototype-of"),s=t("../internals/create-non-enumerable-property"),a=t("../internals/has"),l=t("../internals/well-known-symbol"),c=t("../internals/is-pure"),u=l("iterator"),t=!1;[].keys&&("next"in(l=[].keys())?(l=i(i(l)))!==Object.prototype&&(r=l):t=!0);o=null==r||o(function(){var t={};return r[u].call(t)!==t});o&&(r={}),c&&!o||a(r,u)||s(r,u,function(){return this}),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:t}},{"../internals/create-non-enumerable-property":18,"../internals/fails":30,"../internals/has":36,"../internals/is-pure":47,"../internals/object-get-prototype-of":61,"../internals/well-known-symbol":90}],51:[function(t,n,e){arguments[4][37][0].apply(e,arguments)},{dup:37}],52:[function(t,n,e){var r=t("../internals/engine-v8-version"),t=t("../internals/fails");n.exports=!!Object.getOwnPropertySymbols&&!t(function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41})},{"../internals/engine-v8-version":27,"../internals/fails":30}],53:[function(t,n,e){var r=t("../internals/global"),t=t("../internals/inspect-source"),r=r.WeakMap;n.exports="function"==typeof r&&/native code/.test(t(r))},{"../internals/global":35,"../internals/inspect-source":41}],54:[function(t,n,e){function r(){}function o(t){t.write(b("")),t.close();var n=t.parentWindow.Object;return t=null,n}var i,s=t("../internals/an-object"),a=t("../internals/object-define-properties"),l=t("../internals/enum-bug-keys"),c=t("../internals/hidden-keys"),u=t("../internals/html"),p=t("../internals/document-create-element"),t=t("../internals/shared-key"),f="prototype",d="script",y=t("IE_PROTO"),b=function(t){return"<"+d+">"+t+"</"+d+">"},v=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,n;v="undefined"==typeof document||document.domain&&i?o(i):(t=p("iframe"),n="java"+d+":",t.style.display="none",u.appendChild(t),t.src=String(n),(t=t.contentWindow.document).open(),t.write(b("document.F=Object")),t.close(),t.F);for(var e=l.length;e--;)delete v[f][l[e]];return v()};c[y]=!0,n.exports=Object.create||function(t,n){var e;return null!==t?(r[f]=s(t),e=new r,r[f]=null,e[y]=t):e=v(),void 0===n?e:a(e,n)}},{"../internals/an-object":4,"../internals/document-create-element":24,"../internals/enum-bug-keys":28,"../internals/hidden-keys":37,"../internals/html":38,"../internals/object-define-properties":55,"../internals/shared-key":74}],55:[function(t,n,e){var r=t("../internals/descriptors"),s=t("../internals/object-define-property"),a=t("../internals/an-object"),l=t("../internals/object-keys");n.exports=r?Object.defineProperties:function(t,n){a(t);for(var e,r=l(n),o=r.length,i=0;i<o;)s.f(t,e=r[i++],n[e]);return t}},{"../internals/an-object":4,"../internals/descriptors":23,"../internals/object-define-property":56,"../internals/object-keys":63}],56:[function(t,n,e){var r=t("../internals/descriptors"),o=t("../internals/ie8-dom-define"),i=t("../internals/an-object"),s=t("../internals/to-property-key"),a=Object.defineProperty;e.f=r?a:function(t,n,e){if(i(t),n=s(n),i(e),o)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},{"../internals/an-object":4,"../internals/descriptors":23,"../internals/ie8-dom-define":39,"../internals/to-property-key":84}],57:[function(t,n,e){var r=t("../internals/descriptors"),o=t("../internals/object-property-is-enumerable"),i=t("../internals/create-property-descriptor"),s=t("../internals/to-indexed-object"),a=t("../internals/to-property-key"),l=t("../internals/has"),c=t("../internals/ie8-dom-define"),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(t,n){if(t=s(t),n=a(n),c)try{return u(t,n)}catch(t){}if(l(t,n))return i(!o.f.call(t,n),t[n])}},{"../internals/create-property-descriptor":19,"../internals/descriptors":23,"../internals/has":36,"../internals/ie8-dom-define":39,"../internals/object-property-is-enumerable":64,"../internals/to-indexed-object":79,"../internals/to-property-key":84}],58:[function(t,n,e){var r=t("../internals/to-indexed-object"),o=t("../internals/object-get-own-property-names").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(t){return s&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return s.slice()}}(t):o(r(t))}},{"../internals/object-get-own-property-names":59,"../internals/to-indexed-object":79}],59:[function(t,n,e){var r=t("../internals/object-keys-internal"),o=t("../internals/enum-bug-keys").concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},{"../internals/enum-bug-keys":28,"../internals/object-keys-internal":62}],60:[function(t,n,e){e.f=Object.getOwnPropertySymbols},{}],61:[function(t,n,e){var r=t("../internals/has"),o=t("../internals/to-object"),i=t("../internals/shared-key"),t=t("../internals/correct-prototype-getter"),s=i("IE_PROTO"),a=Object.prototype;n.exports=t?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},{"../internals/correct-prototype-getter":16,"../internals/has":36,"../internals/shared-key":74,"../internals/to-object":82}],62:[function(t,n,e){var s=t("../internals/has"),a=t("../internals/to-indexed-object"),l=t("../internals/array-includes").indexOf,c=t("../internals/hidden-keys");n.exports=function(t,n){var e,r=a(t),o=0,i=[];for(e in r)!s(c,e)&&s(r,e)&&i.push(e);for(;n.length>o;)s(r,e=n[o++])&&(~l(i,e)||i.push(e));return i}},{"../internals/array-includes":6,"../internals/has":36,"../internals/hidden-keys":37,"../internals/to-indexed-object":79}],63:[function(t,n,e){var r=t("../internals/object-keys-internal"),o=t("../internals/enum-bug-keys");n.exports=Object.keys||function(t){return r(t,o)}},{"../internals/enum-bug-keys":28,"../internals/object-keys-internal":62}],64:[function(t,n,e){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);e.f=i?function(t){t=o(this,t);return!!t&&t.enumerable}:r},{}],65:[function(t,n,e){var o=t("../internals/an-object"),i=t("../internals/a-possible-prototype");n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,r=!1,t={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),r=t instanceof Array}catch(t){}return function(t,n){return o(t),i(n),r?e.call(t,n):t.__proto__=n,t}}():void 0)},{"../internals/a-possible-prototype":2,"../internals/an-object":4}],66:[function(t,n,e){"use strict";var r=t("../internals/to-string-tag-support"),o=t("../internals/classof");n.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},{"../internals/classof":14,"../internals/to-string-tag-support":85}],67:[function(t,n,e){var o=t("../internals/is-object");n.exports=function(t,n){var e,r;if("string"===n&&"function"==typeof(e=t.toString)&&!o(r=e.call(t)))return r;if("function"==typeof(e=t.valueOf)&&!o(r=e.call(t)))return r;if("string"!==n&&"function"==typeof(e=t.toString)&&!o(r=e.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},{"../internals/is-object":46}],68:[function(t,n,e){var r=t("../internals/get-built-in"),o=t("../internals/object-get-own-property-names"),i=t("../internals/object-get-own-property-symbols"),s=t("../internals/an-object");n.exports=r("Reflect","ownKeys")||function(t){var n=o.f(s(t)),e=i.f;return e?n.concat(e(t)):n}},{"../internals/an-object":4,"../internals/get-built-in":32,"../internals/object-get-own-property-names":59,"../internals/object-get-own-property-symbols":60}],69:[function(t,n,e){t=t("../internals/global");n.exports=t},{"../internals/global":35}],70:[function(t,n,e){var a=t("../internals/global"),l=t("../internals/create-non-enumerable-property"),c=t("../internals/has"),u=t("../internals/set-global"),r=t("../internals/inspect-source"),t=t("../internals/internal-state"),o=t.get,p=t.enforce,f=String(String).split("String");(n.exports=function(t,n,e,r){var o=!!r&&!!r.unsafe,i=!!r&&!!r.enumerable,s=!!r&&!!r.noTargetGet;"function"==typeof e&&("string"!=typeof n||c(e,"name")||l(e,"name",n),(r=p(e)).source||(r.source=f.join("string"==typeof n?n:""))),t!==a?(o?!s&&t[n]&&(i=!0):delete t[n],i?t[n]=e:l(t,n,e)):i?t[n]=e:u(n,e)})(Function.prototype,"toString",function(){return"function"==typeof this&&o(this).source||r(this)})},{"../internals/create-non-enumerable-property":18,"../internals/global":35,"../internals/has":36,"../internals/inspect-source":41,"../internals/internal-state":42,"../internals/set-global":72}],71:[function(t,n,e){n.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},{}],72:[function(t,n,e){var r=t("../internals/global");n.exports=function(n,e){try{Object.defineProperty(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},{"../internals/global":35}],73:[function(t,n,e){var r=t("../internals/object-define-property").f,o=t("../internals/has"),i=t("../internals/well-known-symbol")("toStringTag");n.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},{"../internals/has":36,"../internals/object-define-property":56,"../internals/well-known-symbol":90}],74:[function(t,n,e){var r=t("../internals/shared"),o=t("../internals/uid"),i=r("keys");n.exports=function(t){return i[t]||(i[t]=o(t))}},{"../internals/shared":76,"../internals/uid":87}],75:[function(t,n,e){var r=t("../internals/global"),o=t("../internals/set-global"),t="__core-js_shared__",t=r[t]||o(t,{});n.exports=t},{"../internals/global":35,"../internals/set-global":72}],76:[function(t,n,e){var r=t("../internals/is-pure"),o=t("../internals/shared-store");(n.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.17.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},{"../internals/is-pure":47,"../internals/shared-store":75}],77:[function(t,n,e){var s=t("../internals/to-integer"),a=t("../internals/to-string"),l=t("../internals/require-object-coercible"),t=function(i){return function(t,n){var e,r=a(l(t)),o=s(n),t=r.length;return o<0||t<=o?i?"":void 0:(n=r.charCodeAt(o))<55296||56319<n||o+1===t||(e=r.charCodeAt(o+1))<56320||57343<e?i?r.charAt(o):n:i?r.slice(o,o+2):e-56320+(n-55296<<10)+65536}};n.exports={codeAt:t(!1),charAt:t(!0)}},{"../internals/require-object-coercible":71,"../internals/to-integer":80,"../internals/to-string":86}],78:[function(t,n,e){var r=t("../internals/to-integer"),o=Math.max,i=Math.min;n.exports=function(t,n){t=r(t);return t<0?o(t+n,0):i(t,n)}},{"../internals/to-integer":80}],79:[function(t,n,e){var r=t("../internals/indexed-object"),o=t("../internals/require-object-coercible");n.exports=function(t){return r(o(t))}},{"../internals/indexed-object":40,"../internals/require-object-coercible":71}],80:[function(t,n,e){var r=Math.ceil,o=Math.floor;n.exports=function(t){return isNaN(t=+t)?0:(0<t?o:r)(t)}},{}],81:[function(t,n,e){var r=t("../internals/to-integer"),o=Math.min;n.exports=function(t){return 0<t?o(r(t),9007199254740991):0}},{"../internals/to-integer":80}],82:[function(t,n,e){var r=t("../internals/require-object-coercible");n.exports=function(t){return Object(r(t))}},{"../internals/require-object-coercible":71}],83:[function(t,n,e){var r=t("../internals/is-object"),o=t("../internals/is-symbol"),i=t("../internals/ordinary-to-primitive"),s=t("../internals/well-known-symbol")("toPrimitive");n.exports=function(t,n){if(!r(t)||o(t))return t;var e=t[s];if(void 0===e)return i(t,n=void 0===n?"number":n);if(n=e.call(t,n=void 0===n?"default":n),!r(n)||o(n))return n;throw TypeError("Can't convert object to primitive value")}},{"../internals/is-object":46,"../internals/is-symbol":48,"../internals/ordinary-to-primitive":67,"../internals/well-known-symbol":90}],84:[function(t,n,e){var r=t("../internals/to-primitive"),o=t("../internals/is-symbol");n.exports=function(t){t=r(t,"string");return o(t)?t:String(t)}},{"../internals/is-symbol":48,"../internals/to-primitive":83}],85:[function(t,n,e){var r={};r[t("../internals/well-known-symbol")("toStringTag")]="z",n.exports="[object z]"===String(r)},{"../internals/well-known-symbol":90}],86:[function(t,n,e){var r=t("../internals/is-symbol");n.exports=function(t){if(r(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},{"../internals/is-symbol":48}],87:[function(t,n,e){var r=0,o=Math.random();n.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+o).toString(36)}},{}],88:[function(t,n,e){t=t("../internals/native-symbol");n.exports=t&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},{"../internals/native-symbol":52}],89:[function(t,n,e){t=t("../internals/well-known-symbol");e.f=t},{"../internals/well-known-symbol":90}],90:[function(t,n,e){var r=t("../internals/global"),o=t("../internals/shared"),i=t("../internals/has"),s=t("../internals/uid"),a=t("../internals/native-symbol"),t=t("../internals/use-symbol-as-uid"),l=o("wks"),c=r.Symbol,u=t?c:c&&c.withoutSetter||s;n.exports=function(t){return i(l,t)&&(a||"string"==typeof l[t])||(a&&i(c,t)?l[t]=c[t]:l[t]=u("Symbol."+t)),l[t]}},{"../internals/global":35,"../internals/has":36,"../internals/native-symbol":52,"../internals/shared":76,"../internals/uid":87,"../internals/use-symbol-as-uid":88}],91:[function(t,n,e){var r=t("../internals/export"),o=t("../internals/array-from");r({target:"Array",stat:!0,forced:!t("../internals/check-correctness-of-iteration")(function(t){Array.from(t)})},{from:o})},{"../internals/array-from":5,"../internals/check-correctness-of-iteration":12,"../internals/export":29}],92:[function(t,n,e){"use strict";var r=t("../internals/to-indexed-object"),o=t("../internals/add-to-unscopables"),i=t("../internals/iterators"),s=t("../internals/internal-state"),t=t("../internals/define-iterator"),a="Array Iterator",l=s.set,c=s.getterFor(a);n.exports=t(Array,"Array",function(t,n){l(this,{type:a,target:r(t),index:0,kind:n})},function(){var t=c(this),n=t.target,e=t.kind,r=t.index++;return!n||r>=n.length?{value:t.target=void 0,done:!0}:"keys"==e?{value:r,done:!1}:"values"==e?{value:n[r],done:!1}:{value:[r,n[r]],done:!1}},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"../internals/add-to-unscopables":3,"../internals/define-iterator":21,"../internals/internal-state":42,"../internals/iterators":51,"../internals/to-indexed-object":79}],93:[function(t,n,e){"use strict";var r=t("../internals/export"),c=t("../internals/is-object"),u=t("../internals/is-array"),p=t("../internals/to-absolute-index"),f=t("../internals/to-length"),d=t("../internals/to-indexed-object"),y=t("../internals/create-property"),o=t("../internals/well-known-symbol"),t=t("../internals/array-method-has-species-support")("slice"),b=o("species"),v=[].slice,h=Math.max;r({target:"Array",proto:!0,forced:!t},{slice:function(t,n){var e,r,o,i=d(this),s=f(i.length),a=p(t,s),l=p(void 0===n?s:n,s);if(u(i)&&((e="function"==typeof(e=i.constructor)&&(e===Array||u(e.prototype))||c(e)&&null===(e=e[b])?void 0:e)===Array||void 0===e))return v.call(i,a,l);for(r=new(void 0===e?Array:e)(h(l-a,0)),o=0;a<l;a++,o++)a in i&&y(r,o,i[a]);return r.length=o,r}})},{"../internals/array-method-has-species-support":8,"../internals/create-property":20,"../internals/export":29,"../internals/is-array":44,"../internals/is-object":46,"../internals/to-absolute-index":78,"../internals/to-indexed-object":79,"../internals/to-length":81,"../internals/well-known-symbol":90}],94:[function(t,n,e){var r=t("../internals/descriptors"),o=t("../internals/object-define-property").f,t=Function.prototype,i=t.toString,s=/^\s*function ([^ (]*)/;!r||"name"in t||o(t,"name",{configurable:!0,get:function(){try{return i.call(this).match(s)[1]}catch(t){return""}}})},{"../internals/descriptors":23,"../internals/object-define-property":56}],95:[function(t,n,e){var r=t("../internals/to-string-tag-support"),o=t("../internals/redefine"),t=t("../internals/object-to-string");r||o(Object.prototype,"toString",t,{unsafe:!0})},{"../internals/object-to-string":66,"../internals/redefine":70,"../internals/to-string-tag-support":85}],96:[function(t,n,e){"use strict";var r=t("../internals/string-multibyte").charAt,o=t("../internals/to-string"),i=t("../internals/internal-state"),t=t("../internals/define-iterator"),s="String Iterator",a=i.set,l=i.getterFor(s);t(String,"String",function(t){a(this,{type:s,string:o(t),index:0})},function(){var t=l(this),n=t.string,e=t.index;return e>=n.length?{value:void 0,done:!0}:(e=r(n,e),t.index+=e.length,{value:e,done:!1})})},{"../internals/define-iterator":21,"../internals/internal-state":42,"../internals/string-multibyte":77,"../internals/to-string":86}],97:[function(t,n,e){"use strict";var r,o,i,s,a,l=t("../internals/export"),c=t("../internals/descriptors"),u=t("../internals/global"),p=t("../internals/has"),f=t("../internals/is-object"),d=t("../internals/object-define-property").f,t=t("../internals/copy-constructor-properties"),y=u.Symbol;!c||"function"!=typeof y||"description"in y.prototype&&void 0===y().description||(r={},t(o=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof o?new y(t):void 0===t?y():y(t);return""===t&&(r[n]=!0),n},y),(t=o.prototype=y.prototype).constructor=o,i=t.toString,s="Symbol(test)"==String(y("test")),a=/^Symbol\((.*)\)[^)]+$/,d(t,"description",{configurable:!0,get:function(){var t=f(this)?this.valueOf():this,n=i.call(t);if(p(r,t))return"";n=s?n.slice(7,-1):n.replace(a,"$1");return""===n?void 0:n}}),l({global:!0,forced:!0},{Symbol:o}))},{"../internals/copy-constructor-properties":15,"../internals/descriptors":23,"../internals/export":29,"../internals/global":35,"../internals/has":36,"../internals/is-object":46,"../internals/object-define-property":56}],98:[function(t,n,e){t("../internals/define-well-known-symbol")("iterator")},{"../internals/define-well-known-symbol":22}],99:[function(t,n,e){"use strict";function r(t,n){var e=tt[t]=x(J[G]);return U(e,{type:q,tag:t,description:n}),c||(e.description=n),e}function o(n,t){v(n);var e=m(t),t=k(e).concat(lt(e));return V(t,function(t){c&&!at.call(e,t)||st(n,t,e[t])}),n}var i=t("../internals/export"),s=t("../internals/global"),a=t("../internals/get-built-in"),l=t("../internals/is-pure"),c=t("../internals/descriptors"),u=t("../internals/native-symbol"),p=t("../internals/fails"),f=t("../internals/has"),d=t("../internals/is-array"),y=t("../internals/is-object"),b=t("../internals/is-symbol"),v=t("../internals/an-object"),h=t("../internals/to-object"),m=t("../internals/to-indexed-object"),g=t("../internals/to-property-key"),j=t("../internals/to-string"),w=t("../internals/create-property-descriptor"),x=t("../internals/object-create"),k=t("../internals/object-keys"),S=t("../internals/object-get-own-property-names"),O=t("../internals/object-get-own-property-names-external"),L=t("../internals/object-get-own-property-symbols"),A=t("../internals/object-get-own-property-descriptor"),P=t("../internals/object-define-property"),M=t("../internals/object-property-is-enumerable"),T=t("../internals/create-non-enumerable-property"),C=t("../internals/redefine"),E=t("../internals/shared"),D=t("../internals/shared-key"),z=t("../internals/hidden-keys"),_=t("../internals/uid"),B=t("../internals/well-known-symbol"),I=t("../internals/well-known-symbol-wrapped"),F=t("../internals/define-well-known-symbol"),N=t("../internals/set-to-string-tag"),H=t("../internals/internal-state"),V=t("../internals/array-iteration").forEach,R=D("hidden"),q="Symbol",G="prototype",D=B("toPrimitive"),U=H.set,K=H.getterFor(q),W=Object[G],J=s.Symbol,Y=a("JSON","stringify"),$=A.f,Q=P.f,X=O.f,Z=M.f,tt=E("symbols"),nt=E("op-symbols"),et=E("string-to-symbol-registry"),rt=E("symbol-to-string-registry"),a=E("wks"),E=s.QObject,ot=!E||!E[G]||!E[G].findChild,it=c&&p(function(){return 7!=x(Q({},"a",{get:function(){return Q(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=$(W,n);r&&delete W[n],Q(t,n,e),r&&t!==W&&Q(W,n,r)}:Q,st=function(t,n,e){t===W&&st(nt,n,e),v(t);n=g(n);return v(e),f(tt,n)?(e.enumerable?(f(t,R)&&t[R][n]&&(t[R][n]=!1),e=x(e,{enumerable:w(0,!1)})):(f(t,R)||Q(t,R,w(1,{})),t[R][n]=!0),it(t,n,e)):Q(t,n,e)},at=function(t){var n=g(t),t=Z.call(this,n);return!(this===W&&f(tt,n)&&!f(nt,n))&&(!(t||!f(this,n)||!f(tt,n)||f(this,R)&&this[R][n])||t)},s=function(t,n){var e=m(t),t=g(n);if(e!==W||!f(tt,t)||f(nt,t)){n=$(e,t);return!n||!f(tt,t)||f(e,R)&&e[R][t]||(n.enumerable=!0),n}},E=function(t){var t=X(m(t)),n=[];return V(t,function(t){f(tt,t)||f(z,t)||n.push(t)}),n},lt=function(t){var n=t===W,t=X(n?nt:m(t)),e=[];return V(t,function(t){!f(tt,t)||n&&!f(W,t)||e.push(tt[t])}),e};u||(C((J=function(){if(this instanceof J)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?j(arguments[0]):void 0,n=_(t),e=function(t){this===W&&e.call(nt,t),f(this,R)&&f(this[R],n)&&(this[R][n]=!1),it(this,n,w(1,t))};return c&&ot&&it(W,n,{configurable:!0,set:e}),r(n,t)})[G],"toString",function(){return K(this).tag}),C(J,"withoutSetter",function(t){return r(_(t),t)}),M.f=at,P.f=st,A.f=s,S.f=O.f=E,L.f=lt,I.f=function(t){return r(B(t),t)},c&&(Q(J[G],"description",{configurable:!0,get:function(){return K(this).description}}),l||C(W,"propertyIsEnumerable",at,{unsafe:!0}))),i({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:J}),V(k(a),function(t){F(t)}),i({target:q,stat:!0,forced:!u},{for:function(t){var n=j(t);if(f(et,n))return et[n];t=J(n);return et[n]=t,rt[t]=n,t},keyFor:function(t){if(!b(t))throw TypeError(t+" is not a symbol");if(f(rt,t))return rt[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),i({target:"Object",stat:!0,forced:!u,sham:!c},{create:function(t,n){return void 0===n?x(t):o(x(t),n)},defineProperty:st,defineProperties:o,getOwnPropertyDescriptor:s}),i({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:E,getOwnPropertySymbols:lt}),i({target:"Object",stat:!0,forced:p(function(){L.f(1)})},{getOwnPropertySymbols:function(t){return L.f(h(t))}}),Y&&i({target:"JSON",stat:!0,forced:!u||p(function(){var t=J();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))})},{stringify:function(t,n,e){for(var r,o=[t],i=1;i<arguments.length;)o.push(arguments[i++]);if((y(r=n)||void 0!==t)&&!b(t))return d(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!b(n))return n}),o[1]=n,Y.apply(null,o)}}),J[G][D]||T(J[G],D,J[G].valueOf),N(J,q),z[R]=!0},{"../internals/an-object":4,"../internals/array-iteration":7,"../internals/create-non-enumerable-property":18,"../internals/create-property-descriptor":19,"../internals/define-well-known-symbol":22,"../internals/descriptors":23,"../internals/export":29,"../internals/fails":30,"../internals/get-built-in":32,"../internals/global":35,"../internals/has":36,"../internals/hidden-keys":37,"../internals/internal-state":42,"../internals/is-array":44,"../internals/is-object":46,"../internals/is-pure":47,"../internals/is-symbol":48,"../internals/native-symbol":52,"../internals/object-create":54,"../internals/object-define-property":56,"../internals/object-get-own-property-descriptor":57,"../internals/object-get-own-property-names":59,"../internals/object-get-own-property-names-external":58,"../internals/object-get-own-property-symbols":60,"../internals/object-keys":63,"../internals/object-property-is-enumerable":64,"../internals/redefine":70,"../internals/set-to-string-tag":73,"../internals/shared":76,"../internals/shared-key":74,"../internals/to-indexed-object":79,"../internals/to-object":82,"../internals/to-property-key":84,"../internals/to-string":86,"../internals/uid":87,"../internals/well-known-symbol":90,"../internals/well-known-symbol-wrapped":89}],100:[function(t,n,e){var r,o=t("../internals/global"),i=t("../internals/dom-iterables"),s=t("../modules/es.array.iterator"),a=t("../internals/create-non-enumerable-property"),t=t("../internals/well-known-symbol"),l=t("iterator"),c=t("toStringTag"),u=s.values;for(r in i){var p=o[r],f=p&&p.prototype;if(f){if(f[l]!==u)try{a(f,l,u)}catch(t){f[l]=u}if(f[c]||a(f,c,r),i[r])for(var d in s)if(f[d]!==s[d])try{a(f,d,s[d])}catch(t){f[d]=s[d]}}}},{"../internals/create-non-enumerable-property":18,"../internals/dom-iterables":25,"../internals/global":35,"../internals/well-known-symbol":90,"../modules/es.array.iterator":92}],101:[function(t,n,e){"use strict";function s(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=function(t,n){if(t){if("string"==typeof t)return a(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Map"===(e="Object"===e&&t.constructor?t.constructor.name:e)||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?a(t,n):void 0}}(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0,n=function(){};return{s:n,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return i=t.done,t},e:function(t){s=!0,o=t},f:function(){try{i||null==e.return||e.return()}finally{if(s)throw o}}}}function a(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}t("core-js/modules/es.array.slice.js"),t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.function.name.js"),t("core-js/modules/es.array.from.js"),t("core-js/modules/es.string.iterator.js"),t("core-js/modules/es.symbol.js"),t("core-js/modules/es.symbol.description.js"),t("core-js/modules/es.symbol.iterator.js"),t("core-js/modules/es.array.iterator.js"),t("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(e,"__esModule",{value:!0}),e.click=e.createDiv=void 0,e.createDiv=function(t,n){var e=document.createElement("div");if("string"==typeof t)e.className=t;else{var r,o=s(t);try{for(o.s();!(r=o.n()).done;){var i=r.value;e.classList.add(i)}}catch(t){o.e(t)}finally{o.f()}}return void 0!==n&&(e.innerHTML=n),e},e.click=function(t,n){var e,r=s(emulatorsUi.dom.pointers.bind.enders);try{for(r.s();!(e=r.n()).done;){var o=e.value;t.addEventListener(o,function(){t.classList.contains("jsdos-player-button-disabled")||n(t)})}}catch(t){r.e(t)}finally{r.f()}}},{"core-js/modules/es.array.from.js":91,"core-js/modules/es.array.iterator.js":92,"core-js/modules/es.array.slice.js":93,"core-js/modules/es.function.name.js":94,"core-js/modules/es.object.to-string.js":95,"core-js/modules/es.string.iterator.js":96,"core-js/modules/es.symbol.description.js":97,"core-js/modules/es.symbol.iterator.js":98,"core-js/modules/es.symbol.js":99,"core-js/modules/web.dom-collections.iterator.js":100}],102:[function(t,n,e){"use strict";function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Object.defineProperty(e,"__esModule",{value:!0}),e.Navbar=void 0;var b=t("./dom"),v="jsdos-player-gone",h="jsdos-player-button-disabled",m="jsdos-player-button-primary";e.Navbar=function(){function y(t,n,e){var r=this;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,y),this.onFullscreen=function(){r.dos.layers.toggleFullscreen()},this.onSave=function(){r.dos.layers.save()},this.onKeyboard=function(){r.dos.layers.toggleKeyboard()},this.onMute=function(n,e){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){n.classList.add(v),e.classList.remove(v),t.mute()})},this.onUnmute=function(n,e){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){n.classList.add(v),e.classList.remove(v),t.unmute()})},this.onPlay=function(n,e){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){n.classList.add(v),e.classList.remove(v),t.resume()})},this.onStop=function(n,e){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){n.classList.add(v),e.classList.remove(v),t.pause()})},this.onMobileControls=function(){r.dos.mobileControls?r.dos.disableMobileControls():r.dos.enableMobileControls()},this.root=t,this.dos=n;var o=e.title||"JS-DOS",i=b.createDiv("jsdos-player-logo"),s=this.createTitle(o),t=b.createDiv("jsdos-player-spring"),n=this.createFullScreenButton(),a=this.createSaveButton(),l=this.createKeyboardButton(),c=this.createMuteButton(),u=this.createUnmuteButton(),p=this.createStopButton(),f=this.createPlayButton(),d=this.createMobileButton(),e=b.createDiv("jsdos-player-divider");this.root.appendChild(i),this.root.appendChild(s),this.root.appendChild(t),this.root.appendChild(e),this.root.appendChild(d),this.root.appendChild(f),this.root.appendChild(p),this.root.appendChild(u),this.root.appendChild(c),this.root.appendChild(l),this.root.appendChild(a),this.root.appendChild(n),b.click(n,this.onFullscreen),b.click(a,this.onSave),b.click(l,this.onKeyboard),b.click(c,function(t){return r.onMute(t,u)}),b.click(u,function(t){return r.onUnmute(t,c)}),b.click(p,function(t){return r.onStop(t,f)}),b.click(f,function(t){return r.onPlay(t,p)}),b.click(d,this.onMobileControls),this.dos.layers.setOnSaveStarted(function(){a.classList.add(h),s.innerText="Saving..."}),this.dos.layers.setOnSaveEnded(function(){a.classList.remove(h),s.innerText=o}),this.dos.layers.setOnKeyboardVisibility(function(t){t?l.classList.add(m):l.classList.remove(m)}),this.dos.layers.setOnFullscreen(function(t){t?r.root.classList.add(v):r.root.classList.remove(v)});n=function(t){t?d.classList.add(m):d.classList.remove(m)};this.dos.setOnMobileControlsChanged(n),n(this.dos.mobileControls)}var t,n,e;return t=y,(n=[{key:"createTitle",value:function(t){return b.createDiv("jsdos-player-title",t)}},{key:"createFullScreenButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="maximize" class="jsdos-player-icon jsdos-player-icon-maximize">\n\t\t\t\t<svg data-icon="maximize" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>maximize</desc>\n\t\t\t\t\t<path d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createSaveButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="save" class="jsdos-player-icon jsdos-player-icon-save">\n\t\t\t\t<svg data-icon="save" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>save</desc>\n\t\t\t\t\t<path d="M15.71 2.29l-2-2A.997.997 0 0013 0h-1v6H4V0H1C.45 0 0 .45 0 1v14c0 .55.45 1 1 1h14c.55 0 1-.45 1-1V3c0-.28-.11-.53-.29-.71zM14 15H2V9c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v6zM11 1H9v4h2V1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createKeyboardButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="keyboard" class="jsdos-player-icon jsdos-player-icon-keyboard">\n\t\t\t\t<svg data-icon="keyboard" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>keyboard</desc>\n\t\t\t\t\t<path d="M1 8h3.76l2-2H1c-.55 0-1 .45-1 1s.45 1 1 1zm14.49-4.01c.31-.32.51-.76.51-1.24C16 1.78 15.22 1 14.25 1c-.48 0-.92.2-1.24.51l-1.44 1.44 2.47 2.47 1.45-1.43zM1 4h7.76l2-2H1c-.55 0-1 .45-1 1s.45 1 1 1zm0 6c-.55 0-1 .45-1 1 0 .48.35.86.8.96L2.76 10H1zm9.95-6.43l-6.69 6.69 2.47 2.47 6.69-6.69-2.47-2.47zm4.25 2.47L13.24 8H15c.55 0 1-.45 1-1 0-.48-.35-.86-.8-.96zM2 15l3.86-1.39-2.46-2.44L2 15zm13-5h-3.76l-2 2H15c.55 0 1-.45 1-1s-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createMuteButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="mute" class="jsdos-player-icon jsdos-player-icon-mute">\n\t\t\t\t<svg data-icon="mute" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>mute</desc>\n\t\t\t\t\t<path d="M7 1.86c-.28 0-.53.11-.71.29l-2.7 2.71H1c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2.59l2.71 2.71a1.003 1.003 0 001.71-.71v-10c-.01-.55-.46-1-1.01-1zm6.74-.99l-1.58 1.22A9.985 9.985 0 0114 7.86c0 2.16-.69 4.15-1.85 5.78l1.58 1.22c1.42-1.97 2.26-4.38 2.26-7 .01-2.61-.84-5.02-2.25-6.99zM8.98 4.52C9.62 5.48 10 6.63 10 7.86s-.38 2.39-1.02 3.34l1.59 1.22c.9-1.29 1.43-2.86 1.43-4.56 0-1.7-.53-3.27-1.43-4.56L8.98 4.52z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createUnmuteButton",value:function(){return b.createDiv(["jsdos-player-button",v],'\n\t\t\t<span icon="unmute" class="jsdos-player-icon jsdos-player-icon-unmute">\n\t\t\t\t<svg data-icon="unmute" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>unmute</desc>\n\t\t\t\t\t<path d="M11 2c-.28 0-.53.11-.71.29L7.59 5H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2.59l2.71 2.71c.17.18.42.29.7.29.55 0 1-.45 1-1V3c0-.55-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createStopButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="stop" class="jsdos-player-icon jsdos-player-icon-stop">\n\t\t\t\t<svg data-icon="stop" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>stop</desc>\n\t\t\t\t\t<path d="M6 3H4c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h2c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zm6 0h-2c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h2c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createPlayButton",value:function(){return b.createDiv(["jsdos-player-button",v],'\n\t\t\t<span icon="play" class="jsdos-player-icon jsdos-player-icon-play">\n\t\t\t\t<svg data-icon="play" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>play</desc>\n\t\t\t\t\t<path d="M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createMobileButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="mobile" class="jsdos-player-icon jsdos-player-icon-mobile">\n\t\t\t\t<svg data-icon="mobile" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>mobile</desc>\n\t\t\t\t\t<path d="M12 0H4c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h8c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1zM8 15c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm3-3H5V3h6v9z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}}])&&r(t.prototype,n),e&&r(t,e),y}()},{"./dom":101}],103:[function(t,n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DosPlayer=void 0;var i=t("./js-dos-navbar"),s=t("./dom"),a=Dos;function r(t,n){if("none"===(n=n||{}).style)return console.warn("If you don't need the jsdos topbar, please use emulatros + emulators-ui instead"),a(t,n||{});"dark"===n.style&&t.classList.add("jsdos-player-dark"),t.classList.add("jsdos-player-root");var e=s.createDiv("jsdos-player-navbar"),r=s.createDiv("jsdos-player-window"),o=s.createDiv("jsdos-player-keyboard");t.appendChild(e),t.appendChild(r),t.appendChild(o),n.layersOptions=n.layersOptions||{},n.layersOptions.keyboardDiv=o,n.layersOptions.fullscreenElement=t;r=a(r,n||{});return r.navbar=new i.Navbar(e,r,n),r}e.DosPlayer=r,window.Dos=r},{"./dom":101,"./js-dos-navbar":102}]},{},[103]);


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmF0Y2gtcHJvY2Vzc29yL3NyYy9iYXRjaC1wcm9jZXNzb3IuanMiLCJub2RlX21vZHVsZXMvYmF0Y2gtcHJvY2Vzc29yL3NyYy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWlvYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWJ1ZmZlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvYnJvd3Nlci1kZXRlY3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvY29sbGVjdGlvbi11dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZGV0ZWN0aW9uLXN0cmF0ZWd5L29iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZGV0ZWN0aW9uLXN0cmF0ZWd5L3Njcm9sbC5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IuanMiLCJub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2VsZW1lbnQtdXRpbHMuanMiLCJub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL2lkLWdlbmVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvaWQtaGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvbGlzdGVuZXItaGFuZGxlci5qcyIsIm5vZGVfbW9kdWxlcy9lbGVtZW50LXJlc2l6ZS1kZXRlY3Rvci9zcmMvcmVwb3J0ZXIuanMiLCJub2RlX21vZHVsZXMvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3Ivc3JjL3N0YXRlLWhhbmRsZXIuanMiLCJub2RlX21vZHVsZXMvbmlwcGxlanMvZGlzdC9uaXBwbGVqcy5qcyIsIm5vZGVfbW9kdWxlcy9ub3R5Zi9ub3R5Zi5qcyIsIm5vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJub2RlX21vZHVsZXMvc2ltcGxlLWtleWJvYXJkL2J1aWxkL2luZGV4LmpzIiwic3JjL2J1aWxkLnRzIiwic3JjL2NvbnRyb2xzL2J1dHRvbi50cyIsInNyYy9jb250cm9scy9ncmlkLnRzIiwic3JjL2NvbnRyb2xzL2tleWJvYXJkLnRzIiwic3JjL2NvbnRyb2xzL2xheWVycy1jb25maWcudHMiLCJzcmMvY29udHJvbHMvbGF5ZXJzLWNvbnRyb2wudHMiLCJzcmMvY29udHJvbHMvbGVnYWN5LWxheWVycy1jb250cm9sLnRzIiwic3JjL2NvbnRyb2xzL21vdXNlLnRzIiwic3JjL2NvbnRyb2xzL25pcHBsZS50cyIsInNyYy9jb250cm9scy9udWxsLWxheWVycy1jb250cm9sLnRzIiwic3JjL2NvbnRyb2xzL29wdGlvbnMudHMiLCJzcmMvZG9tL2hlbHBlcnMudHMiLCJzcmMvZG9tL2tleXMudHMiLCJzcmMvZG9tL2xheWVycy50cyIsInNyYy9kb20vbGlmZWN5Y2xlLnRzIiwic3JjL2RvbS9wb2ludGVyLnRzIiwic3JjL2VtdWxhdG9ycy11aS50cyIsInNyYy9ncmFwaGljcy9fMmQudHMiLCJzcmMvZ3JhcGhpY3MvdmlkZW8udHMiLCJzcmMvZ3JhcGhpY3Mvd2ViZ2wudHMiLCJzcmMvanMtZG9zLnRzIiwic3JjL25ldHdvcmsveGhyLnRzIiwic3JjL25vdGlmaWNhdGlvbi9ub3R5Zi50cyIsInNyYy9wZXJzaXN0L3NhdmUtbG9hZC50cyIsInNyYy9zb3VuZC9hdWRpby1ub2RlLnRzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLXNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaW11bC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwic3JjL2NhY2hlLnRzIiwic3JjL2Rvcy9idW5kbGUvZG9zLWJ1bmRsZS50cyIsInNyYy9kb3MvYnVuZGxlL2Rvcy1jb25mLnRzIiwic3JjL2Rvcy9kb3Nib3gvdHMvZGlyZWN0LnRzIiwic3JjL2Rvcy9kb3Nib3gvdHMvd29ya2VyLnRzIiwic3JjL2VtdWxhdG9ycy50cyIsInNyYy9odHRwLnRzIiwic3JjL2ltcGwvY2ktaW1wbC50cyIsInNyYy9pbXBsL2VtdWxhdG9ycy1pbXBsLnRzIiwic3JjL2ltcGwvbW9kdWxlcy50cyIsInNyYy9qYW51cy9qYW51cy1pbXBsLnRzIiwic3JjL2xpYnppcC9saWJ6aXAudHMiLCJzcmMvcHJvdG9jb2wvbWVzc2FnZXMtcXVldWUudHMiLCJzcmMvcHJvdG9jb2wvcHJvdG9jb2wudHMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsInNyYy9kb20udHMiLCJzcmMvanMtZG9zLW5hdmJhci50cyIsInNyYy9qcy1kb3MtcGxheWVyLnRzIl0sIm5hbWVzIjpbInIiLCJlIiwibiIsInQiLCJvIiwiaSIsImYiLCJjIiwicmVxdWlyZSIsInUiLCJhIiwiRXJyb3IiLCJjb2RlIiwicCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsInV0aWxzIiwiQmF0Y2giLCJiYXRjaCIsInNpemUiLCJ0b3BMZXZlbCIsImJvdHRvbUxldmVsIiwiYWRkIiwibGV2ZWwiLCJmbiIsInB1c2giLCJwcm9jZXNzIiwiZm5zIiwib3B0aW9ucyIsInJlcG9ydGVyIiwiYXN5bmNQcm9jZXNzIiwiZ2V0T3B0aW9uIiwiYXV0b1Byb2Nlc3MiLCJ3YXJuIiwiYXN5bmNGcmFtZUhhbmRsZXIiLCJpc1Byb2Nlc3NpbmciLCJwcm9jZXNzQmF0Y2giLCJwcm9jZXNzaW5nQmF0Y2giLCJwcm9jZXNzQmF0Y2hBc3luYyIsInNldFRpbWVvdXQiLCJmb3JjZSIsImxvY2FsQXN5bmNQcm9jZXNzIiwidW5kZWZpbmVkIiwiY2xlYXJUaW1lb3V0IiwibmFtZSIsImRlZmF1bHRWYWx1ZSIsInZhbHVlIiwiaXQiLCJUeXBlRXJyb3IiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJBcnJheSIsInByb3RvdHlwZSIsImtleSIsImF0IiwiUyIsImluZGV4IiwidW5pY29kZSIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJpc09iamVjdCIsInRvT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwidG9MZW5ndGgiLCJjb3B5V2l0aGluIiwidGFyZ2V0Iiwic3RhcnQiLCJPIiwidGhpcyIsImxlbiIsInRvIiwiZnJvbSIsImVuZCIsImFyZ3VtZW50cyIsImNvdW50IiwiTWF0aCIsIm1pbiIsImluYyIsImFMZW4iLCJlbmRQb3MiLCJ0b0lPYmplY3QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZWwiLCJmcm9tSW5kZXgiLCJjdHgiLCJJT2JqZWN0IiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJjcmVhdGUiLCJjYWxsYmFja2ZuIiwidGhhdCIsInZhbCIsInJlcyIsInNlbGYiLCJyZXN1bHQiLCJpc0FycmF5IiwiU1BFQ0lFUyIsIm9yaWdpbmFsIiwiQyIsImNvbnN0cnVjdG9yIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiY29mIiwiVEFHIiwiQVJHIiwiVCIsIkIiLCJ0cnlHZXQiLCJPYmplY3QiLCJjYWxsZWUiLCJ0b1N0cmluZyIsInNsaWNlIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCIkZGVmaW5lUHJvcGVydHkiLCJjcmVhdGVEZXNjIiwib2JqZWN0IiwiYUZ1bmN0aW9uIiwiYiIsImFwcGx5IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJkb2N1bWVudCIsImlzIiwiY3JlYXRlRWxlbWVudCIsInNwbGl0IiwiZ2V0S2V5cyIsImdPUFMiLCJwSUUiLCJnZXRTeW1ib2xzIiwic3ltYm9scyIsImlzRW51bSIsImdsb2JhbCIsImhpZGUiLCJyZWRlZmluZSIsIlBST1RPVFlQRSIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiZXhwUHJvdG8iLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImV4ZWMiLCJmYWlscyIsImRlZmluZWQiLCJ3a3MiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsImdyb3VwcyIsInJlcGxhY2UiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJLRVkiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiZG9uZSIsInN0cmZuIiwicnhmbiIsIlN0cmluZyIsIlJlZ0V4cCIsInN0cmluZyIsImFyZyIsImFuT2JqZWN0IiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInN0aWNreSIsImlzQXJyYXlJdGVyIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsImVudHJpZXMiLCJJVEVSQVRPUiIsInN0ZXAiLCJpdGVyYXRvciIsIml0ZXJGbiIsIm5leHQiLCJ3aW5kb3ciLCJfX2ciLCJoYXNPd25Qcm9wZXJ0eSIsImRQIiwiZG9jdW1lbnRFbGVtZW50Iiwic2V0UHJvdG90eXBlT2YiLCJzZXQiLCJhcmdzIiwidW4iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIkl0ZXJhdG9ycyIsInJldCIsImRlc2NyaXB0b3IiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTkFNRSIsInJldHVyblRoaXMiLCJMSUJSQVJZIiwiJGl0ZXJDcmVhdGUiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZIiwia2V5cyIsIlZBTFVFUyIsIkJhc2UiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiZ2V0TWV0aG9kIiwia2luZCIsInByb3RvIiwibWV0aG9kcyIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwidmFsdWVzIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsInNhZmUiLCJhcnIiLCJpdGVyIiwic2V0TWV0YSIsInNldERlc2MiLCJNRVRBIiwiaWQiLCJ3IiwiaGFzIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiUHJvbWlzZSIsImlzTm9kZSIsImZsdXNoIiwicGFyZW50IiwiZG9tYWluIiwiZXhpdCIsImhlYWQiLCJub3RpZnkiLCJsYXN0IiwiZW50ZXIiLCJuZXh0VGljayIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJyZXNvbHZlIiwicHJvbWlzZSIsInRoZW4iLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIkVtcHR5IiwiZFBzIiwiZW51bUJ1Z0tleXMiLCJJRV9QUk9UTyIsImNyZWF0ZURpY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdPUE4iLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIiRrZXlzIiwiaGlkZGVuS2V5cyIsImNvbmNhdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIk9iamVjdFByb3RvIiwiYXJyYXlJbmRleE9mIiwibmFtZXMiLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsIiR0cmltIiwidHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCJ0ZXN0IiwidiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwieCIsInByb21pc2VDYXBhYmlsaXR5IiwiYml0bWFwIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiU1JDIiwiJHRvU3RyaW5nIiwiVE9fU1RSSU5HIiwiVFBMIiwiaW5zcGVjdFNvdXJjZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiY2xhc3NvZiIsImJ1aWx0aW5FeGVjIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiTEFTVF9JTkRFWCIsIlVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyIsIk5QQ0dfSU5DTFVERUQiLCJsYXN0SW5kZXgiLCJyZUNvcHkiLCJtYXRjaCIsImNoZWNrIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJERVNDUklQVE9SUyIsImRlZiIsInRhZyIsInN0YXQiLCJzaGFyZWQiLCJ1aWQiLCJTSEFSRUQiLCJzdG9yZSIsIm1vZGUiLCJjb3B5cmlnaHQiLCJEIiwidG9JbnRlZ2VyIiwicG9zIiwicyIsImwiLCJjaGFyQ29kZUF0IiwiY2hhckF0IiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsInJ0cmltIiwicnVuIiwicXVldWUiLCJsaXN0ZW5lciIsImV2ZW50IiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImludm9rZSIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsIk9OUkVBRFlTVEFURUNIQU5HRSIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJjbGVhciIsIm1heCIsIm51bWJlciIsIlJhbmdlRXJyb3IiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsInZhbHVlT2YiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsImNyZWF0ZUFycmF5TWV0aG9kIiwiY3JlYXRlQXJyYXlJbmNsdWRlcyIsIkFycmF5SXRlcmF0b3JzIiwiJGl0ZXJEZXRlY3QiLCJzZXRTcGVjaWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlDb3B5V2l0aGluIiwiJERQIiwiJEdPUEQiLCJVaW50OEFycmF5IiwiQVJSQVlfQlVGRkVSIiwiU0hBUkVEX0JVRkZFUiIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiYXJyYXlMYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiYXJyYXlSZWR1Y2UiLCJyZWR1Y2UiLCJhcnJheVJlZHVjZVJpZ2h0IiwicmVkdWNlUmlnaHQiLCJhcnJheUpvaW4iLCJhcnJheVNvcnQiLCJzb3J0IiwiYXJyYXlTbGljZSIsImFycmF5VG9TdHJpbmciLCJhcnJheVRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIldST05HX0xFTkdUSCIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJzcGVjaWVzRnJvbUxpc3QiLCJsaXN0IiwiZnJvbUxpc3QiLCJhZGRHZXR0ZXIiLCJpbnRlcm5hbCIsIl9kIiwiJGZyb20iLCJtYXBmbiIsIm1hcHBpbmciLCIkb2YiLCJUT19MT0NBTEVfQlVHIiwiJHRvTG9jYWxlU3RyaW5nIiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImZvckVhY2giLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwibWFwIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCIkVHlwZWRBcnJheVByb3RvdHlwZSQiLCJ3cmFwcGVyIiwiQ0xBTVBFRCIsImFkZEVsZW1lbnQiLCJHRVRURVIiLCJyb3VuZCIsIlNFVFRFUiIsIlR5cGVkQXJyYXkiLCJUQUMiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiJG5hdGl2ZUl0ZXJhdG9yIiwiQ09SUkVDVF9JVEVSX05BTUUiLCIkaXRlcmF0b3IiLCJvZiIsIkRBVEFfVklFVyIsIldST05HX0lOREVYIiwiSW5maW5pdHkiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiQllURV9MRU5HVEgiLCJCWVRFX09GRlNFVCIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsIm0iLCJlTGVuIiwiZU1heCIsImVCaWFzIiwicnQiLCJ1bnBhY2tJRUVFNzU0IiwibkJpdHMiLCJOYU4iLCJ1bnBhY2tJMzIiLCJieXRlcyIsInBhY2tJOCIsInBhY2tJMTYiLCJwYWNrSTMyIiwicGFja0Y2NCIsInBhY2tGMzIiLCJ2aWV3IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsIl9iIiwicGFjayIsImNvbnZlcnNpb24iLCJBcnJheUJ1ZmZlclByb3RvIiwiaiIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0IiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwicHgiLCJyYW5kb20iLCJ1c2VyQWdlbnQiLCJ3a3NFeHQiLCIkU3ltYm9sIiwiU3ltYm9sIiwiVVNFX1NZTUJPTCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiY3JlYXRlUHJvcGVydHkiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfdCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJGUHJvdG8iLCJuYW1lUkUiLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJUUklNIiwiZGlnaXRzIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJOVU1CRVIiLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIk51bWJlciIsImVtcHR5IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwibWljcm90YXNrIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIl9hIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJmb3JPZiIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInByb21pc2VSZXNvbHZlIiwiUFJPTUlTRSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsIlVTRV9OQVRJVkUiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsImVycm9yIiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlc29sdmUiLCJleGVjdXRvciIsImVyciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhdGNoIiwiY2FwYWJpbGl0eSIsImFsbCIsInJlbWFpbmluZyIsIiRpbmRleCIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiZm9yY2VkIiwiZmxhZ3MiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJyZWdFeHBFeGVjIiwiTUFUQ0giLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwiQSIsIm1hdGNoU3RyIiwiZGVmaW5lIiwiJGZsYWdzIiwiJGF0IiwicG9pbnQiLCJ3cmFwIiwic3ltIiwiQWxsU3ltYm9scyIsIl9jcmVhdGUiLCIkZGVmaW5lUHJvcGVydGllcyIsImVudW1LZXlzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIk9QU3ltYm9scyIsIkhJRERFTiIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsIiRmYWlscyIsIndrc0RlZmluZSIsImdPUE5FeHQiLCIkR09QUyIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJUT19QUklNSVRJVkUiLCJTeW1ib2xSZWdpc3RyeSIsIlFPYmplY3QiLCJzZXR0ZXIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwiaXNTeW1ib2wiLCJlczZTeW1ib2xzIiwid2VsbEtub3duU3ltYm9scyIsImsiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJpbml0IiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsImV4cGxpY2l0IiwiQ29sbGVjdGlvbiIsImRldGVjdG9yIiwiaXNJRSIsImFnZW50IiwidG9Mb3dlckNhc2UiLCJkaXYiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImlubmVySFRNTCIsInVuZGVmIiwiaXNMZWdhY3lPcGVyYSIsIm9wZXJhIiwiY29sbGVjdGlvbiIsImNhbGxiYWNrIiwiYnJvd3NlckRldGVjdG9yIiwiYmF0Y2hQcm9jZXNzb3IiLCJnZXRTdGF0ZSIsInN0YXRlSGFuZGxlciIsImdldE9iamVjdCIsImVsZW1lbnQiLCJtYWtlRGV0ZWN0YWJsZSIsInJ1bGVzIiwic2VwZXJhdG9yIiwiT0JKRUNUX1NUWUxFIiwicG9zaXRpb25DaGVja1BlcmZvcm1lZCIsIndpZHRoIiwiaGVpZ2h0IiwibXV0YXRlRG9tIiwiYWx0ZXJQb3NpdGlvblN0eWxlcyIsInBvc2l0aW9uIiwic2V0UHJvcGVydHkiLCJpbXBvcnRhbnQiLCJyZW1vdmVSZWxhdGl2ZVN0eWxlcyIsInByb3BlcnR5IiwiY3NzVGV4dCIsInRhYkluZGV4Iiwic2V0QXR0cmlidXRlIiwib25sb2FkIiwiZ2V0RG9jdW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdGF0ZSIsImNoZWNrRm9yT2JqZWN0RG9jdW1lbnRUaW1lb3V0SWQiLCJnZXRDb21wdXRlZFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJzdGFydFNpemUiLCJhZGRMaXN0ZW5lciIsImxpc3RlbmVyUHJveHkiLCJwcm94eSIsImF0dGFjaEV2ZW50IiwiZGVmYXVsdFZpZXciLCJ1bmluc3RhbGwiLCJkZXRhY2hFdmVudCIsImlkSGFuZGxlciIsImhhc1N0YXRlIiwic2Nyb2xsYmFyU2l6ZXMiLCJjaGlsZCIsImJ1aWxkQ3NzVGV4dFN0cmluZyIsImNvbnRhaW5lciIsImJvZHkiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwid2lkdGhTaXplIiwiY2xpZW50V2lkdGgiLCJoZWlnaHRTaXplIiwiY2xpZW50SGVpZ2h0IiwiZ2V0U2Nyb2xsYmFyU2l6ZXMiLCJkZXRlY3Rpb25Db250YWluZXJDbGFzcyIsImluaXREb2N1bWVudCIsInRhcmdldERvY3VtZW50Iiwic3R5bGVJZCIsImNvbnRhaW5lckNsYXNzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250YWluZXJBbmltYXRpb25DbGFzcyIsImNvbnRhaW5lckFuaW1hdGlvbkFjdGl2ZUNsYXNzIiwibWV0aG9kIiwic3R5bGVFbGVtZW50IiwiaW5qZWN0U3R5bGUiLCJpbmplY3RTY3JvbGxTdHlsZSIsImFkZEV2ZW50IiwiY2IiLCJyZW1vdmVFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRFeHBhbmRFbGVtZW50IiwiY2hpbGROb2RlcyIsImdldFNocmlua0VsZW1lbnQiLCJkZWJ1ZyIsInVuc2hpZnQiLCJpc1VucmVuZGVyZWQiLCJnZXRTdHlsZSIsImVsZW1lbnRTdHlsZSIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIndpZHRoQ1NTIiwiaGVpZ2h0Q1NTIiwic3RvcmVTdHlsZSIsInN0b3JlQ3VycmVudFNpemUiLCJsYXN0V2lkdGgiLCJsYXN0SGVpZ2h0IiwiZ2V0V2lkdGhPZmZzZXQiLCJnZXRIZWlnaHRPZmZzZXQiLCJnZXRFeHBhbmRXaWR0aCIsImdldEV4cGFuZEhlaWdodCIsInBvc2l0aW9uU2Nyb2xsYmFycyIsImV4cGFuZCIsInNocmluayIsImV4cGFuZFdpZHRoIiwiZXhwYW5kSGVpZ2h0Iiwic2hyaW5rV2lkdGgiLCJzaHJpbmtIZWlnaHQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaW5qZWN0Q29udGFpbmVyRWxlbWVudCIsImNsYXNzTmFtZSIsIm9uQW5pbWF0aW9uU3RhcnQiLCJvblJlbmRlcmVkIiwiaW5qZWN0U2Nyb2xsRWxlbWVudHMiLCJyb290Q29udGFpbmVyIiwic2Nyb2xsYmFyV2lkdGgiLCJzY3JvbGxiYXJIZWlnaHQiLCJjb250YWluZXJDb250YWluZXJTdHlsZSIsImNvbnRhaW5lclN0eWxlIiwiZXhwYW5kU3R5bGUiLCJzaHJpbmtTdHlsZSIsImV4cGFuZENoaWxkU3R5bGUiLCJzaHJpbmtDaGlsZFN0eWxlIiwiY29udGFpbmVyQ29udGFpbmVyIiwiZXhwYW5kQ2hpbGQiLCJzaHJpbmtDaGlsZCIsImRpciIsIm9uRXhwYW5kU2Nyb2xsIiwib25TaHJpbmtTY3JvbGwiLCJvbkV4cGFuZCIsIm9uU2hyaW5rIiwicmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzIiwidXBkYXRlQ2hpbGRTaXplcyIsInVwZGF0ZURldGVjdG9yRWxlbWVudHMiLCJzaXplQ2hhbmdlZCIsImFyZUVsZW1lbnRzSW5qZWN0ZWQiLCJoIiwibm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQiLCJsYXN0Tm90aWZpZWRXaWR0aCIsImxhc3ROb3RpZmllZEhlaWdodCIsImxpc3RlbmVycyIsImhhbmRsZVNjcm9sbCIsImZpbmFsaXplRG9tTXV0YXRpb24iLCJyZWFkeSIsImluc3RhbGwiLCJvd25lckRvY3VtZW50IiwiY29udGFpbnMiLCJlbGVtZW50VXRpbHNNYWtlciIsImxpc3RlbmVySGFuZGxlck1ha2VyIiwiaWRHZW5lcmF0b3JNYWtlciIsImlkSGFuZGxlck1ha2VyIiwicmVwb3J0ZXJNYWtlciIsImJhdGNoUHJvY2Vzc29yTWFrZXIiLCJvYmplY3RTdHJhdGVneU1ha2VyIiwic2Nyb2xsU3RyYXRlZ3lNYWtlciIsImlzQ29sbGVjdGlvbiIsIm9iaiIsInRvQXJyYXkiLCJhcnJheSIsImlzRWxlbWVudCIsIm5vZGVUeXBlIiwiaWRHZW5lcmF0b3IiLCJkZWZhdWx0SWRIYW5kbGVyIiwiZ2xvYmFsT3B0aW9ucyIsImNhbGxPbkFkZCIsImRldGVjdGlvblN0cmF0ZWd5IiwiZXZlbnRMaXN0ZW5lckhhbmRsZXIiLCJlbGVtZW50VXRpbHMiLCJkZXNpcmVkU3RyYXRlZ3kiLCJpbXBvcnRhbnRDc3NSdWxlcyIsInN0cmF0ZWd5T3B0aW9ucyIsIm9uUmVhZHlDYWxsYmFja3MiLCJsaXN0ZW5UbyIsImVsZW1lbnRzIiwib25SZXNpemVDYWxsYmFjayIsImVsZW1lbnRzUmVhZHkiLCJvblJlYWR5Q2FsbGJhY2siLCJpbml0U3RhdGUiLCJpc0RldGVjdGFibGUiLCJpc0J1c3kiLCJtYXJrQnVzeSIsIm1hcmtBc0RldGVjdGFibGUiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImNsZWFuU3RhdGUiLCJidXN5IiwiaWRDb3VudCIsImdlbmVyYXRlIiwiZXZlbnRMaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lcnMiLCJzcGxpY2UiLCJxdWlldCIsIm5vb3AiLCJhdHRhY2hGdW5jdGlvbiIsInByb3AiLCJ5Iiwic3FydCIsIlBJIiwiZCIsInByZXZlbnREZWZhdWx0IiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWE9mZnNldCIsInBhcmVudE5vZGUiLCJwYWdlWU9mZnNldCIsIk1hcCIsInRvVXBwZXJDYXNlIiwiZyIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwibW92ZSIsIl8iLCJvbiIsIl9oYW5kbGVyc18iLCJvZmYiLCJ0cmlnZ2VyIiwiY29uZmlnIiwiZGVmYXVsdHMiLCJiaW5kRXZ0IiwiX2RvbUhhbmRsZXJzXyIsInVuYmluZEV2dCIsImlkZW50aWZpZXIiLCJmcm9udFBvc2l0aW9uIiwidGhyZXNob2xkIiwiY29sb3IiLCJmYWRlVGltZSIsImRhdGFPbmx5IiwicmVzdEpveXN0aWNrIiwicmVzdE9wYWNpdHkiLCJ6b25lIiwibG9ja1giLCJsb2NrWSIsInNoYXBlIiwiYnVpbGRFbCIsInN0eWxpemUiLCJpbnN0YW5jZSIsInVpIiwiYmluZCIsInNob3ciLCJhZGRUb0RvbSIsInJlbW92ZSIsInJlbW92ZUZyb21Eb20iLCJkZXN0cm95Iiwic2V0UG9zaXRpb24iLCJyZXNldERpcmVjdGlvbiIsImNvbXB1dGVEaXJlY3Rpb24iLCJiYWNrIiwiZnJvbnQiLCJvcGFjaXR5IiwiekluZGV4IiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsImJhY2tncm91bmQiLCJhcHBseVN0eWxlcyIsInJlbW92ZVRpbWVvdXQiLCJzaG93VGltZW91dCIsInJlc3RUaW1lb3V0IiwicmVzdENhbGxiYWNrIiwiZGlyZWN0aW9uIiwiYW5nbGUiLCJyYWRpYW4iLCJuaXBwbGVzIiwiaWRsZXMiLCJhY3RpdmVzIiwiaWRzIiwicHJlc3N1cmVJbnRlcnZhbHMiLCJtYW5hZ2VyIiwibXVsdGl0b3VjaCIsIm1heE51bWJlck9mTmlwcGxlcyIsImNhdGNoRGlzdGFuY2UiLCJkeW5hbWljUGFnZSIsImZvbGxvdyIsInVwZGF0ZUJveCIsInByZXBhcmVOaXBwbGVzIiwiYmluZGluZ3MiLCJwcm9jZXNzT25Nb3ZlIiwicHJvY2Vzc09uRW5kIiwidG91Y2hBY3Rpb24iLCJtc1RvdWNoQWN0aW9uIiwiY3JlYXRlTmlwcGxlIiwiZ2V0SWRlbnRpZmllciIsInNjcm9sbCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJpbmROaXBwbGUiLCJvbkRlc3Ryb3llZCIsInByZXNzdXJlRm4iLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJwcmVzc3VyZSIsIndlYmtpdEZvcmNlIiwib25zdGFydCIsInByb2Nlc3NPblN0YXJ0IiwidG91Y2hlcyIsImJpbmREb2N1bWVudCIsInBhZ2VYIiwicGFnZVkiLCJnZXRPckNyZWF0ZSIsInJlbW92ZUlkZW50aWZpZXIiLCJidXR0b25zIiwiYXRhbjIiLCJkaXN0YW5jZSIsImNvcyIsInNpbiIsIkkiLCJ6IiwiTSIsImRlZ3JlZSIsInZlY3RvciIsInJhdyIsInVuYmluZERvY3VtZW50IiwicHJlcGFyZUNvbGxlY3Rpb25zIiwiY3JlYXRlQ29sbGVjdGlvbiIsImJpbmRDb2xsZWN0aW9uIiwiYmluZGVkIiwicG9pbnRlcklkIiwibGF0ZXN0Iiwib25tb3ZlIiwib25BbnkiLCJvbmVuZCIsIm9uY2FuY2VsIiwiX2ZvdW5kXyIsImRlZmF1bHQiLCJmYWN0b3J5IiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwiYW1kIiwibmlwcGxlanMiLCJOb3R5ZkFycmF5RXZlbnQiLCJfX2Fzc2lnbiIsImFzc2lnbiIsIk5vdHlmTm90aWZpY2F0aW9uIiwiZXZlbnRUeXBlIiwiY2FsbGJhY2tzIiwidHJpZ2dlckV2ZW50IiwiX3RoaXMiLCJOb3R5ZkV2ZW50IiwiTm90eWZBcnJheSIsImVsZW0iLCJub3RpZmljYXRpb25zIiwidXBkYXRlRm4iLCJBZGQiLCJudW0iLCJSZW1vdmUiLCJvblVwZGF0ZSIsIkRFRkFVTFRfT1BUSU9OUyIsInR5cGVzIiwiYmFja2dyb3VuZENvbG9yIiwiaWNvbiIsInRhZ05hbWUiLCJkdXJhdGlvbiIsInJpcHBsZSIsImRpc21pc3NpYmxlIiwiTm90eWZWaWV3IiwiZXZlbnRzIiwidXBkYXRlIiwibm90aWZpY2F0aW9uIiwiYWRkTm90aWZpY2F0aW9uIiwicmVtb3ZlTm90aWZpY2F0aW9uIiwiaGFuZGxlRXZlbnQiLCJyZW5kZXJlZE5vdGlmaWNhdGlvbiIsIl9wb3BSZW5kZXJlZE5vdGlmaWNhdGlvbiIsImNsYXNzTGlzdCIsImFuaW1hdGlvbkVuZEV2ZW50TmFtZSIsIl9yZW5kZXJOb3RpZmljYXRpb24iLCJfYW5ub3VuY2UiLCJtZXNzYWdlIiwiY2FyZCIsIl9idWlsZE5vdGlmaWNhdGlvbkNhcmQiLCJpZHgiLCJnZXRYUG9zaXRpb24iLCJnZXRZUG9zaXRpb24iLCJhZGp1c3RDb250YWluZXJBbGlnbm1lbnQiLCJhbGlnbiIsIlhfUE9TSVRJT05fRkxFWF9NQVAiLCJqdXN0aWZ5IiwiWV9QT1NJVElPTl9GTEVYX01BUCIsImljb25PcHRzIiwibm90aWZpY2F0aW9uRWxlbSIsIl9jcmVhdGVIVExNRWxlbWVudCIsImljb25Db250YWluZXIiLCJ0ZXh0IiwiaWNvbkNvbG9yIiwiZGlzbWlzc1dyYXBwZXIiLCJkaXNtaXNzQnV0dG9uIiwiRGlzbWlzcyIsInN0b3BQcm9wYWdhdGlvbiIsIkNsaWNrIiwidGV4dENvbnRlbnQiLCJfY3JlYXRlQTExeUNvbnRhaW5lciIsImExMXlDb250YWluZXIiLCJib3JkZXIiLCJjbGlwIiwibWFyZ2luIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwib3V0bGluZSIsIl9nZXRBbmltYXRpb25FbmRFdmVudE5hbWUiLCJ0cmFuc2l0aW9ucyIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwiY2VudGVyIiwiZG9jRnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub3R5ZkNvbnRhaW5lciIsIk5vdHlmIiwicGF5bG9hZCIsIm5vcm1hbGl6ZU9wdGlvbnMiLCJzdWNjZXNzIiwiZGVmYXVsdE9wdHMiLCJhc3NpZ25Qcm9wcyIsIl9wdXNoTm90aWZpY2F0aW9uIiwiZGlzbWlzc0FsbCIsInByb3BzIiwiX3JlbW92ZU5vdGlmaWNhdGlvbiIsInJlZ2lzdGVyVHlwZXMiLCJvcHRzIiwiaW5jb21pbmdUeXBlcyIsImRlZmF1bHRUeXBlIiwidXNlclR5cGVJZHgiLCJ1c2VyVHlwZSIsImRpc21pc3MiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiY29udGV4dCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXRlcmF0b3JNZXRob2QiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3R5cGVvZiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicmV0dXJuIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJVdGlsaXRpZXMiLCJ7YmtzcH0iLCJ7YmFja3NwYWNlfSIsIntlbnRlcn0iLCJ7c2hpZnR9Iiwie3NoaWZ0bGVmdH0iLCJ7c2hpZnRyaWdodH0iLCJ7YWx0fSIsIntzfSIsInt0YWJ9Iiwie2xvY2t9Iiwie2NhcHNsb2NrfSIsInthY2NlcHR9Iiwie3NwYWNlfSIsInsvL30iLCJ7ZXNjfSIsIntlc2NhcGV9Iiwie2YxfSIsIntmMn0iLCJ7ZjN9Iiwie2Y0fSIsIntmNX0iLCJ7ZjZ9Iiwie2Y3fSIsIntmOH0iLCJ7Zjl9Iiwie2YxMH0iLCJ7ZjExfSIsIntmMTJ9Iiwie251bXBhZGRpdmlkZX0iLCJ7bnVtbG9ja30iLCJ7YXJyb3d1cH0iLCJ7YXJyb3dsZWZ0fSIsInthcnJvd2Rvd259Iiwie2Fycm93cmlnaHR9Iiwie3BydHNjcn0iLCJ7c2Nyb2xsbG9ja30iLCJ7cGF1c2V9Iiwie2luc2VydH0iLCJ7aG9tZX0iLCJ7cGFnZXVwfSIsIntkZWxldGV9Iiwie2VuZH0iLCJ7cGFnZWRvd259Iiwie251bXBhZG11bHRpcGx5fSIsIntudW1wYWRzdWJ0cmFjdH0iLCJ7bnVtcGFkYWRkfSIsIntudW1wYWRlbnRlcn0iLCJ7cGVyaW9kfSIsIntudW1wYWRkZWNpbWFsfSIsIntudW1wYWQwfSIsIntudW1wYWQxfSIsIntudW1wYWQyfSIsIntudW1wYWQzfSIsIntudW1wYWQ0fSIsIntudW1wYWQ1fSIsIntudW1wYWQ2fSIsIntudW1wYWQ3fSIsIntudW1wYWQ4fSIsIntudW1wYWQ5fSIsImdldERlZmF1bHREaXBsYXkiLCJnZXRPcHRpb25zIiwicmVtb3ZlQXQiLCJhZGRTdHJpbmdBdCIsInRhYkNoYXJPblRhYiIsIm5ld0xpbmVPbkVudGVyIiwiaXNJbnRlZ2VyIiwidXBkYXRlQ2FyZXRQb3NBY3Rpb24iLCJkaXNwYXRjaCIsInNldENhcmV0UG9zaXRpb24iLCJnZXRDYXJldFBvc2l0aW9uIiwia2V5Ym9hcmRET01DbGFzcyIsImlzTWF4TGVuZ3RoUmVhY2hlZCIsInVwZGF0ZUNhcmV0UG9zIiwic3Vic3RyaW5nIiwic3Vic3RyIiwibWF4TGVuZ3RoIiwiaW5wdXROYW1lIiwibWF4TGVuZ3RoUmVhY2hlZCIsIkJvb2xlYW4iLCJtYXhUb3VjaFBvaW50cyIsImdldENhcmV0UG9zaXRpb25FbmQiLCJiaW5kTWV0aG9kcyIsIlBoeXNpY2FsS2V5Ym9hcmRfZGVmaW5lUHJvcGVydGllcyIsIlBoeXNpY2FsS2V5Ym9hcmQiLCJnZXRTaW1wbGVLZXlib2FyZExheW91dEtleSIsImdldEJ1dHRvbkVsZW1lbnQiLCJwaHlzaWNhbEtleWJvYXJkSGlnaGxpZ2h0QmdDb2xvciIsInBoeXNpY2FsS2V5Ym9hcmRIaWdobGlnaHRUZXh0Q29sb3IiLCJwaHlzaWNhbEtleWJvYXJkSGlnaGxpZ2h0UHJlc3MiLCJvbnBvaW50ZXJkb3duIiwib25tb3VzZWRvd24iLCJvbnRvdWNoc3RhcnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJvbnBvaW50ZXJ1cCIsIm9ubW91c2V1cCIsIm9udG91Y2hlbmQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJLZXlib2FyZF9hcnJheUxpa2VUb0FycmF5IiwiS2V5Ym9hcmRfZGVmaW5lUHJvcGVydGllcyIsIktleWJvYXJkX2RlZmluZVByb3BlcnR5IiwiU2ltcGxlS2V5Ym9hcmQiLCJjYXJldFBvc2l0aW9uIiwiY2FyZXRQb3NpdGlvbkVuZCIsIm9uS2V5UHJlc3MiLCJpbnB1dCIsInV0aWxpdGllcyIsImdldFVwZGF0ZWRJbnB1dCIsImlucHV0UGF0dGVybiIsImlucHV0UGF0dGVybklzVmFsaWQiLCJoYW5kbGVNYXhMZW5ndGgiLCJnZXRBbGxJbnB1dHMiLCJzeW5jSW5zdGFuY2VJbnB1dHMiLCJvbkNoYW5nZSIsImdldElucHV0Iiwib25DaGFuZ2VBbGwiLCJwcmV2ZW50TW91c2VEb3duRGVmYXVsdCIsInN0b3BNb3VzZURvd25Qcm9wYWdhdGlvbiIsImFjdGl2ZUJ1dHRvbkNsYXNzIiwiaG9sZEludGVyYWN0aW9uVGltZW91dCIsImhvbGRUaW1lb3V0IiwiaXNNb3VzZUhvbGQiLCJkaXNhYmxlQnV0dG9uSG9sZCIsImhhbmRsZUJ1dHRvbkhvbGQiLCJwcmV2ZW50TW91c2VVcERlZmF1bHQiLCJzdG9wTW91c2VVcFByb3BhZ2F0aW9uIiwicmVjdXJzZUJ1dHRvbnMiLCJvbktleVJlbGVhc2VkIiwiaGFuZGxlQnV0dG9uQ2xpY2tlZCIsInJlcGxhY2VJbnB1dCIsInJ0bCIsImNoYW5nZWRPcHRpb25zIiwib25TZXRPcHRpb25zIiwicmVuZGVyIiwia2V5Ym9hcmRET00iLCJidXR0b25FbGVtZW50cyIsIlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzIiwiYnV0dG9uVGhlbWUiLCJjbGFzcyIsImlzRmlyc3RLZXlib2FyZEluc3RhbmNlIiwiYWxsS2V5Ym9hcmRJbnN0YW5jZXMiLCJoYW5kbGVLZXlVcCIsImhhbmRsZUtleURvd24iLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlVG91Y2hFbmQiLCJjYXJldEV2ZW50SGFuZGxlciIsInBoeXNpY2FsS2V5Ym9hcmRIaWdobGlnaHQiLCJwaHlzaWNhbEtleWJvYXJkIiwiaGFuZGxlSGlnaGxpZ2h0S2V5VXAiLCJoYW5kbGVIaWdobGlnaHRLZXlEb3duIiwiZGlzYWJsZUNhcmV0UG9zaXRpb25pbmciLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImN1cnJlbnRJbnN0YW5jZU5hbWUiLCJvbnRvdWNoY2FuY2VsIiwiZGVsZXRlQnV0dG9uIiwib25wb2ludGVyY2FuY2VsIiwib25jbGljayIsImluaXRpYWxpemVkIiwiYnV0dG9uQXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsInByb2Nlc3NBdXRvVG91Y2hFdmVudHMiLCJkaXNhYmxlQ29udGV4dHVhbFdpbmRvdyIsIm9uY29udGV4dG1lbnUiLCJhdXRvVXNlVG91Y2hFdmVudHMiLCJ1c2VUb3VjaEV2ZW50cyIsInNldEV2ZW50TGlzdGVuZXJzIiwib25Jbml0IiwiaXNUb3VjaERldmljZSIsIm9uVG91Y2hEZXZpY2VEZXRlY3RlZCIsImJlZm9yZUZpcnN0UmVuZGVyIiwicG9pbnRlckV2ZW50c1N1cHBvcnRlZCIsInVzZU1vdXNlRXZlbnRzIiwiYmVmb3JlUmVuZGVyIiwib25SZW5kZXIiLCJvbk1vZHVsZXNMb2FkZWQiLCJtb2R1bGVzIiwia2V5Ym9hcmRQbHVnaW5DbGFzc2VzIiwiY2hpbGRyZW4iLCJsYXlvdXROYW1lIiwibGF5b3V0Iiwic2hpZnQiLCJkaXNhYmxlUm93QnV0dG9uQ29udGFpbmVycyIsImdldEtleWJvYXJkQ2xhc3NTdHJpbmciLCJ0aGVtZSIsImdldEJ1dHRvbkNsYXNzIiwiZ2V0QnV0dG9uRGlzcGxheU5hbWUiLCJtZXJnZURpc3BsYXkiLCJ1c2VCdXR0b25UYWciLCJnZXRCdXR0b25UaGVtZUNsYXNzZXMiLCJzZXRET01CdXR0b25BdHRyaWJ1dGVzIiwiaGFuZGxlQnV0dG9uTW91c2VEb3duIiwiaGFuZGxlQnV0dG9uTW91c2VVcCIsInBhcnNlUm93RE9NQ29udGFpbmVycyIsImhhbmRsZUtleWJvYXJkQ29udGFpbmVyTW91c2VEb3duIiwiS2V5Ym9hcmRfY2xhc3NDYWxsQ2hlY2siLCJxdWVyeVNlbGVjdG9yIiwiSFRNTERpdkVsZW1lbnQiLCJoYW5kbGVQYXJhbXMiLCJjYW1lbENhc2UiLCJrZXlib2FyZEluc3RhbmNlTmFtZXMiLCJsb2FkTW9kdWxlcyIsIkJ1aWxkIiwic2hvcnQiLCJidWlsZFNlZWQiLCJrZXlzXzEiLCJwb2ludGVyXzEiLCJrZXlDb2RlVG9OYW1lIiwiX09iamVjdCRrZXlzIiwibmFtZWRLZXlDb2RlcyIsImluaXRLZXlDb2RlVG9OYW1lIiwiY3JlYXRlQnV0dG9uIiwic3ltYm9sIiwiaW5uZXJTaXplIiwiaW5uZXJUZXh0U2l6ZSIsImJvcmRlcldpZHRoIiwiYmFja2dyb3VuZEltYWdlIiwic3ltYm9sVG9VcmwiLCJidXR0b24iLCJjcmVhdGVEaXYiLCJpbm5lckJ1dHRvbiIsImlubmVyVGV4dCIsImZvbnRTaXplIiwid2lkdGhQeCIsImhlaWdodFB4Iiwib25TdGFydCIsIm9uRG93biIsIm9uQ2xpY2siLCJvbkVuZCIsIm9uVXAiLCJvblByZXZlbnQiLCJfc3RlcCIsImNhcHR1cmUiLCJfaXRlcmF0b3IiLCJwb2ludGVyIiwic3RhcnRlcnMiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiZW5kZXJzIiwiX25leHQiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiY2hhbmdlcnMiLCJfbmV4dDIiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwibGVhdmVycyIsIl9uZXh0MyIsIl9zdGVwNSIsIl9pdGVyYXRvcjUiLCJwcmV2ZW50cyIsIl9uZXh0NCIsImlubmVySHRtbCIsIm1hcFRvU3ltYm9sIiwibWFwVG8iLCJkZXByZWNhdGVkQ3JlYXRlSGFuZGxlciIsImxheWVycyIsImFjdGlvbiIsImZpcmVLZXlQcmVzcyIsImZpcmVLZXlEb3duIiwiZmlyZUtleVVwIiwiZGVwcmVjYXRlZEJ1dHRvbiIsImNpIiwiX3N0ZXA2IiwiaWRlbnQiLCJ0b1JlbW92ZSIsIl9pdGVyYXRvcjYiLCJLQkRfTk9ORSIsImNzc1N0eWxlIiwiX2kyIiwiX09iamVjdCRrZXlzMiIsIl9sZWZ0IiwiX3JpZ2h0IiwibW91c2VPdmVybGF5IiwiX3N0ZXA3IiwiX2l0ZXJhdG9yNyIsInBhcmVudEVsZW1lbnQiLCJkb3duIiwiZnVsbHNjcmVlbiIsInNhdmUiLCJrZXlib2FyZCIsInVwIiwiZG8iLCJkdyIsImR3biIsImxlIiwibGZ0IiwicmkiLCJyZ2h0IiwicmdoIiwiZW4iLCJlbnIiLCJlbnQiLCJlbnRyIiwiZ2V0R3JpZCIsImdyaWRUeXBlIiwiU3F1YXJlR3JpZCIsIl9jbGFzc0NhbGxDaGVjayIsImFzcGVjdCIsIl9jcmVhdGVDbGFzcyIsImNvbHMiLCJnZXRDb2xzIiwicm93cyIsImdldFJvd3MiLCJtaWRkbGVDb2wiLCJtaWRkbGVSb3ciLCJjb2x1bW5zUGFkZGluZyIsInJvd3NQYWRkaW5nIiwiY29sdW1uV2lkdGgiLCJyb3dIZWlnaHQiLCJjZWxscyIsInJvdyIsImNlbGxSb3ciLCJjb2wiLCJjZW50ZXJYIiwiY2VudGVyWSIsImNlbGxDb2xzIiwibWFwcGVyT3B0IiwibWFwcGVyIiwia2V5Q29kZSIsInNldE9uS2V5RG93biIsInNlbmRLZXlFdmVudCIsInNldE9uS2V5VXAiLCJzZXRPbktleVByZXNzIiwic2ltdWxhdGVLZXlQcmVzcyIsInNldE9uS2V5c1ByZXNzIiwia2V5Q29kZXMiLCJleHRyYWN0TGF5ZXJzQ29uZmlnIiwibGF5ZXJzQ29uZmlnIiwiZ3JpZF8xIiwiYnV0dG9uXzEiLCJrZXlib2FyZF8xIiwibW91c2VfMSIsIm9wdGlvbnNfMSIsImluaXRMYXllcnNDb250cm9sIiwiZG9zSW5zdGFuY2UiLCJsYXllck5hbWUiLCJsYXllckNvbmZpZyIsInVuYmluZEtleWJvYXJkIiwidW5iaW5kTW91c2UiLCJ1bmJpbmRDb250cm9scyIsInNlbGVjdGVkTGF5ZXIiLCJ0aXRsZSIsIm1vdXNlIiwiYWRkT25SZXNpemUiLCJvblJlc2l6ZSIsInJlbW92ZU9uUmVzaXplIiwiZ3JpZENvbmZpZyIsImdyaWQiLCJnZXRDb25maWd1cmF0aW9uIiwic2Vuc29ycyIsIkNvbnRyb2xTZW5zb3JzIiwiY29udHJvbHMiLCJmYWN0b3J5TWFwcGluZyIsInVuYmluZCIsImNvbHVtbiIsInNlbnNvciIsImFjdGl2YXRlIiwiZGVhY3RpdmF0ZSIsIktleSIsImtleUNvbnRyb2wiLCJfY2VsbHMkcm93JGNvbHVtbiIsInJlZ2lzdGVyIiwiT3B0aW9ucyIsIm9wdGlvbkNvbnRyb2wiLCJvcHRpb25Db250cm9scyIsImNyZWF0ZUtleWJvYXJkQ29udHJvbCIsIl9jZWxscyRyb3ckY29sdW1uMiIsIktleWJvYXJkIiwiU3dpdGNoIiwic3dpdGNoQ29udHJvbCIsIl9jZWxscyRyb3ckY29sdW1uNCIsInNldExheWVyc0NvbmZpZyIsImdldExheWVyc0NvbmZpZyIsIlNjcmVlbk1vdmUiLCJzY3JlZW5Nb3ZlQ29udHJvbCIsIl9jZWxscyRyb3ckY29sdW1uNSIsIm1YIiwibVkiLCJzZW5kTW91c2VNb3Rpb24iLCJQb2ludGVyQnV0dG9uIiwicG9pbnRlckJ1dHRvbkNvbnRyb2wiLCJjbGljayIsIl9jZWxscyRyb3ckY29sdW1uNiIsInNlbmRNb3VzZUJ1dHRvbiIsInBvaW50ZXJCdXR0b24iLCJQb2ludGVyTW92ZSIsInBvaW50ZXJNb3ZlQ29udHJvbCIsIl9jZWxscyRyb3ckY29sdW1uNyIsIlBvaW50ZXJSZXNldCIsInBvaW50ZXJSZXNldENvbnRyb2wiLCJfY2VsbHMkcm93JGNvbHVtbjgiLCJzZW5kTW91c2VTeW5jIiwiUG9pbnRlclRvZ2dsZSIsInBvaW50ZXJUb2dnbGVDb250cm9sIiwiX2NlbGxzJHJvdyRjb2x1bW45IiwicG9pbnRlckRpc2FibGVkIiwiTmlwcGxlQWN0aXZhdG9yIiwibmlwcGxlQWN0aXZhdG9yQ29udHJvbCIsIl9jZWxscyRyb3ckY29sdW1uMTAiLCJuaXBwbGVDb250YWluZXIiLCJhY3RpdmVDb2x1bW4iLCJhY3RpdmVSb3ciLCJldnQiLCJ0YXJnZXRDb2x1bW4iLCJ0YXJnZXRSb3ciLCJoYWxmIiwic3RhcnRlZCIsImtleWJvYXJkQ29udHJvbCIsIm9uS2V5Ym9hcmRWaXNpYmlsaXR5IiwidmlzaWJsZSIsIl9jZWxscyRyb3ckY29sdW1uMyIsInRvZ2dsZUtleWJvYXJkIiwic2V0T25LZXlib2FyZFZpc2liaWxpdHkiLCJyZW1vdmVPbktleWJvYXJkVmlzaWJpbGl0eSIsIm5pcHBsZV8xIiwiaW5pdExlZ2FjeUxheWVyc0NvbnRyb2wiLCJjaGFuZ2VDb250cm9sTGF5ZXIiLCJnZXN0dXJlcyIsImxheWVyIiwibmlwcGxlIiwibGF5ZXJzTmFtZXMiLCJ1bmJpbmRPcHRpb25zIiwiYXV0b2xvY2siLCJjYW5Mb2NrIiwiX2NvbmZpZyRvdXRwdXQiLCJfY29uZmlnJG91dHB1dCRvcHRpb24iLCJfY29uZmlnJG91dHB1dCRvcHRpb24yIiwib3V0cHV0IiwiaW5zZW5zaXRpdmVQYWRkaW5nIiwibWFwWFkiLCJlWCIsImVZIiwiZnJhbWVXaWR0aCIsImZyYW1lSGVpZ2h0IiwiY29udGFpbmVyV2lkdGgiLCJjb250YWluZXJIZWlnaHQiLCJpc05vdExvY2tlZCIsInBvaW50ZXJMb2NrRWxlbWVudCIsImdldFBvaW50ZXJTdGF0ZSIsInByZXNzZWRCdXR0b24iLCJyZXF1ZXN0UG9pbnRlckxvY2siLCJtb3pSZXF1ZXN0UG9pbnRlckxvY2siLCJ3ZWJraXRSZXF1ZXN0UG9pbnRlckxvY2siLCJ4eSIsIm9uTW91c2VEb3duIiwic2VuZE1vdXNlUmVsYXRpdmVNb3Rpb24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsIm9uTGVhdmUiLCJfbmV4dDUiLCJfbmV4dDYiLCJfbmV4dDciLCJfbmV4dDgiLCJfc3RlcDgiLCJfaXRlcmF0b3I4IiwiX3N0ZXA5IiwiX2l0ZXJhdG9yOSIsIl9zdGVwMTAiLCJfaXRlcmF0b3IxMCIsInJlbGVhc2UiLCJwcmVzc2VkIiwicmVsZWFzZU9uRW5kIiwidGFwSm95c3RpY2tzIiwidXNlZFRpbWVzIiwiX2xvb3AiLCJqb3lzdGlja0lkIiwiRGF0ZSIsInN0YXJ0VGltZXMiLCJkZWxheSIsImluaXROdWxsTGF5ZXJzQ29udHJvbCIsImhlbHBlcnNfMSIsIm9uTGF5ZXJDaGFuZ2UiLCJ1cGRhdGVWaXNpYmlsaXR5IiwiY29udHJvbHNWaXNiaWxlIiwidG9nZ2xlT3B0aW9ucyIsImtleWJvYXJkVmlzaWJsZSIsInNlbGVjdCIsIm9wdGlvbiIsIm9uY2hhbmdlIiwiY3JlYXRlU2VsZWN0Rm9yTGF5ZXJzIiwidG9nZ2xlRnVsbHNjcmVlbiIsInNldE9uRnVsbHNjcmVlbiIsImZ1bGxzY3JlZW5FbmFibGVkIiwiaW50aWFsRGlzcGxheSIsIl9jaGlsZHJlbiIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwib25TdG9wIiwiS0JEXzAiLCJLQkRfMSIsIktCRF8yIiwiS0JEXzMiLCJLQkRfNCIsIktCRF81IiwiS0JEXzYiLCJLQkRfNyIsIktCRF84IiwiS0JEXzkiLCJLQkRfYSIsIktCRF9iIiwiS0JEX2MiLCJLQkRfZCIsIktCRF9lIiwiS0JEX2YiLCJLQkRfZyIsIktCRF9oIiwiS0JEX2kiLCJLQkRfaiIsIktCRF9rIiwiS0JEX2wiLCJLQkRfbSIsIktCRF9uIiwiS0JEX28iLCJLQkRfcCIsIktCRF9xIiwiS0JEX3IiLCJLQkRfcyIsIktCRF90IiwiS0JEX3UiLCJLQkRfdiIsIktCRF93IiwiS0JEX3giLCJLQkRfeSIsIktCRF96IiwiS0JEX2YxIiwiS0JEX2YyIiwiS0JEX2YzIiwiS0JEX2Y0IiwiS0JEX2Y1IiwiS0JEX2Y2IiwiS0JEX2Y3IiwiS0JEX2Y4IiwiS0JEX2Y5IiwiS0JEX2YxMCIsIktCRF9mMTEiLCJLQkRfZjEyIiwiS0JEX2twMCIsIktCRF9rcDEiLCJLQkRfa3AyIiwiS0JEX2twMyIsIktCRF9rcDQiLCJLQkRfa3A1IiwiS0JEX2twNiIsIktCRF9rcDciLCJLQkRfa3A4IiwiS0JEX2twOSIsIktCRF9rcHBlcmlvZCIsIktCRF9rcGRpdmlkZSIsIktCRF9rcG11bHRpcGx5IiwiS0JEX2twbWludXMiLCJLQkRfa3BwbHVzIiwiS0JEX2twZW50ZXIiLCJLQkRfZXNjIiwiS0JEX3RhYiIsIktCRF9iYWNrc3BhY2UiLCJLQkRfZW50ZXIiLCJLQkRfc3BhY2UiLCJLQkRfbGVmdGFsdCIsIktCRF9yaWdodGFsdCIsIktCRF9sZWZ0Y3RybCIsIktCRF9yaWdodGN0cmwiLCJLQkRfbGVmdHNoaWZ0IiwiS0JEX3JpZ2h0c2hpZnQiLCJLQkRfY2Fwc2xvY2siLCJLQkRfc2Nyb2xsbG9jayIsIktCRF9udW1sb2NrIiwiS0JEX2dyYXZlIiwiS0JEX21pbnVzIiwiS0JEX2VxdWFscyIsIktCRF9iYWNrc2xhc2giLCJLQkRfbGVmdGJyYWNrZXQiLCJLQkRfcmlnaHRicmFja2V0IiwiS0JEX3NlbWljb2xvbiIsIktCRF9xdW90ZSIsIktCRF9wZXJpb2QiLCJLQkRfY29tbWEiLCJLQkRfc2xhc2giLCJLQkRfcHJpbnRzY3JlZW4iLCJLQkRfcGF1c2UiLCJLQkRfaW5zZXJ0IiwiS0JEX2hvbWUiLCJLQkRfcGFnZXVwIiwiS0JEX2RlbGV0ZSIsIktCRF9lbmQiLCJLQkRfcGFnZWRvd24iLCJLQkRfbGVmdCIsIktCRF91cCIsIktCRF9kb3duIiwiS0JEX3JpZ2h0IiwiS0JEX2V4dHJhX2x0X2d0IiwiZG9tVG9LZXlDb2RlcyIsIjgiLCI5IiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjQ4IiwiNDkiLCI1MCIsIjUxIiwiNTIiLCI1MyIsIjU0IiwiNTUiLCI1NiIsIjU3IiwiNTkiLCI2NCIsIjY1IiwiNjYiLCI2NyIsIjY4IiwiNjkiLCI3MCIsIjcxIiwiNzIiLCI3MyIsIjc0IiwiNzUiLCI3NiIsIjc3IiwiNzgiLCI3OSIsIjgwIiwiODEiLCI4MiIsIjgzIiwiODQiLCI4NSIsIjg2IiwiODciLCI4OCIsIjg5IiwiOTAiLCI5MSIsIjkzIiwiOTYiLCI5NyIsIjk4IiwiOTkiLCIxMDAiLCIxMDEiLCIxMDIiLCIxMDMiLCIxMDQiLCIxMDUiLCIxMTEiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIxNzMiLCIxODYiLCIxODciLCIxODgiLCIxODkiLCIxOTAiLCIxOTEiLCIyMTkiLCIyMjAiLCIyMjEiLCJrZXlDb2Rlc1RvRG9tIiwiZG9tVG9LZXlDb2RlIiwiZG9tQ29kZSIsIm5vdHlmXzEiLCJzaW1wbGVfa2V5Ym9hcmRfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlc2l6ZURldGVjdG9yIiwiZWxlbWVudFJlc2l6ZURldGVjdG9yIiwicm9vdCIsIkxheWVycyIsInBvaW50ZXJMb2NrIiwibm90eWYiLCJvbkZ1bGxzY3JlZW5DaGFuZ2VkIiwib25LZXlib2FyZENoYW5nZWQiLCJmdWxsc2NyZWVuRWxlbWVudCIsImNhbnZhcyIsInZpZGVvIiwibG9hZGluZyIsImxvYWRlclRleHQiLCJjbGlja1RvU3RhcnQiLCJwbGF5Iiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uS2V5c1ByZXNzIiwib25TYXZlIiwib25TYXZlU3RhcnRlZCIsIm9uU2F2ZUVuZGVkIiwiaW5pdEtleUV2ZW50cyIsImluaXRLZXlib2FyZCIsInByZXZlbnRDb250ZXh0TWVudSIsIm9uZnVsbHNjcmVlbmNoYW5nZSIsIl90aGlzMiIsImV4aXRGdWxsc2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJtb3pDYW5jZWxGdWxsU2NyZWVuIiwibXNFeGl0RnVsbHNjcmVlbiIsInJlcXVlc3RGdWxsc2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJ3ZWJraXRFbnRlckZ1bGxzY3JlZW4iLCJfdGhpczMiLCJ2aXNpYmlsaXR5IiwiX3RoaXM0IiwiZGlzcGxheU9yZGVyIiwicSIsInsiLCJ9IiwiOyIsIiciLCIsIiwiLiIsImRpc3BsYXlJbmRleCIsImtleWJvYXJkRGl2Iiwic2V0T3B0aW9ucyIsImJ1dHRvblRvQ29kZSIsImZpcmVLZXlzUHJlc3MiLCJsaWZlY3ljbGUiLCJoaWRkZW4iLCJ2aXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0SGFuZGxlciIsInBhdXNlIiwicmVzdW1lIiwibW96SGlkZGVuIiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJvbkV4aXQiLCJyZWN0IiwidGFyZ2V0VG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJpc01vYmlsZSIsImlzVG91Y2giLCJpc1BvaW50ZXIiLCJpc01TUG9pbnRlciIsIm1vYmlsZSIsImluaXRCaW5kIiwicG9pbnRlcnMiLCJFbXVsYXRvcnNVaSIsImRvbSIsImxheWVyc18xIiwibGlmZWN5Y2xlXzEiLCJuZXR3b3JrIiwicmVzb2x2ZUJ1bmRsZSIsInhocl8xIiwiZ3JhcGhpY3MiLCJ3ZWJHbCIsIndlYmdsXzEiLCJfMmQiLCJfMmRfMSIsInZpZGVvXzEiLCJzb3VuZCIsImF1ZGlvTm9kZSIsImF1ZGlvX25vZGVfMSIsInBlcnNpc3QiLCJzYXZlX2xvYWRfMSIsImxvYWQiLCJkb3MiLCJqc19kb3NfMSIsIkRvc0luc3RhbmNlIiwiaW1wbCIsImVtdWxhdG9yc1VpIiwiRG9zIiwiZ2V0Q29udGV4dCIsIm9uUmVzaXplTGF5ZXIiLCJvblJlc2l6ZUZyYW1lIiwicmdiYSIsIlVpbnQ4Q2xhbXBlZEFycmF5Iiwib25GcmFtZVNpemUiLCJvbkZyYW1lIiwicmdiIiwicmdiT2Zmc2V0IiwicmdiYU9mZnNldCIsInB1dEltYWdlRGF0YSIsIkltYWdlRGF0YSIsInN3aXRjaFRvVmlkZW8iLCJvbk1lc3NhZ2UiLCJtc2dUeXBlIiwic3RyZWFtIiwiSmFudXMiLCJhdHRhY2hNZWRpYVN0cmVhbSIsImxvYWRTaGFkZXIiLCJnbCIsInNoYWRlclR5cGUiLCJzaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiZGVsZXRlU2hhZGVyIiwic2hhZGVyUHJvZ3JhbSIsInZzU291cmNlIiwiZnNTb3VyY2UiLCJ2ZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiZnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImluaXRTaGFkZXJQcm9ncmFtIiwidmVydGV4UG9zaXRpb24iLCJnZXRBdHRyaWJMb2NhdGlvbiIsInRleHR1cmVDb29yZCIsInVTYW1wbGVyIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwicG9zaXRpb25CdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwidmVydGV4QXR0cmliUG9pbnRlciIsIkZMT0FUIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ0ZXh0dXJlQ29vcmRCdWZmZXIiLCJpbml0QnVmZmVycyIsInRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwicGl4ZWwiLCJ0ZXhJbWFnZTJEIiwiUkdCIiwiVU5TSUdORURfQllURSIsInVzZVByb2dyYW0iLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ1bmlmb3JtMWkiLCJ2aWV3cG9ydCIsImRyYXdBcnJheXMiLCJUUklBTkdMRVMiLCJidWlsZF8xIiwibGF5ZXJzX2NvbmZpZ18xIiwibGVnYWN5X2xheWVyc19jb250cm9sXzEiLCJudWxsX2xheWVyc19jb250cm9sXzEiLCJsYXllcnNfY29udHJvbF8xIiwic3RvcmVkTGF5ZXJzQ29uZmlnIiwiaW5pdGlhbFJ1biIsImVtdWxhdG9ycyIsImNhY2hlU2VlZCIsImVtdWxhdG9yRnVuY3Rpb24iLCJsYXllcnNPcHRpb25zIiwic2hvd0xvYWRpbmdMYXllciIsImNyZWF0ZVRyYW5zcG9ydExheWVyIiwibW9iaWxlQ29udHJvbHMiLCJvbk1vYmlsZUNvbnRyb2xzQ2hhbmdlZCIsImJ1bmRsZVVybCIsIm9wdGlvbmFsQ2hhbmdlc1VybCIsIm9wdGlvbmFsUGVyc2lzdEtleSIsInNldExvYWRpbmdNZXNzYWdlIiwicGVyc2lzdEtleSIsInJ1bkJ1bmRsZSIsIl9jb250ZXh0IiwidDAiLCJub1dlYkdMIiwiZGlzYWJsZU1vYmlsZUNvbnRyb2xzIiwiaGlkZUxvYWRpbmdMYXllciIsInNob3dDbGlja1RvU3RhcnQiLCJjaVByb21pc2UiLCJqYW51cyIsImJ1bmRsZVByb21pc2UiLCJvbnByb2dyZXNzIiwicGVyY2VudCIsImh0dHBDYWNoZSIsImNoYW5nZXNCdW5kbGUiLCJidW5kbGUiLCJiYWNrZW5kIiwiX2J1bmRsZSIsIl9jYWxsZWUiLCJ1cmwiLCJjYWNoZSIsImNhY2hlSW1wbCIsInQxIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3ZlcnJpZGVNaW1lVHlwZSIsInJlc3BvbnNlVHlwZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZSIsInRvdGFsIiwicG9yZ3Jlc3MiLCJsb2FkZWQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIl9sZW4iLCJfa2V5IiwiY2FjaGVOYW1lIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJzZXRPblNhdmUiLCJfYXN5bmNUb0dlbmVyYXRvciIsInVwZGF0ZWQiLCJwdXQiLCJTYW1wbGVzUXVldWUiLCJzYW1wbGVzUXVldWUiLCJzYW1wbGVzIiwiZHN0IiwiYnVmZmVyU2l6ZSIsIndyaXRlSXQiLCJ0b1JlYWQiLCJzYW1wbGVSYXRlIiwic291bmRGcmVxdWVuY3kiLCJhdWRpb0NvbnRleHQiLCJBdWRpb0NvbnRleHQiLCJsYXRlbmN5SGludCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIm9uU291bmRQdXNoIiwiY3JlYXRlU2NyaXB0UHJvY2Vzc29yIiwib25hdWRpb3Byb2Nlc3MiLCJudW1GcmFtZXMiLCJvdXRwdXRCdWZmZXIiLCJudW1DaGFubmVscyIsIm51bWJlck9mQ2hhbm5lbHMiLCJzYW1wbGVzQ291bnQiLCJjaGFubmVsRGF0YSIsImdldENoYW5uZWxEYXRhIiwid3JpdGVUbyIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInJlc3VtZVdlYkF1ZGlvIiwib25jZSIsImRpc2Nvbm5lY3QiLCJpc1JlZ0V4cCIsInNpZ24iLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsImZyb3VuZCIsIiRhYnMiLCIkc2lnbiIsIlJlZmxlY3QiLCJvd25LZXlzIiwic2VhcmNoU3RyaW5nIiwiJGZpbmQiLCJjbHozMiIsIkxPRzJFIiwiJGltdWwiLCJpbXVsIiwiVUlOVDE2IiwieG4iLCJ5biIsInhsIiwieWwiLCJ0cnVuYyIsIiRSZWdFeHAiLCJDT1JSRUNUX05FVyIsInRpUkUiLCJwaVJFIiwiZmlVIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIlJFUExBQ0UiLCIkcmVwbGFjZSIsInNlYXJjaFZhbHVlIiwicmVwbGFjZVZhbHVlIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJyZXN1bHRzIiwiYWNjdW11bGF0ZWRSZXN1bHQiLCJuZXh0U291cmNlUG9zaXRpb24iLCJtYXRjaGVkIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYWxsUmVnRXhwRXhlYyIsIiRtaW4iLCIkcHVzaCIsIiRTUExJVCIsIkxFTkdUSCIsIk1BWF9VSU5UMzIiLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJTVEFSVFNfV0lUSCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInNlYXJjaCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwid2Rvc2JveC53YXNtIiwiZ3pTaXplIiwid2Rvc2JveC5qcyIsIndsaWJ6aXAud2FzbSIsIndsaWJ6aXAuanMiLCJDYWNoZU5vb3AiLCJlYWNoIiwiQ2FjaGVEYiIsImxvZ2dlciIsIkNhY2hlRGJJbXBsIiwibXNnIiwib25FcnIiLCJvbnJlYWR5Iiwib25lcnJvciIsInN0b3JlTmFtZSIsImRiIiwiaW5kZXhlZERCIiwibW96SW5kZXhlZERCIiwid2Via2l0SW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJvcGVuUmVxdWVzdCIsIl9vcGVuUmVxdWVzdCRlcnJvciIsIm9uc3VjY2VzcyIsIm9udXBncmFkZW5lZWRlZCIsImNyZWF0ZU9iamVjdFN0b3JlIiwidHJhbnNhY3Rpb24iLCJvbmNvbXBsZXRlIiwib2JqZWN0U3RvcmUiLCJyZWplY3RPclJlc29sdmUiLCJvcGVuQ3Vyc29yIiwiY3Vyc29yIiwiY29udGludWUiLCJkb3NfY29uZl8xIiwibGliemlwXzEiLCJodHRwXzEiLCJEb3NCdW5kbGUiLCJsaWJ6aXBXYXNtIiwiY3JlYXRlRG9zQ29uZmlnIiwic291cmNlcyIsImxpbmVzIiwiYXV0b2V4ZWMiLCJzY3JpcHQiLCJfY3ljbGVzIiwiY3B1IiwiY3ljbGVzIiwicGF0aCIsImV4dHJhY3RBbGwiLCJfdGhpcyRzb3VyY2VzIiwib3ZlcndyaXRlQ29uZmlnIiwiaW5zdGFudGlhdGUiLCJsaWJ6aXAiLCJ0b0Rvc2JveENvbmYiLCJjb25mIiwicHJvbWlzZXMiLCJyZXNvdXJjZSIsIkhUVFBSZXF1ZXN0Iiwid3JpdGVGaWxlIiwicmVhZG1lVHh0IiwicmVzb3VyY2VzIiwiemlwVG9GcyIsInppcEZyb21GcyIsIk91dHB1dENhdGVnb3J5IiwiZGVzY3JpcHRpb24iLCJhbGxvd2VkVmFsdWVzIiwiRG9zYm94Q2F0ZWdvcnkiLCJtYWNoaW5lIiwiQ3B1Q2F0ZWdvcnkiLCJjcHV0eXBlIiwiTWl4ZXJDYXRlZ29yeSIsInJhdGUiLCJub3NvdW5kIiwiQXV0b2V4ZWNDYXRlZ29yeSIsImRvc2JveCIsIm1peGVyIiwidmFsaWRhdGVDYXRlZ29yeSIsImNhdGVnb3J5IiwidmFsaWQiLCJjYXRlZ29yeU5hbWUiLCJ2YWxpZE9wdGlvbiIsIl9yZXQiLCJhbGxvd2VkVmFsdWUiLCJ2YWxpZGF0ZUNvbmZpZyIsIl9pMyIsIl9PYmplY3Qka2V5czMiLCJub3JtYWxpemVDYXRlZ29yeSIsIl9pNCIsIl9PYmplY3Qka2V5czQiLCJ2YWxpZENhdGVnb3J5IiwiX29iamVjdFNwcmVhZCIsIm5vcm1hbGl6ZUNvbmZpZyIsIl9jYWxsZWUzIiwiX2k1IiwiX09iamVjdCRrZXlzNSIsIl9jb250ZXh0MyIsIl9jYWxsZWU0IiwiY29udGVudCIsIl9jb250ZXh0NCIsIndyaXRlQ2F0ZWdvcnkiLCJzZWN0aW9uIiwibWVzc2FnZXNfcXVldWVfMSIsIndhc21Nb2R1bGUiLCJzZXNzaW9uSWQiLCJtZXNzYWdlc1F1ZXVlIiwic2xlZXBIYW5kbGVyIiwidHJhbnNwb3J0TGF5ZXIiLCJNZXNzYWdlc1F1ZXVlIiwic2VuZE1lc3NhZ2VUb1NlcnZlciIsIm1lc3NhZ2VIYW5kbGVyIiwiaW5pdE1lc3NhZ2VIYW5kbGVyIiwibmV3SGFuZGxlciIsInNlbmRUbyIsInBhc3NpdmUiLCJjYWxsTWFpbiIsImRvc0RpcmVjdCIsIndvcmtlclVybCIsIndvcmtlciIsIldvcmtlciIsImZpbGVuYW1lIiwidGVybWluYXRlIiwiZG9zV29ya2VyIiwiZW11bGF0b3JzX2ltcGxfMSIsImNhY2hlXzEiLCJYaHIiLCJ4aHIiLCJtYWtlSHR0cFJlcXVlc3QiLCJwcm9ncmVzc0xpc3RuZXIiLCJlcnJvckxpc3RlbmVyIiwicHJvZ3Jlc3MiLCJvblJlYWR5U3RhdGVDaGFuZ2UiLCJDb21tYW5kSW50ZXJmYWNlRXZlbnRzSW1wbCIsImRlbGF5ZWRTdGRvdXQiLCJvblN0ZG91dENvbnN1bWVycyIsIm9uRnJhbWVTaXplQ29uc3VtZXJzIiwib25GcmFtZUNvbnN1bWVycyIsIm9uU291bmRQdXNoQ29uc3VtZXJzIiwib25FeGl0Q29uc3VtZXJzIiwib25NZXNzYWdlQ29uc3VtZXJzIiwib25TdGRvdXQiLCJjb25zdW1lciIsImZpcmVTdGRvdXQiLCJmaXJlRnJhbWVTaXplIiwiZmlyZUZyYW1lIiwiZnJhbWUiLCJmaXJlU291bmRQdXNoIiwiZmlyZUV4aXQiLCJmaXJlTWVzc2FnZSIsIm1vZHVsZXNfMSIsImRvc19idW5kbGVfMSIsImRpcmVjdF8xIiwid29ya2VyXzEiLCJqYW51c19pbXBsXzEiLCJwcm90b2NvbF8xIiwiRW11bGF0b3JzSW1wbCIsInBhdGhQcmVmaXgiLCJjYWNoZVByb21pc2VzIiwid2FzbU1vZHVsZXMiLCJkb3Nib3hEaXJlY3QiLCJkb3Nib3hXYXNtIiwicmVzdFVybCIsIkNvbW1hbmRJbnRlcmZhY2VPdmVyVHJhbnNwb3J0TGF5ZXIiLCJ3YXNtTW9kdWxlc1Byb21pc2UiLCJtYWtlIiwiX3JlZiIsIl9jYWxsZWU3IiwiX2NvbnRleHQ3IiwiV2FzbU1vZHVsZXNJbXBsIiwiZG9zYm94V29ya2VyIiwiaG9zdCIsIkhvc3QiLCJ3YXNtU3VwcG9ydGVkIiwiZ2xvYmFscyIsImNvbXBpbGVkIiwiV2ViQXNzZW1ibHkiLCJjb21waWxlIiwid21vZHVsZSIsIk1vZHVsZSIsIkluc3RhbmNlIiwiYWwiLCJibCIsImxpYnppcFByb21pc2UiLCJsb2FkTW9kdWxlIiwiZG9zYm94UHJvbWlzZSIsIm1vZHVsZU5hbWUiLCJsb2FkV2FzbU1vZHVsZSIsImVtTW9kdWxlIiwiY29tcGlsZWRNb2R1bGVQcm9taXNlIiwiQ29tcGlsZWROb2RlTW9kdWxlIiwibG9hZFdhc21Nb2R1bGVOb2RlIiwiX2xvYWQiLCJ3SW5kZXgiLCJpc1dhc21VcmwiLCJ3YXNtVXJsIiwiYmluYXJ5UHJvbWlzZSIsInNjcmlwdFByb21pc2UiLCJfeWllbGQkUHJvbWlzZSRhbGwiLCJfeWllbGQkUHJvbWlzZSRhbGwyIiwiYmluYXJ5IiwiaW5zdGFudGlhdGVXYXNtIiwiX3NsaWNlZFRvQXJyYXkiLCJyZWNlaXZlSW5zdGFuY2UiLCJlbnYiLCJldmFsIiwiQ29tcGlsZWRCcm93c2VyTW9kdWxlIiwibG9hZFdhc21Nb2R1bGVCcm93c2VyIiwiaW5pdGlhbE1vZHVsZSIsIm9uUnVudGltZUluaXRpYWxpemVkIiwiY2lfaW1wbF8xIiwiZGF0YUFzc2VtYmxlciIsIm9uRXJyb3IiLCJhY2MiLCJhc3NlbWJsZSIsInNwbGl0SW5kZXgiLCJiYXNlNjRUZXh0IiwiYXRvYiIsIlRleHREZWNvZGVyIiwiZGVjb2RlIiwidXRmOERlY29kZSIsIkphbnVzQmFja2VuZEltcGwiLCJvcGFxdWVJZCIsImxpdmUiLCJzdGFydGVkQXQiLCJleGl0UmVzb2x2ZUZuIiwiY29uZmlnUmVzb2x2ZUZuIiwiaGFuZGxlUmVzb2x2ZUZuIiwia2V5TWF0cml4IiwiZXZlbnRRdWV1ZSIsImV2ZW50SW50ZXJ2YWxJZCIsInJ0dEludGVydmFsSWQiLCJsb2dJbnRlcnZhbElkIiwibG9nQ29sb3IiLCJsb2dXaGl0ZU1zIiwibG9nUmVkTXMiLCJsb2dZZWxsb3dNcyIsIm9uRGF0YU1lc3NhZ2UiLCJwYXJzZSIsIl9kYXRhJHN1YnN0ciRzcGxpdDIiLCJfdGhpcyRoYW5kbGUiLCJfZGF0YSRzdWJzdHIkc3BsaXQ0IiwiX29wYXF1ZUlkIiwic2VudEF0U3RyIiwicmVjZWl2ZWRBdFN0ciIsInNlbnRBdCIsInJlY2VpdmVkQXQiLCJyZXR1cm5lZEF0IiwiYml0cmF0ZVN0ciIsImdldEJpdHJhdGUiLCJiaXRyYXRlIiwic2VuZFBpcGVNZXNzYWdlIiwiZXZlbnRzSW1wbCIsIm9uSmFudXNNZXNzYWdlIiwianNlcCIsImNyZWF0ZUFuc3dlciIsIm1lZGlhIiwiYXVkaW9TZW5kIiwidmlkZW9TZW5kIiwiZXhpdFByb21pc2UiLCJjb25maWdQcm9taXNlIiwiaGFuZGxlUHJvbWlzZSIsInNlbmRFdmVudHNEYXRhIiwiYXR0YWNoIiwiX3RoaXMkZXZlbnRzSW1wbCIsImhhbmRsZVJlZiIsInBsdWdpbiIsIm9ucmVtb3Rlc3RyZWFtIiwib25kYXRhb3BlbiIsIm9uZGF0YSIsInRpbWVNcyIsIl9sZW4yIiwiX2tleTIiLCJhZGRLZXkiLCJfY3R4JGdldEltYWdlRGF0YSIsImltYWdlRGF0YSIsImNhcHR1cmVUaW1lIiwibmV3Q29sb3IiLCJkcmF3SW1hZ2UiLCJnZXRJbWFnZURhdGEiLCJfbGVuMyIsInBhcnRzIiwiX2tleTMiLCJfcGFydHMiLCJwYXJ0IiwiaXNXZWJydGNTdXBwb3J0ZWQiLCJoYW5kbGVycyIsIl9lcnJvciIsImRlc3Ryb3llZCIsInNlcnZlciIsImphbnVzSW1wbCIsInJhbmRvbVN0cmluZyIsImRlc3Ryb3lPblVubG9hZCIsIkxpYlppcCIsImhvbWUiLCJjaGRpclRvSG9tZSIsImNoYW5nZWRBZnRlck1zIiwicHRyIiwiX3ppcF9mcm9tX2ZzIiwiSEVBUFUzMiIsImFyY2hpdmUiLCJIRUFQVTgiLCJfZnJlZSIsInppcEFyY2hpdmUiLCJub3JtYWxpemVGaWxlbmFtZSIsInBhdGhQYXJ0cyIsImNyZWF0ZVBhdGgiLCJjaGRpciIsIl9tYWxsb2MiLCJyZXRjb2RlIiwiX3ppcF90b19mcyIsImZpbGUiLCJGUyIsImVuY29kaW5nIiwicmVhZEZpbGUiLCJsb29rdXBQYXRoIiwiX2xpYnppcF9kZXN0cm95IiwibWVzc2FnZXMiLCJidW5kbGVzIiwidHJhbnNwb3J0IiwiZnJlcSIsImNvbmZpZ1Jlc29sdmUiLCJwYW5pY01lc3NhZ2VzIiwib25TZXJ2ZXJNZXNzYWdlIiwic2VuZENsaWVudE1lc3NhZ2UiLCJvbkZyYW1lTGluZXMiLCJvbkxvZyIsIm9uV2FybiIsIm9uUGVyc2lzdCIsIm9uU291bmRJbml0Iiwib25Db25maWciLCJsaW5lIiwiaGVhcHU4IiwicmVsYXRpdmUiLCJwZXJzaXN0UHJvbWlzZSIsInBlcnNpc3RSZXNvbHZlIiwiZXhpdFJlc29sdmUiLCJ3ZWxsS25vd25TeW1ib2wiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIkFycmF5UHJvdG90eXBlIiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImdldEl0ZXJhdG9yIiwiYXJndW1lbnRzTGVuZ3RoIiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSW5kZXhlZE9iamVjdCIsImFycmF5U3BlY2llc0NyZWF0ZSIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJzcGVjaWZpY0NyZWF0ZSIsImJvdW5kRnVuY3Rpb24iLCJmaWx0ZXJSZWplY3QiLCJWOF9WRVJTSU9OIiwiTUVUSE9EX05BTUUiLCJmb28iLCJvcmlnaW5hbEFycmF5IiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJpdGVyYXRvckNsb3NlIiwiRU5UUklFUyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsIlNLSVBfQ0xPU0lORyIsIklURVJBVElPTl9TVVBQT1JUIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIkNPUlJFQ1RfQVJHVU1FTlRTIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsIiQiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiSVNfUFVSRSIsIkl0ZXJhdG9yc0NvcmUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiSXRlcmFibGUiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsIkVYSVNUUyIsImdldEJ1aWx0SW4iLCJEZW5vIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJ0YXJnZXRQcm9wZXJ0eSIsIm5vVGFyZ2V0R2V0Iiwic2hhbSIsIm5hbWVzcGFjZSIsInZhcmlhYmxlIiwidXNpbmdJdGVyYXRvciIsImdsb2JhbFRoaXMiLCJmdW5jdGlvblRvU3RyaW5nIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwiU1RBVEUiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCIsIldlYWtNYXAiLCJtZXRhZGF0YSIsImZhY2FkZSIsImVuZm9yY2UiLCJnZXR0ZXJGb3IiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJVU0VfU1lNQk9MX0FTX1VJRCIsImlubmVyUmVzdWx0IiwiaW5uZXJFcnJvciIsImFycmF5SXRlcmF0b3IiLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJORVdfSVRFUkFUT1JfUFJPVE9UWVBFIiwiRW1wdHlDb25zdHJ1Y3RvciIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJhY3RpdmVYRG9jdW1lbnQiLCJzY3JpcHRUYWciLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiU0NSSVBUIiwiTnVsbFByb3RvT2JqZWN0IiwiQWN0aXZlWE9iamVjdCIsIkpTIiwib2JqZWN0S2V5cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwiTkFTSE9STl9CVUciLCJWIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJwcmVmIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIkludGVybmFsU3RhdGVNb2R1bGUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJURU1QTEFURSIsInVuc2FmZSIsInNpbXBsZSIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJDT05WRVJUX1RPX1NUUklORyIsInNlY29uZCIsImNvZGVBdCIsImludGVnZXIiLCJvcmRpbmFyeVRvUHJpbWl0aXZlIiwiZXhvdGljVG9QcmltIiwicG9zdGZpeCIsIk5BVElWRV9TWU1CT0wiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiZGVmaW5lSXRlcmF0b3IiLCJBUlJBWV9JVEVSQVRPUiIsInNldEludGVybmFsU3RhdGUiLCJIQVNfU1BFQ0lFU19TVVBQT1JUIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIm5hdGl2ZVNsaWNlIiwiZmluIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nIiwiU1RSSU5HX0lURVJBVE9SIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlU3ltYm9sIiwiTmF0aXZlU3ltYm9sIiwic3ltYm9sUHJvdG90eXBlIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwicHJvcGVydGllcyIsIiRmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiJHN0cmluZ2lmeSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiT2JqZWN0UHJvdG90eXBlU3ltYm9scyIsIlN0cmluZ1RvU3ltYm9sUmVnaXN0cnkiLCJTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5IiwiVVNFX1NFVFRFUiIsInNldFN5bWJvbERlc2NyaXB0b3IiLCJPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yIiwiSVNfT0JKRUNUX1BST1RPVFlQRSIsIkNPTExFQ1RJT05fTkFNRSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsImNhbGxiYWNrRm4iLCJkb21fMSIsImdvbmVDbGFzcyIsImRpc2FibGVkQ2xhc3MiLCJwcmltYXJ5Q2xhc3MiLCJOYXZiYXIiLCJvbkZ1bGxzY3JlZW4iLCJvbktleWJvYXJkIiwib25NdXRlIiwidW5tdXRlIiwiX3RoaXMkZG9zJGNpUHJvbWlzZSIsIm11dGUiLCJvblVubXV0ZSIsIl90aGlzJGRvcyRjaVByb21pc2UyIiwib25QbGF5IiwiX3RoaXMkZG9zJGNpUHJvbWlzZTMiLCJfdGhpcyRkb3MkY2lQcm9taXNlNCIsIm9uTW9iaWxlQ29udHJvbHMiLCJlbmFibGVNb2JpbGVDb250cm9scyIsImxvZ29EaXYiLCJ0aXRsZURpdiIsImNyZWF0ZVRpdGxlIiwic3ByaW5nRGl2IiwiZnVsbHNjcmVlbkJ1dHRvbkRpdiIsImNyZWF0ZUZ1bGxTY3JlZW5CdXR0b24iLCJzYXZlQnV0dG9uRGl2IiwiY3JlYXRlU2F2ZUJ1dHRvbiIsImtleWJvYXJkQnV0dG9uRGl2IiwiY3JlYXRlS2V5Ym9hcmRCdXR0b24iLCJtdXRlQnV0dG9uRGl2IiwiY3JlYXRlTXV0ZUJ1dHRvbiIsInVubXV0ZUJ1dHRvbkRpdiIsImNyZWF0ZVVubXV0ZUJ1dHRvbiIsInN0b3BCdXR0b25EaXYiLCJjcmVhdGVTdG9wQnV0dG9uIiwicGxheUJ1dHRvbkRpdiIsImNyZWF0ZVBsYXlCdXR0b24iLCJtb2JpbGVCdXR0b25EaXYiLCJjcmVhdGVNb2JpbGVCdXR0b24iLCJkaXZpZGVyRGl2Iiwic2V0T25TYXZlU3RhcnRlZCIsInNldE9uU2F2ZUVuZGVkIiwic2V0T25Nb2JpbGVDb250cm9sc0NoYW5nZWQiLCJqc19kb3NfbmF2YmFyXzEiLCJkb3NJbXBsIiwiRG9zUGxheWVyIiwibmF2YmFyIiwicGxheWVyIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsR0FBQSxHQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosR0FBQSxHQUFBLElBQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxLQUFBLE1BQUFLLEVBQUFFLEtBQUEsbUJBQUFGLEVBQUEsSUFBQUcsRUFBQVgsRUFBQUcsR0FBQSxDQUFBUyxRQUFBLElBQUFiLEVBQUFJLEdBQUEsR0FBQVUsS0FBQUYsRUFBQUMsUUFBQSxTQUFBZCxHQUFBLE9BQUFJLEVBQUFILEVBQUFJLEdBQUEsR0FBQUwsSUFBQUEsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxPQUFBRCxFQUFBRyxHQUFBUyxRQUFBLElBQUEsSUFBQUwsRUFBQSxtQkFBQUQsU0FBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxJQUFBRCxFQUFBRCxFQUFBRSxJQUFBLE9BQUFELEVBQUEsQ0FBQSxDQUFBYSxFQUFBLENBQUEsU0FBQVQsRUFBQVUsRUFBQUosR0NBQSxhQUVBLElBQUFLLEVBQUFYLEVBQUEsV0F5RkEsU0FBQVksSUFDQSxJQUFBQyxFQUFBLEdBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBcUNBLE1BQUEsQ0FDQUMsSUFwQ0EsU0FBQUMsRUFBQUMs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anMtZG9zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiYXRjaFByb2Nlc3Nvck1ha2VyKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zICAgICAgICAgICAgID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgcmVwb3J0ZXIgICAgICAgID0gb3B0aW9ucy5yZXBvcnRlcjtcbiAgICB2YXIgYXN5bmNQcm9jZXNzICAgID0gdXRpbHMuZ2V0T3B0aW9uKG9wdGlvbnMsIFwiYXN5bmNcIiwgdHJ1ZSk7XG4gICAgdmFyIGF1dG9Qcm9jZXNzICAgICA9IHV0aWxzLmdldE9wdGlvbihvcHRpb25zLCBcImF1dG9cIiwgdHJ1ZSk7XG5cbiAgICBpZihhdXRvUHJvY2VzcyAmJiAhYXN5bmNQcm9jZXNzKSB7XG4gICAgICAgIHJlcG9ydGVyICYmIHJlcG9ydGVyLndhcm4oXCJJbnZhbGlkIG9wdGlvbnMgY29tYmluYXRpb24uIGF1dG89dHJ1ZSBhbmQgYXN5bmM9ZmFsc2UgaXMgaW52YWxpZC4gU2V0dGluZyBhc3luYz10cnVlLlwiKTtcbiAgICAgICAgYXN5bmNQcm9jZXNzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgYmF0Y2ggPSBCYXRjaCgpO1xuICAgIHZhciBhc3luY0ZyYW1lSGFuZGxlcjtcbiAgICB2YXIgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBhZGRGdW5jdGlvbihsZXZlbCwgZm4pIHtcbiAgICAgICAgaWYoIWlzUHJvY2Vzc2luZyAmJiBhdXRvUHJvY2VzcyAmJiBhc3luY1Byb2Nlc3MgJiYgYmF0Y2guc2l6ZSgpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGlzIGFzeW5jLCBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIGV4ZWN1dGVkIGFmdGVyIHRoYXQgdGhlIGZuIGlzIGFkZGVkIHRvIHRoZSBiYXRjaC5cbiAgICAgICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSBiZWZvcmUsIHNpbmNlIHdlJ3JlIGNoZWNraW5nIHRoZSBzaXplIG9mIHRoZSBiYXRjaCB0byBiZSAwLlxuICAgICAgICAgICAgcHJvY2Vzc0JhdGNoQXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJhdGNoLmFkZChsZXZlbCwgZm4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NCYXRjaCgpIHtcbiAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBiYXRjaCwgYW5kIGNyZWF0ZSBhIG5ldyBiYXRjaCBzbyB0aGF0IGluY29taW5nIGZ1bmN0aW9ucyBhcmUgbm90IGFkZGVkIGludG8gdGhlIGN1cnJlbnRseSBwcm9jZXNzaW5nIGJhdGNoLlxuICAgICAgICAvLyBDb250aW51ZSBwcm9jZXNzaW5nIHVudGlsIHRoZSB0b3AtbGV2ZWwgYmF0Y2ggaXMgZW1wdHkgKGZ1bmN0aW9ucyBtYXkgYmUgYWRkZWQgdG8gdGhlIG5ldyBiYXRjaCB3aGlsZSBwcm9jZXNzaW5nLCBhbmQgc28gb24pLlxuICAgICAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICB3aGlsZSAoYmF0Y2guc2l6ZSgpKSB7XG4gICAgICAgICAgICB2YXIgcHJvY2Vzc2luZ0JhdGNoID0gYmF0Y2g7XG4gICAgICAgICAgICBiYXRjaCA9IEJhdGNoKCk7XG4gICAgICAgICAgICBwcm9jZXNzaW5nQmF0Y2gucHJvY2VzcygpO1xuICAgICAgICB9XG4gICAgICAgIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcmNlUHJvY2Vzc0JhdGNoKGxvY2FsQXN5bmNQcm9jZXNzKSB7XG4gICAgICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxvY2FsQXN5bmNQcm9jZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxvY2FsQXN5bmNQcm9jZXNzID0gYXN5bmNQcm9jZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoYXN5bmNGcmFtZUhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNhbmNlbEZyYW1lKGFzeW5jRnJhbWVIYW5kbGVyKTtcbiAgICAgICAgICAgIGFzeW5jRnJhbWVIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxvY2FsQXN5bmNQcm9jZXNzKSB7XG4gICAgICAgICAgICBwcm9jZXNzQmF0Y2hBc3luYygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvY2Vzc0JhdGNoKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQmF0Y2hBc3luYygpIHtcbiAgICAgICAgYXN5bmNGcmFtZUhhbmRsZXIgPSByZXF1ZXN0RnJhbWUocHJvY2Vzc0JhdGNoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckJhdGNoKCkge1xuICAgICAgICBiYXRjaCAgICAgICAgICAgPSB7fTtcbiAgICAgICAgYmF0Y2hTaXplICAgICAgID0gMDtcbiAgICAgICAgdG9wTGV2ZWwgICAgICAgID0gMDtcbiAgICAgICAgYm90dG9tTGV2ZWwgICAgID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5jZWxGcmFtZShsaXN0ZW5lcikge1xuICAgICAgICAvLyB2YXIgY2FuY2VsID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LmNsZWFyVGltZW91dDtcbiAgICAgICAgdmFyIGNhbmNlbCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNhbmNlbChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVxdWVzdEZyYW1lKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIHZhciByYWYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbihmbikgeyByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZm4sIDIwKTsgfTtcbiAgICAgICAgdmFyIHJhZiA9IGZ1bmN0aW9uKGZuKSB7IHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTsgfTtcbiAgICAgICAgcmV0dXJuIHJhZihjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkOiBhZGRGdW5jdGlvbixcbiAgICAgICAgZm9yY2U6IGZvcmNlUHJvY2Vzc0JhdGNoXG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIEJhdGNoKCkge1xuICAgIHZhciBiYXRjaCAgICAgICA9IHt9O1xuICAgIHZhciBzaXplICAgICAgICA9IDA7XG4gICAgdmFyIHRvcExldmVsICAgID0gMDtcbiAgICB2YXIgYm90dG9tTGV2ZWwgPSAwO1xuXG4gICAgZnVuY3Rpb24gYWRkKGxldmVsLCBmbikge1xuICAgICAgICBpZighZm4pIHtcbiAgICAgICAgICAgIGZuID0gbGV2ZWw7XG4gICAgICAgICAgICBsZXZlbCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZihsZXZlbCA+IHRvcExldmVsKSB7XG4gICAgICAgICAgICB0b3BMZXZlbCA9IGxldmVsO1xuICAgICAgICB9IGVsc2UgaWYobGV2ZWwgPCBib3R0b21MZXZlbCkge1xuICAgICAgICAgICAgYm90dG9tTGV2ZWwgPSBsZXZlbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCFiYXRjaFtsZXZlbF0pIHtcbiAgICAgICAgICAgIGJhdGNoW2xldmVsXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgYmF0Y2hbbGV2ZWxdLnB1c2goZm4pO1xuICAgICAgICBzaXplKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICAgICAgZm9yKHZhciBsZXZlbCA9IGJvdHRvbUxldmVsOyBsZXZlbCA8PSB0b3BMZXZlbDsgbGV2ZWwrKykge1xuICAgICAgICAgICAgdmFyIGZucyA9IGJhdGNoW2xldmVsXTtcblxuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBmbiA9IGZuc1tpXTtcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkOiBhZGQsXG4gICAgICAgIHByb2Nlc3M6IHByb2Nlc3MsXG4gICAgICAgIHNpemU6IGdldFNpemVcbiAgICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB1dGlscyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnV0aWxzLmdldE9wdGlvbiA9IGdldE9wdGlvbjtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uKG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbbmFtZV07XG5cbiAgICBpZigodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiAvLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBhdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi4xMScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCduYXRpdmUtZnVuY3Rpb24tdG8tc3RyaW5nJywgRnVuY3Rpb24udG9TdHJpbmcpO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xudmFyICREYXRhVmlldyA9IGdsb2JhbFtEQVRBX1ZJRVddO1xudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93LXJlc3RyaWN0ZWQtbmFtZXNcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcbnZhciBCWVRFX0xFTkdUSCA9ICdieXRlTGVuZ3RoJztcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xudmFyICRMRU5HVEggPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSDtcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwobmV3IEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAkQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoTmFOKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xuICB9KSkge1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XG4gICAgICBpZiAoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKSBoaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH1cbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcbiAgdmFyICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmICh2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSkgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnJlcXVpcmUoJy4vX2V4cG9ydCcpKHtcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcbiAgcHJvdG86IHRydWUsXG4gIGZvcmNlZDogcmVnZXhwRXhlYyAhPT0gLy4vLmV4ZWNcbn0sIHtcbiAgZXhlYzogcmVnZXhwRXhlY1xufSk7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBtYXRjaFxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xudmFyIGVudW1LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJEdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicgJiYgISEkR09QUy5mO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICAkR09QUy5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9ICRmYWlscyhmdW5jdGlvbiAoKSB7ICRHT1BTLmYoMSk7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIEZBSUxTX09OX1BSSU1JVElWRVMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuICRHT1BTLmYodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBkZXRlY3RvciA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbmRldGVjdG9yLmlzSUUgPSBmdW5jdGlvbih2ZXJzaW9uKSB7XG4gICAgZnVuY3Rpb24gaXNBbnlJZVZlcnNpb24oKSB7XG4gICAgICAgIHZhciBhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGFnZW50LmluZGV4T2YoXCJtc2llXCIpICE9PSAtMSB8fCBhZ2VudC5pbmRleE9mKFwidHJpZGVudFwiKSAhPT0gLTEgfHwgYWdlbnQuaW5kZXhPZihcIiBlZGdlL1wiKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgaWYoIWlzQW55SWVWZXJzaW9uKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmKCF2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vU2hhbWVsZXNzbHkgc3RvbGVuIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGFkb2xzZXkvNTI3NjgzXG4gICAgdmFyIGllVmVyc2lvbiA9IChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgdW5kZWYsXG4gICAgICAgICAgICB2ID0gMyxcbiAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICAgICAgICBhbGwgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpXCIpO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBcIjwhLS1baWYgZ3QgSUUgXCIgKyAoKyt2KSArIFwiXT48aT48L2k+PCFbZW5kaWZdLS0+XCI7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFsbFswXSk7XG5cbiAgICAgICAgcmV0dXJuIHYgPiA0ID8gdiA6IHVuZGVmO1xuICAgIH0oKSk7XG5cbiAgICByZXR1cm4gdmVyc2lvbiA9PT0gaWVWZXJzaW9uO1xufTtcblxuZGV0ZWN0b3IuaXNMZWdhY3lPcGVyYSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhIXdpbmRvdy5vcGVyYTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHV0aWxzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLyoqXG4gKiBMb29wcyB0aHJvdWdoIHRoZSBjb2xsZWN0aW9uIGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgZm9yIGVhY2ggZWxlbWVudC4gaWYgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1dGh5LCB0aGUgbG9vcCBpcyBicm9rZW4gYW5kIHJldHVybnMgdGhlIHNhbWUgdmFsdWUuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0geyp9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gbG9vcCB0aHJvdWdoLiBOZWVkcyB0byBoYXZlIGEgbGVuZ3RoIHByb3BlcnR5IHNldCBhbmQgaGF2ZSBpbmRpY2VzIHNldCBmcm9tIDAgdG8gbGVuZ3RoIC0gMS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgZm9yIGVhY2ggZWxlbWVudC4gVGhlIGVsZW1lbnQgd2lsbCBiZSBnaXZlbiBhcyBhIHBhcmFtZXRlciB0byB0aGUgY2FsbGJhY2suIElmIHRoaXMgY2FsbGJhY2sgcmV0dXJucyB0cnV0aHksIHRoZSBsb29wIGlzIGJyb2tlbiBhbmQgdGhlIHNhbWUgdmFsdWUgaXMgcmV0dXJuZWQuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIHRoYXQgYSBjYWxsYmFjayBoYXMgcmV0dXJuZWQgKGlmIHRydXRoeSkuIE90aGVyd2lzZSBub3RoaW5nLlxuICovXG51dGlscy5mb3JFYWNoID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgY2FsbGJhY2spIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soY29sbGVjdGlvbltpXSk7XG4gICAgICAgIGlmKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIvKipcbiAqIFJlc2l6ZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdGhhdCBpbmplY3RzIG9iamVjdHMgdG8gZWxlbWVudHMgaW4gb3JkZXIgdG8gZGV0ZWN0IHJlc2l6ZSBldmVudHMuXG4gKiBIZWF2aWx5IGluc3BpcmVkIGJ5OiBodHRwOi8vd3d3LmJhY2thbGxleWNvZGVyLmNvbS8yMDEzLzAzLzE4L2Nyb3NzLWJyb3dzZXItZXZlbnQtYmFzZWQtZWxlbWVudC1yZXNpemUtZGV0ZWN0aW9uL1xuICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYnJvd3NlckRldGVjdG9yID0gcmVxdWlyZShcIi4uL2Jyb3dzZXItZGV0ZWN0b3JcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMgICAgICAgICAgICAgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciByZXBvcnRlciAgICAgICAgPSBvcHRpb25zLnJlcG9ydGVyO1xuICAgIHZhciBiYXRjaFByb2Nlc3NvciAgPSBvcHRpb25zLmJhdGNoUHJvY2Vzc29yO1xuICAgIHZhciBnZXRTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5nZXRTdGF0ZTtcblxuICAgIGlmKCFyZXBvcnRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHJlcXVpcmVkIGRlcGVuZGVuY3k6IHJlcG9ydGVyLlwiKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcmVzaXplIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGlzdGVuZXIgYWRkZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgb2YgdGhlIGVsZW1lbnQuIFRoZSBlbGVtZW50IHdpbGwgYmUgZ2l2ZW4gYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIGxpc3RlbmVyUHJveHkoKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGJyb3dzZXJEZXRlY3Rvci5pc0lFKDgpKSB7XG4gICAgICAgICAgICAvL0lFIDggZG9lcyBub3Qgc3VwcG9ydCBvYmplY3QsIGJ1dCBzdXBwb3J0cyB0aGUgcmVzaXplIGV2ZW50IGRpcmVjdGx5IG9uIGVsZW1lbnRzLlxuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIHByb3h5OiBsaXN0ZW5lclByb3h5XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZWxlbWVudC5hdHRhY2hFdmVudChcIm9ucmVzaXplXCIsIGxpc3RlbmVyUHJveHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IGdldE9iamVjdChlbGVtZW50KTtcblxuICAgICAgICAgICAgaWYoIW9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgaXMgbm90IGRldGVjdGFibGUgYnkgdGhpcyBzdHJhdGVneS5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9iamVjdC5jb250ZW50RG9jdW1lbnQuZGVmYXVsdFZpZXcuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBsaXN0ZW5lclByb3h5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkQ3NzVGV4dFN0cmluZyhydWxlcykge1xuICAgICAgICB2YXIgc2VwZXJhdG9yID0gb3B0aW9ucy5pbXBvcnRhbnQgPyBcIiAhaW1wb3J0YW50OyBcIiA6IFwiOyBcIjtcblxuICAgICAgICByZXR1cm4gKHJ1bGVzLmpvaW4oc2VwZXJhdG9yKSArIHNlcGVyYXRvcikudHJpbSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGFuIGVsZW1lbnQgZGV0ZWN0YWJsZSBhbmQgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBldmVudHMuIFdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGNoYW5nZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gbWFrZSBkZXRlY3RhYmxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgY2hhbmdlcy4gV2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZWxlbWVudCBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFrZURldGVjdGFibGUob3B0aW9ucywgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBlbGVtZW50O1xuICAgICAgICAgICAgZWxlbWVudCA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICB2YXIgZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuXG4gICAgICAgIGZ1bmN0aW9uIGluamVjdE9iamVjdChlbGVtZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIE9CSkVDVF9TVFlMRSA9IGJ1aWxkQ3NzVGV4dFN0cmluZyhbXCJkaXNwbGF5OiBibG9ja1wiLCBcInBvc2l0aW9uOiBhYnNvbHV0ZVwiLCBcInRvcDogMFwiLCBcImxlZnQ6IDBcIiwgXCJ3aWR0aDogMTAwJVwiLCBcImhlaWdodDogMTAwJVwiLCBcImJvcmRlcjogbm9uZVwiLCBcInBhZGRpbmc6IDBcIiwgXCJtYXJnaW46IDBcIiwgXCJvcGFjaXR5OiAwXCIsIFwiei1pbmRleDogLTEwMDBcIiwgXCJwb2ludGVyLWV2ZW50czogbm9uZVwiXSk7XG5cbiAgICAgICAgICAgIC8vVGhlIHRhcmdldCBlbGVtZW50IG5lZWRzIHRvIGJlIHBvc2l0aW9uZWQgKGV2ZXJ5dGhpbmcgZXhjZXB0IHN0YXRpYykgc28gdGhlIGFic29sdXRlIHBvc2l0aW9uZWQgb2JqZWN0IHdpbGwgYmUgcG9zaXRpb25lZCByZWxhdGl2ZSB0byB0aGUgdGFyZ2V0IGVsZW1lbnQuXG5cbiAgICAgICAgICAgIC8vIFBvc2l0aW9uIGFsdGVyaW5nIG1heSBiZSBwZXJmb3JtZWQgZGlyZWN0bHkgb3Igb24gb2JqZWN0IGxvYWQsIGRlcGVuZGluZyBvbiBpZiBzdHlsZSByZXNvbHV0aW9uIGlzIHBvc3NpYmxlIGRpcmVjdGx5IG9yIG5vdC5cbiAgICAgICAgICAgIHZhciBwb3NpdGlvbkNoZWNrUGVyZm9ybWVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IG1heSBub3QgeWV0IGJlIGF0dGFjaGVkIHRvIHRoZSBET00sIGFuZCB0aGVyZWZvcmUgdGhlIHN0eWxlIG9iamVjdCBtYXkgYmUgZW1wdHkgaW4gc29tZSBicm93c2Vycy5cbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBzdHlsZSBvYmplY3QgaXMgYSByZWZlcmVuY2UsIGl0IHdpbGwgYmUgdXBkYXRlZCBhcyBzb29uIGFzIHRoZSBlbGVtZW50IGlzIGF0dGFjaGVkIHRvIHRoZSBET00uXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLnN0YXJ0U2l6ZSA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG11dGF0ZURvbSgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhbHRlclBvc2l0aW9uU3R5bGVzKCkge1xuICAgICAgICAgICAgICAgICAgICBpZihzdHlsZS5wb3NpdGlvbiA9PT0gXCJzdGF0aWNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIiwgb3B0aW9ucy5pbXBvcnRhbnQgPyBcImltcG9ydGFudFwiIDogXCJcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW1vdmVSZWxhdGl2ZVN0eWxlcyA9IGZ1bmN0aW9uKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXROdW1lcmljYWxWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvW14tXFxkXFwuXS9nLCBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSAhPT0gXCJhdXRvXCIgJiYgZ2V0TnVtZXJpY2FsVmFsdWUodmFsdWUpICE9PSBcIjBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBvcnRlci53YXJuKFwiQW4gZWxlbWVudCB0aGF0IGlzIHBvc2l0aW9uZWQgc3RhdGljIGhhcyBzdHlsZS5cIiArIHByb3BlcnR5ICsgXCI9XCIgKyB2YWx1ZSArIFwiIHdoaWNoIGlzIGlnbm9yZWQgZHVlIHRvIHRoZSBzdGF0aWMgcG9zaXRpb25pbmcuIFRoZSBlbGVtZW50IHdpbGwgbmVlZCB0byBiZSBwb3NpdGlvbmVkIHJlbGF0aXZlLCBzbyB0aGUgc3R5bGUuXCIgKyBwcm9wZXJ0eSArIFwiIHdpbGwgYmUgc2V0IHRvIDAuIEVsZW1lbnQ6IFwiLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgXCIwXCIsIG9wdGlvbnMuaW1wb3J0YW50ID8gXCJpbXBvcnRhbnRcIiA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vQ2hlY2sgc28gdGhhdCB0aGVyZSBhcmUgbm8gYWNjaWRlbnRhbCBzdHlsZXMgdGhhdCB3aWxsIG1ha2UgdGhlIGVsZW1lbnQgc3R5bGVkIGRpZmZlcmVudGx5IG5vdyB0aGF0IGlzIGlzIHJlbGF0aXZlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy9JZiB0aGVyZSBhcmUgYW55LCBzZXQgdGhlbSB0byAwICh0aGlzIHNob3VsZCBiZSBva2F5IHdpdGggdGhlIHVzZXIgc2luY2UgdGhlIHN0eWxlIHByb3BlcnRpZXMgZGlkIG5vdGhpbmcgYmVmb3JlIFtzaW5jZSB0aGUgZWxlbWVudCB3YXMgcG9zaXRpb25lZCBzdGF0aWNdIGFueXdheSkuXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwidG9wXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInJpZ2h0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcImJvdHRvbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVJlbGF0aXZlU3R5bGVzKHJlcG9ydGVyLCBlbGVtZW50LCBzdHlsZSwgXCJsZWZ0XCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25PYmplY3RMb2FkKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgb2JqZWN0IGhhcyBiZWVuIGxvYWRlZCwgd2hpY2ggbWVhbnMgdGhhdCB0aGUgZWxlbWVudCBub3cgaXMgZ3VhcmFudGVlZCB0byBiZSBhdHRhY2hlZCB0byB0aGUgRE9NLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9uQ2hlY2tQZXJmb3JtZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVyUG9zaXRpb25TdHlsZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8qanNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldERvY3VtZW50KGVsZW1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL09wZXJhIDEyIHNlZW0gdG8gY2FsbCB0aGUgb2JqZWN0Lm9ubG9hZCBiZWZvcmUgdGhlIGFjdHVhbCBkb2N1bWVudCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy9TbyBpZiBpdCBpcyBub3QgcHJlc2VudCwgcG9sbCBpdCB3aXRoIGFuIHRpbWVvdXQgdW50aWwgaXQgaXMgcHJlc2VudC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogQ291bGQgbWF5YmUgYmUgaGFuZGxlZCBiZXR0ZXIgd2l0aCBvYmplY3Qub25yZWFkeXN0YXRlY2hhbmdlIG9yIHNpbWlsYXIuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZighZWxlbWVudC5jb250ZW50RG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuY2hlY2tGb3JPYmplY3REb2N1bWVudFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHN0YXRlLmNoZWNrRm9yT2JqZWN0RG9jdW1lbnRUaW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVja0Zvck9iamVjdERvY3VtZW50VGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBjaGVja0Zvck9iamVjdERvY3VtZW50KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5jaGVja0Zvck9iamVjdERvY3VtZW50VGltZW91dElkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RG9jdW1lbnQoZWxlbWVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQuY29udGVudERvY3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vTXV0YXRpbmcgdGhlIG9iamVjdCBlbGVtZW50IGhlcmUgc2VlbXMgdG8gZmlyZSBhbm90aGVyIGxvYWQgZXZlbnQuXG4gICAgICAgICAgICAgICAgICAgIC8vTXV0YXRpbmcgdGhlIGlubmVyIGRvY3VtZW50IG9mIHRoZSBvYmplY3QgZWxlbWVudCBpcyBmaW5lIHRob3VnaC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdEVsZW1lbnQgPSB0aGlzO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vQ3JlYXRlIHRoZSBzdHlsZSBlbGVtZW50IHRvIGJlIGFkZGVkIHRvIHRoZSBvYmplY3QuXG4gICAgICAgICAgICAgICAgICAgIGdldERvY3VtZW50KG9iamVjdEVsZW1lbnQsIGZ1bmN0aW9uIG9uT2JqZWN0RG9jdW1lbnRSZWFkeShvYmplY3REb2N1bWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9Ob3RpZnkgdGhhdCB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCB0by5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBtYXkgYmUgZGV0YWNoZWQgZnJvbSB0aGUgRE9NLCBhbmQgc29tZSBicm93c2VycyBkb2VzIG5vdCBzdXBwb3J0IHN0eWxlIHJlc29sdmluZyBvZiBkZXRhY2hlZCBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAvLyBUaGUgYWx0ZXJQb3NpdGlvblN0eWxlcyBuZWVkcyB0byBiZSBkZWxheWVkIHVudGlsIHdlIGtub3cgdGhlIGVsZW1lbnQgaGFzIGJlZW4gYXR0YWNoZWQgdG8gdGhlIERPTSAod2hpY2ggd2UgYXJlIHN1cmUgb2Ygd2hlbiB0aGUgb25PYmplY3RMb2FkIGhhcyBiZWVuIGZpcmVkKSwgaWYgc3R5bGUgcmVzb2x1dGlvbiBpcyBub3QgcG9zc2libGUuXG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsdGVyUG9zaXRpb25TdHlsZXMoc3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkNoZWNrUGVyZm9ybWVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvL0FkZCBhbiBvYmplY3QgZWxlbWVudCBhcyBhIGNoaWxkIHRvIHRoZSB0YXJnZXQgZWxlbWVudCB0aGF0IHdpbGwgYmUgbGlzdGVuZWQgdG8gZm9yIHJlc2l6ZSBldmVudHMuXG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvYmplY3RcIik7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnN0eWxlLmNzc1RleHQgPSBPQkpFQ1RfU1RZTEU7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnR5cGUgPSBcInRleHQvaHRtbFwiO1xuICAgICAgICAgICAgICAgIG9iamVjdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9ubG9hZCA9IG9uT2JqZWN0TG9hZDtcblxuICAgICAgICAgICAgICAgIC8vU2FmYXJpOiBUaGlzIG11c3Qgb2NjdXIgYmVmb3JlIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgLy9JRTogRG9lcyBub3QgbGlrZSB0aGF0IHRoaXMgaGFwcGVucyBiZWZvcmUsIGV2ZW4gaWYgaXQgaXMgYWxzbyBhZGRlZCBhZnRlci5cbiAgICAgICAgICAgICAgICBpZighYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkIGJlZm9yZSB0aGUgYWN0dWFsIGxvYWRpbmcgaGFwcGVuZWQuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0ID0gb2JqZWN0O1xuXG4gICAgICAgICAgICAgICAgLy9JRTogVGhpcyBtdXN0IG9jY3VyIGFmdGVyIGFkZGluZyB0aGUgb2JqZWN0IHRvIHRoZSBET00uXG4gICAgICAgICAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGF0YSA9IFwiYWJvdXQ6YmxhbmtcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGJhdGNoUHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgYmF0Y2hQcm9jZXNzb3IuYWRkKG11dGF0ZURvbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG11dGF0ZURvbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoYnJvd3NlckRldGVjdG9yLmlzSUUoOCkpIHtcbiAgICAgICAgICAgIC8vSUUgOCBkb2VzIG5vdCBzdXBwb3J0IG9iamVjdHMgcHJvcGVybHkuIEx1Y2tpbHkgdGhleSBkbyBzdXBwb3J0IHRoZSByZXNpemUgZXZlbnQuXG4gICAgICAgICAgICAvL1NvIGRvIG5vdCBpbmplY3QgdGhlIG9iamVjdCBhbmQgbm90aWZ5IHRoYXQgdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSByZWFkeSB0byBiZSBsaXN0ZW5lZCB0by5cbiAgICAgICAgICAgIC8vVGhlIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSByZXNpemUgZXZlbnQgaXMgYXR0YWNoZWQgaW4gdGhlIHV0aWxzLmFkZExpc3RlbmVyIGluc3RlYWQuXG4gICAgICAgICAgICBjYWxsYmFjayhlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluamVjdE9iamVjdChlbGVtZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjaGlsZCBvYmplY3Qgb2YgdGhlIHRhcmdldCBlbGVtZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgb2JqZWN0IGVsZW1lbnQgb2YgdGhlIHRhcmdldC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPYmplY3QoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZ2V0U3RhdGUoZWxlbWVudCkub2JqZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuaW5zdGFsbChlbGVtZW50KSB7XG4gICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvYmplY3QgPSBnZXRPYmplY3QoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChicm93c2VyRGV0ZWN0b3IuaXNJRSg4KSkge1xuICAgICAgICAgICAgZWxlbWVudC5kZXRhY2hFdmVudChcIm9ucmVzaXplXCIsIG9iamVjdC5wcm94eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNoaWxkKG9iamVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZ2V0U3RhdGUoZWxlbWVudCkuY2hlY2tGb3JPYmplY3REb2N1bWVudFRpbWVvdXRJZCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChnZXRTdGF0ZShlbGVtZW50KS5jaGVja0Zvck9iamVjdERvY3VtZW50VGltZW91dElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSBnZXRTdGF0ZShlbGVtZW50KS5vYmplY3Q7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWFrZURldGVjdGFibGU6IG1ha2VEZXRlY3RhYmxlLFxuICAgICAgICBhZGRMaXN0ZW5lcjogYWRkTGlzdGVuZXIsXG4gICAgICAgIHVuaW5zdGFsbDogdW5pbnN0YWxsXG4gICAgfTtcbn07XG4iLCIvKipcbiAqIFJlc2l6ZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdGhhdCBpbmplY3RzIGRpdnMgdG8gZWxlbWVudHMgaW4gb3JkZXIgdG8gZGV0ZWN0IHJlc2l6ZSBldmVudHMgb24gc2Nyb2xsIGV2ZW50cy5cbiAqIEhlYXZpbHkgaW5zcGlyZWQgYnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjai9jc3MtZWxlbWVudC1xdWVyaWVzL2Jsb2IvbWFzdGVyL3NyYy9SZXNpemVTZW5zb3IuanNcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvbi11dGlsc1wiKS5mb3JFYWNoO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zICAgICAgICAgICAgID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgcmVwb3J0ZXIgICAgICAgID0gb3B0aW9ucy5yZXBvcnRlcjtcbiAgICB2YXIgYmF0Y2hQcm9jZXNzb3IgID0gb3B0aW9ucy5iYXRjaFByb2Nlc3NvcjtcbiAgICB2YXIgZ2V0U3RhdGUgICAgICAgID0gb3B0aW9ucy5zdGF0ZUhhbmRsZXIuZ2V0U3RhdGU7XG4gICAgdmFyIGhhc1N0YXRlICAgICAgICA9IG9wdGlvbnMuc3RhdGVIYW5kbGVyLmhhc1N0YXRlO1xuICAgIHZhciBpZEhhbmRsZXIgICAgICAgPSBvcHRpb25zLmlkSGFuZGxlcjtcblxuICAgIGlmICghYmF0Y2hQcm9jZXNzb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyByZXF1aXJlZCBkZXBlbmRlbmN5OiBiYXRjaFByb2Nlc3NvclwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcG9ydGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgcmVxdWlyZWQgZGVwZW5kZW5jeTogcmVwb3J0ZXIuXCIpO1xuICAgIH1cblxuICAgIC8vVE9ETzogQ291bGQgdGhpcyBwZXJoYXBzIGJlIGRvbmUgYXQgaW5zdGFsbGF0aW9uIHRpbWU/XG4gICAgdmFyIHNjcm9sbGJhclNpemVzID0gZ2V0U2Nyb2xsYmFyU2l6ZXMoKTtcblxuICAgIHZhciBzdHlsZUlkID0gXCJlcmRfc2Nyb2xsX2RldGVjdGlvbl9zY3JvbGxiYXJfc3R5bGVcIjtcbiAgICB2YXIgZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3MgPSBcImVyZF9zY3JvbGxfZGV0ZWN0aW9uX2NvbnRhaW5lclwiO1xuXG4gICAgZnVuY3Rpb24gaW5pdERvY3VtZW50KHRhcmdldERvY3VtZW50KSB7XG4gICAgICAgIC8vIEluamVjdCB0aGUgc2Nyb2xsYmFyIHN0eWxpbmcgdGhhdCBwcmV2ZW50cyB0aGVtIGZyb20gYXBwZWFyaW5nIHNvbWV0aW1lcyBpbiBDaHJvbWUuXG4gICAgICAgIC8vIFRoZSBpbmplY3RlZCBjb250YWluZXIgbmVlZHMgdG8gaGF2ZSBhIGNsYXNzLCBzbyB0aGF0IGl0IG1heSBiZSBzdHlsZWQgd2l0aCBDU1MgKHBzZXVkbyBlbGVtZW50cykuXG4gICAgICAgIGluamVjdFNjcm9sbFN0eWxlKHRhcmdldERvY3VtZW50LCBzdHlsZUlkLCBkZXRlY3Rpb25Db250YWluZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgaW5pdERvY3VtZW50KHdpbmRvdy5kb2N1bWVudCk7XG5cbiAgICBmdW5jdGlvbiBidWlsZENzc1RleHRTdHJpbmcocnVsZXMpIHtcbiAgICAgICAgdmFyIHNlcGVyYXRvciA9IG9wdGlvbnMuaW1wb3J0YW50ID8gXCIgIWltcG9ydGFudDsgXCIgOiBcIjsgXCI7XG5cbiAgICAgICAgcmV0dXJuIChydWxlcy5qb2luKHNlcGVyYXRvcikgKyBzZXBlcmF0b3IpLnRyaW0oKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplcygpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gNTAwO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gNTAwO1xuXG4gICAgICAgIHZhciBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNoaWxkLnN0eWxlLmNzc1RleHQgPSBidWlsZENzc1RleHRTdHJpbmcoW1wicG9zaXRpb246IGFic29sdXRlXCIsIFwid2lkdGg6IFwiICsgd2lkdGgqMiArIFwicHhcIiwgXCJoZWlnaHQ6IFwiICsgaGVpZ2h0KjIgKyBcInB4XCIsIFwidmlzaWJpbGl0eTogaGlkZGVuXCIsIFwibWFyZ2luOiAwXCIsIFwicGFkZGluZzogMFwiXSk7XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYnVpbGRDc3NUZXh0U3RyaW5nKFtcInBvc2l0aW9uOiBhYnNvbHV0ZVwiLCBcIndpZHRoOiBcIiArIHdpZHRoICsgXCJweFwiLCBcImhlaWdodDogXCIgKyBoZWlnaHQgKyBcInB4XCIsIFwib3ZlcmZsb3c6IHNjcm9sbFwiLCBcInZpc2liaWxpdHk6IG5vbmVcIiwgXCJ0b3A6IFwiICsgLXdpZHRoKjMgKyBcInB4XCIsIFwibGVmdDogXCIgKyAtaGVpZ2h0KjMgKyBcInB4XCIsIFwidmlzaWJpbGl0eTogaGlkZGVuXCIsIFwibWFyZ2luOiAwXCIsIFwicGFkZGluZzogMFwiXSk7XG5cbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNoaWxkKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5Lmluc2VydEJlZm9yZShjb250YWluZXIsIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCk7XG5cbiAgICAgICAgdmFyIHdpZHRoU2l6ZSA9IHdpZHRoIC0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0U2l6ZSA9IGhlaWdodCAtIGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogd2lkdGhTaXplLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRTaXplXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5qZWN0U2Nyb2xsU3R5bGUodGFyZ2V0RG9jdW1lbnQsIHN0eWxlSWQsIGNvbnRhaW5lckNsYXNzKSB7XG4gICAgICAgIGZ1bmN0aW9uIGluamVjdFN0eWxlKHN0eWxlLCBtZXRob2QpIHtcbiAgICAgICAgICAgIG1ldGhvZCA9IG1ldGhvZCB8fCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRhcmdldERvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgc3R5bGVFbGVtZW50ID0gdGFyZ2V0RG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LmlubmVySFRNTCA9IHN0eWxlO1xuICAgICAgICAgICAgc3R5bGVFbGVtZW50LmlkID0gc3R5bGVJZDtcbiAgICAgICAgICAgIG1ldGhvZChzdHlsZUVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFyZ2V0RG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3R5bGVJZCkpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJBbmltYXRpb25DbGFzcyA9IGNvbnRhaW5lckNsYXNzICsgXCJfYW5pbWF0aW9uXCI7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyQW5pbWF0aW9uQWN0aXZlQ2xhc3MgPSBjb250YWluZXJDbGFzcyArIFwiX2FuaW1hdGlvbl9hY3RpdmVcIjtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IFwiLyogQ3JlYXRlZCBieSB0aGUgZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IgbGlicmFyeS4gKi9cXG5cIjtcbiAgICAgICAgICAgIHN0eWxlICs9IFwiLlwiICsgY29udGFpbmVyQ2xhc3MgKyBcIiA+IGRpdjo6LXdlYmtpdC1zY3JvbGxiYXIgeyBcIiArIGJ1aWxkQ3NzVGV4dFN0cmluZyhbXCJkaXNwbGF5OiBub25lXCJdKSArIFwiIH1cXG5cXG5cIjtcbiAgICAgICAgICAgIHN0eWxlICs9IFwiLlwiICsgY29udGFpbmVyQW5pbWF0aW9uQWN0aXZlQ2xhc3MgKyBcIiB7IFwiICsgYnVpbGRDc3NUZXh0U3RyaW5nKFtcIi13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjFzXCIsIFwiYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjFzXCIsIFwiLXdlYmtpdC1hbmltYXRpb24tbmFtZTogXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzcywgXCJhbmltYXRpb24tbmFtZTogXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzc10pICsgXCIgfVxcblwiO1xuICAgICAgICAgICAgc3R5bGUgKz0gXCJALXdlYmtpdC1rZXlmcmFtZXMgXCIgKyBjb250YWluZXJBbmltYXRpb25DbGFzcyArICBcIiB7IDAlIHsgb3BhY2l0eTogMTsgfSA1MCUgeyBvcGFjaXR5OiAwOyB9IDEwMCUgeyBvcGFjaXR5OiAxOyB9IH1cXG5cIjtcbiAgICAgICAgICAgIHN0eWxlICs9IFwiQGtleWZyYW1lcyBcIiArIGNvbnRhaW5lckFuaW1hdGlvbkNsYXNzICsgICAgICAgICAgXCIgeyAwJSB7IG9wYWNpdHk6IDE7IH0gNTAlIHsgb3BhY2l0eTogMDsgfSAxMDAlIHsgb3BhY2l0eTogMTsgfSB9XCI7XG4gICAgICAgICAgICBpbmplY3RTdHlsZShzdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRBbmltYXRpb25DbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IFwiIFwiICsgZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3MgKyBcIl9hbmltYXRpb25fYWN0aXZlXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRXZlbnQoZWwsIG5hbWUsIGNiKSB7XG4gICAgICAgIGlmIChlbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGNiKTtcbiAgICAgICAgfSBlbHNlIGlmKGVsLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBlbC5hdHRhY2hFdmVudChcIm9uXCIgKyBuYW1lLCBjYik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoXCJbc2Nyb2xsXSBEb24ndCBrbm93IGhvdyB0byBhZGQgZXZlbnQgbGlzdGVuZXJzLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUV2ZW50KGVsLCBuYW1lLCBjYikge1xuICAgICAgICBpZiAoZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBjYik7XG4gICAgICAgIH0gZWxzZSBpZihlbC5kZXRhY2hFdmVudCkge1xuICAgICAgICAgICAgZWwuZGV0YWNoRXZlbnQoXCJvblwiICsgbmFtZSwgY2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlcG9ydGVyLmVycm9yKFwiW3Njcm9sbF0gRG9uJ3Qga25vdyBob3cgdG8gcmVtb3ZlIGV2ZW50IGxpc3RlbmVycy5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGdldFN0YXRlKGVsZW1lbnQpLmNvbnRhaW5lci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1swXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTaHJpbmtFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGdldFN0YXRlKGVsZW1lbnQpLmNvbnRhaW5lci5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1sxXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgcmVzaXplIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdGhhdCBzaG91bGQgaGF2ZSB0aGUgbGlzdGVuZXIgYWRkZWQuXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCByZXNpemUgZXZlbnQgb2YgdGhlIGVsZW1lbnQuIFRoZSBlbGVtZW50IHdpbGwgYmUgZ2l2ZW4gYXMgYSBwYXJhbWV0ZXIgdG8gdGhlIGxpc3RlbmVyIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFkZExpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRTdGF0ZShlbGVtZW50KS5saXN0ZW5lcnM7XG5cbiAgICAgICAgaWYgKCFsaXN0ZW5lcnMucHVzaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFkZCBsaXN0ZW5lciB0byBhbiBlbGVtZW50IHRoYXQgaXMgbm90IGRldGVjdGFibGUuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2VzIGFuIGVsZW1lbnQgZGV0ZWN0YWJsZSBhbmQgcmVhZHkgdG8gYmUgbGlzdGVuZWQgZm9yIHJlc2l6ZSBldmVudHMuIFdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgd2hlbiB0aGUgZWxlbWVudCBpcyByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGNoYW5nZXMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIGVsZW1lbnQgdG8gbWFrZSBkZXRlY3RhYmxlXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgY2hhbmdlcy4gV2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgZWxlbWVudCBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFrZURldGVjdGFibGUob3B0aW9ucywgZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBlbGVtZW50O1xuICAgICAgICAgICAgZWxlbWVudCA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KGlkSGFuZGxlci5nZXQoZWxlbWVudCksIFwiU2Nyb2xsOiBcIik7XG4gICAgICAgICAgICAgICAgaWYgKHJlcG9ydGVyLmxvZy5hcHBseSkge1xuICAgICAgICAgICAgICAgICAgICByZXBvcnRlci5sb2cuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvcnRlci5sb2coYXJnc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0RldGFjaGVkKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzSW5Eb2N1bWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgPT09IGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5IHx8IGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlzSW5Eb2N1bWVudChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJlRm94IHJldHVybnMgbnVsbCBzdHlsZSBpbiBoaWRkZW4gaWZyYW1lcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93bnIvZWxlbWVudC1yZXNpemUtZGV0ZWN0b3IvaXNzdWVzLzY4IGFuZCBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03OTU1MjBcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1VucmVuZGVyZWQoZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGFic29sdXRlIHBvc2l0aW9uZWQgY29udGFpbmVyIHNpbmNlIHRoZSB0b3AgbGV2ZWwgY29udGFpbmVyIGlzIGRpc3BsYXk6IGlubGluZS5cbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXIuY2hpbGROb2Rlc1swXTtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICAgICAgICByZXR1cm4gIXN0eWxlLndpZHRoIHx8IHN0eWxlLndpZHRoLmluZGV4T2YoXCJweFwiKSA9PT0gLTE7IC8vQ2FuIG9ubHkgY29tcHV0ZSBwaXhlbCB2YWx1ZSB3aGVuIHJlbmRlcmVkLlxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gICAgICAgICAgICAvLyBTb21lIGJyb3dzZXJzIG9ubHkgZm9yY2UgbGF5b3V0cyB3aGVuIGFjdHVhbGx5IHJlYWRpbmcgdGhlIHN0eWxlIHByb3BlcnRpZXMgb2YgdGhlIHN0eWxlIG9iamVjdCwgc28gbWFrZSBzdXJlIHRoYXQgdGhleSBhcmUgYWxsIHJlYWQgaGVyZSxcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgdGhlIHVzZXIgb2YgdGhlIGZ1bmN0aW9uIGNhbiBiZSBzdXJlIHRoYXQgaXQgd2lsbCBwZXJmb3JtIHRoZSBsYXlvdXQgaGVyZSwgaW5zdGVhZCBvZiBsYXRlciAoaW1wb3J0YW50IGZvciBiYXRjaGluZykuXG4gICAgICAgICAgICB2YXIgZWxlbWVudFN0eWxlICAgICAgICAgICAgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBzdHlsZSAgICAgICAgICAgICAgICAgICA9IHt9O1xuICAgICAgICAgICAgc3R5bGUucG9zaXRpb24gICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLnBvc2l0aW9uO1xuICAgICAgICAgICAgc3R5bGUud2lkdGggICAgICAgICAgICAgICAgID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIHN0eWxlLmhlaWdodCAgICAgICAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgc3R5bGUudG9wICAgICAgICAgICAgICAgICAgID0gZWxlbWVudFN0eWxlLnRvcDtcbiAgICAgICAgICAgIHN0eWxlLnJpZ2h0ICAgICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS5yaWdodDtcbiAgICAgICAgICAgIHN0eWxlLmJvdHRvbSAgICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS5ib3R0b207XG4gICAgICAgICAgICBzdHlsZS5sZWZ0ICAgICAgICAgICAgICAgICAgPSBlbGVtZW50U3R5bGUubGVmdDtcbiAgICAgICAgICAgIHN0eWxlLndpZHRoQ1NTICAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS53aWR0aDtcbiAgICAgICAgICAgIHN0eWxlLmhlaWdodENTUyAgICAgICAgICAgICA9IGVsZW1lbnRTdHlsZS5oZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzdG9yZVN0YXJ0U2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCk7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5zdGFydFNpemUgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogc3R5bGUuaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IHN0YXJ0IHNpemVcIiwgZ2V0U3RhdGUoZWxlbWVudCkuc3RhcnRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGluaXRMaXN0ZW5lcnMoKSB7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3JlU3R5bGUoKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcInN0b3JlU3R5bGUgaW52b2tlZC5cIik7XG4gICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZSgpO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkuc3R5bGUgPSBzdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHN0b3JlQ3VycmVudFNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkubGFzdFdpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5sYXN0SGVpZ2h0ICA9IGhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEV4cGFuZENoaWxkRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RXhwYW5kRWxlbWVudChlbGVtZW50KS5jaGlsZE5vZGVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0V2lkdGhPZmZzZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gMiAqIHNjcm9sbGJhclNpemVzLndpZHRoICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEhlaWdodE9mZnNldCgpIHtcbiAgICAgICAgICAgIHJldHVybiAyICogc2Nyb2xsYmFyU2l6ZXMuaGVpZ2h0ICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEV4cGFuZFdpZHRoKHdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2lkdGggKyAxMCArIGdldFdpZHRoT2Zmc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRFeHBhbmRIZWlnaHQoaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0ICsgMTAgKyBnZXRIZWlnaHRPZmZzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNocmlua1dpZHRoKHdpZHRoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2lkdGggKiAyICsgZ2V0V2lkdGhPZmZzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFNocmlua0hlaWdodChoZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBoZWlnaHQgKiAyICsgZ2V0SGVpZ2h0T2Zmc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwb3NpdGlvblNjcm9sbGJhcnMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgdmFyIGV4cGFuZCAgICAgICAgICA9IGdldEV4cGFuZEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgc2hyaW5rICAgICAgICAgID0gZ2V0U2hyaW5rRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgIHZhciBleHBhbmRXaWR0aCAgICAgPSBnZXRFeHBhbmRXaWR0aCh3aWR0aCk7XG4gICAgICAgICAgICB2YXIgZXhwYW5kSGVpZ2h0ICAgID0gZ2V0RXhwYW5kSGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICB2YXIgc2hyaW5rV2lkdGggICAgID0gZ2V0U2hyaW5rV2lkdGgod2lkdGgpO1xuICAgICAgICAgICAgdmFyIHNocmlua0hlaWdodCAgICA9IGdldFNocmlua0hlaWdodChoZWlnaHQpO1xuICAgICAgICAgICAgZXhwYW5kLnNjcm9sbExlZnQgICA9IGV4cGFuZFdpZHRoO1xuICAgICAgICAgICAgZXhwYW5kLnNjcm9sbFRvcCAgICA9IGV4cGFuZEhlaWdodDtcbiAgICAgICAgICAgIHNocmluay5zY3JvbGxMZWZ0ICAgPSBzaHJpbmtXaWR0aDtcbiAgICAgICAgICAgIHNocmluay5zY3JvbGxUb3AgICAgPSBzaHJpbmtIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmplY3RDb250YWluZXJFbGVtZW50KCkge1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGdldFN0YXRlKGVsZW1lbnQpLmNvbnRhaW5lcjtcblxuICAgICAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIgICAgICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgICAgICAgICA9IGRldGVjdGlvbkNvbnRhaW5lckNsYXNzO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ICAgICA9IGJ1aWxkQ3NzVGV4dFN0cmluZyhbXCJ2aXNpYmlsaXR5OiBoaWRkZW5cIiwgXCJkaXNwbGF5OiBpbmxpbmVcIiwgXCJ3aWR0aDogMHB4XCIsIFwiaGVpZ2h0OiAwcHhcIiwgXCJ6LWluZGV4OiAtMVwiLCBcIm92ZXJmbG93OiBoaWRkZW5cIiwgXCJtYXJnaW46IDBcIiwgXCJwYWRkaW5nOiAwXCJdKTtcbiAgICAgICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgICAgICAgYWRkQW5pbWF0aW9uQ2xhc3MoY29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICAgICAgICAgICAgICB2YXIgb25BbmltYXRpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25SZW5kZXJlZCAmJiBnZXRTdGF0ZShlbGVtZW50KS5vblJlbmRlcmVkKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGFkZEV2ZW50KGNvbnRhaW5lciwgXCJhbmltYXRpb25zdGFydFwiLCBvbkFuaW1hdGlvblN0YXJ0KTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBldmVudCBoYW5kbGVyIGhlcmUgc28gdGhhdCB0aGV5IG1heSBiZSByZW1vdmVkIHdoZW4gdW5pbnN0YWxsIGlzIGNhbGxlZC5cbiAgICAgICAgICAgICAgICAvLyBTZWUgdW5pbnN0YWxsIGZ1bmN0aW9uIGZvciBhbiBleHBsYW5hdGlvbiB3aHkgaXQgaXMgbmVlZGVkLlxuICAgICAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uQW5pbWF0aW9uU3RhcnQgPSBvbkFuaW1hdGlvblN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5qZWN0U2Nyb2xsRWxlbWVudHMoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhbHRlclBvc2l0aW9uU3R5bGVzKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldFN0YXRlKGVsZW1lbnQpLnN0eWxlO1xuXG4gICAgICAgICAgICAgICAgaWYoc3R5bGUucG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcInBvc2l0aW9uXCIsIFwicmVsYXRpdmVcIixvcHRpb25zLmltcG9ydGFudCA/IFwiaW1wb3J0YW50XCIgOiBcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlUmVsYXRpdmVTdHlsZXMgPSBmdW5jdGlvbihyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXROdW1lcmljYWxWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXi1cXGRcXC5dL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlICE9PSBcImF1dG9cIiAmJiBnZXROdW1lcmljYWxWYWx1ZSh2YWx1ZSkgIT09IFwiMFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0ZXIud2FybihcIkFuIGVsZW1lbnQgdGhhdCBpcyBwb3NpdGlvbmVkIHN0YXRpYyBoYXMgc3R5bGUuXCIgKyBwcm9wZXJ0eSArIFwiPVwiICsgdmFsdWUgKyBcIiB3aGljaCBpcyBpZ25vcmVkIGR1ZSB0byB0aGUgc3RhdGljIHBvc2l0aW9uaW5nLiBUaGUgZWxlbWVudCB3aWxsIG5lZWQgdG8gYmUgcG9zaXRpb25lZCByZWxhdGl2ZSwgc28gdGhlIHN0eWxlLlwiICsgcHJvcGVydHkgKyBcIiB3aWxsIGJlIHNldCB0byAwLiBFbGVtZW50OiBcIiwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vQ2hlY2sgc28gdGhhdCB0aGVyZSBhcmUgbm8gYWNjaWRlbnRhbCBzdHlsZXMgdGhhdCB3aWxsIG1ha2UgdGhlIGVsZW1lbnQgc3R5bGVkIGRpZmZlcmVudGx5IG5vdyB0aGF0IGlzIGlzIHJlbGF0aXZlLlxuICAgICAgICAgICAgICAgICAgICAvL0lmIHRoZXJlIGFyZSBhbnksIHNldCB0aGVtIHRvIDAgKHRoaXMgc2hvdWxkIGJlIG9rYXkgd2l0aCB0aGUgdXNlciBzaW5jZSB0aGUgc3R5bGUgcHJvcGVydGllcyBkaWQgbm90aGluZyBiZWZvcmUgW3NpbmNlIHRoZSBlbGVtZW50IHdhcyBwb3NpdGlvbmVkIHN0YXRpY10gYW55d2F5KS5cbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVsYXRpdmVTdHlsZXMocmVwb3J0ZXIsIGVsZW1lbnQsIHN0eWxlLCBcInJpZ2h0XCIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwiYm90dG9tXCIpO1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVSZWxhdGl2ZVN0eWxlcyhyZXBvcnRlciwgZWxlbWVudCwgc3R5bGUsIFwibGVmdFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExlZnRUb3BCb3R0b21SaWdodENzc1RleHQobGVmdCwgdG9wLCBib3R0b20sIHJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9ICghbGVmdCA/IFwiMFwiIDogKGxlZnQgKyBcInB4XCIpKTtcbiAgICAgICAgICAgICAgICB0b3AgPSAoIXRvcCA/IFwiMFwiIDogKHRvcCArIFwicHhcIikpO1xuICAgICAgICAgICAgICAgIGJvdHRvbSA9ICghYm90dG9tID8gXCIwXCIgOiAoYm90dG9tICsgXCJweFwiKSk7XG4gICAgICAgICAgICAgICAgcmlnaHQgPSAoIXJpZ2h0ID8gXCIwXCIgOiAocmlnaHQgKyBcInB4XCIpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJsZWZ0OiBcIiArIGxlZnQsIFwidG9wOiBcIiArIHRvcCwgXCJyaWdodDogXCIgKyByaWdodCwgXCJib3R0b206IFwiICsgYm90dG9tXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVidWcoXCJJbmplY3RpbmcgZWxlbWVudHNcIik7XG5cbiAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFsdGVyUG9zaXRpb25TdHlsZXMoKTtcblxuICAgICAgICAgICAgdmFyIHJvb3RDb250YWluZXIgPSBnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXI7XG5cbiAgICAgICAgICAgIGlmICghcm9vdENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIHJvb3RDb250YWluZXIgPSBpbmplY3RDb250YWluZXJFbGVtZW50KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIER1ZSB0byB0aGlzIFdlYktpdCBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwODA4IChjdXJyZW50bHkgZml4ZWQgaW4gQmxpbmssIGJ1dCBzdGlsbCBwcmVzZW50IGluIFdlYktpdCBicm93c2VycyBzdWNoIGFzIFNhZmFyaSksXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGluamVjdCB0d28gY29udGFpbmVycywgb25lIHRoYXQgaXMgd2lkdGgvaGVpZ2h0IDEwMCUgYW5kIGFub3RoZXIgdGhhdCBpcyBsZWZ0L3RvcCAtMXB4IHNvIHRoYXQgdGhlIGZpbmFsIGNvbnRhaW5lciBhbHdheXMgaXMgMXgxIHBpeGVscyBiaWdnZXIgdGhhblxuICAgICAgICAgICAgLy8gdGhlIHRhcmdldGVkIGVsZW1lbnQuXG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBidWcgaXMgcmVzb2x2ZWQsIFwiY29udGFpbmVyQ29udGFpbmVyXCIgbWF5IGJlIHJlbW92ZWQuXG5cbiAgICAgICAgICAgIC8vIFRoZSBvdXRlciBjb250YWluZXIgY2FuIG9jY2FzaW9uYWxseSBiZSBsZXNzIHdpZGUgdGhhbiB0aGUgdGFyZ2V0ZWQgd2hlbiBpbnNpZGUgaW5saW5lIGVsZW1lbnRzIGVsZW1lbnQgaW4gV2ViS2l0IChzZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1Mjk4MCkuXG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBubyBwcm9ibGVtIHNpbmNlIHRoZSBpbm5lciBjb250YWluZXIgZWl0aGVyIHdheSBtYWtlcyBzdXJlIHRoZSBpbmplY3RlZCBzY3JvbGwgZWxlbWVudHMgYXJlIGF0IGxlYXN0IDF4MSBweC5cblxuICAgICAgICAgICAgdmFyIHNjcm9sbGJhcldpZHRoICAgICAgICAgID0gc2Nyb2xsYmFyU2l6ZXMud2lkdGg7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsYmFySGVpZ2h0ICAgICAgICAgPSBzY3JvbGxiYXJTaXplcy5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgY29udGFpbmVyQ29udGFpbmVyU3R5bGUgPSBidWlsZENzc1RleHRTdHJpbmcoW1wicG9zaXRpb246IGFic29sdXRlXCIsIFwiZmxleDogbm9uZVwiLCBcIm92ZXJmbG93OiBoaWRkZW5cIiwgXCJ6LWluZGV4OiAtMVwiLCBcInZpc2liaWxpdHk6IGhpZGRlblwiLCBcIndpZHRoOiAxMDAlXCIsIFwiaGVpZ2h0OiAxMDAlXCIsIFwibGVmdDogMHB4XCIsIFwidG9wOiAwcHhcIl0pO1xuICAgICAgICAgICAgdmFyIGNvbnRhaW5lclN0eWxlICAgICAgICAgID0gYnVpbGRDc3NUZXh0U3RyaW5nKFtcInBvc2l0aW9uOiBhYnNvbHV0ZVwiLCBcImZsZXg6IG5vbmVcIiwgXCJvdmVyZmxvdzogaGlkZGVuXCIsIFwiei1pbmRleDogLTFcIiwgXCJ2aXNpYmlsaXR5OiBoaWRkZW5cIl0uY29uY2F0KGdldExlZnRUb3BCb3R0b21SaWdodENzc1RleHQoLSgxICsgc2Nyb2xsYmFyV2lkdGgpLCAtKDEgKyBzY3JvbGxiYXJIZWlnaHQpLCAtc2Nyb2xsYmFySGVpZ2h0LCAtc2Nyb2xsYmFyV2lkdGgpKSk7XG4gICAgICAgICAgICB2YXIgZXhwYW5kU3R5bGUgICAgICAgICAgICAgPSBidWlsZENzc1RleHRTdHJpbmcoW1wicG9zaXRpb246IGFic29sdXRlXCIsIFwiZmxleDogbm9uZVwiLCBcIm92ZXJmbG93OiBzY3JvbGxcIiwgXCJ6LWluZGV4OiAtMVwiLCBcInZpc2liaWxpdHk6IGhpZGRlblwiLCBcIndpZHRoOiAxMDAlXCIsIFwiaGVpZ2h0OiAxMDAlXCJdKTtcbiAgICAgICAgICAgIHZhciBzaHJpbmtTdHlsZSAgICAgICAgICAgICA9IGJ1aWxkQ3NzVGV4dFN0cmluZyhbXCJwb3NpdGlvbjogYWJzb2x1dGVcIiwgXCJmbGV4OiBub25lXCIsIFwib3ZlcmZsb3c6IHNjcm9sbFwiLCBcInotaW5kZXg6IC0xXCIsIFwidmlzaWJpbGl0eTogaGlkZGVuXCIsIFwid2lkdGg6IDEwMCVcIiwgXCJoZWlnaHQ6IDEwMCVcIl0pO1xuICAgICAgICAgICAgdmFyIGV4cGFuZENoaWxkU3R5bGUgICAgICAgID0gYnVpbGRDc3NUZXh0U3RyaW5nKFtcInBvc2l0aW9uOiBhYnNvbHV0ZVwiLCBcImxlZnQ6IDBcIiwgXCJ0b3A6IDBcIl0pO1xuICAgICAgICAgICAgdmFyIHNocmlua0NoaWxkU3R5bGUgICAgICAgID0gYnVpbGRDc3NUZXh0U3RyaW5nKFtcInBvc2l0aW9uOiBhYnNvbHV0ZVwiLCBcIndpZHRoOiAyMDAlXCIsIFwiaGVpZ2h0OiAyMDAlXCJdKTtcblxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lckNvbnRhaW5lciAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgICAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgZXhwYW5kICAgICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdmFyIGV4cGFuZENoaWxkICAgICAgICAgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHZhciBzaHJpbmsgICAgICAgICAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgc2hyaW5rQ2hpbGQgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICAvLyBTb21lIGJyb3dzZXJzIGNob2tlIG9uIHRoZSByZXNpemUgc3lzdGVtIGJlaW5nIHJ0bCwgc28gZm9yY2UgaXQgdG8gbHRyLiBodHRwczovL2dpdGh1Yi5jb20vd25yL2VsZW1lbnQtcmVzaXplLWRldGVjdG9yL2lzc3Vlcy81NlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgZGlyIHNob3VsZCBub3QgYmUgc2V0IG9uIHRoZSB0b3AgbGV2ZWwgY29udGFpbmVyIGFzIGl0IGFsdGVycyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaW4gc29tZSBicm93c2Vycy5cbiAgICAgICAgICAgIGNvbnRhaW5lckNvbnRhaW5lci5kaXIgICAgICAgICAgICAgID0gXCJsdHJcIjtcblxuICAgICAgICAgICAgY29udGFpbmVyQ29udGFpbmVyLnN0eWxlLmNzc1RleHQgICAgPSBjb250YWluZXJDb250YWluZXJTdHlsZTtcbiAgICAgICAgICAgIGNvbnRhaW5lckNvbnRhaW5lci5jbGFzc05hbWUgICAgICAgID0gZGV0ZWN0aW9uQ29udGFpbmVyQ2xhc3M7XG4gICAgICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lICAgICAgICAgICAgICAgICA9IGRldGVjdGlvbkNvbnRhaW5lckNsYXNzO1xuICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLmNzc1RleHQgICAgICAgICAgICAgPSBjb250YWluZXJTdHlsZTtcbiAgICAgICAgICAgIGV4cGFuZC5zdHlsZS5jc3NUZXh0ICAgICAgICAgICAgICAgID0gZXhwYW5kU3R5bGU7XG4gICAgICAgICAgICBleHBhbmRDaGlsZC5zdHlsZS5jc3NUZXh0ICAgICAgICAgICA9IGV4cGFuZENoaWxkU3R5bGU7XG4gICAgICAgICAgICBzaHJpbmsuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgICAgICA9IHNocmlua1N0eWxlO1xuICAgICAgICAgICAgc2hyaW5rQ2hpbGQuc3R5bGUuY3NzVGV4dCAgICAgICAgICAgPSBzaHJpbmtDaGlsZFN0eWxlO1xuXG4gICAgICAgICAgICBleHBhbmQuYXBwZW5kQ2hpbGQoZXhwYW5kQ2hpbGQpO1xuICAgICAgICAgICAgc2hyaW5rLmFwcGVuZENoaWxkKHNocmlua0NoaWxkKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChleHBhbmQpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHNocmluayk7XG4gICAgICAgICAgICBjb250YWluZXJDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIHJvb3RDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gb25FeHBhbmRTY3JvbGwoKSB7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmQgJiYgZ2V0U3RhdGUoZWxlbWVudCkub25FeHBhbmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gb25TaHJpbmtTY3JvbGwoKSB7XG4gICAgICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmsgJiYgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmsoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkRXZlbnQoZXhwYW5kLCBcInNjcm9sbFwiLCBvbkV4cGFuZFNjcm9sbCk7XG4gICAgICAgICAgICBhZGRFdmVudChzaHJpbmssIFwic2Nyb2xsXCIsIG9uU2hyaW5rU2Nyb2xsKTtcblxuICAgICAgICAgICAgLy8gU3RvcmUgdGhlIGV2ZW50IGhhbmRsZXJzIGhlcmUgc28gdGhhdCB0aGV5IG1heSBiZSByZW1vdmVkIHdoZW4gdW5pbnN0YWxsIGlzIGNhbGxlZC5cbiAgICAgICAgICAgIC8vIFNlZSB1bmluc3RhbGwgZnVuY3Rpb24gZm9yIGFuIGV4cGxhbmF0aW9uIHdoeSBpdCBpcyBuZWVkZWQuXG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vbkV4cGFuZFNjcm9sbCA9IG9uRXhwYW5kU2Nyb2xsO1xuICAgICAgICAgICAgZ2V0U3RhdGUoZWxlbWVudCkub25TaHJpbmtTY3JvbGwgPSBvblNocmlua1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzQW5kUG9zaXRpb25FbGVtZW50cygpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkU2l6ZXMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciBleHBhbmRDaGlsZCAgICAgICAgICAgICA9IGdldEV4cGFuZENoaWxkRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB2YXIgZXhwYW5kV2lkdGggICAgICAgICAgICAgPSBnZXRFeHBhbmRXaWR0aCh3aWR0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZEhlaWdodCAgICAgICAgICAgID0gZ2V0RXhwYW5kSGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUuc2V0UHJvcGVydHkoXCJ3aWR0aFwiLCBleHBhbmRXaWR0aCArIFwicHhcIiwgb3B0aW9ucy5pbXBvcnRhbnQgPyBcImltcG9ydGFudFwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgZXhwYW5kQ2hpbGQuc3R5bGUuc2V0UHJvcGVydHkoXCJoZWlnaHRcIiwgZXhwYW5kSGVpZ2h0ICsgXCJweFwiLCBvcHRpb25zLmltcG9ydGFudCA/IFwiaW1wb3J0YW50XCIgOiBcIlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGV0ZWN0b3JFbGVtZW50cyhkb25lKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoICAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCAgICAgICAgICA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2l6ZSBoYXMgYWN0dWFsbHkgY2hhbmdlZCBzaW5jZSBsYXN0IHRpbWUgdGhlIGFsZ29yaXRobSByYW4uIElmIG5vdCwgc29tZSBzdGVwcyBtYXkgYmUgc2tpcHBlZC5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZUNoYW5nZWQgPSB3aWR0aCAhPT0gZ2V0U3RhdGUoZWxlbWVudCkubGFzdFdpZHRoIHx8IGhlaWdodCAhPT0gZ2V0U3RhdGUoZWxlbWVudCkubGFzdEhlaWdodDtcblxuICAgICAgICAgICAgICAgIGRlYnVnKFwiU3RvcmluZyBjdXJyZW50IHNpemVcIiwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgc2l6ZSBvZiB0aGUgZWxlbWVudCBzeW5jIGhlcmUsIHNvIHRoYXQgbXVsdGlwbGUgc2Nyb2xsIGV2ZW50cyBtYXkgYmUgaWdub3JlZCBpbiB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSB0aGUgaWYtY2hlY2sgaW4gaGFuZGxlU2Nyb2xsIGlzIHVzZWxlc3MuXG4gICAgICAgICAgICAgICAgc3RvcmVDdXJyZW50U2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KTtcblxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIGRlbGF5IHRoZSBwcm9jZXNzaW5nIG9mIHRoZSBiYXRjaCwgdGhlcmUgaXMgYSByaXNrIHRoYXQgdW5pbnN0YWxsIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUgdGhlIGJhdGNoIGdldHMgdG8gZXhlY3V0ZS5cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gY2FuY2VsIHRoZSBmbiBleGVjdXRpb25zLCB3ZSBuZWVkIHRvIGFkZCBhbiB1bmluc3RhbGwgZ3VhcmQgdG8gYWxsIGZucyBvZiB0aGUgYmF0Y2guXG5cbiAgICAgICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMCwgZnVuY3Rpb24gcGVyZm9ybVVwZGF0ZUNoaWxkU2l6ZXMoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2l6ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmVFbGVtZW50c0luamVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5lciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBlbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcgIT09IHdpZHRoIHx8IGggIT09IGhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydGVyLndhcm4oaWRIYW5kbGVyLmdldChlbGVtZW50KSwgXCJTY3JvbGw6IFNpemUgY2hhbmdlZCBiZWZvcmUgdXBkYXRpbmcgZGV0ZWN0b3IgZWxlbWVudHMuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ2hpbGRTaXplcyhlbGVtZW50LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgxLCBmdW5jdGlvbiB1cGRhdGVTY3JvbGxiYXJzKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGludm9rZWQgZXZlbnQgdGhvdWdoIHRoZSBzaXplIGlzIHVuY2hhbmdlZC4gVGhlIGVsZW1lbnQgY291bGQgaGF2ZSBiZWVuIHJlc2l6ZWQgdmVyeSBxdWlja2x5IGFuZCB0aGVuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlZW4gcmVzdG9yZWQgdG8gdGhlIG9yaWdpbmFsIHNpemUsIHdoaWNoIHdpbGwgaGF2ZSBjaGFuZ2VkIHRoZSBzY3JvbGxiYXIgcG9zaXRpb25zLlxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmVFbGVtZW50c0luamVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGNvbnRhaW5lciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblNjcm9sbGJhcnMoZWxlbWVudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2l6ZUNoYW5nZWQgJiYgZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFnZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwiQWJvcnRpbmcgYmVjYXVzZSBlbGVtZW50IGhhcyBiZWVuIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmVFbGVtZW50c0luamVjdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgY29udGFpbmVyIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYXJlRWxlbWVudHNJbmplY3RlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFnZXRTdGF0ZShlbGVtZW50KS5jb250YWluZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyc0lmTmVlZGVkKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlzRmlyc3ROb3RpZnkoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZShlbGVtZW50KS5sYXN0Tm90aWZpZWRXaWR0aCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlYnVnKFwibm90aWZ5TGlzdGVuZXJzSWZOZWVkZWQgaW52b2tlZFwiKTtcblxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKGVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3Qgbm90aWZ5IGlmIHRoZSBjdXJyZW50IHNpemUgaXMgdGhlIHN0YXJ0IHNpemUsIGFuZCB0aGlzIGlzIHRoZSBmaXJzdCBub3RpZmljYXRpb24uXG4gICAgICAgICAgICAgICAgaWYgKGlzRmlyc3ROb3RpZnkoKSAmJiBzdGF0ZS5sYXN0V2lkdGggPT09IHN0YXRlLnN0YXJ0U2l6ZS53aWR0aCAmJiBzdGF0ZS5sYXN0SGVpZ2h0ID09PSBzdGF0ZS5zdGFydFNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWJ1ZyhcIk5vdCBub3RpZnlpbmc6IFNpemUgaXMgdGhlIHNhbWUgYXMgdGhlIHN0YXJ0IHNpemUsIGFuZCB0aGVyZSBoYXMgYmVlbiBubyBub3RpZmljYXRpb24geWV0LlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEb24ndCBub3RpZnkgaWYgdGhlIHNpemUgYWxyZWFkeSBoYXMgYmVlbiBub3RpZmllZC5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUubGFzdFdpZHRoID09PSBzdGF0ZS5sYXN0Tm90aWZpZWRXaWR0aCAmJiBzdGF0ZS5sYXN0SGVpZ2h0ID09PSBzdGF0ZS5sYXN0Tm90aWZpZWRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlYnVnKFwiTm90IG5vdGlmeWluZzogU2l6ZSBhbHJlYWR5IG5vdGlmaWVkXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgZGVidWcoXCJDdXJyZW50IHNpemUgbm90IG5vdGlmaWVkLCBub3RpZnlpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgc3RhdGUubGFzdE5vdGlmaWVkV2lkdGggPSBzdGF0ZS5sYXN0V2lkdGg7XG4gICAgICAgICAgICAgICAgc3RhdGUubGFzdE5vdGlmaWVkSGVpZ2h0ID0gc3RhdGUubGFzdEhlaWdodDtcbiAgICAgICAgICAgICAgICBmb3JFYWNoKGdldFN0YXRlKGVsZW1lbnQpLmxpc3RlbmVycywgZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVSZW5kZXIoKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJzdGFydGFuaW1hdGlvbiB0cmlnZ2VyZWQuXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5yZW5kZXJlZChlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIklnbm9yaW5nIHNpbmNlIGVsZW1lbnQgaXMgc3RpbGwgdW5yZW5kZXJlZC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlYnVnKFwiRWxlbWVudCByZW5kZXJlZC5cIik7XG4gICAgICAgICAgICAgICAgdmFyIGV4cGFuZCA9IGdldEV4cGFuZEVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgdmFyIHNocmluayA9IGdldFNocmlua0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGFuZC5zY3JvbGxMZWZ0ID09PSAwIHx8IGV4cGFuZC5zY3JvbGxUb3AgPT09IDAgfHwgc2hyaW5rLnNjcm9sbExlZnQgPT09IDAgfHwgc2hyaW5rLnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcIlNjcm9sbGJhcnMgb3V0IG9mIHN5bmMuIFVwZGF0aW5nIGRldGVjdG9yIGVsZW1lbnRzLi4uXCIpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEZXRlY3RvckVsZW1lbnRzKG5vdGlmeUxpc3RlbmVyc0lmTmVlZGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCgpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIlNjcm9sbCBkZXRlY3RlZC5cIik7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNVbnJlbmRlcmVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVsZW1lbnQgaXMgc3RpbGwgdW5yZW5kZXJlZC4gU2tpcCB0aGlzIHNjcm9sbCBldmVudC5cbiAgICAgICAgICAgICAgICAgICAgZGVidWcoXCJTY3JvbGwgZXZlbnQgZmlyZWQgd2hpbGUgdW5yZW5kZXJlZC4gSWdub3JpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB1cGRhdGVEZXRlY3RvckVsZW1lbnRzKG5vdGlmeUxpc3RlbmVyc0lmTmVlZGVkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVidWcoXCJyZWdpc3Rlckxpc3RlbmVyc0FuZFBvc2l0aW9uRWxlbWVudHMgaW52b2tlZC5cIik7XG5cbiAgICAgICAgICAgIGlmICghZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcIkFib3J0aW5nIGJlY2F1c2UgZWxlbWVudCBoYXMgYmVlbiB1bmluc3RhbGxlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uUmVuZGVyZWQgPSBoYW5kbGVSZW5kZXI7XG4gICAgICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5vbkV4cGFuZCA9IGhhbmRsZVNjcm9sbDtcbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uU2hyaW5rID0gaGFuZGxlU2Nyb2xsO1xuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZTtcbiAgICAgICAgICAgIHVwZGF0ZUNoaWxkU2l6ZXMoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmaW5hbGl6ZURvbU11dGF0aW9uKCkge1xuICAgICAgICAgICAgZGVidWcoXCJmaW5hbGl6ZURvbU11dGF0aW9uIGludm9rZWQuXCIpO1xuXG4gICAgICAgICAgICBpZiAoIWdldFN0YXRlKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJBYm9ydGluZyBiZWNhdXNlIGVsZW1lbnQgaGFzIGJlZW4gdW5pbnN0YWxsZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBnZXRTdGF0ZShlbGVtZW50KS5zdHlsZTtcbiAgICAgICAgICAgIHN0b3JlQ3VycmVudFNpemUoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgICAgICBwb3NpdGlvblNjcm9sbGJhcnMoZWxlbWVudCwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkeSgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaW5zdGFsbCgpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiSW5zdGFsbGluZy4uLlwiKTtcbiAgICAgICAgICAgIGluaXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgIHN0b3JlU3RhcnRTaXplKCk7XG5cbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgwLCBzdG9yZVN0eWxlKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgxLCBpbmplY3RTY3JvbGxFbGVtZW50cyk7XG4gICAgICAgICAgICBiYXRjaFByb2Nlc3Nvci5hZGQoMiwgcmVnaXN0ZXJMaXN0ZW5lcnNBbmRQb3NpdGlvbkVsZW1lbnRzKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCgzLCBmaW5hbGl6ZURvbU11dGF0aW9uKTtcbiAgICAgICAgICAgIGJhdGNoUHJvY2Vzc29yLmFkZCg0LCByZWFkeSk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWJ1ZyhcIk1ha2luZyBkZXRlY3RhYmxlLi4uXCIpO1xuXG4gICAgICAgIGlmIChpc0RldGFjaGVkKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICBkZWJ1ZyhcIkVsZW1lbnQgaXMgZGV0YWNoZWRcIik7XG5cbiAgICAgICAgICAgIGluamVjdENvbnRhaW5lckVsZW1lbnQoKTtcblxuICAgICAgICAgICAgZGVidWcoXCJXYWl0aW5nIHVudGlsIGVsZW1lbnQgaXMgYXR0YWNoZWQuLi5cIik7XG5cbiAgICAgICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLm9uUmVuZGVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJFbGVtZW50IGlzIG5vdyBhdHRhY2hlZFwiKTtcbiAgICAgICAgICAgICAgICBpbnN0YWxsKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFsbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5pbnN0YWxsKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgLy8gVW5pbnN0YWxsIGhhcyBiZWVuIGNhbGxlZCBvbiBhIG5vbi1lcmQgZWxlbWVudC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuaW5zdGFsbCBtYXkgaGF2ZSBiZWVuIGNhbGxlZCBpbiB0aGUgZm9sbG93aW5nIHNjZW5hcmlvczpcbiAgICAgICAgLy8gKDEpIFJpZ2h0IGJldHdlZW4gdGhlIHN5bmMgY29kZSBhbmQgYXN5bmMgYmF0Y2ggKGhlcmUgc3RhdGUuYnVzeSA9IHRydWUsIGJ1dCBub3RoaW5nIGhhdmUgYmVlbiByZWdpc3RlcmVkIG9yIGluamVjdGVkKS5cbiAgICAgICAgLy8gKDIpIEluIHRoZSByZWFkeSBjYWxsYmFjayBvZiB0aGUgbGFzdCBsZXZlbCBvZiB0aGUgYmF0Y2ggYnkgYW5vdGhlciBlbGVtZW50IChoZXJlLCBzdGF0ZS5idXN5ID0gdHJ1ZSwgYnV0IGFsbCB0aGUgc3R1ZmYgaGFzIGJlZW4gaW5qZWN0ZWQpLlxuICAgICAgICAvLyAoMykgQWZ0ZXIgdGhlIGluc3RhbGxhdGlvbiBwcm9jZXNzIChoZXJlLCBzdGF0ZS5idXN5ID0gZmFsc2UgYW5kIGFsbCB0aGUgc3R1ZmYgaGFzIGJlZW4gaW5qZWN0ZWQpLlxuICAgICAgICAvLyBTbyB0byBiZSBvbiB0aGUgc2FmZSBzaWRlLCBsZXQncyBjaGVjayBmb3IgZWFjaCB0aGluZyBiZWZvcmUgcmVtb3ZpbmcuXG5cbiAgICAgICAgLy8gV2UgbmVlZCB0byByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVycywgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGV2ZW50IG1pZ2h0IGZpcmUgb24gYW4gdW5pbnN0YWxsIGVsZW1lbnQgd2hpY2ggcmVzdWx0cyBpbiBhbiBlcnJvciB3aGVuIHRyeWluZyB0byBnZXQgdGhlIHN0YXRlIG9mIHRoZSBlbGVtZW50LlxuICAgICAgICBzdGF0ZS5vbkV4cGFuZFNjcm9sbCAmJiByZW1vdmVFdmVudChnZXRFeHBhbmRFbGVtZW50KGVsZW1lbnQpLCBcInNjcm9sbFwiLCBzdGF0ZS5vbkV4cGFuZFNjcm9sbCk7XG4gICAgICAgIHN0YXRlLm9uU2hyaW5rU2Nyb2xsICYmIHJlbW92ZUV2ZW50KGdldFNocmlua0VsZW1lbnQoZWxlbWVudCksIFwic2Nyb2xsXCIsIHN0YXRlLm9uU2hyaW5rU2Nyb2xsKTtcbiAgICAgICAgc3RhdGUub25BbmltYXRpb25TdGFydCAmJiByZW1vdmVFdmVudChzdGF0ZS5jb250YWluZXIsIFwiYW5pbWF0aW9uc3RhcnRcIiwgc3RhdGUub25BbmltYXRpb25TdGFydCk7XG5cbiAgICAgICAgc3RhdGUuY29udGFpbmVyICYmIGVsZW1lbnQucmVtb3ZlQ2hpbGQoc3RhdGUuY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlRGV0ZWN0YWJsZTogbWFrZURldGVjdGFibGUsXG4gICAgICAgIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcbiAgICAgICAgdW5pbnN0YWxsOiB1bmluc3RhbGwsXG4gICAgICAgIGluaXREb2N1bWVudDogaW5pdERvY3VtZW50XG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGZvckVhY2ggICAgICAgICAgICAgICAgID0gcmVxdWlyZShcIi4vY29sbGVjdGlvbi11dGlsc1wiKS5mb3JFYWNoO1xudmFyIGVsZW1lbnRVdGlsc01ha2VyICAgICAgID0gcmVxdWlyZShcIi4vZWxlbWVudC11dGlsc1wiKTtcbnZhciBsaXN0ZW5lckhhbmRsZXJNYWtlciAgICA9IHJlcXVpcmUoXCIuL2xpc3RlbmVyLWhhbmRsZXJcIik7XG52YXIgaWRHZW5lcmF0b3JNYWtlciAgICAgICAgPSByZXF1aXJlKFwiLi9pZC1nZW5lcmF0b3JcIik7XG52YXIgaWRIYW5kbGVyTWFrZXIgICAgICAgICAgPSByZXF1aXJlKFwiLi9pZC1oYW5kbGVyXCIpO1xudmFyIHJlcG9ydGVyTWFrZXIgICAgICAgICAgID0gcmVxdWlyZShcIi4vcmVwb3J0ZXJcIik7XG52YXIgYnJvd3NlckRldGVjdG9yICAgICAgICAgPSByZXF1aXJlKFwiLi9icm93c2VyLWRldGVjdG9yXCIpO1xudmFyIGJhdGNoUHJvY2Vzc29yTWFrZXIgICAgID0gcmVxdWlyZShcImJhdGNoLXByb2Nlc3NvclwiKTtcbnZhciBzdGF0ZUhhbmRsZXIgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3N0YXRlLWhhbmRsZXJcIik7XG5cbi8vRGV0ZWN0aW9uIHN0cmF0ZWdpZXMuXG52YXIgb2JqZWN0U3RyYXRlZ3lNYWtlciAgICAgPSByZXF1aXJlKFwiLi9kZXRlY3Rpb24tc3RyYXRlZ3kvb2JqZWN0LmpzXCIpO1xudmFyIHNjcm9sbFN0cmF0ZWd5TWFrZXIgICAgID0gcmVxdWlyZShcIi4vZGV0ZWN0aW9uLXN0cmF0ZWd5L3Njcm9sbC5qc1wiKTtcblxuZnVuY3Rpb24gaXNDb2xsZWN0aW9uKG9iaikge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KG9iaikgfHwgb2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KGNvbGxlY3Rpb24pIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgIGZvckVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgYXJyYXkucHVzaChvYmopO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIGlkSGFuZGxlclxuICogQHR5cGUge29iamVjdH1cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldCBHZXRzIHRoZSByZXNpemUgZGV0ZWN0b3IgaWQgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBzZXQgR2VuZXJhdGUgYW5kIHNldHMgdGhlIHJlc2l6ZSBkZXRlY3RvciBpZCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIE9wdGlvbnNcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNhbGxPbkFkZCAgICBEZXRlcm1pbmVzIGlmIGxpc3RlbmVycyBzaG91bGQgYmUgY2FsbGVkIHdoZW4gdGhleSBhcmUgZ2V0dGluZyBhZGRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgdHJ1ZS4gSWYgdHJ1ZSwgdGhlIGxpc3RlbmVyIGlzIGd1YXJhbnRlZWQgdG8gYmUgY2FsbGVkIHdoZW4gaXQgaGFzIGJlZW4gYWRkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBmYWxzZSwgdGhlIGxpc3RlbmVyIHdpbGwgbm90IGJlIGd1YXJlbnRlZWQgdG8gYmUgY2FsbGVkIHdoZW4gaXQgaGFzIGJlZW4gYWRkZWQgKGRvZXMgbm90IHByZXZlbnQgaXQgZnJvbSBiZWluZyBjYWxsZWQpLlxuICogQHByb3BlcnR5IHtpZEhhbmRsZXJ9IGlkSGFuZGxlciAgQSBjdXN0b20gaWQgaGFuZGxlciB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nLCBzZXR0aW5nIGFuZCByZXRyaWV2aW5nIGlkJ3MgZm9yIGVsZW1lbnRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm90IHByb3ZpZGVkLCBhIGRlZmF1bHQgaWQgaGFuZGxlciB3aWxsIGJlIHVzZWQuXG4gKiBAcHJvcGVydHkge3JlcG9ydGVyfSByZXBvcnRlciAgICBBIGN1c3RvbSByZXBvcnRlciB0aGF0IGhhbmRsZXMgcmVwb3J0aW5nIGxvZ3MsIHdhcm5pbmdzIGFuZCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3QgcHJvdmlkZWQsIGEgZGVmYXVsdCBpZCBoYW5kbGVyIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHNldCB0byBmYWxzZSwgdGhlbiBub3RoaW5nIHdpbGwgYmUgcmVwb3J0ZWQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGRlYnVnICAgICAgICBJZiBzZXQgdG8gdHJ1ZSwgdGhlIHRoZSBzeXN0ZW0gd2lsbCByZXBvcnQgZGVidWcgbWVzc2FnZXMgYXMgZGVmYXVsdCBmb3IgdGhlIGxpc3RlblRvIG1ldGhvZC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gZWxlbWVudCByZXNpemUgZGV0ZWN0b3IgaW5zdGFuY2UuXG4gKiBAcHVibGljXG4gKiBAcGFyYW0ge09wdGlvbnM/fSBvcHRpb25zIE9wdGlvbmFsIGdsb2JhbCBvcHRpb25zIG9iamVjdCB0aGF0IHdpbGwgZGVjaWRlIGhvdyB0aGlzIGluc3RhbmNlIHdpbGwgd29yay5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvL2lkSGFuZGxlciBpcyBjdXJyZW50bHkgbm90IGFuIG9wdGlvbiB0byB0aGUgbGlzdGVuVG8gZnVuY3Rpb24sIHNvIGl0IHNob3VsZCBub3QgYmUgYWRkZWQgdG8gZ2xvYmFsT3B0aW9ucy5cbiAgICB2YXIgaWRIYW5kbGVyO1xuXG4gICAgaWYgKG9wdGlvbnMuaWRIYW5kbGVyKSB7XG4gICAgICAgIC8vIFRvIG1haW50YWluIGNvbXBhdGFiaWxpdHkgd2l0aCBpZEhhbmRsZXIuZ2V0KGVsZW1lbnQsIHJlYWRvbmx5KSwgbWFrZSBzdXJlIHRvIHdyYXAgdGhlIGdpdmVuIGlkSGFuZGxlclxuICAgICAgICAvLyBzbyB0aGF0IHJlYWRvbmx5IGZsYWcgYWx3YXlzIGlzIHRydWUgd2hlbiBpdCdzIHVzZWQgaGVyZS4gVGhpcyBtYXkgYmUgcmVtb3ZlZCBuZXh0IG1ham9yIHZlcnNpb24gYnVtcC5cbiAgICAgICAgaWRIYW5kbGVyID0ge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoZWxlbWVudCkgeyByZXR1cm4gb3B0aW9ucy5pZEhhbmRsZXIuZ2V0KGVsZW1lbnQsIHRydWUpOyB9LFxuICAgICAgICAgICAgc2V0OiBvcHRpb25zLmlkSGFuZGxlci5zZXRcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaWRHZW5lcmF0b3IgPSBpZEdlbmVyYXRvck1ha2VyKCk7XG4gICAgICAgIHZhciBkZWZhdWx0SWRIYW5kbGVyID0gaWRIYW5kbGVyTWFrZXIoe1xuICAgICAgICAgICAgaWRHZW5lcmF0b3I6IGlkR2VuZXJhdG9yLFxuICAgICAgICAgICAgc3RhdGVIYW5kbGVyOiBzdGF0ZUhhbmRsZXJcbiAgICAgICAgfSk7XG4gICAgICAgIGlkSGFuZGxlciA9IGRlZmF1bHRJZEhhbmRsZXI7XG4gICAgfVxuXG4gICAgLy9yZXBvcnRlciBpcyBjdXJyZW50bHkgbm90IGFuIG9wdGlvbiB0byB0aGUgbGlzdGVuVG8gZnVuY3Rpb24sIHNvIGl0IHNob3VsZCBub3QgYmUgYWRkZWQgdG8gZ2xvYmFsT3B0aW9ucy5cbiAgICB2YXIgcmVwb3J0ZXIgPSBvcHRpb25zLnJlcG9ydGVyO1xuXG4gICAgaWYoIXJlcG9ydGVyKSB7XG4gICAgICAgIC8vSWYgb3B0aW9ucy5yZXBvcnRlciBpcyBmYWxzZSwgdGhlbiB0aGUgcmVwb3J0ZXIgc2hvdWxkIGJlIHF1aWV0LlxuICAgICAgICB2YXIgcXVpZXQgPSByZXBvcnRlciA9PT0gZmFsc2U7XG4gICAgICAgIHJlcG9ydGVyID0gcmVwb3J0ZXJNYWtlcihxdWlldCk7XG4gICAgfVxuXG4gICAgLy9iYXRjaFByb2Nlc3NvciBpcyBjdXJyZW50bHkgbm90IGFuIG9wdGlvbiB0byB0aGUgbGlzdGVuVG8gZnVuY3Rpb24sIHNvIGl0IHNob3VsZCBub3QgYmUgYWRkZWQgdG8gZ2xvYmFsT3B0aW9ucy5cbiAgICB2YXIgYmF0Y2hQcm9jZXNzb3IgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJiYXRjaFByb2Nlc3NvclwiLCBiYXRjaFByb2Nlc3Nvck1ha2VyKHsgcmVwb3J0ZXI6IHJlcG9ydGVyIH0pKTtcblxuICAgIC8vT3B0aW9ucyB0byBiZSB1c2VkIGFzIGRlZmF1bHQgZm9yIHRoZSBsaXN0ZW5UbyBmdW5jdGlvbi5cbiAgICB2YXIgZ2xvYmFsT3B0aW9ucyA9IHt9O1xuICAgIGdsb2JhbE9wdGlvbnMuY2FsbE9uQWRkICAgICA9ICEhZ2V0T3B0aW9uKG9wdGlvbnMsIFwiY2FsbE9uQWRkXCIsIHRydWUpO1xuICAgIGdsb2JhbE9wdGlvbnMuZGVidWcgICAgICAgICA9ICEhZ2V0T3B0aW9uKG9wdGlvbnMsIFwiZGVidWdcIiwgZmFsc2UpO1xuXG4gICAgdmFyIGV2ZW50TGlzdGVuZXJIYW5kbGVyICAgID0gbGlzdGVuZXJIYW5kbGVyTWFrZXIoaWRIYW5kbGVyKTtcbiAgICB2YXIgZWxlbWVudFV0aWxzICAgICAgICAgICAgPSBlbGVtZW50VXRpbHNNYWtlcih7XG4gICAgICAgIHN0YXRlSGFuZGxlcjogc3RhdGVIYW5kbGVyXG4gICAgfSk7XG5cbiAgICAvL1RoZSBkZXRlY3Rpb24gc3RyYXRlZ3kgdG8gYmUgdXNlZC5cbiAgICB2YXIgZGV0ZWN0aW9uU3RyYXRlZ3k7XG4gICAgdmFyIGRlc2lyZWRTdHJhdGVneSA9IGdldE9wdGlvbihvcHRpb25zLCBcInN0cmF0ZWd5XCIsIFwib2JqZWN0XCIpO1xuICAgIHZhciBpbXBvcnRhbnRDc3NSdWxlcyA9IGdldE9wdGlvbihvcHRpb25zLCBcImltcG9ydGFudFwiLCBmYWxzZSk7XG4gICAgdmFyIHN0cmF0ZWd5T3B0aW9ucyA9IHtcbiAgICAgICAgcmVwb3J0ZXI6IHJlcG9ydGVyLFxuICAgICAgICBiYXRjaFByb2Nlc3NvcjogYmF0Y2hQcm9jZXNzb3IsXG4gICAgICAgIHN0YXRlSGFuZGxlcjogc3RhdGVIYW5kbGVyLFxuICAgICAgICBpZEhhbmRsZXI6IGlkSGFuZGxlcixcbiAgICAgICAgaW1wb3J0YW50OiBpbXBvcnRhbnRDc3NSdWxlc1xuICAgIH07XG5cbiAgICBpZihkZXNpcmVkU3RyYXRlZ3kgPT09IFwic2Nyb2xsXCIpIHtcbiAgICAgICAgaWYgKGJyb3dzZXJEZXRlY3Rvci5pc0xlZ2FjeU9wZXJhKCkpIHtcbiAgICAgICAgICAgIHJlcG9ydGVyLndhcm4oXCJTY3JvbGwgc3RyYXRlZ3kgaXMgbm90IHN1cHBvcnRlZCBvbiBsZWdhY3kgT3BlcmEuIENoYW5naW5nIHRvIG9iamVjdCBzdHJhdGVneS5cIik7XG4gICAgICAgICAgICBkZXNpcmVkU3RyYXRlZ3kgPSBcIm9iamVjdFwiO1xuICAgICAgICB9IGVsc2UgaWYgKGJyb3dzZXJEZXRlY3Rvci5pc0lFKDkpKSB7XG4gICAgICAgICAgICByZXBvcnRlci53YXJuKFwiU2Nyb2xsIHN0cmF0ZWd5IGlzIG5vdCBzdXBwb3J0ZWQgb24gSUU5LiBDaGFuZ2luZyB0byBvYmplY3Qgc3RyYXRlZ3kuXCIpO1xuICAgICAgICAgICAgZGVzaXJlZFN0cmF0ZWd5ID0gXCJvYmplY3RcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmKGRlc2lyZWRTdHJhdGVneSA9PT0gXCJzY3JvbGxcIikge1xuICAgICAgICBkZXRlY3Rpb25TdHJhdGVneSA9IHNjcm9sbFN0cmF0ZWd5TWFrZXIoc3RyYXRlZ3lPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYoZGVzaXJlZFN0cmF0ZWd5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGRldGVjdGlvblN0cmF0ZWd5ID0gb2JqZWN0U3RyYXRlZ3lNYWtlcihzdHJhdGVneU9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RyYXRlZ3kgbmFtZTogXCIgKyBkZXNpcmVkU3RyYXRlZ3kpO1xuICAgIH1cblxuICAgIC8vQ2FsbHMgY2FuIGJlIG1hZGUgdG8gbGlzdGVuVG8gd2l0aCBlbGVtZW50cyB0aGF0IGFyZSBzdGlsbCBiZWluZyBpbnN0YWxsZWQuXG4gICAgLy9BbHNvLCBzYW1lIGVsZW1lbnRzIGNhbiBvY2N1ciBpbiB0aGUgZWxlbWVudHMgbGlzdCBpbiB0aGUgbGlzdGVuVG8gZnVuY3Rpb24uXG4gICAgLy9XaXRoIHRoaXMgbWFwLCB0aGUgcmVhZHkgY2FsbGJhY2tzIGNhbiBiZSBzeW5jaHJvbml6ZWQgYmV0d2VlbiB0aGUgY2FsbHNcbiAgICAvL3NvIHRoYXQgdGhlIHJlYWR5IGNhbGxiYWNrIGNhbiBhbHdheXMgYmUgY2FsbGVkIHdoZW4gYW4gZWxlbWVudCBpcyByZWFkeSAtIGV2ZW4gaWZcbiAgICAvL2l0IHdhc24ndCBpbnN0YWxsZWQgZnJvbSB0aGUgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHZhciBvblJlYWR5Q2FsbGJhY2tzID0ge307XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgZ2l2ZW4gZWxlbWVudHMgcmVzaXplLWRldGVjdGFibGUgYW5kIHN0YXJ0cyBsaXN0ZW5pbmcgdG8gcmVzaXplIGV2ZW50cyBvbiB0aGUgZWxlbWVudHMuIENhbGxzIHRoZSBldmVudCBjYWxsYmFjayBmb3IgZWFjaCBldmVudCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge09wdGlvbnM/fSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0LiBUaGVzZSBvcHRpb25zIHdpbGwgb3ZlcnJpZGUgdGhlIGdsb2JhbCBvcHRpb25zLiBTb21lIG9wdGlvbnMgbWF5IG5vdCBiZSBvdmVycmlkZW4sIHN1Y2ggYXMgaWRIYW5kbGVyLlxuICAgICAqIEBwYXJhbSB7ZWxlbWVudFtdfGVsZW1lbnR9IGVsZW1lbnRzIFRoZSBnaXZlbiBhcnJheSBvZiBlbGVtZW50cyB0byBkZXRlY3QgcmVzaXplIGV2ZW50cyBvZi4gU2luZ2xlIGVsZW1lbnQgaXMgYWxzbyB2YWxpZC5cbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgZm9yIGVhY2ggcmVzaXplIGV2ZW50IGZvciBlYWNoIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdGVuVG8ob3B0aW9ucywgZWxlbWVudHMsIGxpc3RlbmVyKSB7XG4gICAgICAgIGZ1bmN0aW9uIG9uUmVzaXplQ2FsbGJhY2soZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGV2ZW50TGlzdGVuZXJIYW5kbGVyLmdldChlbGVtZW50KTtcbiAgICAgICAgICAgIGZvckVhY2gobGlzdGVuZXJzLCBmdW5jdGlvbiBjYWxsTGlzdGVuZXJQcm94eShsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihjYWxsT25BZGQsIGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBldmVudExpc3RlbmVySGFuZGxlci5hZGQoZWxlbWVudCwgbGlzdGVuZXIpO1xuXG4gICAgICAgICAgICBpZihjYWxsT25BZGQpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcihlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vT3B0aW9ucyBvYmplY3QgbWF5IGJlIG9taXR0ZWQuXG4gICAgICAgIGlmKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgbGlzdGVuZXIgPSBlbGVtZW50cztcbiAgICAgICAgICAgIGVsZW1lbnRzID0gb3B0aW9ucztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCFlbGVtZW50cykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXQgbGVhc3Qgb25lIGVsZW1lbnQgcmVxdWlyZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMaXN0ZW5lciByZXF1aXJlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFbGVtZW50KGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgLy8gQSBzaW5nbGUgZWxlbWVudCBoYXMgYmVlbiBwYXNzZWQgaW4uXG4gICAgICAgICAgICBlbGVtZW50cyA9IFtlbGVtZW50c107XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDb2xsZWN0aW9uKGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBjb2xsZWN0aW9uIHRvIGFycmF5IGZvciBwbHVnaW5zLlxuICAgICAgICAgICAgLy8gVE9ETzogTWF5IHdhbnQgdG8gY2hlY2sgc28gdGhhdCBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBjb2xsZWN0aW9uIGFyZSB2YWxpZCBlbGVtZW50cy5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gdG9BcnJheShlbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cy4gTXVzdCBiZSBhIERPTSBlbGVtZW50IG9yIGEgY29sbGVjdGlvbiBvZiBET00gZWxlbWVudHMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVsZW1lbnRzUmVhZHkgPSAwO1xuXG4gICAgICAgIHZhciBjYWxsT25BZGQgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJjYWxsT25BZGRcIiwgZ2xvYmFsT3B0aW9ucy5jYWxsT25BZGQpO1xuICAgICAgICB2YXIgb25SZWFkeUNhbGxiYWNrID0gZ2V0T3B0aW9uKG9wdGlvbnMsIFwib25SZWFkeVwiLCBmdW5jdGlvbiBub29wKCkge30pO1xuICAgICAgICB2YXIgZGVidWcgPSBnZXRPcHRpb24ob3B0aW9ucywgXCJkZWJ1Z1wiLCBnbG9iYWxPcHRpb25zLmRlYnVnKTtcblxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRzLCBmdW5jdGlvbiBhdHRhY2hMaXN0ZW5lclRvRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlSGFuZGxlci5nZXRTdGF0ZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIHN0YXRlSGFuZGxlci5pbml0U3RhdGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWRIYW5kbGVyLnNldChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlkID0gaWRIYW5kbGVyLmdldChlbGVtZW50KTtcblxuICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKFwiQXR0YWNoaW5nIGxpc3RlbmVyIHRvIGVsZW1lbnRcIiwgaWQsIGVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZighZWxlbWVudFV0aWxzLmlzRGV0ZWN0YWJsZShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGRlYnVnICYmIHJlcG9ydGVyLmxvZyhpZCwgXCJOb3QgZGV0ZWN0YWJsZS5cIik7XG4gICAgICAgICAgICAgICAgaWYoZWxlbWVudFV0aWxzLmlzQnVzeShlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICBkZWJ1ZyAmJiByZXBvcnRlci5sb2coaWQsIFwiU3lzdGVtIGJ1c3kgbWFraW5nIGl0IGRldGVjdGFibGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9UaGUgZWxlbWVudCBpcyBiZWluZyBwcmVwYXJlZCB0byBiZSBkZXRlY3RhYmxlLiBEbyBub3QgbWFrZSBpdCBkZXRlY3RhYmxlLlxuICAgICAgICAgICAgICAgICAgICAvL0p1c3QgYWRkIHRoZSBsaXN0ZW5lciwgYmVjYXVzZSB0aGUgZWxlbWVudCB3aWxsIHNvb24gYmUgZGV0ZWN0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoY2FsbE9uQWRkLCBlbGVtZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIG9uUmVhZHlDYWxsYmFja3NbaWRdID0gb25SZWFkeUNhbGxiYWNrc1tpZF0gfHwgW107XG4gICAgICAgICAgICAgICAgICAgIG9uUmVhZHlDYWxsYmFja3NbaWRdLnB1c2goZnVuY3Rpb24gb25SZWFkeSgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzUmVhZHkrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudHNSZWFkeSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIk1ha2luZyBkZXRlY3RhYmxlLi4uXCIpO1xuICAgICAgICAgICAgICAgIC8vVGhlIGVsZW1lbnQgaXMgbm90IHByZXBhcmVkIHRvIGJlIGRldGVjdGFibGUsIHNvIGRvIHByZXBhcmUgaXQgYW5kIGFkZCBhIGxpc3RlbmVyIHRvIGl0LlxuICAgICAgICAgICAgICAgIGVsZW1lbnRVdGlscy5tYXJrQnVzeShlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGV0ZWN0aW9uU3RyYXRlZ3kubWFrZURldGVjdGFibGUoeyBkZWJ1ZzogZGVidWcsIGltcG9ydGFudDogaW1wb3J0YW50Q3NzUnVsZXMgfSwgZWxlbWVudCwgZnVuY3Rpb24gb25FbGVtZW50RGV0ZWN0YWJsZShlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlYnVnICYmIHJlcG9ydGVyLmxvZyhpZCwgXCJvbkVsZW1lbnREZXRlY3RhYmxlXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZUhhbmRsZXIuZ2V0U3RhdGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRVdGlscy5tYXJrQXNEZXRlY3RhYmxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFV0aWxzLm1hcmtCdXN5KGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGlvblN0cmF0ZWd5LmFkZExpc3RlbmVyKGVsZW1lbnQsIG9uUmVzaXplQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkTGlzdGVuZXIoY2FsbE9uQWRkLCBlbGVtZW50LCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBlbGVtZW50IHNpemUgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNpbmNlIHRoZSBjYWxsIHRvIFwibGlzdGVuVG9cIiwgd2UgbmVlZCB0byBjaGVjayBmb3IgdGhpcyBjaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB0aGF0IGEgcmVzaXplIGV2ZW50IG1heSBiZSBlbWl0dGVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGF2aW5nIHRoZSBzdGFydFNpemUgb2JqZWN0IGlzIG9wdGlvbmFsIChzaW5jZSBpdCBkb2VzIG5vdCBtYWtlIHNlbnNlIGluIHNvbWUgY2FzZXMgc3VjaCBhcyB1bnJlbmRlcmVkIGVsZW1lbnRzKSwgc28gY2hlY2sgZm9yIGl0cyBleGlzdGFuY2UgYmVmb3JlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxzbywgY2hlY2sgdGhlIHN0YXRlIGV4aXN0YW5jZSBiZWZvcmUgc2luY2UgdGhlIGVsZW1lbnQgbWF5IGhhdmUgYmVlbiB1bmluc3RhbGxlZCBpbiB0aGUgaW5zdGFsbGF0aW9uIHByb2Nlc3MuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZUhhbmRsZXIuZ2V0U3RhdGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUuc3RhcnRTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLnN0YXJ0U2l6ZS53aWR0aCAhPT0gd2lkdGggfHwgc3RhdGUuc3RhcnRTaXplLmhlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVzaXplQ2FsbGJhY2soZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihvblJlYWR5Q2FsbGJhY2tzW2lkXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvckVhY2gob25SZWFkeUNhbGxiYWNrc1tpZF0sIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZWxlbWVudCBoYXMgYmVlbiB1bmlzbnRhbGxlZCBiZWZvcmUgYmVpbmcgZGV0ZWN0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnICYmIHJlcG9ydGVyLmxvZyhpZCwgXCJFbGVtZW50IHVuaW5zdGFsbGVkIGJlZm9yZSBiZWluZyBkZXRlY3RhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvblJlYWR5Q2FsbGJhY2tzW2lkXTtcblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1JlYWR5Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnRzUmVhZHkgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVidWcgJiYgcmVwb3J0ZXIubG9nKGlkLCBcIkFscmVhZHkgZGV0ZWNhYmxlLCBhZGRpbmcgbGlzdGVuZXIuXCIpO1xuXG4gICAgICAgICAgICAvL1RoZSBlbGVtZW50IGhhcyBiZWVuIHByZXBhcmVkIHRvIGJlIGRldGVjdGFibGUgYW5kIGlzIHJlYWR5IHRvIGJlIGxpc3RlbmVkIHRvLlxuICAgICAgICAgICAgYWRkTGlzdGVuZXIoY2FsbE9uQWRkLCBlbGVtZW50LCBsaXN0ZW5lcik7XG4gICAgICAgICAgICBlbGVtZW50c1JlYWR5Kys7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmKGVsZW1lbnRzUmVhZHkgPT09IGVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgb25SZWFkeUNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bmluc3RhbGwoZWxlbWVudHMpIHtcbiAgICAgICAgaWYoIWVsZW1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoXCJBdCBsZWFzdCBvbmUgZWxlbWVudCBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNFbGVtZW50KGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgLy8gQSBzaW5nbGUgZWxlbWVudCBoYXMgYmVlbiBwYXNzZWQgaW4uXG4gICAgICAgICAgICBlbGVtZW50cyA9IFtlbGVtZW50c107XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDb2xsZWN0aW9uKGVsZW1lbnRzKSkge1xuICAgICAgICAgICAgLy8gQ29udmVydCBjb2xsZWN0aW9uIHRvIGFycmF5IGZvciBwbHVnaW5zLlxuICAgICAgICAgICAgLy8gVE9ETzogTWF5IHdhbnQgdG8gY2hlY2sgc28gdGhhdCBhbGwgdGhlIGVsZW1lbnRzIGluIHRoZSBjb2xsZWN0aW9uIGFyZSB2YWxpZCBlbGVtZW50cy5cbiAgICAgICAgICAgIGVsZW1lbnRzID0gdG9BcnJheShlbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIuZXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cy4gTXVzdCBiZSBhIERPTSBlbGVtZW50IG9yIGEgY29sbGVjdGlvbiBvZiBET00gZWxlbWVudHMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChlbGVtZW50cywgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJIYW5kbGVyLnJlbW92ZUFsbExpc3RlbmVycyhlbGVtZW50KTtcbiAgICAgICAgICAgIGRldGVjdGlvblN0cmF0ZWd5LnVuaW5zdGFsbChlbGVtZW50KTtcbiAgICAgICAgICAgIHN0YXRlSGFuZGxlci5jbGVhblN0YXRlKGVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0RG9jdW1lbnQodGFyZ2V0RG9jdW1lbnQpIHtcbiAgICAgICAgZGV0ZWN0aW9uU3RyYXRlZ3kuaW5pdERvY3VtZW50ICYmIGRldGVjdGlvblN0cmF0ZWd5LmluaXREb2N1bWVudCh0YXJnZXREb2N1bWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGlzdGVuVG86IGxpc3RlblRvLFxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogZXZlbnRMaXN0ZW5lckhhbmRsZXIucmVtb3ZlTGlzdGVuZXIsXG4gICAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogZXZlbnRMaXN0ZW5lckhhbmRsZXIucmVtb3ZlQWxsTGlzdGVuZXJzLFxuICAgICAgICB1bmluc3RhbGw6IHVuaW5zdGFsbCxcbiAgICAgICAgaW5pdERvY3VtZW50OiBpbml0RG9jdW1lbnRcbiAgICB9O1xufTtcblxuZnVuY3Rpb24gZ2V0T3B0aW9uKG9wdGlvbnMsIG5hbWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbbmFtZV07XG5cbiAgICBpZigodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiYgZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGdldFN0YXRlID0gb3B0aW9ucy5zdGF0ZUhhbmRsZXIuZ2V0U3RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBUZWxscyBpZiB0aGUgZWxlbWVudCBoYXMgYmVlbiBtYWRlIGRldGVjdGFibGUgYW5kIHJlYWR5IHRvIGJlIGxpc3RlbmVkIGZvciByZXNpemUgZXZlbnRzLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBkZXRlY3RhYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlICYmICEhc3RhdGUuaXNEZXRlY3RhYmxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBlbGVtZW50IHRoYXQgaXQgaGFzIGJlZW4gbWFkZSBkZXRlY3RhYmxlIGFuZCByZWFkeSB0byBiZSBsaXN0ZW5lZCBmb3IgcmVzaXplIGV2ZW50cy5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcmtBc0RldGVjdGFibGUoZWxlbWVudCkge1xuICAgICAgICBnZXRTdGF0ZShlbGVtZW50KS5pc0RldGVjdGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlbGxzIGlmIHRoZSBlbGVtZW50IGlzIGJ1c3kgb3Igbm90LlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IFRoZSBlbGVtZW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIG9yIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0J1c3koZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gISFnZXRTdGF0ZShlbGVtZW50KS5idXN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmtzIHRoZSBvYmplY3QgaXMgYnVzeSBhbmQgc2hvdWxkIG5vdCBiZSBtYWRlIGRldGVjdGFibGUuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBtYXJrLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYnVzeSBJZiB0aGUgZWxlbWVudCBpcyBidXN5IG9yIG5vdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXJrQnVzeShlbGVtZW50LCBidXN5KSB7XG4gICAgICAgIGdldFN0YXRlKGVsZW1lbnQpLmJ1c3kgPSAhIWJ1c3k7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNEZXRlY3RhYmxlOiBpc0RldGVjdGFibGUsXG4gICAgICAgIG1hcmtBc0RldGVjdGFibGU6IG1hcmtBc0RldGVjdGFibGUsXG4gICAgICAgIGlzQnVzeTogaXNCdXN5LFxuICAgICAgICBtYXJrQnVzeTogbWFya0J1c3lcbiAgICB9O1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZENvdW50ID0gMTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG5ldyB1bmlxdWUgaWQgaW4gdGhlIGNvbnRleHQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IEEgdW5pcXVlIGlkIGluIHRoZSBjb250ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuICAgICAgICByZXR1cm4gaWRDb3VudCsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdlbmVyYXRlOiBnZW5lcmF0ZVxuICAgIH07XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBpZEdlbmVyYXRvciAgICAgPSBvcHRpb25zLmlkR2VuZXJhdG9yO1xuICAgIHZhciBnZXRTdGF0ZSAgICAgICAgPSBvcHRpb25zLnN0YXRlSGFuZGxlci5nZXRTdGF0ZTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlc2l6ZSBkZXRlY3RvciBpZCBvZiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSB0YXJnZXQgZWxlbWVudCB0byBnZXQgdGhlIGlkIG9mLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVtYmVyfG51bGx9IFRoZSBpZCBvZiB0aGUgZWxlbWVudC4gTnVsbCBpZiBpdCBoYXMgbm8gaWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SWQoZWxlbWVudCkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZShlbGVtZW50KTtcblxuICAgICAgICBpZiAoc3RhdGUgJiYgc3RhdGUuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVzaXplIGRldGVjdG9yIGlkIG9mIHRoZSBlbGVtZW50LiBSZXF1aXJlcyB0aGUgZWxlbWVudCB0byBoYXZlIGEgcmVzaXplIGRldGVjdG9yIHN0YXRlIGluaXRpYWxpemVkLlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAcGFyYW0ge2VsZW1lbnR9IGVsZW1lbnQgVGhlIHRhcmdldCBlbGVtZW50IHRvIHNldCB0aGUgaWQgb2YuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xudW1iZXJ8bnVsbH0gVGhlIGlkIG9mIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldElkKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKCFzdGF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2V0SWQgcmVxdWlyZWQgdGhlIGVsZW1lbnQgdG8gaGF2ZSBhIHJlc2l6ZSBkZXRlY3Rpb24gc3RhdGUuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlkID0gaWRHZW5lcmF0b3IuZ2VuZXJhdGUoKTtcblxuICAgICAgICBzdGF0ZS5pZCA9IGlkO1xuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6IGdldElkLFxuICAgICAgICBzZXQ6IHNldElkXG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpZEhhbmRsZXIpIHtcbiAgICB2YXIgZXZlbnRMaXN0ZW5lcnMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBwYXJhbSB7ZWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBnZXQgYWxsIGxpc3RlbmVycyBmb3IuXG4gICAgICogQHJldHVybnMgQWxsIGxpc3RlbmVycyBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlkID0gaWRIYW5kbGVyLmdldChlbGVtZW50KTtcblxuICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50TGlzdGVuZXJzW2lkXSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9yZXMgdGhlIGdpdmVuIGxpc3RlbmVyIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC4gV2lsbCBub3QgYWN0dWFsbHkgYWRkIHRoZSBsaXN0ZW5lciB0byB0aGUgZWxlbWVudC5cbiAgICAgKiBAcHVibGljXG4gICAgICogQHBhcmFtIHtlbGVtZW50fSBlbGVtZW50IFRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGhhdmUgdGhlIGxpc3RlbmVyIGFkZGVkLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBjYWxsYmFjayB0aGF0IHRoZSBlbGVtZW50IGhhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRMaXN0ZW5lcihlbGVtZW50LCBsaXN0ZW5lcikge1xuICAgICAgICB2YXIgaWQgPSBpZEhhbmRsZXIuZ2V0KGVsZW1lbnQpO1xuXG4gICAgICAgIGlmKCFldmVudExpc3RlbmVyc1tpZF0pIHtcbiAgICAgICAgICAgIGV2ZW50TGlzdGVuZXJzW2lkXSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnRMaXN0ZW5lcnNbaWRdLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnMoZWxlbWVudCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKGVsZW1lbnQpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBnZXRMaXN0ZW5lcnMoZWxlbWVudCk7XG4gICAgICBpZiAoIWxpc3RlbmVycykgeyByZXR1cm47IH1cbiAgICAgIGxpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGdldDogZ2V0TGlzdGVuZXJzLFxuICAgICAgICBhZGQ6IGFkZExpc3RlbmVyLFxuICAgICAgICByZW1vdmVMaXN0ZW5lcjogcmVtb3ZlTGlzdGVuZXIsXG4gICAgICAgIHJlbW92ZUFsbExpc3RlbmVyczogcmVtb3ZlQWxsTGlzdGVuZXJzXG4gICAgfTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZ2xvYmFsIGNvbnNvbGU6IGZhbHNlICovXG5cbi8qKlxuICogUmVwb3J0ZXIgdGhhdCBoYW5kbGVzIHRoZSByZXBvcnRpbmcgb2YgbG9ncywgd2FybmluZ3MgYW5kIGVycm9ycy5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gcXVpZXQgVGVsbHMgaWYgdGhlIHJlcG9ydGVyIHNob3VsZCBiZSBxdWlldCBvciBub3QuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXVpZXQpIHtcbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgICAvL0RvZXMgbm90aGluZy5cbiAgICB9XG5cbiAgICB2YXIgcmVwb3J0ZXIgPSB7XG4gICAgICAgIGxvZzogbm9vcCxcbiAgICAgICAgd2Fybjogbm9vcCxcbiAgICAgICAgZXJyb3I6IG5vb3BcbiAgICB9O1xuXG4gICAgaWYoIXF1aWV0ICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgICAgIHZhciBhdHRhY2hGdW5jdGlvbiA9IGZ1bmN0aW9uKHJlcG9ydGVyLCBuYW1lKSB7XG4gICAgICAgICAgICAvL1RoZSBwcm94eSBpcyBuZWVkZWQgdG8gYmUgYWJsZSB0byBjYWxsIHRoZSBtZXRob2Qgd2l0aCB0aGUgY29uc29sZSBjb250ZXh0LFxuICAgICAgICAgICAgLy9zaW5jZSB3ZSBjYW5ub3QgdXNlIGJpbmQuXG4gICAgICAgICAgICByZXBvcnRlcltuYW1lXSA9IGZ1bmN0aW9uIHJlcG9ydGVyUHJveHkoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGYgPSBjb25zb2xlW25hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChmLmFwcGx5KSB7IC8vSUU5IGRvZXMgbm90IHN1cHBvcnQgY29uc29sZS5sb2cuYXBwbHkgOilcbiAgICAgICAgICAgICAgICAgICAgZi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmKGFyZ3VtZW50c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIGF0dGFjaEZ1bmN0aW9uKHJlcG9ydGVyLCBcImxvZ1wiKTtcbiAgICAgICAgYXR0YWNoRnVuY3Rpb24ocmVwb3J0ZXIsIFwid2FyblwiKTtcbiAgICAgICAgYXR0YWNoRnVuY3Rpb24ocmVwb3J0ZXIsIFwiZXJyb3JcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcG9ydGVyO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHByb3AgPSBcIl9lcmRcIjtcblxuZnVuY3Rpb24gaW5pdFN0YXRlKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50W3Byb3BdID0ge307XG4gICAgcmV0dXJuIGdldFN0YXRlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZShlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnRbcHJvcF07XG59XG5cbmZ1bmN0aW9uIGNsZWFuU3RhdGUoZWxlbWVudCkge1xuICAgIGRlbGV0ZSBlbGVtZW50W3Byb3BdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0U3RhdGU6IGluaXRTdGF0ZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgY2xlYW5TdGF0ZTogY2xlYW5TdGF0ZVxufTtcbiIsIiFmdW5jdGlvbih0LGkpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWkoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwibmlwcGxlanNcIixbXSxpKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLm5pcHBsZWpzPWkoKTp0Lm5pcHBsZWpzPWkoKX0od2luZG93LGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBpPXt9O2Z1bmN0aW9uIGUobyl7aWYoaVtvXSlyZXR1cm4gaVtvXS5leHBvcnRzO3ZhciBuPWlbb109e2k6byxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W29dLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLGUpLG4ubD0hMCxuLmV4cG9ydHN9cmV0dXJuIGUubT10LGUuYz1pLGUuZD1mdW5jdGlvbih0LGksbyl7ZS5vKHQsaSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sZS5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LGUudD1mdW5jdGlvbih0LGkpe2lmKDEmaSYmKHQ9ZSh0KSksOCZpKXJldHVybiB0O2lmKDQmaSYmXCJvYmplY3RcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGUucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTp0fSksMiZpJiZcInN0cmluZ1wiIT10eXBlb2YgdClmb3IodmFyIG4gaW4gdCllLmQobyxuLGZ1bmN0aW9uKGkpe3JldHVybiB0W2ldfS5iaW5kKG51bGwsbikpO3JldHVybiBvfSxlLm49ZnVuY3Rpb24odCl7dmFyIGk9dCYmdC5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIHQuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gdH07cmV0dXJuIGUuZChpLFwiYVwiLGkpLGl9LGUubz1mdW5jdGlvbih0LGkpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKX0sZS5wPVwiXCIsZShlLnM9MCl9KFtmdW5jdGlvbih0LGksZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5yKGkpO3ZhciBvLG49ZnVuY3Rpb24odCxpKXt2YXIgZT1pLngtdC54LG89aS55LXQueTtyZXR1cm4gTWF0aC5zcXJ0KGUqZStvKm8pfSxzPWZ1bmN0aW9uKHQpe3JldHVybiB0KihNYXRoLlBJLzE4MCl9LHI9ZnVuY3Rpb24odCl7cmV0dXJuIHQqKDE4MC9NYXRoLlBJKX0sZD1uZXcgTWFwLGE9ZnVuY3Rpb24odCl7ZC5oYXModCkmJmNsZWFyVGltZW91dChkLmdldCh0KSksZC5zZXQodCxzZXRUaW1lb3V0KHQsMTAwKSl9LHA9ZnVuY3Rpb24odCxpLGUpe2Zvcih2YXIgbyxuPWkuc3BsaXQoL1sgLF0rL2cpLHM9MDtzPG4ubGVuZ3RoO3MrPTEpbz1uW3NdLHQuYWRkRXZlbnRMaXN0ZW5lcj90LmFkZEV2ZW50TGlzdGVuZXIobyxlLCExKTp0LmF0dGFjaEV2ZW50JiZ0LmF0dGFjaEV2ZW50KG8sZSl9LGM9ZnVuY3Rpb24odCxpLGUpe2Zvcih2YXIgbyxuPWkuc3BsaXQoL1sgLF0rL2cpLHM9MDtzPG4ubGVuZ3RoO3MrPTEpbz1uW3NdLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcj90LnJlbW92ZUV2ZW50TGlzdGVuZXIobyxlKTp0LmRldGFjaEV2ZW50JiZ0LmRldGFjaEV2ZW50KG8sZSl9LGw9ZnVuY3Rpb24odCl7cmV0dXJuIHQucHJldmVudERlZmF1bHQoKSx0LnR5cGUubWF0Y2goL150b3VjaC8pP3QuY2hhbmdlZFRvdWNoZXM6dH0saD1mdW5jdGlvbigpe3JldHVybnt4OnZvaWQgMCE9PXdpbmRvdy5wYWdlWE9mZnNldD93aW5kb3cucGFnZVhPZmZzZXQ6KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudHx8ZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlfHxkb2N1bWVudC5ib2R5KS5zY3JvbGxMZWZ0LHk6dm9pZCAwIT09d2luZG93LnBhZ2VZT2Zmc2V0P3dpbmRvdy5wYWdlWU9mZnNldDooZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fHxkb2N1bWVudC5ib2R5LnBhcmVudE5vZGV8fGRvY3VtZW50LmJvZHkpLnNjcm9sbFRvcH19LHU9ZnVuY3Rpb24odCxpKXtpLnRvcHx8aS5yaWdodHx8aS5ib3R0b218fGkubGVmdD8odC5zdHlsZS50b3A9aS50b3AsdC5zdHlsZS5yaWdodD1pLnJpZ2h0LHQuc3R5bGUuYm90dG9tPWkuYm90dG9tLHQuc3R5bGUubGVmdD1pLmxlZnQpOih0LnN0eWxlLmxlZnQ9aS54K1wicHhcIix0LnN0eWxlLnRvcD1pLnkrXCJweFwiKX0sZj1mdW5jdGlvbih0LGksZSl7dmFyIG89eSh0KTtmb3IodmFyIG4gaW4gbylpZihvLmhhc093blByb3BlcnR5KG4pKWlmKFwic3RyaW5nXCI9PXR5cGVvZiBpKW9bbl09aStcIiBcIitlO2Vsc2V7Zm9yKHZhciBzPVwiXCIscj0wLGQ9aS5sZW5ndGg7cjxkO3IrPTEpcys9aVtyXStcIiBcIitlK1wiLCBcIjtvW25dPXMuc2xpY2UoMCwtMil9cmV0dXJuIG99LHk9ZnVuY3Rpb24odCl7dmFyIGk9e307aVt0XT1cIlwiO3JldHVybltcIndlYmtpdFwiLFwiTW96XCIsXCJvXCJdLmZvckVhY2goZnVuY3Rpb24oZSl7aVtlK3QuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKV09XCJcIn0pLGl9LG09ZnVuY3Rpb24odCxpKXtmb3IodmFyIGUgaW4gaSlpLmhhc093blByb3BlcnR5KGUpJiYodFtlXT1pW2VdKTtyZXR1cm4gdH0sdj1mdW5jdGlvbih0LGkpe2lmKHQubGVuZ3RoKWZvcih2YXIgZT0wLG89dC5sZW5ndGg7ZTxvO2UrPTEpaSh0W2VdKTtlbHNlIGkodCl9LGc9ISEoXCJvbnRvdWNoc3RhcnRcImluIHdpbmRvdyksYj0hIXdpbmRvdy5Qb2ludGVyRXZlbnQseD0hIXdpbmRvdy5NU1BvaW50ZXJFdmVudCxPPXtzdGFydDpcIm1vdXNlZG93blwiLG1vdmU6XCJtb3VzZW1vdmVcIixlbmQ6XCJtb3VzZXVwXCJ9LHc9e307ZnVuY3Rpb24gXygpe31iP289e3N0YXJ0OlwicG9pbnRlcmRvd25cIixtb3ZlOlwicG9pbnRlcm1vdmVcIixlbmQ6XCJwb2ludGVydXAsIHBvaW50ZXJjYW5jZWxcIn06eD9vPXtzdGFydDpcIk1TUG9pbnRlckRvd25cIixtb3ZlOlwiTVNQb2ludGVyTW92ZVwiLGVuZDpcIk1TUG9pbnRlclVwXCJ9Omc/KG89e3N0YXJ0OlwidG91Y2hzdGFydFwiLG1vdmU6XCJ0b3VjaG1vdmVcIixlbmQ6XCJ0b3VjaGVuZCwgdG91Y2hjYW5jZWxcIn0sdz1PKTpvPU8sXy5wcm90b3R5cGUub249ZnVuY3Rpb24odCxpKXt2YXIgZSxvPXQuc3BsaXQoL1sgLF0rL2cpO3RoaXMuX2hhbmRsZXJzXz10aGlzLl9oYW5kbGVyc198fHt9O2Zvcih2YXIgbj0wO248by5sZW5ndGg7bis9MSllPW9bbl0sdGhpcy5faGFuZGxlcnNfW2VdPXRoaXMuX2hhbmRsZXJzX1tlXXx8W10sdGhpcy5faGFuZGxlcnNfW2VdLnB1c2goaSk7cmV0dXJuIHRoaXN9LF8ucHJvdG90eXBlLm9mZj1mdW5jdGlvbih0LGkpe3JldHVybiB0aGlzLl9oYW5kbGVyc189dGhpcy5faGFuZGxlcnNffHx7fSx2b2lkIDA9PT10P3RoaXMuX2hhbmRsZXJzXz17fTp2b2lkIDA9PT1pP3RoaXMuX2hhbmRsZXJzX1t0XT1udWxsOnRoaXMuX2hhbmRsZXJzX1t0XSYmdGhpcy5faGFuZGxlcnNfW3RdLmluZGV4T2YoaSk+PTAmJnRoaXMuX2hhbmRsZXJzX1t0XS5zcGxpY2UodGhpcy5faGFuZGxlcnNfW3RdLmluZGV4T2YoaSksMSksdGhpc30sXy5wcm90b3R5cGUudHJpZ2dlcj1mdW5jdGlvbih0LGkpe3ZhciBlLG89dGhpcyxuPXQuc3BsaXQoL1sgLF0rL2cpO28uX2hhbmRsZXJzXz1vLl9oYW5kbGVyc198fHt9O2Zvcih2YXIgcz0wO3M8bi5sZW5ndGg7cys9MSllPW5bc10sby5faGFuZGxlcnNfW2VdJiZvLl9oYW5kbGVyc19bZV0ubGVuZ3RoJiZvLl9oYW5kbGVyc19bZV0uZm9yRWFjaChmdW5jdGlvbih0KXt0LmNhbGwobyx7dHlwZTplLHRhcmdldDpvfSxpKX0pfSxfLnByb3RvdHlwZS5jb25maWc9ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zPXRoaXMuZGVmYXVsdHN8fHt9LHQmJih0aGlzLm9wdGlvbnM9ZnVuY3Rpb24odCxpKXt2YXIgZT17fTtmb3IodmFyIG8gaW4gdCl0Lmhhc093blByb3BlcnR5KG8pJiZpLmhhc093blByb3BlcnR5KG8pP2Vbb109aVtvXTp0Lmhhc093blByb3BlcnR5KG8pJiYoZVtvXT10W29dKTtyZXR1cm4gZX0odGhpcy5vcHRpb25zLHQpKX0sXy5wcm90b3R5cGUuYmluZEV2dD1mdW5jdGlvbih0LGkpe3ZhciBlPXRoaXM7cmV0dXJuIGUuX2RvbUhhbmRsZXJzXz1lLl9kb21IYW5kbGVyc198fHt9LGUuX2RvbUhhbmRsZXJzX1tpXT1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGVbXCJvblwiK2ldP2VbXCJvblwiK2ldLmFwcGx5KGUsYXJndW1lbnRzKTpjb25zb2xlLndhcm4oJ1tXQVJOSU5HXSA6IE1pc3NpbmcgXCJvbicraSsnXCIgaGFuZGxlci4nKX0scCh0LG9baV0sZS5fZG9tSGFuZGxlcnNfW2ldKSx3W2ldJiZwKHQsd1tpXSxlLl9kb21IYW5kbGVyc19baV0pLGV9LF8ucHJvdG90eXBlLnVuYmluZEV2dD1mdW5jdGlvbih0LGkpe3JldHVybiB0aGlzLl9kb21IYW5kbGVyc189dGhpcy5fZG9tSGFuZGxlcnNffHx7fSxjKHQsb1tpXSx0aGlzLl9kb21IYW5kbGVyc19baV0pLHdbaV0mJmModCx3W2ldLHRoaXMuX2RvbUhhbmRsZXJzX1tpXSksZGVsZXRlIHRoaXMuX2RvbUhhbmRsZXJzX1tpXSx0aGlzfTt2YXIgVD1fO2Z1bmN0aW9uIGsodCxpKXtyZXR1cm4gdGhpcy5pZGVudGlmaWVyPWkuaWRlbnRpZmllcix0aGlzLnBvc2l0aW9uPWkucG9zaXRpb24sdGhpcy5mcm9udFBvc2l0aW9uPWkuZnJvbnRQb3NpdGlvbix0aGlzLmNvbGxlY3Rpb249dCx0aGlzLmRlZmF1bHRzPXtzaXplOjEwMCx0aHJlc2hvbGQ6LjEsY29sb3I6XCJ3aGl0ZVwiLGZhZGVUaW1lOjI1MCxkYXRhT25seTohMSxyZXN0Sm95c3RpY2s6ITAscmVzdE9wYWNpdHk6LjUsbW9kZTpcImR5bmFtaWNcIix6b25lOmRvY3VtZW50LmJvZHksbG9ja1g6ITEsbG9ja1k6ITEsc2hhcGU6XCJjaXJjbGVcIn0sdGhpcy5jb25maWcoaSksXCJkeW5hbWljXCI9PT10aGlzLm9wdGlvbnMubW9kZSYmKHRoaXMub3B0aW9ucy5yZXN0T3BhY2l0eT0wKSx0aGlzLmlkPWsuaWQsay5pZCs9MSx0aGlzLmJ1aWxkRWwoKS5zdHlsaXplKCksdGhpcy5pbnN0YW5jZT17ZWw6dGhpcy51aS5lbCxvbjp0aGlzLm9uLmJpbmQodGhpcyksb2ZmOnRoaXMub2ZmLmJpbmQodGhpcyksc2hvdzp0aGlzLnNob3cuYmluZCh0aGlzKSxoaWRlOnRoaXMuaGlkZS5iaW5kKHRoaXMpLGFkZDp0aGlzLmFkZFRvRG9tLmJpbmQodGhpcykscmVtb3ZlOnRoaXMucmVtb3ZlRnJvbURvbS5iaW5kKHRoaXMpLGRlc3Ryb3k6dGhpcy5kZXN0cm95LmJpbmQodGhpcyksc2V0UG9zaXRpb246dGhpcy5zZXRQb3NpdGlvbi5iaW5kKHRoaXMpLHJlc2V0RGlyZWN0aW9uOnRoaXMucmVzZXREaXJlY3Rpb24uYmluZCh0aGlzKSxjb21wdXRlRGlyZWN0aW9uOnRoaXMuY29tcHV0ZURpcmVjdGlvbi5iaW5kKHRoaXMpLHRyaWdnZXI6dGhpcy50cmlnZ2VyLmJpbmQodGhpcykscG9zaXRpb246dGhpcy5wb3NpdGlvbixmcm9udFBvc2l0aW9uOnRoaXMuZnJvbnRQb3NpdGlvbix1aTp0aGlzLnVpLGlkZW50aWZpZXI6dGhpcy5pZGVudGlmaWVyLGlkOnRoaXMuaWQsb3B0aW9uczp0aGlzLm9wdGlvbnN9LHRoaXMuaW5zdGFuY2V9ay5wcm90b3R5cGU9bmV3IFQsay5jb25zdHJ1Y3Rvcj1rLGsuaWQ9MCxrLnByb3RvdHlwZS5idWlsZEVsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnVpPXt9LHRoaXMub3B0aW9ucy5kYXRhT25seT90aGlzOih0aGlzLnVpLmVsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy51aS5iYWNrPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy51aS5mcm9udD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMudWkuZWwuY2xhc3NOYW1lPVwibmlwcGxlIGNvbGxlY3Rpb25fXCIrdGhpcy5jb2xsZWN0aW9uLmlkLHRoaXMudWkuYmFjay5jbGFzc05hbWU9XCJiYWNrXCIsdGhpcy51aS5mcm9udC5jbGFzc05hbWU9XCJmcm9udFwiLHRoaXMudWkuZWwuc2V0QXR0cmlidXRlKFwiaWRcIixcIm5pcHBsZV9cIit0aGlzLmNvbGxlY3Rpb24uaWQrXCJfXCIrdGhpcy5pZCksdGhpcy51aS5lbC5hcHBlbmRDaGlsZCh0aGlzLnVpLmJhY2spLHRoaXMudWkuZWwuYXBwZW5kQ2hpbGQodGhpcy51aS5mcm9udCksdGhpcyl9LGsucHJvdG90eXBlLnN0eWxpemU9ZnVuY3Rpb24oKXtpZih0aGlzLm9wdGlvbnMuZGF0YU9ubHkpcmV0dXJuIHRoaXM7dmFyIHQ9dGhpcy5vcHRpb25zLmZhZGVUaW1lK1wibXNcIixpPWZ1bmN0aW9uKHQsaSl7dmFyIGU9eSh0KTtmb3IodmFyIG8gaW4gZSllLmhhc093blByb3BlcnR5KG8pJiYoZVtvXT1pKTtyZXR1cm4gZX0oXCJib3JkZXJSYWRpdXNcIixcIjUwJVwiKSxlPWYoXCJ0cmFuc2l0aW9uXCIsXCJvcGFjaXR5XCIsdCksbz17fTtyZXR1cm4gby5lbD17cG9zaXRpb246XCJhYnNvbHV0ZVwiLG9wYWNpdHk6dGhpcy5vcHRpb25zLnJlc3RPcGFjaXR5LGRpc3BsYXk6XCJibG9ja1wiLHpJbmRleDo5OTl9LG8uYmFjaz17cG9zaXRpb246XCJhYnNvbHV0ZVwiLGRpc3BsYXk6XCJibG9ja1wiLHdpZHRoOnRoaXMub3B0aW9ucy5zaXplK1wicHhcIixoZWlnaHQ6dGhpcy5vcHRpb25zLnNpemUrXCJweFwiLG1hcmdpbkxlZnQ6LXRoaXMub3B0aW9ucy5zaXplLzIrXCJweFwiLG1hcmdpblRvcDotdGhpcy5vcHRpb25zLnNpemUvMitcInB4XCIsYmFja2dyb3VuZDp0aGlzLm9wdGlvbnMuY29sb3Isb3BhY2l0eTpcIi41XCJ9LG8uZnJvbnQ9e3dpZHRoOnRoaXMub3B0aW9ucy5zaXplLzIrXCJweFwiLGhlaWdodDp0aGlzLm9wdGlvbnMuc2l6ZS8yK1wicHhcIixwb3NpdGlvbjpcImFic29sdXRlXCIsZGlzcGxheTpcImJsb2NrXCIsbWFyZ2luTGVmdDotdGhpcy5vcHRpb25zLnNpemUvNCtcInB4XCIsbWFyZ2luVG9wOi10aGlzLm9wdGlvbnMuc2l6ZS80K1wicHhcIixiYWNrZ3JvdW5kOnRoaXMub3B0aW9ucy5jb2xvcixvcGFjaXR5OlwiLjVcIn0sbShvLmVsLGUpLFwiY2lyY2xlXCI9PT10aGlzLm9wdGlvbnMuc2hhcGUmJm0oby5iYWNrLGkpLG0oby5mcm9udCxpKSx0aGlzLmFwcGx5U3R5bGVzKG8pLHRoaXN9LGsucHJvdG90eXBlLmFwcGx5U3R5bGVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgaSBpbiB0aGlzLnVpKWlmKHRoaXMudWkuaGFzT3duUHJvcGVydHkoaSkpZm9yKHZhciBlIGluIHRbaV0pdGhpcy51aVtpXS5zdHlsZVtlXT10W2ldW2VdO3JldHVybiB0aGlzfSxrLnByb3RvdHlwZS5hZGRUb0RvbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9wdGlvbnMuZGF0YU9ubHl8fGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy51aS5lbCk/dGhpczoodGhpcy5vcHRpb25zLnpvbmUuYXBwZW5kQ2hpbGQodGhpcy51aS5lbCksdGhpcyl9LGsucHJvdG90eXBlLnJlbW92ZUZyb21Eb209ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vcHRpb25zLmRhdGFPbmx5fHwhZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnVpLmVsKT90aGlzOih0aGlzLm9wdGlvbnMuem9uZS5yZW1vdmVDaGlsZCh0aGlzLnVpLmVsKSx0aGlzKX0say5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLnJlbW92ZVRpbWVvdXQpLGNsZWFyVGltZW91dCh0aGlzLnNob3dUaW1lb3V0KSxjbGVhclRpbWVvdXQodGhpcy5yZXN0VGltZW91dCksdGhpcy50cmlnZ2VyKFwiZGVzdHJveWVkXCIsdGhpcy5pbnN0YW5jZSksdGhpcy5yZW1vdmVGcm9tRG9tKCksdGhpcy5vZmYoKX0say5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbih0KXt2YXIgaT10aGlzO3JldHVybiBpLm9wdGlvbnMuZGF0YU9ubHk/aTooY2xlYXJUaW1lb3V0KGkucmVtb3ZlVGltZW91dCksY2xlYXJUaW1lb3V0KGkuc2hvd1RpbWVvdXQpLGNsZWFyVGltZW91dChpLnJlc3RUaW1lb3V0KSxpLmFkZFRvRG9tKCksaS5yZXN0Q2FsbGJhY2soKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS51aS5lbC5zdHlsZS5vcGFjaXR5PTF9LDApLGkuc2hvd1RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2kudHJpZ2dlcihcInNob3duXCIsaS5pbnN0YW5jZSksXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5jYWxsKHRoaXMpfSxpLm9wdGlvbnMuZmFkZVRpbWUpLGkpfSxrLnByb3RvdHlwZS5oaWRlPWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXM7cmV0dXJuIGkub3B0aW9ucy5kYXRhT25seT9pOihpLnVpLmVsLnN0eWxlLm9wYWNpdHk9aS5vcHRpb25zLnJlc3RPcGFjaXR5LGNsZWFyVGltZW91dChpLnJlbW92ZVRpbWVvdXQpLGNsZWFyVGltZW91dChpLnNob3dUaW1lb3V0KSxjbGVhclRpbWVvdXQoaS5yZXN0VGltZW91dCksaS5yZW1vdmVUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgZT1cImR5bmFtaWNcIj09PWkub3B0aW9ucy5tb2RlP1wibm9uZVwiOlwiYmxvY2tcIjtpLnVpLmVsLnN0eWxlLmRpc3BsYXk9ZSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZ0LmNhbGwoaSksaS50cmlnZ2VyKFwiaGlkZGVuXCIsaS5pbnN0YW5jZSl9LGkub3B0aW9ucy5mYWRlVGltZSksaS5vcHRpb25zLnJlc3RKb3lzdGljayYmaS5zZXRQb3NpdGlvbih0LHt4OjAseTowfSksaSl9LGsucHJvdG90eXBlLnNldFBvc2l0aW9uPWZ1bmN0aW9uKHQsaSl7dmFyIGU9dGhpcztlLmZyb250UG9zaXRpb249e3g6aS54LHk6aS55fTt2YXIgbz1lLm9wdGlvbnMuZmFkZVRpbWUrXCJtc1wiLG49e307bi5mcm9udD1mKFwidHJhbnNpdGlvblwiLFtcInRvcFwiLFwibGVmdFwiXSxvKTt2YXIgcz17ZnJvbnQ6e319O3MuZnJvbnQ9e2xlZnQ6ZS5mcm9udFBvc2l0aW9uLngrXCJweFwiLHRvcDplLmZyb250UG9zaXRpb24ueStcInB4XCJ9LGUuYXBwbHlTdHlsZXMobiksZS5hcHBseVN0eWxlcyhzKSxlLnJlc3RUaW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZ0LmNhbGwoZSksZS5yZXN0Q2FsbGJhY2soKX0sZS5vcHRpb25zLmZhZGVUaW1lKX0say5wcm90b3R5cGUucmVzdENhbGxiYWNrPWZ1bmN0aW9uKCl7dmFyIHQ9e307dC5mcm9udD1mKFwidHJhbnNpdGlvblwiLFwibm9uZVwiLFwiXCIpLHRoaXMuYXBwbHlTdHlsZXModCksdGhpcy50cmlnZ2VyKFwicmVzdGVkXCIsdGhpcy5pbnN0YW5jZSl9LGsucHJvdG90eXBlLnJlc2V0RGlyZWN0aW9uPWZ1bmN0aW9uKCl7dGhpcy5kaXJlY3Rpb249e3g6ITEseTohMSxhbmdsZTohMX19LGsucHJvdG90eXBlLmNvbXB1dGVEaXJlY3Rpb249ZnVuY3Rpb24odCl7dmFyIGksZSxvLG49dC5hbmdsZS5yYWRpYW4scz1NYXRoLlBJLzQscj1NYXRoLlBJLzI7aWYobj5zJiZuPDMqcyYmIXQubG9ja1g/aT1cInVwXCI6bj4tcyYmbjw9cyYmIXQubG9ja1k/aT1cImxlZnRcIjpuPjMqLXMmJm48PS1zJiYhdC5sb2NrWD9pPVwiZG93blwiOnQubG9ja1l8fChpPVwicmlnaHRcIiksdC5sb2NrWXx8KGU9bj4tciYmbjxyP1wibGVmdFwiOlwicmlnaHRcIiksdC5sb2NrWHx8KG89bj4wP1widXBcIjpcImRvd25cIiksdC5mb3JjZT50aGlzLm9wdGlvbnMudGhyZXNob2xkKXt2YXIgZCxhPXt9O2ZvcihkIGluIHRoaXMuZGlyZWN0aW9uKXRoaXMuZGlyZWN0aW9uLmhhc093blByb3BlcnR5KGQpJiYoYVtkXT10aGlzLmRpcmVjdGlvbltkXSk7dmFyIHA9e307Zm9yKGQgaW4gdGhpcy5kaXJlY3Rpb249e3g6ZSx5Om8sYW5nbGU6aX0sdC5kaXJlY3Rpb249dGhpcy5kaXJlY3Rpb24sYSlhW2RdPT09dGhpcy5kaXJlY3Rpb25bZF0mJihwW2RdPSEwKTtpZihwLngmJnAueSYmcC5hbmdsZSlyZXR1cm4gdDtwLngmJnAueXx8dGhpcy50cmlnZ2VyKFwicGxhaW5cIix0KSxwLnh8fHRoaXMudHJpZ2dlcihcInBsYWluOlwiK2UsdCkscC55fHx0aGlzLnRyaWdnZXIoXCJwbGFpbjpcIitvLHQpLHAuYW5nbGV8fHRoaXMudHJpZ2dlcihcImRpciBkaXI6XCIraSx0KX1lbHNlIHRoaXMucmVzZXREaXJlY3Rpb24oKTtyZXR1cm4gdH07dmFyIFA9aztmdW5jdGlvbiBFKHQsaSl7cmV0dXJuIHRoaXMubmlwcGxlcz1bXSx0aGlzLmlkbGVzPVtdLHRoaXMuYWN0aXZlcz1bXSx0aGlzLmlkcz1bXSx0aGlzLnByZXNzdXJlSW50ZXJ2YWxzPXt9LHRoaXMubWFuYWdlcj10LHRoaXMuaWQ9RS5pZCxFLmlkKz0xLHRoaXMuZGVmYXVsdHM9e3pvbmU6ZG9jdW1lbnQuYm9keSxtdWx0aXRvdWNoOiExLG1heE51bWJlck9mTmlwcGxlczoxMCxtb2RlOlwiZHluYW1pY1wiLHBvc2l0aW9uOnt0b3A6MCxsZWZ0OjB9LGNhdGNoRGlzdGFuY2U6MjAwLHNpemU6MTAwLHRocmVzaG9sZDouMSxjb2xvcjpcIndoaXRlXCIsZmFkZVRpbWU6MjUwLGRhdGFPbmx5OiExLHJlc3RKb3lzdGljazohMCxyZXN0T3BhY2l0eTouNSxsb2NrWDohMSxsb2NrWTohMSxzaGFwZTpcImNpcmNsZVwiLGR5bmFtaWNQYWdlOiExLGZvbGxvdzohMX0sdGhpcy5jb25maWcoaSksXCJzdGF0aWNcIiE9PXRoaXMub3B0aW9ucy5tb2RlJiZcInNlbWlcIiE9PXRoaXMub3B0aW9ucy5tb2RlfHwodGhpcy5vcHRpb25zLm11bHRpdG91Y2g9ITEpLHRoaXMub3B0aW9ucy5tdWx0aXRvdWNofHwodGhpcy5vcHRpb25zLm1heE51bWJlck9mTmlwcGxlcz0xKSx0aGlzLnVwZGF0ZUJveCgpLHRoaXMucHJlcGFyZU5pcHBsZXMoKSx0aGlzLmJpbmRpbmdzKCksdGhpcy5iZWdpbigpLHRoaXMubmlwcGxlc31FLnByb3RvdHlwZT1uZXcgVCxFLmNvbnN0cnVjdG9yPUUsRS5pZD0wLEUucHJvdG90eXBlLnByZXBhcmVOaXBwbGVzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5uaXBwbGVzO3Qub249dGhpcy5vbi5iaW5kKHRoaXMpLHQub2ZmPXRoaXMub2ZmLmJpbmQodGhpcyksdC5vcHRpb25zPXRoaXMub3B0aW9ucyx0LmRlc3Ryb3k9dGhpcy5kZXN0cm95LmJpbmQodGhpcyksdC5pZHM9dGhpcy5pZHMsdC5pZD10aGlzLmlkLHQucHJvY2Vzc09uTW92ZT10aGlzLnByb2Nlc3NPbk1vdmUuYmluZCh0aGlzKSx0LnByb2Nlc3NPbkVuZD10aGlzLnByb2Nlc3NPbkVuZC5iaW5kKHRoaXMpLHQuZ2V0PWZ1bmN0aW9uKGkpe2lmKHZvaWQgMD09PWkpcmV0dXJuIHRbMF07Zm9yKHZhciBlPTAsbz10Lmxlbmd0aDtlPG87ZSs9MSlpZih0W2VdLmlkZW50aWZpZXI9PT1pKXJldHVybiB0W2VdO3JldHVybiExfX0sRS5wcm90b3R5cGUuYmluZGluZ3M9ZnVuY3Rpb24oKXt0aGlzLmJpbmRFdnQodGhpcy5vcHRpb25zLnpvbmUsXCJzdGFydFwiKSx0aGlzLm9wdGlvbnMuem9uZS5zdHlsZS50b3VjaEFjdGlvbj1cIm5vbmVcIix0aGlzLm9wdGlvbnMuem9uZS5zdHlsZS5tc1RvdWNoQWN0aW9uPVwibm9uZVwifSxFLnByb3RvdHlwZS5iZWdpbj1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucztpZihcInN0YXRpY1wiPT09dC5tb2RlKXt2YXIgaT10aGlzLmNyZWF0ZU5pcHBsZSh0LnBvc2l0aW9uLHRoaXMubWFuYWdlci5nZXRJZGVudGlmaWVyKCkpO2kuYWRkKCksdGhpcy5pZGxlcy5wdXNoKGkpfX0sRS5wcm90b3R5cGUuY3JlYXRlTmlwcGxlPWZ1bmN0aW9uKHQsaSl7dmFyIGU9dGhpcy5tYW5hZ2VyLnNjcm9sbCxvPXt9LG49dGhpcy5vcHRpb25zO2lmKHQueCYmdC55KW89e3g6dC54LShlLngrdGhpcy5ib3gubGVmdCkseTp0LnktKGUueSt0aGlzLmJveC50b3ApfTtlbHNlIGlmKHQudG9wfHx0LnJpZ2h0fHx0LmJvdHRvbXx8dC5sZWZ0KXt2YXIgcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO3Muc3R5bGUuZGlzcGxheT1cImhpZGRlblwiLHMuc3R5bGUudG9wPXQudG9wLHMuc3R5bGUucmlnaHQ9dC5yaWdodCxzLnN0eWxlLmJvdHRvbT10LmJvdHRvbSxzLnN0eWxlLmxlZnQ9dC5sZWZ0LHMuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLG4uem9uZS5hcHBlbmRDaGlsZChzKTt2YXIgcj1zLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO24uem9uZS5yZW1vdmVDaGlsZChzKSxvPXQsdD17eDpyLmxlZnQrZS54LHk6ci50b3ArZS55fX12YXIgZD1uZXcgUCh0aGlzLHtjb2xvcjpuLmNvbG9yLHNpemU6bi5zaXplLHRocmVzaG9sZDpuLnRocmVzaG9sZCxmYWRlVGltZTpuLmZhZGVUaW1lLGRhdGFPbmx5Om4uZGF0YU9ubHkscmVzdEpveXN0aWNrOm4ucmVzdEpveXN0aWNrLHJlc3RPcGFjaXR5Om4ucmVzdE9wYWNpdHksbW9kZTpuLm1vZGUsaWRlbnRpZmllcjppLHBvc2l0aW9uOnQsem9uZTpuLnpvbmUsZnJvbnRQb3NpdGlvbjp7eDowLHk6MH0sc2hhcGU6bi5zaGFwZX0pO3JldHVybiBuLmRhdGFPbmx5fHwodShkLnVpLmVsLG8pLHUoZC51aS5mcm9udCxkLmZyb250UG9zaXRpb24pKSx0aGlzLm5pcHBsZXMucHVzaChkKSx0aGlzLnRyaWdnZXIoXCJhZGRlZCBcIitkLmlkZW50aWZpZXIrXCI6YWRkZWRcIixkKSx0aGlzLm1hbmFnZXIudHJpZ2dlcihcImFkZGVkIFwiK2QuaWRlbnRpZmllcitcIjphZGRlZFwiLGQpLHRoaXMuYmluZE5pcHBsZShkKSxkfSxFLnByb3RvdHlwZS51cGRhdGVCb3g9ZnVuY3Rpb24oKXt0aGlzLmJveD10aGlzLm9wdGlvbnMuem9uZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX0sRS5wcm90b3R5cGUuYmluZE5pcHBsZT1mdW5jdGlvbih0KXt2YXIgaSxlPXRoaXMsbz1mdW5jdGlvbih0LG8pe2k9dC50eXBlK1wiIFwiK28uaWQrXCI6XCIrdC50eXBlLGUudHJpZ2dlcihpLG8pfTt0Lm9uKFwiZGVzdHJveWVkXCIsZS5vbkRlc3Ryb3llZC5iaW5kKGUpKSx0Lm9uKFwic2hvd24gaGlkZGVuIHJlc3RlZCBkaXIgcGxhaW5cIixvKSx0Lm9uKFwiZGlyOnVwIGRpcjpyaWdodCBkaXI6ZG93biBkaXI6bGVmdFwiLG8pLHQub24oXCJwbGFpbjp1cCBwbGFpbjpyaWdodCBwbGFpbjpkb3duIHBsYWluOmxlZnRcIixvKX0sRS5wcm90b3R5cGUucHJlc3N1cmVGbj1mdW5jdGlvbih0LGksZSl7dmFyIG89dGhpcyxuPTA7Y2xlYXJJbnRlcnZhbChvLnByZXNzdXJlSW50ZXJ2YWxzW2VdKSxvLnByZXNzdXJlSW50ZXJ2YWxzW2VdPXNldEludGVydmFsKGZ1bmN0aW9uKCl7dmFyIGU9dC5mb3JjZXx8dC5wcmVzc3VyZXx8dC53ZWJraXRGb3JjZXx8MDtlIT09biYmKGkudHJpZ2dlcihcInByZXNzdXJlXCIsZSksby50cmlnZ2VyKFwicHJlc3N1cmUgXCIraS5pZGVudGlmaWVyK1wiOnByZXNzdXJlXCIsZSksbj1lKX0uYmluZChvKSwxMDApfSxFLnByb3RvdHlwZS5vbnN0YXJ0PWZ1bmN0aW9uKHQpe3ZhciBpPXRoaXMsZT1pLm9wdGlvbnMsbz10O3Q9bCh0KSxpLnVwZGF0ZUJveCgpO3JldHVybiB2KHQsZnVuY3Rpb24obil7aS5hY3RpdmVzLmxlbmd0aDxlLm1heE51bWJlck9mTmlwcGxlcz9pLnByb2Nlc3NPblN0YXJ0KG4pOm8udHlwZS5tYXRjaCgvXnRvdWNoLykmJihPYmplY3Qua2V5cyhpLm1hbmFnZXIuaWRzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKE9iamVjdC52YWx1ZXMoby50b3VjaGVzKS5maW5kSW5kZXgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWRlbnRpZmllcj09PWV9KTwwKXt2YXIgbj1bdFswXV07bi5pZGVudGlmaWVyPWUsaS5wcm9jZXNzT25FbmQobil9fSksaS5hY3RpdmVzLmxlbmd0aDxlLm1heE51bWJlck9mTmlwcGxlcyYmaS5wcm9jZXNzT25TdGFydChuKSl9KSxpLm1hbmFnZXIuYmluZERvY3VtZW50KCksITF9LEUucHJvdG90eXBlLnByb2Nlc3NPblN0YXJ0PWZ1bmN0aW9uKHQpe3ZhciBpLGU9dGhpcyxvPWUub3B0aW9ucyxzPWUubWFuYWdlci5nZXRJZGVudGlmaWVyKHQpLHI9dC5mb3JjZXx8dC5wcmVzc3VyZXx8dC53ZWJraXRGb3JjZXx8MCxkPXt4OnQucGFnZVgseTp0LnBhZ2VZfSxhPWUuZ2V0T3JDcmVhdGUocyxkKTthLmlkZW50aWZpZXIhPT1zJiZlLm1hbmFnZXIucmVtb3ZlSWRlbnRpZmllcihhLmlkZW50aWZpZXIpLGEuaWRlbnRpZmllcj1zO3ZhciBwPWZ1bmN0aW9uKGkpe2kudHJpZ2dlcihcInN0YXJ0XCIsaSksZS50cmlnZ2VyKFwic3RhcnQgXCIraS5pZCtcIjpzdGFydFwiLGkpLGkuc2hvdygpLHI+MCYmZS5wcmVzc3VyZUZuKHQsaSxpLmlkZW50aWZpZXIpLGUucHJvY2Vzc09uTW92ZSh0KX07aWYoKGk9ZS5pZGxlcy5pbmRleE9mKGEpKT49MCYmZS5pZGxlcy5zcGxpY2UoaSwxKSxlLmFjdGl2ZXMucHVzaChhKSxlLmlkcy5wdXNoKGEuaWRlbnRpZmllciksXCJzZW1pXCIhPT1vLm1vZGUpcChhKTtlbHNle2lmKCEobihkLGEucG9zaXRpb24pPD1vLmNhdGNoRGlzdGFuY2UpKXJldHVybiBhLmRlc3Ryb3koKSx2b2lkIGUucHJvY2Vzc09uU3RhcnQodCk7cChhKX1yZXR1cm4gYX0sRS5wcm90b3R5cGUuZ2V0T3JDcmVhdGU9ZnVuY3Rpb24odCxpKXt2YXIgZSxvPXRoaXMub3B0aW9ucztyZXR1cm4vKHNlbWl8c3RhdGljKS8udGVzdChvLm1vZGUpPyhlPXRoaXMuaWRsZXNbMF0pPyh0aGlzLmlkbGVzLnNwbGljZSgwLDEpLGUpOlwic2VtaVwiPT09by5tb2RlP3RoaXMuY3JlYXRlTmlwcGxlKGksdCk6KGNvbnNvbGUud2FybihcIkNvdWRsbid0IGZpbmQgdGhlIG5lZWRlZCBuaXBwbGUuXCIpLCExKTplPXRoaXMuY3JlYXRlTmlwcGxlKGksdCl9LEUucHJvdG90eXBlLnByb2Nlc3NPbk1vdmU9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcy5vcHRpb25zLGU9dGhpcy5tYW5hZ2VyLmdldElkZW50aWZpZXIodCksbz10aGlzLm5pcHBsZXMuZ2V0KGUpLGQ9dGhpcy5tYW5hZ2VyLnNjcm9sbDtpZihmdW5jdGlvbih0KXtyZXR1cm4gaXNOYU4odC5idXR0b25zKT8wIT09dC5wcmVzc3VyZTowIT09dC5idXR0b25zfSh0KSl7aWYoIW8pcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJGb3VuZCB6b21iaWUgam95c3RpY2sgd2l0aCBJRCBcIitlKSx2b2lkIHRoaXMubWFuYWdlci5yZW1vdmVJZGVudGlmaWVyKGUpO2lmKGkuZHluYW1pY1BhZ2Upe3ZhciBhPW8uZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7by5wb3NpdGlvbj17eDpkLngrYS5sZWZ0LHk6ZC55K2EudG9wfX1vLmlkZW50aWZpZXI9ZTt2YXIgcD1vLm9wdGlvbnMuc2l6ZS8yLGM9e3g6dC5wYWdlWCx5OnQucGFnZVl9O2kubG9ja1gmJihjLnk9by5wb3NpdGlvbi55KSxpLmxvY2tZJiYoYy54PW8ucG9zaXRpb24ueCk7dmFyIGwsaCxmLHksbSx2LGcsYix4LE8sdz1uKGMsby5wb3NpdGlvbiksXz0obD1jLGg9by5wb3NpdGlvbixmPWgueC1sLngseT1oLnktbC55LHIoTWF0aC5hdGFuMih5LGYpKSksVD1zKF8pLGs9dy9wLFA9e2Rpc3RhbmNlOncscG9zaXRpb246Y307aWYoXCJjaXJjbGVcIj09PW8ub3B0aW9ucy5zaGFwZT8obT1NYXRoLm1pbih3LHApLGc9by5wb3NpdGlvbixiPW0sTz17eDowLHk6MH0seD1zKHg9XyksTy54PWcueC1iKk1hdGguY29zKHgpLE8ueT1nLnktYipNYXRoLnNpbih4KSx2PU8pOih2PWZ1bmN0aW9uKHQsaSxlKXtyZXR1cm57eDpNYXRoLm1pbihNYXRoLm1heCh0LngsaS54LWUpLGkueCtlKSx5Ok1hdGgubWluKE1hdGgubWF4KHQueSxpLnktZSksaS55K2UpfX0oYyxvLnBvc2l0aW9uLHApLG09bih2LG8ucG9zaXRpb24pKSxpLmZvbGxvdyl7aWYodz5wKXt2YXIgRT1jLngtdi54LEk9Yy55LXYueTtvLnBvc2l0aW9uLngrPUUsby5wb3NpdGlvbi55Kz1JLG8uZWwuc3R5bGUudG9wPW8ucG9zaXRpb24ueS0odGhpcy5ib3gudG9wK2QueSkrXCJweFwiLG8uZWwuc3R5bGUubGVmdD1vLnBvc2l0aW9uLngtKHRoaXMuYm94LmxlZnQrZC54KStcInB4XCIsdz1uKGMsby5wb3NpdGlvbil9fWVsc2UgYz12LHc9bTt2YXIgej1jLngtby5wb3NpdGlvbi54LEQ9Yy55LW8ucG9zaXRpb24ueTtvLmZyb250UG9zaXRpb249e3g6eix5OkR9LGkuZGF0YU9ubHl8fHUoby51aS5mcm9udCxvLmZyb250UG9zaXRpb24pO3ZhciBNPXtpZGVudGlmaWVyOm8uaWRlbnRpZmllcixwb3NpdGlvbjpjLGZvcmNlOmsscHJlc3N1cmU6dC5mb3JjZXx8dC5wcmVzc3VyZXx8dC53ZWJraXRGb3JjZXx8MCxkaXN0YW5jZTp3LGFuZ2xlOntyYWRpYW46VCxkZWdyZWU6X30sdmVjdG9yOnt4OnovcCx5Oi1EL3B9LHJhdzpQLGluc3RhbmNlOm8sbG9ja1g6aS5sb2NrWCxsb2NrWTppLmxvY2tZfTsoTT1vLmNvbXB1dGVEaXJlY3Rpb24oTSkpLmFuZ2xlPXtyYWRpYW46cygxODAtXyksZGVncmVlOjE4MC1ffSxvLnRyaWdnZXIoXCJtb3ZlXCIsTSksdGhpcy50cmlnZ2VyKFwibW92ZSBcIitvLmlkK1wiOm1vdmVcIixNKX1lbHNlIHRoaXMucHJvY2Vzc09uRW5kKHQpfSxFLnByb3RvdHlwZS5wcm9jZXNzT25FbmQ9ZnVuY3Rpb24odCl7dmFyIGk9dGhpcyxlPWkub3B0aW9ucyxvPWkubWFuYWdlci5nZXRJZGVudGlmaWVyKHQpLG49aS5uaXBwbGVzLmdldChvKSxzPWkubWFuYWdlci5yZW1vdmVJZGVudGlmaWVyKG4uaWRlbnRpZmllcik7biYmKGUuZGF0YU9ubHl8fG4uaGlkZShmdW5jdGlvbigpe1wiZHluYW1pY1wiPT09ZS5tb2RlJiYobi50cmlnZ2VyKFwicmVtb3ZlZFwiLG4pLGkudHJpZ2dlcihcInJlbW92ZWQgXCIrbi5pZCtcIjpyZW1vdmVkXCIsbiksaS5tYW5hZ2VyLnRyaWdnZXIoXCJyZW1vdmVkIFwiK24uaWQrXCI6cmVtb3ZlZFwiLG4pLG4uZGVzdHJveSgpKX0pLGNsZWFySW50ZXJ2YWwoaS5wcmVzc3VyZUludGVydmFsc1tuLmlkZW50aWZpZXJdKSxuLnJlc2V0RGlyZWN0aW9uKCksbi50cmlnZ2VyKFwiZW5kXCIsbiksaS50cmlnZ2VyKFwiZW5kIFwiK24uaWQrXCI6ZW5kXCIsbiksaS5pZHMuaW5kZXhPZihuLmlkZW50aWZpZXIpPj0wJiZpLmlkcy5zcGxpY2UoaS5pZHMuaW5kZXhPZihuLmlkZW50aWZpZXIpLDEpLGkuYWN0aXZlcy5pbmRleE9mKG4pPj0wJiZpLmFjdGl2ZXMuc3BsaWNlKGkuYWN0aXZlcy5pbmRleE9mKG4pLDEpLC8oc2VtaXxzdGF0aWMpLy50ZXN0KGUubW9kZSk/aS5pZGxlcy5wdXNoKG4pOmkubmlwcGxlcy5pbmRleE9mKG4pPj0wJiZpLm5pcHBsZXMuc3BsaWNlKGkubmlwcGxlcy5pbmRleE9mKG4pLDEpLGkubWFuYWdlci51bmJpbmREb2N1bWVudCgpLC8oc2VtaXxzdGF0aWMpLy50ZXN0KGUubW9kZSkmJihpLm1hbmFnZXIuaWRzW3MuaWRdPXMuaWRlbnRpZmllcikpfSxFLnByb3RvdHlwZS5vbkRlc3Ryb3llZD1mdW5jdGlvbih0LGkpe3RoaXMubmlwcGxlcy5pbmRleE9mKGkpPj0wJiZ0aGlzLm5pcHBsZXMuc3BsaWNlKHRoaXMubmlwcGxlcy5pbmRleE9mKGkpLDEpLHRoaXMuYWN0aXZlcy5pbmRleE9mKGkpPj0wJiZ0aGlzLmFjdGl2ZXMuc3BsaWNlKHRoaXMuYWN0aXZlcy5pbmRleE9mKGkpLDEpLHRoaXMuaWRsZXMuaW5kZXhPZihpKT49MCYmdGhpcy5pZGxlcy5zcGxpY2UodGhpcy5pZGxlcy5pbmRleE9mKGkpLDEpLHRoaXMuaWRzLmluZGV4T2YoaS5pZGVudGlmaWVyKT49MCYmdGhpcy5pZHMuc3BsaWNlKHRoaXMuaWRzLmluZGV4T2YoaS5pZGVudGlmaWVyKSwxKSx0aGlzLm1hbmFnZXIucmVtb3ZlSWRlbnRpZmllcihpLmlkZW50aWZpZXIpLHRoaXMubWFuYWdlci51bmJpbmREb2N1bWVudCgpfSxFLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMudW5iaW5kRXZ0KHRoaXMub3B0aW9ucy56b25lLFwic3RhcnRcIiksdGhpcy5uaXBwbGVzLmZvckVhY2goZnVuY3Rpb24odCl7dC5kZXN0cm95KCl9KSx0aGlzLnByZXNzdXJlSW50ZXJ2YWxzKXRoaXMucHJlc3N1cmVJbnRlcnZhbHMuaGFzT3duUHJvcGVydHkodCkmJmNsZWFySW50ZXJ2YWwodGhpcy5wcmVzc3VyZUludGVydmFsc1t0XSk7dGhpcy50cmlnZ2VyKFwiZGVzdHJveWVkXCIsdGhpcy5uaXBwbGVzKSx0aGlzLm1hbmFnZXIudW5iaW5kRG9jdW1lbnQoKSx0aGlzLm9mZigpfTt2YXIgST1FO2Z1bmN0aW9uIHoodCl7dmFyIGk9dGhpcztpLmlkcz17fSxpLmluZGV4PTAsaS5jb2xsZWN0aW9ucz1bXSxpLnNjcm9sbD1oKCksaS5jb25maWcodCksaS5wcmVwYXJlQ29sbGVjdGlvbnMoKTt2YXIgZT1mdW5jdGlvbigpe3ZhciB0O2kuY29sbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmZvckVhY2goZnVuY3Rpb24oZSl7dD1lLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGUucG9zaXRpb249e3g6aS5zY3JvbGwueCt0LmxlZnQseTppLnNjcm9sbC55K3QudG9wfX0pfSl9O3Aod2luZG93LFwicmVzaXplXCIsZnVuY3Rpb24oKXthKGUpfSk7dmFyIG89ZnVuY3Rpb24oKXtpLnNjcm9sbD1oKCl9O3JldHVybiBwKHdpbmRvdyxcInNjcm9sbFwiLGZ1bmN0aW9uKCl7YShvKX0pLGkuY29sbGVjdGlvbnN9ei5wcm90b3R5cGU9bmV3IFQsei5jb25zdHJ1Y3Rvcj16LHoucHJvdG90eXBlLnByZXBhcmVDb2xsZWN0aW9ucz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dC5jb2xsZWN0aW9ucy5jcmVhdGU9dC5jcmVhdGUuYmluZCh0KSx0LmNvbGxlY3Rpb25zLm9uPXQub24uYmluZCh0KSx0LmNvbGxlY3Rpb25zLm9mZj10Lm9mZi5iaW5kKHQpLHQuY29sbGVjdGlvbnMuZGVzdHJveT10LmRlc3Ryb3kuYmluZCh0KSx0LmNvbGxlY3Rpb25zLmdldD1mdW5jdGlvbihpKXt2YXIgZTtyZXR1cm4gdC5jb2xsZWN0aW9ucy5ldmVyeShmdW5jdGlvbih0KXtyZXR1cm4hKGU9dC5nZXQoaSkpfSksZX19LHoucHJvdG90eXBlLmNyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKHQpfSx6LnByb3RvdHlwZS5jcmVhdGVDb2xsZWN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBpPW5ldyBJKHRoaXMsdCk7cmV0dXJuIHRoaXMuYmluZENvbGxlY3Rpb24oaSksdGhpcy5jb2xsZWN0aW9ucy5wdXNoKGkpLGl9LHoucHJvdG90eXBlLmJpbmRDb2xsZWN0aW9uPWZ1bmN0aW9uKHQpe3ZhciBpLGU9dGhpcyxvPWZ1bmN0aW9uKHQsbyl7aT10LnR5cGUrXCIgXCIrby5pZCtcIjpcIit0LnR5cGUsZS50cmlnZ2VyKGksbyl9O3Qub24oXCJkZXN0cm95ZWRcIixlLm9uRGVzdHJveWVkLmJpbmQoZSkpLHQub24oXCJzaG93biBoaWRkZW4gcmVzdGVkIGRpciBwbGFpblwiLG8pLHQub24oXCJkaXI6dXAgZGlyOnJpZ2h0IGRpcjpkb3duIGRpcjpsZWZ0XCIsbyksdC5vbihcInBsYWluOnVwIHBsYWluOnJpZ2h0IHBsYWluOmRvd24gcGxhaW46bGVmdFwiLG8pfSx6LnByb3RvdHlwZS5iaW5kRG9jdW1lbnQ9ZnVuY3Rpb24oKXt0aGlzLmJpbmRlZHx8KHRoaXMuYmluZEV2dChkb2N1bWVudCxcIm1vdmVcIikuYmluZEV2dChkb2N1bWVudCxcImVuZFwiKSx0aGlzLmJpbmRlZD0hMCl9LHoucHJvdG90eXBlLnVuYmluZERvY3VtZW50PWZ1bmN0aW9uKHQpe09iamVjdC5rZXlzKHRoaXMuaWRzKS5sZW5ndGgmJiEwIT09dHx8KHRoaXMudW5iaW5kRXZ0KGRvY3VtZW50LFwibW92ZVwiKS51bmJpbmRFdnQoZG9jdW1lbnQsXCJlbmRcIiksdGhpcy5iaW5kZWQ9ITEpfSx6LnByb3RvdHlwZS5nZXRJZGVudGlmaWVyPWZ1bmN0aW9uKHQpe3ZhciBpO3JldHVybiB0P3ZvaWQgMD09PShpPXZvaWQgMD09PXQuaWRlbnRpZmllcj90LnBvaW50ZXJJZDp0LmlkZW50aWZpZXIpJiYoaT10aGlzLmxhdGVzdHx8MCk6aT10aGlzLmluZGV4LHZvaWQgMD09PXRoaXMuaWRzW2ldJiYodGhpcy5pZHNbaV09dGhpcy5pbmRleCx0aGlzLmluZGV4Kz0xKSx0aGlzLmxhdGVzdD1pLHRoaXMuaWRzW2ldfSx6LnByb3RvdHlwZS5yZW1vdmVJZGVudGlmaWVyPWZ1bmN0aW9uKHQpe3ZhciBpPXt9O2Zvcih2YXIgZSBpbiB0aGlzLmlkcylpZih0aGlzLmlkc1tlXT09PXQpe2kuaWQ9ZSxpLmlkZW50aWZpZXI9dGhpcy5pZHNbZV0sZGVsZXRlIHRoaXMuaWRzW2VdO2JyZWFrfXJldHVybiBpfSx6LnByb3RvdHlwZS5vbm1vdmU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMub25BbnkoXCJtb3ZlXCIsdCksITF9LHoucHJvdG90eXBlLm9uZW5kPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm9uQW55KFwiZW5kXCIsdCksITF9LHoucHJvdG90eXBlLm9uY2FuY2VsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLm9uQW55KFwiZW5kXCIsdCksITF9LHoucHJvdG90eXBlLm9uQW55PWZ1bmN0aW9uKHQsaSl7dmFyIGUsbz10aGlzLG49XCJwcm9jZXNzT25cIit0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk7aT1sKGkpO3JldHVybiB2KGksZnVuY3Rpb24odCl7ZT1vLmdldElkZW50aWZpZXIodCksdihvLmNvbGxlY3Rpb25zLGZ1bmN0aW9uKHQsaSxlKXtlLmlkcy5pbmRleE9mKGkpPj0wJiYoZVtuXSh0KSx0Ll9mb3VuZF89ITApfS5iaW5kKG51bGwsdCxlKSksdC5fZm91bmRffHxvLnJlbW92ZUlkZW50aWZpZXIoZSl9KSwhMX0sei5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMudW5iaW5kRG9jdW1lbnQoITApLHRoaXMuaWRzPXt9LHRoaXMuaW5kZXg9MCx0aGlzLmNvbGxlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24odCl7dC5kZXN0cm95KCl9KSx0aGlzLm9mZigpfSx6LnByb3RvdHlwZS5vbkRlc3Ryb3llZD1mdW5jdGlvbih0LGkpe2lmKHRoaXMuY29sbGVjdGlvbnMuaW5kZXhPZihpKTwwKXJldHVybiExO3RoaXMuY29sbGVjdGlvbnMuc3BsaWNlKHRoaXMuY29sbGVjdGlvbnMuaW5kZXhPZihpKSwxKX07dmFyIEQ9bmV3IHo7aS5kZWZhdWx0PXtjcmVhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIEQuY3JlYXRlKHQpfSxmYWN0b3J5OkR9fV0pLmRlZmF1bHR9KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG52YXIgTm90eWZOb3RpZmljYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb3R5Zk5vdGlmaWNhdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xyXG4gICAgfVxyXG4gICAgTm90eWZOb3RpZmljYXRpb24ucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgY2IpIHtcclxuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXSB8fCBbXTtcclxuICAgICAgICB0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdID0gY2FsbGJhY2tzLmNvbmNhdChbY2JdKTtcclxuICAgIH07XHJcbiAgICBOb3R5Zk5vdGlmaWNhdGlvbi5wcm90b3R5cGUudHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50VHlwZSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdIHx8IFtdO1xyXG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gY2IoeyB0YXJnZXQ6IF90aGlzLCBldmVudDogZXZlbnQgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb3R5Zk5vdGlmaWNhdGlvbjtcclxufSgpKTtcclxuKGZ1bmN0aW9uIChOb3R5ZkFycmF5RXZlbnQpIHtcclxuICAgIE5vdHlmQXJyYXlFdmVudFtOb3R5ZkFycmF5RXZlbnRbXCJBZGRcIl0gPSAwXSA9IFwiQWRkXCI7XHJcbiAgICBOb3R5ZkFycmF5RXZlbnRbTm90eWZBcnJheUV2ZW50W1wiUmVtb3ZlXCJdID0gMV0gPSBcIlJlbW92ZVwiO1xyXG59KShleHBvcnRzLk5vdHlmQXJyYXlFdmVudCB8fCAoZXhwb3J0cy5Ob3R5ZkFycmF5RXZlbnQgPSB7fSkpO1xyXG52YXIgTm90eWZBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE5vdHlmQXJyYXkoKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gW107XHJcbiAgICB9XHJcbiAgICBOb3R5ZkFycmF5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMucHVzaChlbGVtKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUZuKGVsZW0sIGV4cG9ydHMuTm90eWZBcnJheUV2ZW50LkFkZCwgdGhpcy5ub3RpZmljYXRpb25zKTtcclxuICAgIH07XHJcbiAgICBOb3R5ZkFycmF5LnByb3RvdHlwZS5zcGxpY2UgPSBmdW5jdGlvbiAoaW5kZXgsIG51bSkge1xyXG4gICAgICAgIHZhciBlbGVtID0gdGhpcy5ub3RpZmljYXRpb25zLnNwbGljZShpbmRleCwgbnVtKVswXTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUZuKGVsZW0sIGV4cG9ydHMuTm90eWZBcnJheUV2ZW50LlJlbW92ZSwgdGhpcy5ub3RpZmljYXRpb25zKTtcclxuICAgICAgICByZXR1cm4gZWxlbTtcclxuICAgIH07XHJcbiAgICBOb3R5ZkFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25zLmluZGV4T2YoZWxlbSk7XHJcbiAgICB9O1xyXG4gICAgTm90eWZBcnJheS5wcm90b3R5cGUub25VcGRhdGUgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUZuID0gZm47XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5vdHlmQXJyYXk7XHJcbn0oKSk7XG5cbihmdW5jdGlvbiAoTm90eWZFdmVudCkge1xyXG4gICAgTm90eWZFdmVudFtcIkRpc21pc3NcIl0gPSBcImRpc21pc3NcIjtcclxuICAgIE5vdHlmRXZlbnRbXCJDbGlja1wiXSA9IFwiY2xpY2tcIjtcclxufSkoZXhwb3J0cy5Ob3R5ZkV2ZW50IHx8IChleHBvcnRzLk5vdHlmRXZlbnQgPSB7fSkpO1xyXG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xyXG4gICAgdHlwZXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbm90eWZfX3RvYXN0LS1zdWNjZXNzJyxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzNkYzc2MycsXHJcbiAgICAgICAgICAgIGljb246IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ25vdHlmX19pY29uLS1zdWNjZXNzJyxcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdpJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcclxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbm90eWZfX3RvYXN0LS1lcnJvcicsXHJcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNlZDNkM2QnLFxyXG4gICAgICAgICAgICBpY29uOiB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdub3R5Zl9faWNvbi0tZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ2knLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG4gICAgZHVyYXRpb246IDIwMDAsXHJcbiAgICByaXBwbGU6IHRydWUsXHJcbiAgICBwb3NpdGlvbjoge1xyXG4gICAgICAgIHg6ICdyaWdodCcsXHJcbiAgICAgICAgeTogJ2JvdHRvbScsXHJcbiAgICB9LFxyXG4gICAgZGlzbWlzc2libGU6IGZhbHNlLFxyXG59O1xuXG52YXIgTm90eWZWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTm90eWZWaWV3KCkge1xyXG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XHJcbiAgICAgICAgdGhpcy5YX1BPU0lUSU9OX0ZMRVhfTUFQID0ge1xyXG4gICAgICAgICAgICBsZWZ0OiAnZmxleC1zdGFydCcsXHJcbiAgICAgICAgICAgIGNlbnRlcjogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgIHJpZ2h0OiAnZmxleC1lbmQnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5ZX1BPU0lUSU9OX0ZMRVhfTUFQID0ge1xyXG4gICAgICAgICAgICB0b3A6ICdmbGV4LXN0YXJ0JyxcclxuICAgICAgICAgICAgY2VudGVyOiAnY2VudGVyJyxcclxuICAgICAgICAgICAgYm90dG9tOiAnZmxleC1lbmQnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gQ3JlYXRlcyB0aGUgbWFpbiBub3RpZmljYXRpb25zIGNvbnRhaW5lclxyXG4gICAgICAgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgIHZhciBub3R5ZkNvbnRhaW5lciA9IHRoaXMuX2NyZWF0ZUhUTE1FbGVtZW50KHsgdGFnTmFtZTogJ2RpdicsIGNsYXNzTmFtZTogJ25vdHlmJyB9KTtcclxuICAgICAgICBkb2NGcmFnLmFwcGVuZENoaWxkKG5vdHlmQ29udGFpbmVyKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY0ZyYWcpO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbm90eWZDb250YWluZXI7XHJcbiAgICAgICAgLy8gSWRlbnRpZmllcyB0aGUgbWFpbiBhbmltYXRpb24gZW5kIGV2ZW50XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb25FbmRFdmVudE5hbWUgPSB0aGlzLl9nZXRBbmltYXRpb25FbmRFdmVudE5hbWUoKTtcclxuICAgICAgICB0aGlzLl9jcmVhdGVBMTF5Q29udGFpbmVyKCk7XHJcbiAgICB9XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2ZW50LCBjYikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLmV2ZW50cyksIChfYSA9IHt9LCBfYVtldmVudF0gPSBjYiwgX2EpKTtcclxuICAgIH07XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24sIHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5Ob3R5ZkFycmF5RXZlbnQuQWRkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09IGV4cG9ydHMuTm90eWZBcnJheUV2ZW50LlJlbW92ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLnJlbW92ZU5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciByZW5kZXJlZE5vdGlmaWNhdGlvbiA9IHRoaXMuX3BvcFJlbmRlcmVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgdmFyIG5vZGU7XHJcbiAgICAgICAgaWYgKCFyZW5kZXJlZE5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vZGUgPSByZW5kZXJlZE5vdGlmaWNhdGlvbi5ub2RlO1xyXG4gICAgICAgIG5vZGUuY2xhc3NMaXN0LmFkZCgnbm90eWZfX3RvYXN0LS1kaXNhcHBlYXInKTtcclxuICAgICAgICB2YXIgaGFuZGxlRXZlbnQ7XHJcbiAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuYW5pbWF0aW9uRW5kRXZlbnROYW1lLCAoaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKF90aGlzLmFuaW1hdGlvbkVuZEV2ZW50TmFtZSwgaGFuZGxlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxuICAgIE5vdHlmVmlldy5wcm90b3R5cGUuYWRkTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fcmVuZGVyTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2goeyBub3RpZmljYXRpb246IG5vdGlmaWNhdGlvbiwgbm9kZTogbm9kZSB9KTtcclxuICAgICAgICAvLyBGb3IgYTExeSBwdXJwb3Nlcywgd2Ugc3RpbGwgd2FudCB0byBhbm5vdW5jZSB0aGF0IHRoZXJlJ3MgYSBub3RpZmljYXRpb24gaW4gdGhlIHNjcmVlblxyXG4gICAgICAgIC8vIGV2ZW4gaWYgaXQgY29tZXMgd2l0aCBubyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMuX2Fubm91bmNlKG5vdGlmaWNhdGlvbi5vcHRpb25zLm1lc3NhZ2UgfHwgJ05vdGlmaWNhdGlvbicpO1xyXG4gICAgfTtcclxuICAgIE5vdHlmVmlldy5wcm90b3R5cGUuX3JlbmRlck5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgdmFyIGNhcmQgPSB0aGlzLl9idWlsZE5vdGlmaWNhdGlvbkNhcmQobm90aWZpY2F0aW9uKTtcclxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gbm90aWZpY2F0aW9uLm9wdGlvbnMuY2xhc3NOYW1lO1xyXG4gICAgICAgIGlmIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgKF9hID0gY2FyZC5jbGFzc0xpc3QpLmFkZC5hcHBseShfYSwgY2xhc3NOYW1lLnNwbGl0KCcgJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChjYXJkKTtcclxuICAgICAgICByZXR1cm4gY2FyZDtcclxuICAgIH07XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLl9wb3BSZW5kZXJlZE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHtcclxuICAgICAgICB2YXIgaWR4ID0gLTE7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5vdGlmaWNhdGlvbnMubGVuZ3RoICYmIGlkeCA8IDA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25zW2ldLm5vdGlmaWNhdGlvbiA9PT0gbm90aWZpY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpZHggIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbnMuc3BsaWNlKGlkeCwgMSlbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH07XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLmdldFhQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EueCkgfHwgJ3JpZ2h0JztcclxuICAgIH07XHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLmdldFlQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiAoKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnBvc2l0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EueSkgfHwgJ2JvdHRvbSc7XHJcbiAgICB9O1xyXG4gICAgTm90eWZWaWV3LnByb3RvdHlwZS5hZGp1c3RDb250YWluZXJBbGlnbm1lbnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBhbGlnbiA9IHRoaXMuWF9QT1NJVElPTl9GTEVYX01BUFt0aGlzLmdldFhQb3NpdGlvbihvcHRpb25zKV07XHJcbiAgICAgICAgdmFyIGp1c3RpZnkgPSB0aGlzLllfUE9TSVRJT05fRkxFWF9NQVBbdGhpcy5nZXRZUG9zaXRpb24ob3B0aW9ucyldO1xyXG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMuY29udGFpbmVyLnN0eWxlO1xyXG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KCdqdXN0aWZ5LWNvbnRlbnQnLCBqdXN0aWZ5KTtcclxuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnYWxpZ24taXRlbXMnLCBhbGlnbik7XHJcbiAgICB9O1xyXG4gICAgTm90eWZWaWV3LnByb3RvdHlwZS5fYnVpbGROb3RpZmljYXRpb25DYXJkID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gbm90aWZpY2F0aW9uLm9wdGlvbnM7XHJcbiAgICAgICAgdmFyIGljb25PcHRzID0gb3B0aW9ucy5pY29uO1xyXG4gICAgICAgIC8vIEFkanVzdCBjb250YWluZXIgYWNjb3JkaW5nIHRvIHBvc2l0aW9uIChlLmcuIHRvcC1sZWZ0LCBib3R0b20tY2VudGVyLCBldGMpXHJcbiAgICAgICAgdGhpcy5hZGp1c3RDb250YWluZXJBbGlnbm1lbnQob3B0aW9ucyk7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGVsZW1lbnRzXHJcbiAgICAgICAgdmFyIG5vdGlmaWNhdGlvbkVsZW0gPSB0aGlzLl9jcmVhdGVIVExNRWxlbWVudCh7IHRhZ05hbWU6ICdkaXYnLCBjbGFzc05hbWU6ICdub3R5Zl9fdG9hc3QnIH0pO1xyXG4gICAgICAgIHZhciByaXBwbGUgPSB0aGlzLl9jcmVhdGVIVExNRWxlbWVudCh7IHRhZ05hbWU6ICdkaXYnLCBjbGFzc05hbWU6ICdub3R5Zl9fcmlwcGxlJyB9KTtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IHRoaXMuX2NyZWF0ZUhUTE1FbGVtZW50KHsgdGFnTmFtZTogJ2RpdicsIGNsYXNzTmFtZTogJ25vdHlmX193cmFwcGVyJyB9KTtcclxuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuX2NyZWF0ZUhUTE1FbGVtZW50KHsgdGFnTmFtZTogJ2RpdicsIGNsYXNzTmFtZTogJ25vdHlmX19tZXNzYWdlJyB9KTtcclxuICAgICAgICBtZXNzYWdlLmlubmVySFRNTCA9IG9wdGlvbnMubWVzc2FnZSB8fCAnJztcclxuICAgICAgICB2YXIgY29sb3IgPSBvcHRpb25zLmJhY2tncm91bmQgfHwgb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAgICAgLy8gQnVpbGQgdGhlIGljb24gYW5kIGFwcGVuZCBpdCB0byB0aGUgY2FyZFxyXG4gICAgICAgIGlmIChpY29uT3B0cyAmJiB0eXBlb2YgaWNvbk9wdHMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHZhciBpY29uQ29udGFpbmVyID0gdGhpcy5fY3JlYXRlSFRMTUVsZW1lbnQoeyB0YWdOYW1lOiAnZGl2JywgY2xhc3NOYW1lOiAnbm90eWZfX2ljb24nIH0pO1xyXG4gICAgICAgICAgICB2YXIgaWNvbiA9IHRoaXMuX2NyZWF0ZUhUTE1FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6IGljb25PcHRzLnRhZ05hbWUgfHwgJ2knLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBpY29uT3B0cy5jbGFzc05hbWUsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBpY29uT3B0cy50ZXh0LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdmFyIGljb25Db2xvciA9IChfYSA9IGljb25PcHRzLmNvbG9yKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjb2xvcjtcclxuICAgICAgICAgICAgaWYgKGljb25Db2xvcikge1xyXG4gICAgICAgICAgICAgICAgaWNvbi5zdHlsZS5jb2xvciA9IGljb25Db2xvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpY29uQ29udGFpbmVyLmFwcGVuZENoaWxkKGljb24pO1xyXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGljb25Db250YWluZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKG1lc3NhZ2UpO1xyXG4gICAgICAgIG5vdGlmaWNhdGlvbkVsZW0uYXBwZW5kQ2hpbGQod3JhcHBlcik7XHJcbiAgICAgICAgLy8gQWRkIHJpcHBsZSBpZiBhcHBsaWNhYmxlLCBlbHNlIGp1c3QgcGFpbnQgdGhlIGZ1bGwgdG9hc3RcclxuICAgICAgICBpZiAoY29sb3IpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucmlwcGxlKSB7XHJcbiAgICAgICAgICAgICAgICByaXBwbGUuc3R5bGUuYmFja2dyb3VuZCA9IGNvbG9yO1xyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uRWxlbS5hcHBlbmRDaGlsZChyaXBwbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uRWxlbS5zdHlsZS5iYWNrZ3JvdW5kID0gY29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIGRpc21pc3MgYnV0dG9uXHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlzbWlzc2libGUpIHtcclxuICAgICAgICAgICAgdmFyIGRpc21pc3NXcmFwcGVyID0gdGhpcy5fY3JlYXRlSFRMTUVsZW1lbnQoeyB0YWdOYW1lOiAnZGl2JywgY2xhc3NOYW1lOiAnbm90eWZfX2Rpc21pc3MnIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzbWlzc0J1dHRvbiA9IHRoaXMuX2NyZWF0ZUhUTE1FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgIHRhZ05hbWU6ICdidXR0b24nLFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbm90eWZfX2Rpc21pc3MtYnRuJyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRpc21pc3NXcmFwcGVyLmFwcGVuZENoaWxkKGRpc21pc3NCdXR0b24pO1xyXG4gICAgICAgICAgICB3cmFwcGVyLmFwcGVuZENoaWxkKGRpc21pc3NXcmFwcGVyKTtcclxuICAgICAgICAgICAgbm90aWZpY2F0aW9uRWxlbS5jbGFzc0xpc3QuYWRkKFwibm90eWZfX3RvYXN0LS1kaXNtaXNzaWJsZVwiKTtcclxuICAgICAgICAgICAgZGlzbWlzc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IF90aGlzLmV2ZW50cylbZXhwb3J0cy5Ob3R5ZkV2ZW50LkRpc21pc3NdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgeyB0YXJnZXQ6IG5vdGlmaWNhdGlvbiwgZXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub3RpZmljYXRpb25FbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7IHZhciBfYSwgX2I7IHJldHVybiAoX2IgPSAoX2EgPSBfdGhpcy5ldmVudHMpW2V4cG9ydHMuTm90eWZFdmVudC5DbGlja10pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB7IHRhcmdldDogbm90aWZpY2F0aW9uLCBldmVudDogZXZlbnQgfSk7IH0pO1xyXG4gICAgICAgIC8vIEFkanVzdCBtYXJnaW5zIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0cyBhbiB1cHBlciBvciBsb3dlciBub3RpZmljYXRpb25cclxuICAgICAgICB2YXIgY2xhc3NOYW1lID0gdGhpcy5nZXRZUG9zaXRpb24ob3B0aW9ucykgPT09ICd0b3AnID8gJ3VwcGVyJyA6ICdsb3dlcic7XHJcbiAgICAgICAgbm90aWZpY2F0aW9uRWxlbS5jbGFzc0xpc3QuYWRkKFwibm90eWZfX3RvYXN0LS1cIiArIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbkVsZW07XHJcbiAgICB9O1xyXG4gICAgTm90eWZWaWV3LnByb3RvdHlwZS5fY3JlYXRlSFRMTUVsZW1lbnQgPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICB2YXIgdGFnTmFtZSA9IF9hLnRhZ05hbWUsIGNsYXNzTmFtZSA9IF9hLmNsYXNzTmFtZSwgdGV4dCA9IF9hLnRleHQ7XHJcbiAgICAgICAgdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xyXG4gICAgICAgIGlmIChjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgZWxlbS5jbGFzc05hbWUgPSBjbGFzc05hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsZW0udGV4dENvbnRlbnQgPSB0ZXh0IHx8IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGludmlzaWJsZSBjb250YWluZXIgd2hpY2ggd2lsbCBhbm5vdW5jZSB0aGUgbm90eWZzIHRvXHJcbiAgICAgKiBzY3JlZW4gcmVhZGVyc1xyXG4gICAgICovXHJcbiAgICBOb3R5ZlZpZXcucHJvdG90eXBlLl9jcmVhdGVBMTF5Q29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhMTF5Q29udGFpbmVyID0gdGhpcy5fY3JlYXRlSFRMTUVsZW1lbnQoeyB0YWdOYW1lOiAnZGl2JywgY2xhc3NOYW1lOiAnbm90eWYtYW5ub3VuY2VyJyB9KTtcclxuICAgICAgICBhMTF5Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xyXG4gICAgICAgIGExMXlDb250YWluZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCAncG9saXRlJyk7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBhMTF5IGNvbnRhaW5lciB0byBiZSB2aXNpYmxlIGhpZGRlbi4gQ2FuJ3QgdXNlIGRpc3BsYXk6IG5vbmUgYXNcclxuICAgICAgICAvLyBzY3JlZW4gcmVhZGVycyB3b24ndCByZWFkIGl0LlxyXG4gICAgICAgIGExMXlDb250YWluZXIuc3R5bGUuYm9yZGVyID0gJzAnO1xyXG4gICAgICAgIGExMXlDb250YWluZXIuc3R5bGUuY2xpcCA9ICdyZWN0KDAgMCAwIDApJztcclxuICAgICAgICBhMTF5Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxcHgnO1xyXG4gICAgICAgIGExMXlDb250YWluZXIuc3R5bGUubWFyZ2luID0gJy0xcHgnO1xyXG4gICAgICAgIGExMXlDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgICAgICBhMTF5Q29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAnMCc7XHJcbiAgICAgICAgYTExeUNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbiAgICAgICAgYTExeUNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxcHgnO1xyXG4gICAgICAgIGExMXlDb250YWluZXIuc3R5bGUub3V0bGluZSA9ICcwJztcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGExMXlDb250YWluZXIpO1xyXG4gICAgICAgIHRoaXMuYTExeUNvbnRhaW5lciA9IGExMXlDb250YWluZXI7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbm5vdW5jZXMgYSBtZXNzYWdlIHRvIHNjcmVlbnJlYWRlcnMuXHJcbiAgICAgKi9cclxuICAgIE5vdHlmVmlldy5wcm90b3R5cGUuX2Fubm91bmNlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuYTExeUNvbnRhaW5lci50ZXh0Q29udGVudCA9ICcnO1xyXG4gICAgICAgIC8vIFRoaXMgMTAwbXMgdGltZW91dCBpcyBuZWNlc3NhcnkgZm9yIHNvbWUgYnJvd3NlciArIHNjcmVlbi1yZWFkZXIgY29tYmluYXRpb25zOlxyXG4gICAgICAgIC8vIC0gQm90aCBKQVdTIGFuZCBOVkRBIG92ZXIgSUUxMSB3aWxsIG5vdCBhbm5vdW5jZSBhbnl0aGluZyB3aXRob3V0IGEgbm9uLXplcm8gdGltZW91dC5cclxuICAgICAgICAvLyAtIFdpdGggQ2hyb21lIGFuZCBJRTExIHdpdGggTlZEQSBvciBKQVdTLCBhIHJlcGVhdGVkIChpZGVudGljYWwpIG1lc3NhZ2Ugd29uJ3QgYmUgcmVhZCBhXHJcbiAgICAgICAgLy8gICBzZWNvbmQgdGltZSB3aXRob3V0IGNsZWFyaW5nIGFuZCB0aGVuIHVzaW5nIGEgbm9uLXplcm8gZGVsYXkuXHJcbiAgICAgICAgLy8gKHVzaW5nIEpBV1MgMTcgYXQgdGltZSBvZiB0aGlzIHdyaXRpbmcpLlxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL21hdGVyaWFsMi9ibG9iL21hc3Rlci9zcmMvY2RrL2ExMXkvbGl2ZS1hbm5vdW5jZXIvbGl2ZS1hbm5vdW5jZXIudHNcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgX3RoaXMuYTExeUNvbnRhaW5lci50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgfSwgMTAwKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZSB3aGljaCBhbmltYXRpb25lbmQgZXZlbnQgaXMgc3VwcG9ydGVkXHJcbiAgICAgKi9cclxuICAgIE5vdHlmVmlldy5wcm90b3R5cGUuX2dldEFuaW1hdGlvbkVuZEV2ZW50TmFtZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdfZmFrZScpO1xyXG4gICAgICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcclxuICAgICAgICAgICAgTW96VHJhbnNpdGlvbjogJ2FuaW1hdGlvbmVuZCcsXHJcbiAgICAgICAgICAgIE9UcmFuc2l0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXHJcbiAgICAgICAgICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnYW5pbWF0aW9uZW5kJyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciB0O1xyXG4gICAgICAgIGZvciAodCBpbiB0cmFuc2l0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE5vIHN1cHBvcnRlZCBhbmltYXRpb24gZW5kIGV2ZW50LiBVc2luZyBcImFuaW1hdGlvbmVuZFwiIGFzIGEgZmFsbGJhY2tcclxuICAgICAgICByZXR1cm4gJ2FuaW1hdGlvbmVuZCc7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE5vdHlmVmlldztcclxufSgpKTtcblxuLyoqXHJcbiAqIE1haW4gY29udHJvbGxlciBjbGFzcy4gRGVmaW5lcyB0aGUgbWFpbiBOb3R5ZiBBUEkuXHJcbiAqL1xyXG52YXIgTm90eWYgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBOb3R5ZihvcHRzKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmRpc21pc3MgPSB0aGlzLl9yZW1vdmVOb3RpZmljYXRpb247XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zID0gbmV3IE5vdHlmQXJyYXkoKTtcclxuICAgICAgICB0aGlzLnZpZXcgPSBuZXcgTm90eWZWaWV3KCk7XHJcbiAgICAgICAgdmFyIHR5cGVzID0gdGhpcy5yZWdpc3RlclR5cGVzKG9wdHMpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMpLCBvcHRzKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMudHlwZXMgPSB0eXBlcztcclxuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMub25VcGRhdGUoZnVuY3Rpb24gKGVsZW0sIHR5cGUpIHsgcmV0dXJuIF90aGlzLnZpZXcudXBkYXRlKGVsZW0sIHR5cGUpOyB9KTtcclxuICAgICAgICB0aGlzLnZpZXcub24oZXhwb3J0cy5Ob3R5ZkV2ZW50LkRpc21pc3MsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gX2EudGFyZ2V0LCBldmVudCA9IF9hLmV2ZW50O1xyXG4gICAgICAgICAgICBfdGhpcy5fcmVtb3ZlTm90aWZpY2F0aW9uKHRhcmdldCk7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICAgICAgdGFyZ2V0Wyd0cmlnZ2VyRXZlbnQnXShleHBvcnRzLk5vdHlmRXZlbnQuRGlzbWlzcywgZXZlbnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tc3RyaW5nLWxpdGVyYWxcclxuICAgICAgICB0aGlzLnZpZXcub24oZXhwb3J0cy5Ob3R5ZkV2ZW50LkNsaWNrLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IF9hLnRhcmdldCwgZXZlbnQgPSBfYS5ldmVudDtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFsndHJpZ2dlckV2ZW50J10oZXhwb3J0cy5Ob3R5ZkV2ZW50LkNsaWNrLCBldmVudCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBOb3R5Zi5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKCdlcnJvcicsIHBheWxvYWQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZW4ob3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgTm90eWYucHJvdG90eXBlLnN1Y2Nlc3MgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5ub3JtYWxpemVPcHRpb25zKCdzdWNjZXNzJywgcGF5bG9hZCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbihvcHRpb25zKTtcclxuICAgIH07XHJcbiAgICBOb3R5Zi5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRPcHRzID0gdGhpcy5vcHRpb25zLnR5cGVzLmZpbmQoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gX2EudHlwZTtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGUgPT09IG9wdGlvbnMudHlwZTtcclxuICAgICAgICB9KSB8fCB7fTtcclxuICAgICAgICB2YXIgY29uZmlnID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRlZmF1bHRPcHRzKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5hc3NpZ25Qcm9wcyhbJ3JpcHBsZScsICdwb3NpdGlvbicsICdkaXNtaXNzaWJsZSddLCBjb25maWcpO1xyXG4gICAgICAgIHZhciBub3RpZmljYXRpb24gPSBuZXcgTm90eWZOb3RpZmljYXRpb24oY29uZmlnKTtcclxuICAgICAgICB0aGlzLl9wdXNoTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIG5vdGlmaWNhdGlvbjtcclxuICAgIH07XHJcbiAgICBOb3R5Zi5wcm90b3R5cGUuZGlzbWlzc0FsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB3aGlsZSAodGhpcy5ub3RpZmljYXRpb25zLnNwbGljZSgwLCAxKSlcclxuICAgICAgICAgICAgO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQXNzaWducyBwcm9wZXJ0aWVzIHRvIGEgY29uZmlnIG9iamVjdCBiYXNlZCBvbiB0d28gcnVsZXM6XHJcbiAgICAgKiAxLiBJZiB0aGUgY29uZmlnIG9iamVjdCBhbHJlYWR5IHNldHMgdGhhdCBwcm9wLCBsZWF2ZSBpdCBhcyBzb1xyXG4gICAgICogMi4gT3RoZXJ3aXNlLCB1c2UgdGhlIGRlZmF1bHQgcHJvcCBmcm9tIHRoZSBnbG9iYWwgb3B0aW9uc1xyXG4gICAgICpcclxuICAgICAqIEl0J3MgaW50ZW5kZWQgdG8gYnVpbGQgdGhlIGZpbmFsIGNvbmZpZyBvYmplY3QgdG8gb3BlbiBhIG5vdGlmaWNhdGlvbi4gZS5nLiBpZlxyXG4gICAgICogJ2Rpc21pc3NpYmxlJyBpcyBub3Qgc2V0LCB0aGVuIHVzZSB0aGUgdmFsdWUgZnJvbSB0aGUgZ2xvYmFsIGNvbmZpZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcHJvcHMgLSBwcm9wZXJ0aWVzIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSBjb25maWcgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gb2JqZWN0IHdob3NlIHByb3BlcnRpZXMgbmVlZCB0byBiZSBzZXRcclxuICAgICAqL1xyXG4gICAgTm90eWYucHJvdG90eXBlLmFzc2lnblByb3BzID0gZnVuY3Rpb24gKHByb3BzLCBjb25maWcpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgLy8gaW50ZW50aW9uYWwgZG91YmxlIGVxdWFsaXR5IHRvIGNoZWNrIGZvciBib3RoIG51bGwgYW5kIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICBjb25maWdbcHJvcF0gPSBjb25maWdbcHJvcF0gPT0gbnVsbCA/IF90aGlzLm9wdGlvbnNbcHJvcF0gOiBjb25maWdbcHJvcF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTm90eWYucHJvdG90eXBlLl9wdXNoTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2gobm90aWZpY2F0aW9uKTtcclxuICAgICAgICB2YXIgZHVyYXRpb24gPSBub3RpZmljYXRpb24ub3B0aW9ucy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gbm90aWZpY2F0aW9uLm9wdGlvbnMuZHVyYXRpb24gOiB0aGlzLm9wdGlvbnMuZHVyYXRpb247XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3JlbW92ZU5vdGlmaWNhdGlvbihub3RpZmljYXRpb24pOyB9LCBkdXJhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE5vdHlmLnByb3RvdHlwZS5fcmVtb3ZlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKG5vdGlmaWNhdGlvbikge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMubm90aWZpY2F0aW9ucy5pbmRleE9mKG5vdGlmaWNhdGlvbik7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTm90eWYucHJvdG90eXBlLm5vcm1hbGl6ZU9wdGlvbnMgPSBmdW5jdGlvbiAodHlwZSwgcGF5bG9hZCkge1xyXG4gICAgICAgIHZhciBvcHRpb25zID0geyB0eXBlOiB0eXBlIH07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBvcHRpb25zLm1lc3NhZ2UgPSBwYXlsb2FkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zKSwgcGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfTtcclxuICAgIE5vdHlmLnByb3RvdHlwZS5yZWdpc3RlclR5cGVzID0gZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICB2YXIgaW5jb21pbmdUeXBlcyA9ICgob3B0cyAmJiBvcHRzLnR5cGVzKSB8fCBbXSkuc2xpY2UoKTtcclxuICAgICAgICB2YXIgZmluYWxEZWZhdWx0VHlwZXMgPSBERUZBVUxUX09QVElPTlMudHlwZXMubWFwKGZ1bmN0aW9uIChkZWZhdWx0VHlwZSkge1xyXG4gICAgICAgICAgICAvLyBmaW5kIGlmIHRoZXJlJ3MgYSBkZWZhdWx0IHR5cGUgd2l0aGluIHRoZSB1c2VyIGlucHV0J3MgdHlwZXMsIGlmIHNvLCBpdCBtZWFucyB0aGUgdXNlclxyXG4gICAgICAgICAgICAvLyB3YW50cyB0byBjaGFuZ2Ugc29tZSBvZiB0aGUgZGVmYXVsdCBzZXR0aW5nc1xyXG4gICAgICAgICAgICB2YXIgdXNlclR5cGVJZHggPSAtMTtcclxuICAgICAgICAgICAgaW5jb21pbmdUeXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0LCBpZHgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT09IGRlZmF1bHRUeXBlLnR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlclR5cGVJZHggPSBpZHg7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgdXNlclR5cGUgPSB1c2VyVHlwZUlkeCAhPT0gLTEgPyBpbmNvbWluZ1R5cGVzLnNwbGljZSh1c2VyVHlwZUlkeCwgMSlbMF0gOiB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0VHlwZSksIHVzZXJUeXBlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZmluYWxEZWZhdWx0VHlwZXMuY29uY2F0KGluY29taW5nVHlwZXMpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBOb3R5ZjtcclxufSgpKTtcblxuZXhwb3J0cy5ERUZBVUxUX09QVElPTlMgPSBERUZBVUxUX09QVElPTlM7XG5leHBvcnRzLk5vdHlmID0gTm90eWY7XG5leHBvcnRzLk5vdHlmQXJyYXkgPSBOb3R5ZkFycmF5O1xuZXhwb3J0cy5Ob3R5Zk5vdGlmaWNhdGlvbiA9IE5vdHlmTm90aWZpY2F0aW9uO1xuZXhwb3J0cy5Ob3R5ZlZpZXcgPSBOb3R5ZlZpZXc7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiLyohXG4gKiBcbiAqICAgc2ltcGxlLWtleWJvYXJkIHYyLjMyLjQ4XG4gKiAgIGh0dHBzOi8vZ2l0aHViLmNvbS9ob2RnZWYvc2ltcGxlLWtleWJvYXJkXG4gKiBcbiAqICAgQ29weXJpZ2h0IChjKSBGcmFuY2lzY28gSG9kZ2UgKGh0dHBzOi8vZ2l0aHViLmNvbS9ob2RnZWYpXG4gKiBcbiAqICAgVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiAgIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqICAgXG4gKi9cbiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiU2ltcGxlS2V5Ym9hcmRcIixbXSxlKTpcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5TaW1wbGVLZXlib2FyZD1lKCk6dC5TaW1wbGVLZXlib2FyZD1lKCl9KHRoaXMsKGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBvPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pLG8ubD0hMCxvLmV4cG9ydHN9cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ubT10LF9fd2VicGFja19yZXF1aXJlX18uYz1lLF9fd2VicGFja19yZXF1aXJlX18uZD1mdW5jdGlvbih0LGUsbil7X193ZWJwYWNrX3JlcXVpcmVfXy5vKHQsZSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsZ2V0Om59KX0sX193ZWJwYWNrX3JlcXVpcmVfXy5yPWZ1bmN0aW9uKHQpe1widW5kZWZpbmVkXCIhPT10eXBlb2YgU3ltYm9sJiZTeW1ib2wudG9TdHJpbmdUYWcmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFN5bWJvbC50b1N0cmluZ1RhZyx7dmFsdWU6XCJNb2R1bGVcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnQ9ZnVuY3Rpb24odCxlKXtpZigxJmUmJih0PV9fd2VicGFja19yZXF1aXJlX18odCkpLDgmZSlyZXR1cm4gdDtpZig0JmUmJlwib2JqZWN0XCI9PT10eXBlb2YgdCYmdCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBuPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5yKG4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOnR9KSwyJmUmJlwic3RyaW5nXCIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KV9fd2VicGFja19yZXF1aXJlX18uZChuLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIG59LF9fd2VicGFja19yZXF1aXJlX18ubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5kKGUsXCJhXCIsZSksZX0sX193ZWJwYWNrX3JlcXVpcmVfXy5vPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnA9XCIvXCIsX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnM9MCl9KFtmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPW4oMSl9LGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtuLnIoZSk7ZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodCxlKXt2YXIgbjtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIFN5bWJvbHx8bnVsbD09dFtTeW1ib2wuaXRlcmF0b3JdKXtpZihBcnJheS5pc0FycmF5KHQpfHwobj1mdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybjtpZihcInN0cmluZ1wiPT09dHlwZW9mIHQpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHQsZSk7dmFyIG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpLnNsaWNlKDgsLTEpO1wiT2JqZWN0XCI9PT1uJiZ0LmNvbnN0cnVjdG9yJiYobj10LmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1ufHxcIlNldFwiPT09bilyZXR1cm4gQXJyYXkuZnJvbSh0KTtpZihcIkFyZ3VtZW50c1wiPT09bnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KHQsZSl9KHQpKXx8ZSYmdCYmXCJudW1iZXJcIj09PXR5cGVvZiB0Lmxlbmd0aCl7biYmKHQ9bik7dmFyIG89MCxGPWZ1bmN0aW9uKCl7fTtyZXR1cm57czpGLG46ZnVuY3Rpb24oKXtyZXR1cm4gbz49dC5sZW5ndGg/e2RvbmU6ITB9Ontkb25lOiExLHZhbHVlOnRbbysrXX19LGU6ZnVuY3Rpb24odCl7dGhyb3cgdH0sZjpGfX10aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9dmFyIGkscz0hMCxhPSExO3JldHVybntzOmZ1bmN0aW9uKCl7bj10W1N5bWJvbC5pdGVyYXRvcl0oKX0sbjpmdW5jdGlvbigpe3ZhciB0PW4ubmV4dCgpO3JldHVybiBzPXQuZG9uZSx0fSxlOmZ1bmN0aW9uKHQpe2E9ITAsaT10fSxmOmZ1bmN0aW9uKCl7dHJ5e3N8fG51bGw9PW4ucmV0dXJufHxuLnJldHVybigpfWZpbmFsbHl7aWYoYSl0aHJvdyBpfX19fWZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHQsZSl7KG51bGw9PWV8fGU+dC5sZW5ndGgpJiYoZT10Lmxlbmd0aCk7Zm9yKHZhciBuPTAsbz1uZXcgQXJyYXkoZSk7bjxlO24rKylvW25dPXRbbl07cmV0dXJuIG99ZnVuY3Rpb24gX3R5cGVvZih0KXtyZXR1cm4oX3R5cGVvZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSkodCl9ZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fXZhciBvLGkscyxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gVXRpbGl0aWVzKHQpe3ZhciBlPXQuZ2V0T3B0aW9ucyxuPXQuZ2V0Q2FyZXRQb3NpdGlvbixvPXQuZ2V0Q2FyZXRQb3NpdGlvbkVuZCxpPXQuZGlzcGF0Y2g7IWZ1bmN0aW9uKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxVdGlsaXRpZXMpLHRoaXMuZ2V0T3B0aW9ucz1lLHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbj1uLHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbkVuZD1vLHRoaXMuZGlzcGF0Y2g9aSxVdGlsaXRpZXMuYmluZE1ldGhvZHMoVXRpbGl0aWVzLHRoaXMpfXZhciB0LGUsbjtyZXR1cm4gdD1VdGlsaXRpZXMsbj1be2tleTpcImJpbmRNZXRob2RzXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbixvPV9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQucHJvdG90eXBlKSk7dHJ5e2ZvcihvLnMoKTshKG49by5uKCkpLmRvbmU7KXt2YXIgaT1uLnZhbHVlO1wiY29uc3RydWN0b3JcIj09PWl8fFwiYmluZE1ldGhvZHNcIj09PWl8fChlW2ldPWVbaV0uYmluZChlKSl9fWNhdGNoKHMpe28uZShzKX1maW5hbGx5e28uZigpfX19XSwoZT1be2tleTpcImdldEJ1dHRvbkNsYXNzXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbmNsdWRlcyhcIntcIikmJnQuaW5jbHVkZXMoXCJ9XCIpJiZcInsvL31cIiE9PXQ/XCJmdW5jdGlvbkJ0blwiOlwic3RhbmRhcmRCdG5cIixuPXQucmVwbGFjZShcIntcIixcIlwiKS5yZXBsYWNlKFwifVwiLFwiXCIpLG89XCJcIjtyZXR1cm5cInN0YW5kYXJkQnRuXCIhPT1lJiYobz1cIiBoZy1idXR0b24tXCIuY29uY2F0KG4pKSxcImhnLVwiLmNvbmNhdChlKS5jb25jYXQobyl9fSx7a2V5OlwiZ2V0RGVmYXVsdERpcGxheVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJue1wie2Jrc3B9XCI6XCJiYWNrc3BhY2VcIixcIntiYWNrc3BhY2V9XCI6XCJiYWNrc3BhY2VcIixcIntlbnRlcn1cIjpcIjwgZW50ZXJcIixcIntzaGlmdH1cIjpcInNoaWZ0XCIsXCJ7c2hpZnRsZWZ0fVwiOlwic2hpZnRcIixcIntzaGlmdHJpZ2h0fVwiOlwic2hpZnRcIixcInthbHR9XCI6XCJhbHRcIixcIntzfVwiOlwic2hpZnRcIixcInt0YWJ9XCI6XCJ0YWJcIixcIntsb2NrfVwiOlwiY2Fwc1wiLFwie2NhcHNsb2NrfVwiOlwiY2Fwc1wiLFwie2FjY2VwdH1cIjpcIlN1Ym1pdFwiLFwie3NwYWNlfVwiOlwiIFwiLFwiey8vfVwiOlwiIFwiLFwie2VzY31cIjpcImVzY1wiLFwie2VzY2FwZX1cIjpcImVzY1wiLFwie2YxfVwiOlwiZjFcIixcIntmMn1cIjpcImYyXCIsXCJ7ZjN9XCI6XCJmM1wiLFwie2Y0fVwiOlwiZjRcIixcIntmNX1cIjpcImY1XCIsXCJ7ZjZ9XCI6XCJmNlwiLFwie2Y3fVwiOlwiZjdcIixcIntmOH1cIjpcImY4XCIsXCJ7Zjl9XCI6XCJmOVwiLFwie2YxMH1cIjpcImYxMFwiLFwie2YxMX1cIjpcImYxMVwiLFwie2YxMn1cIjpcImYxMlwiLFwie251bXBhZGRpdmlkZX1cIjpcIi9cIixcIntudW1sb2NrfVwiOlwibG9ja1wiLFwie2Fycm93dXB9XCI6XCJcXHUyMTkxXCIsXCJ7YXJyb3dsZWZ0fVwiOlwiXFx1MjE5MFwiLFwie2Fycm93ZG93bn1cIjpcIlxcdTIxOTNcIixcInthcnJvd3JpZ2h0fVwiOlwiXFx1MjE5MlwiLFwie3BydHNjcn1cIjpcInByaW50XCIsXCJ7c2Nyb2xsbG9ja31cIjpcInNjcm9sbFwiLFwie3BhdXNlfVwiOlwicGF1c2VcIixcIntpbnNlcnR9XCI6XCJpbnNcIixcIntob21lfVwiOlwiaG9tZVwiLFwie3BhZ2V1cH1cIjpcInVwXCIsXCJ7ZGVsZXRlfVwiOlwiZGVsXCIsXCJ7ZW5kfVwiOlwiZW5kXCIsXCJ7cGFnZWRvd259XCI6XCJkb3duXCIsXCJ7bnVtcGFkbXVsdGlwbHl9XCI6XCIqXCIsXCJ7bnVtcGFkc3VidHJhY3R9XCI6XCItXCIsXCJ7bnVtcGFkYWRkfVwiOlwiK1wiLFwie251bXBhZGVudGVyfVwiOlwiZW50ZXJcIixcIntwZXJpb2R9XCI6XCIuXCIsXCJ7bnVtcGFkZGVjaW1hbH1cIjpcIi5cIixcIntudW1wYWQwfVwiOlwiMFwiLFwie251bXBhZDF9XCI6XCIxXCIsXCJ7bnVtcGFkMn1cIjpcIjJcIixcIntudW1wYWQzfVwiOlwiM1wiLFwie251bXBhZDR9XCI6XCI0XCIsXCJ7bnVtcGFkNX1cIjpcIjVcIixcIntudW1wYWQ2fVwiOlwiNlwiLFwie251bXBhZDd9XCI6XCI3XCIsXCJ7bnVtcGFkOH1cIjpcIjhcIixcIntudW1wYWQ5fVwiOlwiOVwifX19LHtrZXk6XCJnZXRCdXR0b25EaXNwbGF5TmFtZVwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4oZT1uP09iamVjdC5hc3NpZ24oe30sdGhpcy5nZXREZWZhdWx0RGlwbGF5KCksZSk6ZXx8dGhpcy5nZXREZWZhdWx0RGlwbGF5KCkpW3RdfHx0fX0se2tleTpcImdldFVwZGF0ZWRJbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgbz1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bixpPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdJiZhcmd1bWVudHNbNF0scz10aGlzLmdldE9wdGlvbnMoKSxhPVtuLG8saV0scj1lO3JldHVybihcIntia3NwfVwiPT09dHx8XCJ7YmFja3NwYWNlfVwiPT09dCkmJnIubGVuZ3RoPjA/cj10aGlzLnJlbW92ZUF0LmFwcGx5KHRoaXMsW3JdLmNvbmNhdChhKSk6XCJ7c3BhY2V9XCI9PT10P3I9dGhpcy5hZGRTdHJpbmdBdC5hcHBseSh0aGlzLFtyLFwiIFwiXS5jb25jYXQoYSkpOlwie3RhYn1cIiE9PXR8fFwiYm9vbGVhblwiPT09dHlwZW9mIHMudGFiQ2hhck9uVGFiJiYhMT09PXMudGFiQ2hhck9uVGFiP1wie2VudGVyfVwiIT09dCYmXCJ7bnVtcGFkZW50ZXJ9XCIhPT10fHwhcy5uZXdMaW5lT25FbnRlcj90LmluY2x1ZGVzKFwibnVtcGFkXCIpJiZOdW1iZXIuaXNJbnRlZ2VyKE51bWJlcih0W3QubGVuZ3RoLTJdKSk/cj10aGlzLmFkZFN0cmluZ0F0LmFwcGx5KHRoaXMsW3IsdFt0Lmxlbmd0aC0yXV0uY29uY2F0KGEpKTpcIntudW1wYWRkaXZpZGV9XCI9PT10P3I9dGhpcy5hZGRTdHJpbmdBdC5hcHBseSh0aGlzLFtyLFwiL1wiXS5jb25jYXQoYSkpOlwie251bXBhZG11bHRpcGx5fVwiPT09dD9yPXRoaXMuYWRkU3RyaW5nQXQuYXBwbHkodGhpcyxbcixcIipcIl0uY29uY2F0KGEpKTpcIntudW1wYWRzdWJ0cmFjdH1cIj09PXQ/cj10aGlzLmFkZFN0cmluZ0F0LmFwcGx5KHRoaXMsW3IsXCItXCJdLmNvbmNhdChhKSk6XCJ7bnVtcGFkYWRkfVwiPT09dD9yPXRoaXMuYWRkU3RyaW5nQXQuYXBwbHkodGhpcyxbcixcIitcIl0uY29uY2F0KGEpKTpcIntudW1wYWRkZWNpbWFsfVwiPT09dD9yPXRoaXMuYWRkU3RyaW5nQXQuYXBwbHkodGhpcyxbcixcIi5cIl0uY29uY2F0KGEpKTpcIntcIj09PXR8fFwifVwiPT09dD9yPXRoaXMuYWRkU3RyaW5nQXQuYXBwbHkodGhpcyxbcix0XS5jb25jYXQoYSkpOnQuaW5jbHVkZXMoXCJ7XCIpfHx0LmluY2x1ZGVzKFwifVwiKXx8KHI9dGhpcy5hZGRTdHJpbmdBdC5hcHBseSh0aGlzLFtyLHRdLmNvbmNhdChhKSkpOnI9dGhpcy5hZGRTdHJpbmdBdC5hcHBseSh0aGlzLFtyLFwiXFxuXCJdLmNvbmNhdChhKSk6cj10aGlzLmFkZFN0cmluZ0F0LmFwcGx5KHRoaXMsW3IsXCJcXHRcIl0uY29uY2F0KGEpKSxyfX0se2tleTpcInVwZGF0ZUNhcmV0UG9zXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnVwZGF0ZUNhcmV0UG9zQWN0aW9uKHQsZSk7dGhpcy5kaXNwYXRjaCgoZnVuY3Rpb24odCl7dC5zZXRDYXJldFBvc2l0aW9uKG4pfSkpfX0se2tleTpcInVwZGF0ZUNhcmV0UG9zQWN0aW9uXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldE9wdGlvbnMoKSxvPXRoaXMuZ2V0Q2FyZXRQb3NpdGlvbigpO3JldHVybiBlP28+MCYmKG8tPXQpOm8rPXQsbi5kZWJ1ZyYmY29uc29sZS5sb2coXCJDYXJldCBhdDpcIixvLFwiKFwiLmNvbmNhdCh0aGlzLmtleWJvYXJkRE9NQ2xhc3MsXCIpXCIpKSxvfX0se2tleTpcImFkZFN0cmluZ0F0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbixvPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp0Lmxlbmd0aCxpPWFyZ3VtZW50cy5sZW5ndGg+MyYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTp0Lmxlbmd0aCxzPWFyZ3VtZW50cy5sZW5ndGg+NCYmdm9pZCAwIT09YXJndW1lbnRzWzRdJiZhcmd1bWVudHNbNF07cmV0dXJuIG98fDA9PT1vPyhuPVt0LnNsaWNlKDAsbyksZSx0LnNsaWNlKGkpXS5qb2luKFwiXCIpLHRoaXMuaXNNYXhMZW5ndGhSZWFjaGVkKCl8fHMmJnRoaXMudXBkYXRlQ2FyZXRQb3MoZS5sZW5ndGgpKTpuPXQrZSxufX0se2tleTpcInJlbW92ZUF0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGUsbj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06dC5sZW5ndGgsbz1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06dC5sZW5ndGgsaT1hcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXSYmYXJndW1lbnRzWzNdO2lmKDA9PT1uJiYwPT09bylyZXR1cm4gdDtpZihuPT09byl7dmFyIHM9LyhbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdKS9nO24mJm4+PTA/dC5zdWJzdHJpbmcobi0yLG4pLm1hdGNoKHMpPyhlPXQuc3Vic3RyKDAsbi0yKSt0LnN1YnN0cihuKSxpJiZ0aGlzLnVwZGF0ZUNhcmV0UG9zKDIsITApKTooZT10LnN1YnN0cigwLG4tMSkrdC5zdWJzdHIobiksaSYmdGhpcy51cGRhdGVDYXJldFBvcygxLCEwKSk6dC5zbGljZSgtMikubWF0Y2gocyk/KGU9dC5zbGljZSgwLC0yKSxpJiZ0aGlzLnVwZGF0ZUNhcmV0UG9zKDIsITApKTooZT10LnNsaWNlKDAsLTEpLGkmJnRoaXMudXBkYXRlQ2FyZXRQb3MoMSwhMCkpfWVsc2UgZT10LnNsaWNlKDAsbikrdC5zbGljZShvKSxpJiZ0aGlzLmRpc3BhdGNoKChmdW5jdGlvbih0KXt0LnNldENhcmV0UG9zaXRpb24obil9KSk7cmV0dXJuIGV9fSx7a2V5OlwiaGFuZGxlTWF4TGVuZ3RoXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldE9wdGlvbnMoKSxvPW4ubWF4TGVuZ3RoLGk9dFtuLmlucHV0TmFtZV0scz1lLmxlbmd0aC0xPj1vO2lmKGUubGVuZ3RoPD1pLmxlbmd0aClyZXR1cm4hMTtpZihOdW1iZXIuaXNJbnRlZ2VyKG8pKXJldHVybiBuLmRlYnVnJiZjb25zb2xlLmxvZyhcIm1heExlbmd0aCAobnVtKSByZWFjaGVkOlwiLHMpLHM/KHRoaXMubWF4TGVuZ3RoUmVhY2hlZD0hMCwhMCk6KHRoaXMubWF4TGVuZ3RoUmVhY2hlZD0hMSwhMSk7aWYoXCJvYmplY3RcIj09PV90eXBlb2Yobykpe3ZhciBhPWUubGVuZ3RoLTE+PW9bbi5pbnB1dE5hbWVdO3JldHVybiBuLmRlYnVnJiZjb25zb2xlLmxvZyhcIm1heExlbmd0aCAob2JqKSByZWFjaGVkOlwiLGEpLGE/KHRoaXMubWF4TGVuZ3RoUmVhY2hlZD0hMCwhMCk6KHRoaXMubWF4TGVuZ3RoUmVhY2hlZD0hMSwhMSl9fX0se2tleTpcImlzTWF4TGVuZ3RoUmVhY2hlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4odGhpcy5tYXhMZW5ndGhSZWFjaGVkKX19LHtrZXk6XCJpc1RvdWNoRGV2aWNlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cIm9udG91Y2hzdGFydFwiaW4gd2luZG93fHxuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHN9fSx7a2V5OlwicG9pbnRlckV2ZW50c1N1cHBvcnRlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHdpbmRvdy5Qb2ludGVyRXZlbnR9fSx7a2V5OlwiY2FtZWxDYXNlXCIsdmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuISF0JiZ0LnRvTG93ZXJDYXNlKCkudHJpbSgpLnNwbGl0KC9bLlxcLV9cXHNdL2cpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5sZW5ndGg/dCtlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKTp0fSkpfX1dKSYmX2RlZmluZVByb3BlcnRpZXModC5wcm90b3R5cGUsZSksbiYmX2RlZmluZVByb3BlcnRpZXModCxuKSxVdGlsaXRpZXN9KCk7cz1mdW5jdGlvbigpe30sKGk9XCJub29wXCIpaW4obz1hKT9PYmplY3QuZGVmaW5lUHJvcGVydHkobyxpLHt2YWx1ZTpzLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6b1tpXT1zO3ZhciByPWE7ZnVuY3Rpb24gUGh5c2ljYWxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0aWVzKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8ua2V5LG8pfX12YXIgdT1mdW5jdGlvbigpe2Z1bmN0aW9uIFBoeXNpY2FsS2V5Ym9hcmQodCl7dmFyIGU9dC5kaXNwYXRjaCxuPXQuZ2V0T3B0aW9uczshZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLFBoeXNpY2FsS2V5Ym9hcmQpLHRoaXMuZGlzcGF0Y2g9ZSx0aGlzLmdldE9wdGlvbnM9bixyLmJpbmRNZXRob2RzKFBoeXNpY2FsS2V5Ym9hcmQsdGhpcyl9dmFyIHQsZSxuO3JldHVybiB0PVBoeXNpY2FsS2V5Ym9hcmQsKGU9W3trZXk6XCJoYW5kbGVIaWdobGlnaHRLZXlEb3duXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRPcHRpb25zKCksbj10aGlzLmdldFNpbXBsZUtleWJvYXJkTGF5b3V0S2V5KHQpO3RoaXMuZGlzcGF0Y2goKGZ1bmN0aW9uKHQpe3ZhciBvPXQuZ2V0QnV0dG9uRWxlbWVudChuKXx8dC5nZXRCdXR0b25FbGVtZW50KFwie1wiLmNvbmNhdChuLFwifVwiKSk7byYmKG8uc3R5bGUuYmFja2dyb3VuZENvbG9yPWUucGh5c2ljYWxLZXlib2FyZEhpZ2hsaWdodEJnQ29sb3J8fFwiI2RhZGNlNFwiLG8uc3R5bGUuY29sb3I9ZS5waHlzaWNhbEtleWJvYXJkSGlnaGxpZ2h0VGV4dENvbG9yfHxcImJsYWNrXCIsZS5waHlzaWNhbEtleWJvYXJkSGlnaGxpZ2h0UHJlc3MmJihvLm9ucG9pbnRlcmRvd258fG8ub25tb3VzZWRvd258fG8ub250b3VjaHN0YXJ0fHxyLm5vb3ApKCkpfSkpfX0se2tleTpcImhhbmRsZUhpZ2hsaWdodEtleVVwXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRPcHRpb25zKCksbj10aGlzLmdldFNpbXBsZUtleWJvYXJkTGF5b3V0S2V5KHQpO3RoaXMuZGlzcGF0Y2goKGZ1bmN0aW9uKHQpe3ZhciBvPXQuZ2V0QnV0dG9uRWxlbWVudChuKXx8dC5nZXRCdXR0b25FbGVtZW50KFwie1wiLmNvbmNhdChuLFwifVwiKSk7byYmby5yZW1vdmVBdHRyaWJ1dGUmJihvLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpLGUucGh5c2ljYWxLZXlib2FyZEhpZ2hsaWdodFByZXNzJiYoby5vbnBvaW50ZXJ1cHx8by5vbm1vdXNldXB8fG8ub250b3VjaGVuZHx8ci5ub29wKSgpKX0pKX19LHtrZXk6XCJnZXRTaW1wbGVLZXlib2FyZExheW91dEtleVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybigoZT10LmNvZGUuaW5jbHVkZXMoXCJOdW1wYWRcIil8fHQuY29kZS5pbmNsdWRlcyhcIlNoaWZ0XCIpfHx0LmNvZGUuaW5jbHVkZXMoXCJTcGFjZVwiKXx8dC5jb2RlLmluY2x1ZGVzKFwiQmFja3NwYWNlXCIpfHx0LmNvZGUuaW5jbHVkZXMoXCJDb250cm9sXCIpfHx0LmNvZGUuaW5jbHVkZXMoXCJBbHRcIil8fHQuY29kZS5pbmNsdWRlcyhcIk1ldGFcIik/dC5jb2RlOnQua2V5KSE9PWUudG9VcHBlckNhc2UoKXx8XCJGXCI9PT10LmNvZGVbMF0mJk51bWJlci5pc0ludGVnZXIoTnVtYmVyKHQuY29kZVsxXSkpJiZ0LmNvZGUubGVuZ3RoPD0zKSYmKGU9ZS50b0xvd2VyQ2FzZSgpKSxlfX1dKSYmUGh5c2ljYWxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0aWVzKHQucHJvdG90eXBlLGUpLG4mJlBoeXNpY2FsS2V5Ym9hcmRfZGVmaW5lUHJvcGVydGllcyh0LG4pLFBoeXNpY2FsS2V5Ym9hcmR9KCk7ZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KHQpe3JldHVybiBmdW5jdGlvbih0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBLZXlib2FyZF9hcnJheUxpa2VUb0FycmF5KHQpfSh0KXx8ZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QodCkpcmV0dXJuIEFycmF5LmZyb20odCl9KHQpfHxmdW5jdGlvbih0LGUpe2lmKCF0KXJldHVybjtpZihcInN0cmluZ1wiPT09dHlwZW9mIHQpcmV0dXJuIEtleWJvYXJkX2FycmF5TGlrZVRvQXJyYXkodCxlKTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PW4mJnQuY29uc3RydWN0b3ImJihuPXQuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uKXJldHVybiBBcnJheS5mcm9tKHQpO2lmKFwiQXJndW1lbnRzXCI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlyZXR1cm4gS2V5Ym9hcmRfYXJyYXlMaWtlVG9BcnJheSh0LGUpfSh0KXx8ZnVuY3Rpb24oKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX0oKX1mdW5jdGlvbiBLZXlib2FyZF9hcnJheUxpa2VUb0FycmF5KHQsZSl7KG51bGw9PWV8fGU+dC5sZW5ndGgpJiYoZT10Lmxlbmd0aCk7Zm9yKHZhciBuPTAsbz1uZXcgQXJyYXkoZSk7bjxlO24rKylvW25dPXRbbl07cmV0dXJuIG99ZnVuY3Rpb24gS2V5Ym9hcmRfY2xhc3NDYWxsQ2hlY2sodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIEtleWJvYXJkX2RlZmluZVByb3BlcnRpZXModCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIG89ZVtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsby5rZXksbyl9fWZ1bmN0aW9uIEtleWJvYXJkX2RlZmluZVByb3BlcnR5KHQsZSxuKXtyZXR1cm4gZSBpbiB0P09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTp0W2VdPW4sdH12YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIFNpbXBsZUtleWJvYXJkKCl7dmFyIHQ9dGhpcztLZXlib2FyZF9jbGFzc0NhbGxDaGVjayh0aGlzLFNpbXBsZUtleWJvYXJkKSxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFuZGxlUGFyYW1zXCIsKGZ1bmN0aW9uKHQpe3ZhciBlLG4sbztpZihcInN0cmluZ1wiPT09dHlwZW9mIHRbMF0pZT10WzBdLnNwbGl0KFwiLlwiKS5qb2luKFwiXCIpLG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoZSkpLG89dFsxXTtlbHNlIGlmKHRbMF1pbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50KXtpZighdFswXS5jbGFzc05hbWUpdGhyb3cgY29uc29sZS53YXJuKFwiQW55IERPTSBlbGVtZW50IHBhc3NlZCBhcyBwYXJhbWV0ZXIgbXVzdCBoYXZlIGEgY2xhc3MuXCIpLG5ldyBFcnJvcihcIktFWUJPQVJEX0RPTV9DTEFTU19FUlJPUlwiKTtlPXRbMF0uY2xhc3NOYW1lLnNwbGl0KFwiIFwiKVswXSxuPXRbMF0sbz10WzFdfWVsc2UgZT1cInNpbXBsZS1rZXlib2FyZFwiLG49ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoZSkpLG89dFswXTtyZXR1cm57a2V5Ym9hcmRET01DbGFzczplLGtleWJvYXJkRE9NOm4sb3B0aW9uczpvfX0pKSxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZ2V0T3B0aW9uc1wiLChmdW5jdGlvbigpe3JldHVybiB0Lm9wdGlvbnN9KSksS2V5Ym9hcmRfZGVmaW5lUHJvcGVydHkodGhpcyxcImdldENhcmV0UG9zaXRpb25cIiwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jYXJldFBvc2l0aW9ufSkpLEtleWJvYXJkX2RlZmluZVByb3BlcnR5KHRoaXMsXCJnZXRDYXJldFBvc2l0aW9uRW5kXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY2FyZXRQb3NpdGlvbkVuZH0pKSxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmVnaXN0ZXJNb2R1bGVcIiwoZnVuY3Rpb24oZSxuKXt0Lm1vZHVsZXNbZV18fCh0Lm1vZHVsZXNbZV09e30pLG4odC5tb2R1bGVzW2VdKX0pKSxLZXlib2FyZF9kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZ2V0S2V5Ym9hcmRDbGFzc1N0cmluZ1wiLChmdW5jdGlvbigpe2Zvcih2YXIgZT1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KGUpLG89MDtvPGU7bysrKW5bb109YXJndW1lbnRzW29dO3ZhciBpPVt0LmtleWJvYXJkRE9NQ2xhc3NdLmNvbmNhdChuKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiEhdH0pKTtyZXR1cm4gaS5qb2luKFwiIFwiKX0pKTtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheShlKSxvPTA7bzxlO28rKyluW29dPWFyZ3VtZW50c1tvXTt2YXIgaT10aGlzLmhhbmRsZVBhcmFtcyhuKSxzPWkua2V5Ym9hcmRET01DbGFzcyxhPWkua2V5Ym9hcmRET00sYz1pLm9wdGlvbnMsbD12b2lkIDA9PT1jP3t9OmM7aWYodGhpcy51dGlsaXRpZXM9bmV3IHIoe2dldE9wdGlvbnM6dGhpcy5nZXRPcHRpb25zLGdldENhcmV0UG9zaXRpb246dGhpcy5nZXRDYXJldFBvc2l0aW9uLGdldENhcmV0UG9zaXRpb25FbmQ6dGhpcy5nZXRDYXJldFBvc2l0aW9uRW5kLGRpc3BhdGNoOnRoaXMuZGlzcGF0Y2h9KSx0aGlzLmNhcmV0UG9zaXRpb249bnVsbCx0aGlzLmNhcmV0UG9zaXRpb25FbmQ9bnVsbCx0aGlzLmtleWJvYXJkRE9NPWEsdGhpcy5vcHRpb25zPWwsdGhpcy5vcHRpb25zLmxheW91dE5hbWU9dGhpcy5vcHRpb25zLmxheW91dE5hbWV8fFwiZGVmYXVsdFwiLHRoaXMub3B0aW9ucy50aGVtZT10aGlzLm9wdGlvbnMudGhlbWV8fFwiaGctdGhlbWUtZGVmYXVsdFwiLHRoaXMub3B0aW9ucy5pbnB1dE5hbWU9dGhpcy5vcHRpb25zLmlucHV0TmFtZXx8XCJkZWZhdWx0XCIsdGhpcy5vcHRpb25zLnByZXZlbnRNb3VzZURvd25EZWZhdWx0PXRoaXMub3B0aW9ucy5wcmV2ZW50TW91c2VEb3duRGVmYXVsdHx8ITEsdGhpcy5rZXlib2FyZFBsdWdpbkNsYXNzZXM9XCJcIixyLmJpbmRNZXRob2RzKFNpbXBsZUtleWJvYXJkLHRoaXMpLHRoaXMuaW5wdXQ9e30sdGhpcy5pbnB1dFt0aGlzLm9wdGlvbnMuaW5wdXROYW1lXT1cIlwiLHRoaXMua2V5Ym9hcmRET01DbGFzcz1zLHRoaXMuYnV0dG9uRWxlbWVudHM9e30sd2luZG93LlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzfHwod2luZG93LlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzPXt9KSx0aGlzLmN1cnJlbnRJbnN0YW5jZU5hbWU9dGhpcy51dGlsaXRpZXMuY2FtZWxDYXNlKHRoaXMua2V5Ym9hcmRET01DbGFzcyksd2luZG93LlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzW3RoaXMuY3VycmVudEluc3RhbmNlTmFtZV09dGhpcyx0aGlzLmFsbEtleWJvYXJkSW5zdGFuY2VzPXdpbmRvdy5TaW1wbGVLZXlib2FyZEluc3RhbmNlcyx0aGlzLmtleWJvYXJkSW5zdGFuY2VOYW1lcz1PYmplY3Qua2V5cyh3aW5kb3cuU2ltcGxlS2V5Ym9hcmRJbnN0YW5jZXMpLHRoaXMuaXNGaXJzdEtleWJvYXJkSW5zdGFuY2U9dGhpcy5rZXlib2FyZEluc3RhbmNlTmFtZXNbMF09PT10aGlzLmN1cnJlbnRJbnN0YW5jZU5hbWUsdGhpcy5waHlzaWNhbEtleWJvYXJkPW5ldyB1KHtkaXNwYXRjaDp0aGlzLmRpc3BhdGNoLGdldE9wdGlvbnM6dGhpcy5nZXRPcHRpb25zfSksIXRoaXMua2V5Ym9hcmRET00pdGhyb3cgY29uc29sZS53YXJuKCdcIi4nLmNvbmNhdChzLCdcIiB3YXMgbm90IGZvdW5kIGluIHRoZSBET00uJykpLG5ldyBFcnJvcihcIktFWUJPQVJEX0RPTV9FUlJPUlwiKTt0aGlzLnJlbmRlcigpLHRoaXMubW9kdWxlcz17fSx0aGlzLmxvYWRNb2R1bGVzKCl9dmFyIHQsZSxuO3JldHVybiB0PVNpbXBsZUtleWJvYXJkLChlPVt7a2V5Olwic2V0Q2FyZXRQb3NpdGlvblwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7dGhpcy5jYXJldFBvc2l0aW9uPXQsdGhpcy5jYXJldFBvc2l0aW9uRW5kPWV8fHR9fSx7a2V5OlwiaGFuZGxlQnV0dG9uQ2xpY2tlZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9ucy5kZWJ1ZztpZihcInsvL31cIj09PXQpcmV0dXJuITE7XCJmdW5jdGlvblwiPT09dHlwZW9mIHRoaXMub3B0aW9ucy5vbktleVByZXNzJiZ0aGlzLm9wdGlvbnMub25LZXlQcmVzcyh0KSx0aGlzLmlucHV0W3RoaXMub3B0aW9ucy5pbnB1dE5hbWVdfHwodGhpcy5pbnB1dFt0aGlzLm9wdGlvbnMuaW5wdXROYW1lXT1cIlwiKTt2YXIgbj10aGlzLnV0aWxpdGllcy5nZXRVcGRhdGVkSW5wdXQodCx0aGlzLmlucHV0W3RoaXMub3B0aW9ucy5pbnB1dE5hbWVdLHRoaXMuY2FyZXRQb3NpdGlvbix0aGlzLmNhcmV0UG9zaXRpb25FbmQpO2lmKHRoaXMuaW5wdXRbdGhpcy5vcHRpb25zLmlucHV0TmFtZV0hPT1uJiYoIXRoaXMub3B0aW9ucy5pbnB1dFBhdHRlcm58fHRoaXMub3B0aW9ucy5pbnB1dFBhdHRlcm4mJnRoaXMuaW5wdXRQYXR0ZXJuSXNWYWxpZChuKSkpe2lmKHRoaXMub3B0aW9ucy5tYXhMZW5ndGgmJnRoaXMudXRpbGl0aWVzLmhhbmRsZU1heExlbmd0aCh0aGlzLmlucHV0LG4pKXJldHVybiExO3RoaXMuaW5wdXRbdGhpcy5vcHRpb25zLmlucHV0TmFtZV09dGhpcy51dGlsaXRpZXMuZ2V0VXBkYXRlZElucHV0KHQsdGhpcy5pbnB1dFt0aGlzLm9wdGlvbnMuaW5wdXROYW1lXSx0aGlzLmNhcmV0UG9zaXRpb24sdGhpcy5jYXJldFBvc2l0aW9uRW5kLCEwKSxlJiZjb25zb2xlLmxvZyhcIklucHV0IGNoYW5nZWQ6XCIsdGhpcy5nZXRBbGxJbnB1dHMoKSksdGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcIkNhcmV0IGF0OiBcIix0aGlzLmdldENhcmV0UG9zaXRpb24oKSx0aGlzLmdldENhcmV0UG9zaXRpb25FbmQoKSxcIihcIi5jb25jYXQodGhpcy5rZXlib2FyZERPTUNsYXNzLFwiKVwiKSksdGhpcy5vcHRpb25zLnN5bmNJbnN0YW5jZUlucHV0cyYmdGhpcy5zeW5jSW5zdGFuY2VJbnB1dHMoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpcy5vcHRpb25zLm9uQ2hhbmdlJiZ0aGlzLm9wdGlvbnMub25DaGFuZ2UodGhpcy5nZXRJbnB1dCh0aGlzLm9wdGlvbnMuaW5wdXROYW1lLCEwKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHRoaXMub3B0aW9ucy5vbkNoYW5nZUFsbCYmdGhpcy5vcHRpb25zLm9uQ2hhbmdlQWxsKHRoaXMuZ2V0QWxsSW5wdXRzKCkpfWUmJmNvbnNvbGUubG9nKFwiS2V5IHByZXNzZWQ6XCIsdCl9fSx7a2V5OlwiaGFuZGxlQnV0dG9uTW91c2VEb3duXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3RoaXMub3B0aW9ucy5wcmV2ZW50TW91c2VEb3duRGVmYXVsdCYmZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMub3B0aW9ucy5zdG9wTW91c2VEb3duUHJvcGFnYXRpb24mJmUuc3RvcFByb3BhZ2F0aW9uKCksZSYmZS50YXJnZXQuY2xhc3NMaXN0LmFkZCh0aGlzLmFjdGl2ZUJ1dHRvbkNsYXNzKSx0aGlzLmhvbGRJbnRlcmFjdGlvblRpbWVvdXQmJmNsZWFyVGltZW91dCh0aGlzLmhvbGRJbnRlcmFjdGlvblRpbWVvdXQpLHRoaXMuaG9sZFRpbWVvdXQmJmNsZWFyVGltZW91dCh0aGlzLmhvbGRUaW1lb3V0KSx0aGlzLmlzTW91c2VIb2xkPSEwLHRoaXMub3B0aW9ucy5kaXNhYmxlQnV0dG9uSG9sZHx8KHRoaXMuaG9sZFRpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXsobi5pc01vdXNlSG9sZCYmKCF0LmluY2x1ZGVzKFwie1wiKSYmIXQuaW5jbHVkZXMoXCJ9XCIpfHxcIntkZWxldGV9XCI9PT10fHxcIntiYWNrc3BhY2V9XCI9PT10fHxcIntia3NwfVwiPT09dHx8XCJ7c3BhY2V9XCI9PT10fHxcInt0YWJ9XCI9PT10KXx8XCJ7YXJyb3dyaWdodH1cIj09PXR8fFwie2Fycm93bGVmdH1cIj09PXR8fFwie2Fycm93dXB9XCI9PT10fHxcInthcnJvd2Rvd259XCI9PT10KSYmKG4ub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2coXCJCdXR0b24gaGVsZDpcIix0KSxuLmhhbmRsZUJ1dHRvbkhvbGQodCxlKSksY2xlYXJUaW1lb3V0KG4uaG9sZFRpbWVvdXQpfSksNTAwKSl9fSx7a2V5OlwiaGFuZGxlQnV0dG9uTW91c2VVcFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpudWxsLG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGw7biYmKHRoaXMub3B0aW9ucy5wcmV2ZW50TW91c2VVcERlZmF1bHQmJm4ucHJldmVudERlZmF1bHQoKSx0aGlzLm9wdGlvbnMuc3RvcE1vdXNlVXBQcm9wYWdhdGlvbiYmbi5zdG9wUHJvcGFnYXRpb24oKSksdGhpcy5yZWN1cnNlQnV0dG9ucygoZnVuY3Rpb24oZSl7ZS5jbGFzc0xpc3QucmVtb3ZlKHQuYWN0aXZlQnV0dG9uQ2xhc3MpfSkpLHRoaXMuaXNNb3VzZUhvbGQ9ITEsdGhpcy5ob2xkSW50ZXJhY3Rpb25UaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy5ob2xkSW50ZXJhY3Rpb25UaW1lb3V0KSxlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpcy5vcHRpb25zLm9uS2V5UmVsZWFzZWQmJnRoaXMub3B0aW9ucy5vbktleVJlbGVhc2VkKGUpfX0se2tleTpcImhhbmRsZUtleWJvYXJkQ29udGFpbmVyTW91c2VEb3duXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zLnByZXZlbnRNb3VzZURvd25EZWZhdWx0JiZ0LnByZXZlbnREZWZhdWx0KCl9fSx7a2V5OlwiaGFuZGxlQnV0dG9uSG9sZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5ob2xkSW50ZXJhY3Rpb25UaW1lb3V0JiZjbGVhclRpbWVvdXQodGhpcy5ob2xkSW50ZXJhY3Rpb25UaW1lb3V0KSx0aGlzLmhvbGRJbnRlcmFjdGlvblRpbWVvdXQ9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmlzTW91c2VIb2xkPyhlLmhhbmRsZUJ1dHRvbkNsaWNrZWQodCksZS5oYW5kbGVCdXR0b25Ib2xkKHQpKTpjbGVhclRpbWVvdXQoZS5ob2xkSW50ZXJhY3Rpb25UaW1lb3V0KX0pLDEwMCl9fSx7a2V5Olwic3luY0luc3RhbmNlSW5wdXRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuZGlzcGF0Y2goKGZ1bmN0aW9uKGUpe2UucmVwbGFjZUlucHV0KHQuaW5wdXQpLGUuc2V0Q2FyZXRQb3NpdGlvbih0LmNhcmV0UG9zaXRpb24sdC5jYXJldFBvc2l0aW9uRW5kKX0pKX19LHtrZXk6XCJjbGVhcklucHV0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dD10fHx0aGlzLm9wdGlvbnMuaW5wdXROYW1lLHRoaXMuaW5wdXRbdF09XCJcIix0aGlzLnNldENhcmV0UG9zaXRpb24oMCksdGhpcy5vcHRpb25zLnN5bmNJbnN0YW5jZUlucHV0cyYmdGhpcy5zeW5jSW5zdGFuY2VJbnB1dHMoKX19LHtrZXk6XCJnZXRJbnB1dFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07aWYodD10fHx0aGlzLm9wdGlvbnMuaW5wdXROYW1lLHRoaXMub3B0aW9ucy5zeW5jSW5zdGFuY2VJbnB1dHMmJiFlJiZ0aGlzLnN5bmNJbnN0YW5jZUlucHV0cygpLHRoaXMub3B0aW9ucy5ydGwpe3ZhciBuPXRoaXMuaW5wdXRbdF0ucmVwbGFjZShcIlxcdTIwMmJcIixcIlwiKS5yZXBsYWNlKFwiXFx1MjAyY1wiLFwiXCIpO3JldHVyblwiXFx1MjAyYlwiK24rXCJcXHUyMDJjXCJ9cmV0dXJuIHRoaXMuaW5wdXRbdF19fSx7a2V5OlwiZ2V0QWxsSW5wdXRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9e307cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaW5wdXQpLmZvckVhY2goKGZ1bmN0aW9uKG4pe2Vbbl09dC5nZXRJbnB1dChuLCEwKX0pKSxlfX0se2tleTpcInNldElucHV0XCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtlPWV8fHRoaXMub3B0aW9ucy5pbnB1dE5hbWUsdGhpcy5pbnB1dFtlXT10LHRoaXMub3B0aW9ucy5zeW5jSW5zdGFuY2VJbnB1dHMmJnRoaXMuc3luY0luc3RhbmNlSW5wdXRzKCl9fSx7a2V5OlwicmVwbGFjZUlucHV0XCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5pbnB1dD10fX0se2tleTpcInNldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxlPXRoaXMuY2hhbmdlZE9wdGlvbnModCk7dGhpcy5vcHRpb25zPU9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLHQpLGUubGVuZ3RoJiYodGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcImNoYW5nZWRPcHRpb25zXCIsZSksdGhpcy5vblNldE9wdGlvbnModCksdGhpcy5yZW5kZXIoKSl9fSx7a2V5OlwiY2hhbmdlZE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBPYmplY3Qua2V5cyh0KS5maWx0ZXIoKGZ1bmN0aW9uKG4pe3JldHVybiBKU09OLnN0cmluZ2lmeSh0W25dKSE9PUpTT04uc3RyaW5naWZ5KGUub3B0aW9uc1tuXSl9KSl9fSx7a2V5Olwib25TZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24odCl7dC5pbnB1dE5hbWUmJih0aGlzLm9wdGlvbnMuZGVidWcmJmNvbnNvbGUubG9nKFwiaW5wdXROYW1lIGNoYW5nZWQuIGNhcmV0UG9zaXRpb24gcmVzZXQuXCIpLHRoaXMuc2V0Q2FyZXRQb3NpdGlvbihudWxsKSl9fSx7a2V5OlwiY2xlYXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMua2V5Ym9hcmRET00uaW5uZXJIVE1MPVwiXCIsdGhpcy5rZXlib2FyZERPTS5jbGFzc05hbWU9dGhpcy5rZXlib2FyZERPTUNsYXNzLHRoaXMuYnV0dG9uRWxlbWVudHM9e319fSx7a2V5OlwiZGlzcGF0Y2hcIix2YWx1ZTpmdW5jdGlvbih0KXtpZighd2luZG93LlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzKXRocm93IGNvbnNvbGUud2FybihcIlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzIGlzIG5vdCBkZWZpbmVkLiBEaXNwYXRjaCBjYW5ub3QgYmUgY2FsbGVkLlwiKSxuZXcgRXJyb3IoXCJJTlNUQU5DRVNfVkFSX0VSUk9SXCIpO3JldHVybiBPYmplY3Qua2V5cyh3aW5kb3cuU2ltcGxlS2V5Ym9hcmRJbnN0YW5jZXMpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3Qod2luZG93LlNpbXBsZUtleWJvYXJkSW5zdGFuY2VzW2VdLGUpfSkpfX0se2tleTpcImFkZEJ1dHRvblRoZW1lXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2lmKCFlfHwhdClyZXR1cm4hMTt0LnNwbGl0KFwiIFwiKS5mb3JFYWNoKChmdW5jdGlvbihvKXtlLnNwbGl0KFwiIFwiKS5mb3JFYWNoKChmdW5jdGlvbihlKXtuLm9wdGlvbnMuYnV0dG9uVGhlbWV8fChuLm9wdGlvbnMuYnV0dG9uVGhlbWU9W10pO3ZhciBpPSExO24ub3B0aW9ucy5idXR0b25UaGVtZS5tYXAoKGZ1bmN0aW9uKHQpe2lmKHQuY2xhc3Muc3BsaXQoXCIgXCIpLmluY2x1ZGVzKGUpKXtpPSEwO3ZhciBuPXQuYnV0dG9ucy5zcGxpdChcIiBcIik7bi5pbmNsdWRlcyhvKXx8KGk9ITAsbi5wdXNoKG8pLHQuYnV0dG9ucz1uLmpvaW4oXCIgXCIpKX1yZXR1cm4gdH0pKSxpfHxuLm9wdGlvbnMuYnV0dG9uVGhlbWUucHVzaCh7Y2xhc3M6ZSxidXR0b25zOnR9KX0pKX0pKSx0aGlzLnJlbmRlcigpfX0se2tleTpcInJlbW92ZUJ1dHRvblRoZW1lXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2lmKCF0JiYhZSlyZXR1cm4gdGhpcy5vcHRpb25zLmJ1dHRvblRoZW1lPVtdLHRoaXMucmVuZGVyKCksITE7dCYmQXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMuYnV0dG9uVGhlbWUpJiZ0aGlzLm9wdGlvbnMuYnV0dG9uVGhlbWUubGVuZ3RoJiYodC5zcGxpdChcIiBcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5vcHRpb25zLmJ1dHRvblRoZW1lLm1hcCgoZnVuY3Rpb24obyxpKXtpZihlJiZlLmluY2x1ZGVzKG8uY2xhc3MpfHwhZSl7dmFyIHM9by5idXR0b25zLnNwbGl0KFwiIFwiKS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlIT09dH0pKTtzLmxlbmd0aD9vLmJ1dHRvbnM9cy5qb2luKFwiIFwiKToobi5vcHRpb25zLmJ1dHRvblRoZW1lLnNwbGljZShpLDEpLG89bnVsbCl9cmV0dXJuIG99KSl9KSksdGhpcy5yZW5kZXIoKSl9fSx7a2V5OlwiZ2V0QnV0dG9uRWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcy5idXR0b25FbGVtZW50c1t0XTtyZXR1cm4gbiYmKGU9bi5sZW5ndGg+MT9uOm5bMF0pLGV9fSx7a2V5OlwiaW5wdXRQYXR0ZXJuSXNWYWxpZFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcy5vcHRpb25zLmlucHV0UGF0dGVybjtpZigoZT1uIGluc3RhbmNlb2YgUmVnRXhwP246blt0aGlzLm9wdGlvbnMuaW5wdXROYW1lXSkmJnQpe3ZhciBvPWUudGVzdCh0KTtyZXR1cm4gdGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZygnaW5wdXRQYXR0ZXJuIChcIicuY29uY2F0KGUsJ1wiKTogJykuY29uY2F0KG8/XCJwYXNzZWRcIjpcImRpZCBub3QgcGFzcyFcIikpLG99cmV0dXJuITB9fSx7a2V5Olwic2V0RXZlbnRMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpeyF0aGlzLmlzRmlyc3RLZXlib2FyZEluc3RhbmNlJiZ0aGlzLmFsbEtleWJvYXJkSW5zdGFuY2VzfHwodGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcIkNhcmV0IGhhbmRsaW5nIHN0YXJ0ZWQgKFwiLmNvbmNhdCh0aGlzLmtleWJvYXJkRE9NQ2xhc3MsXCIpXCIpKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIix0aGlzLmhhbmRsZUtleVVwKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuaGFuZGxlS2V5RG93biksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIix0aGlzLmhhbmRsZU1vdXNlVXApLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHRoaXMuaGFuZGxlVG91Y2hFbmQpKX19LHtrZXk6XCJoYW5kbGVLZXlVcFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuY2FyZXRFdmVudEhhbmRsZXIodCksdGhpcy5vcHRpb25zLnBoeXNpY2FsS2V5Ym9hcmRIaWdobGlnaHQmJnRoaXMucGh5c2ljYWxLZXlib2FyZC5oYW5kbGVIaWdobGlnaHRLZXlVcCh0KX19LHtrZXk6XCJoYW5kbGVLZXlEb3duXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zLnBoeXNpY2FsS2V5Ym9hcmRIaWdobGlnaHQmJnRoaXMucGh5c2ljYWxLZXlib2FyZC5oYW5kbGVIaWdobGlnaHRLZXlEb3duKHQpfX0se2tleTpcImhhbmRsZU1vdXNlVXBcIix2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLmNhcmV0RXZlbnRIYW5kbGVyKHQpfX0se2tleTpcImhhbmRsZVRvdWNoRW5kXCIsdmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5jYXJldEV2ZW50SGFuZGxlcih0KX19LHtrZXk6XCJjYXJldEV2ZW50SGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlO3QudGFyZ2V0LnRhZ05hbWUmJihlPXQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSksdGhpcy5kaXNwYXRjaCgoZnVuY3Rpb24obil7dmFyIG89dC50YXJnZXQ9PT1uLmtleWJvYXJkRE9NfHx0LnRhcmdldCYmbi5rZXlib2FyZERPTS5jb250YWlucyh0LnRhcmdldCk7bi5pc01vdXNlSG9sZCYmKG4uaXNNb3VzZUhvbGQ9ITEpLFwidGV4dGFyZWFcIiE9PWUmJlwiaW5wdXRcIiE9PWV8fG4ub3B0aW9ucy5kaXNhYmxlQ2FyZXRQb3NpdGlvbmluZz8hbi5vcHRpb25zLmRpc2FibGVDYXJldFBvc2l0aW9uaW5nJiZvfHxuLnNldENhcmV0UG9zaXRpb24obnVsbCk6KG4uc2V0Q2FyZXRQb3NpdGlvbih0LnRhcmdldC5zZWxlY3Rpb25TdGFydCx0LnRhcmdldC5zZWxlY3Rpb25FbmQpLG4ub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2coXCJDYXJldCBhdDogXCIsbi5nZXRDYXJldFBvc2l0aW9uKCksbi5nZXRDYXJldFBvc2l0aW9uRW5kKCksdCYmdC50YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFwiKFwiLmNvbmNhdChuLmtleWJvYXJkRE9NQ2xhc3MsXCIpXCIpKSl9KSl9fSx7a2V5OlwicmVjdXJzZUJ1dHRvbnNcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKCF0KXJldHVybiExO09iamVjdC5rZXlzKHRoaXMuYnV0dG9uRWxlbWVudHMpLmZvckVhY2goKGZ1bmN0aW9uKG4pe3JldHVybiBlLmJ1dHRvbkVsZW1lbnRzW25dLmZvckVhY2godCl9KSl9fSx7a2V5OlwiZGVzdHJveVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcIkRlc3Ryb3lpbmcgc2ltcGxlLWtleWJvYXJkIGluc3RhbmNlOiBcIi5jb25jYXQodGhpcy5jdXJyZW50SW5zdGFuY2VOYW1lKSksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsdGhpcy5oYW5kbGVLZXlVcCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLmhhbmRsZUtleURvd24pLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsdGhpcy5oYW5kbGVNb3VzZVVwKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZVRvdWNoRW5kKSxkb2N1bWVudC5vbnBvaW50ZXJ1cD1udWxsLGRvY3VtZW50Lm9udG91Y2hlbmQ9bnVsbCxkb2N1bWVudC5vbnRvdWNoY2FuY2VsPW51bGwsZG9jdW1lbnQub25tb3VzZXVwPW51bGw7dmFyIGRlbGV0ZUJ1dHRvbj1mdW5jdGlvbih0KXt0Lm9ucG9pbnRlcmRvd249bnVsbCx0Lm9ucG9pbnRlcnVwPW51bGwsdC5vbnBvaW50ZXJjYW5jZWw9bnVsbCx0Lm9udG91Y2hzdGFydD1udWxsLHQub250b3VjaGVuZD1udWxsLHQub250b3VjaGNhbmNlbD1udWxsLHQub25jbGljaz1udWxsLHQub25tb3VzZWRvd249bnVsbCx0Lm9ubW91c2V1cD1udWxsLHQucmVtb3ZlKCksdD1udWxsfTt0aGlzLnJlY3Vyc2VCdXR0b25zKGRlbGV0ZUJ1dHRvbiksdGhpcy5yZWN1cnNlQnV0dG9ucz1udWxsLGRlbGV0ZUJ1dHRvbj1udWxsLHRoaXMua2V5Ym9hcmRET00ub25wb2ludGVyZG93bj1udWxsLHRoaXMua2V5Ym9hcmRET00ub250b3VjaHN0YXJ0PW51bGwsdGhpcy5rZXlib2FyZERPTS5vbm1vdXNlZG93bj1udWxsLHRoaXMuY2xlYXIoKSx3aW5kb3cuU2ltcGxlS2V5Ym9hcmRJbnN0YW5jZXNbdGhpcy5jdXJyZW50SW5zdGFuY2VOYW1lXT1udWxsLGRlbGV0ZSB3aW5kb3cuU2ltcGxlS2V5Ym9hcmRJbnN0YW5jZXNbdGhpcy5jdXJyZW50SW5zdGFuY2VOYW1lXSx0aGlzLmluaXRpYWxpemVkPSExfX0se2tleTpcImdldEJ1dHRvblRoZW1lQ2xhc3Nlc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9ucy5idXR0b25UaGVtZSxuPVtdO3JldHVybiBBcnJheS5pc0FycmF5KGUpJiZlLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKGUuY2xhc3MmJlwic3RyaW5nXCI9PT10eXBlb2YgZS5jbGFzcyYmZS5idXR0b25zJiZcInN0cmluZ1wiPT09dHlwZW9mIGUuYnV0dG9ucyl7dmFyIG89ZS5jbGFzcy5zcGxpdChcIiBcIik7ZS5idXR0b25zLnNwbGl0KFwiIFwiKS5pbmNsdWRlcyh0KSYmKG49W10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuKSxfdG9Db25zdW1hYmxlQXJyYXkobykpKX1lbHNlIGNvbnNvbGUud2FybignSW5jb3JyZWN0IFwiYnV0dG9uVGhlbWVcIi4gUGxlYXNlIGNoZWNrIHRoZSBkb2N1bWVudGF0aW9uLicsZSl9KSksbn19LHtrZXk6XCJzZXRET01CdXR0b25BdHRyaWJ1dGVzXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLm9wdGlvbnMuYnV0dG9uQXR0cmlidXRlcztBcnJheS5pc0FycmF5KG4pJiZuLmZvckVhY2goKGZ1bmN0aW9uKG4pe24uYXR0cmlidXRlJiZcInN0cmluZ1wiPT09dHlwZW9mIG4uYXR0cmlidXRlJiZuLnZhbHVlJiZcInN0cmluZ1wiPT09dHlwZW9mIG4udmFsdWUmJm4uYnV0dG9ucyYmXCJzdHJpbmdcIj09PXR5cGVvZiBuLmJ1dHRvbnM/bi5idXR0b25zLnNwbGl0KFwiIFwiKS5pbmNsdWRlcyh0KSYmZShuLmF0dHJpYnV0ZSxuLnZhbHVlKTpjb25zb2xlLndhcm4oJ0luY29ycmVjdCBcImJ1dHRvbkF0dHJpYnV0ZXNcIi4gUGxlYXNlIGNoZWNrIHRoZSBkb2N1bWVudGF0aW9uLicsbil9KSl9fSx7a2V5Olwib25Ub3VjaERldmljZURldGVjdGVkXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnByb2Nlc3NBdXRvVG91Y2hFdmVudHMoKSx0aGlzLmRpc2FibGVDb250ZXh0dWFsV2luZG93KCl9fSx7a2V5OlwiZGlzYWJsZUNvbnRleHR1YWxXaW5kb3dcIix2YWx1ZTpmdW5jdGlvbigpe3dpbmRvdy5vbmNvbnRleHRtZW51PWZ1bmN0aW9uKHQpe2lmKHQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImhnLWJ1dHRvblwiKSlyZXR1cm4gdC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksITF9fX0se2tleTpcInByb2Nlc3NBdXRvVG91Y2hFdmVudHNcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3B0aW9ucy5hdXRvVXNlVG91Y2hFdmVudHMmJih0aGlzLm9wdGlvbnMudXNlVG91Y2hFdmVudHM9ITAsdGhpcy5vcHRpb25zLmRlYnVnJiZjb25zb2xlLmxvZyhcImF1dG9Vc2VUb3VjaEV2ZW50czogVG91Y2ggZGV2aWNlIGRldGVjdGVkLCB1c2VUb3VjaEV2ZW50cyBlbmFibGVkLlwiKSl9fSx7a2V5Olwib25Jbml0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMuZGVidWcmJmNvbnNvbGUubG9nKFwiXCIuY29uY2F0KHRoaXMua2V5Ym9hcmRET01DbGFzcyxcIiBJbml0aWFsaXplZFwiKSksdGhpcy5zZXRFdmVudExpc3RlbmVycygpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB0aGlzLm9wdGlvbnMub25Jbml0JiZ0aGlzLm9wdGlvbnMub25Jbml0KCl9fSx7a2V5OlwiYmVmb3JlRmlyc3RSZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMudXRpbGl0aWVzLmlzVG91Y2hEZXZpY2UoKSYmdGhpcy5vblRvdWNoRGV2aWNlRGV0ZWN0ZWQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgdGhpcy5vcHRpb25zLmJlZm9yZUZpcnN0UmVuZGVyJiZ0aGlzLm9wdGlvbnMuYmVmb3JlRmlyc3RSZW5kZXIoKSx0aGlzLmlzRmlyc3RLZXlib2FyZEluc3RhbmNlJiZ0aGlzLnV0aWxpdGllcy5wb2ludGVyRXZlbnRzU3VwcG9ydGVkKCkmJiF0aGlzLm9wdGlvbnMudXNlVG91Y2hFdmVudHMmJiF0aGlzLm9wdGlvbnMudXNlTW91c2VFdmVudHMmJnRoaXMub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2coXCJVc2luZyBQb2ludGVyRXZlbnRzIGFzIGl0IGlzIHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXJcIiksdGhpcy5vcHRpb25zLnVzZVRvdWNoRXZlbnRzJiZ0aGlzLm9wdGlvbnMuZGVidWcmJmNvbnNvbGUubG9nKFwidXNlVG91Y2hFdmVudHMgaGFzIGJlZW4gZW5hYmxlZC4gT25seSB0b3VjaCBldmVudHMgd2lsbCBiZSB1c2VkLlwiKX19LHtrZXk6XCJiZWZvcmVSZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0aGlzLm9wdGlvbnMuYmVmb3JlUmVuZGVyJiZ0aGlzLm9wdGlvbnMuYmVmb3JlUmVuZGVyKCl9fSx7a2V5Olwib25SZW5kZXJcIix2YWx1ZTpmdW5jdGlvbigpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0aGlzLm9wdGlvbnMub25SZW5kZXImJnRoaXMub3B0aW9ucy5vblJlbmRlcigpfX0se2tleTpcIm9uTW9kdWxlc0xvYWRlZFwiLHZhbHVlOmZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiPT09dHlwZW9mIHRoaXMub3B0aW9ucy5vbk1vZHVsZXNMb2FkZWQmJnRoaXMub3B0aW9ucy5vbk1vZHVsZXNMb2FkZWQodGhpcyl9fSx7a2V5OlwibG9hZE1vZHVsZXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXM7QXJyYXkuaXNBcnJheSh0aGlzLm9wdGlvbnMubW9kdWxlcykmJih0aGlzLm9wdGlvbnMubW9kdWxlcy5mb3JFYWNoKChmdW5jdGlvbihlKXsobmV3IGUpLmluaXQodCl9KSksdGhpcy5rZXlib2FyZFBsdWdpbkNsYXNzZXM9XCJtb2R1bGVzLWxvYWRlZFwiLHRoaXMucmVuZGVyKCksdGhpcy5vbk1vZHVsZXNMb2FkZWQoKSl9fSx7a2V5OlwiZ2V0TW9kdWxlUHJvcFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuISF0aGlzLm1vZHVsZXNbdF0mJnRoaXMubW9kdWxlc1t0XVtlXX19LHtrZXk6XCJnZXRNb2R1bGVzTGlzdFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubW9kdWxlcyl9fSx7a2V5OlwicGFyc2VSb3dET01Db250YWluZXJzXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4sbyl7dmFyIGk9dGhpcyxzPUFycmF5LmZyb20odC5jaGlsZHJlbiksYT0wO3JldHVybiBzLmxlbmd0aCYmbi5mb3JFYWNoKChmdW5jdGlvbihuLHIpe3ZhciB1PW9bcl07aWYoIXV8fCEodT5uKSlyZXR1cm4hMTt2YXIgYz1uLWEsbD11LWEsaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2guY2xhc3NOYW1lKz1cImhnLWJ1dHRvbi1jb250YWluZXJcIjt2YXIgZD1cIlwiLmNvbmNhdChpLm9wdGlvbnMubGF5b3V0TmFtZSxcIi1yXCIpLmNvbmNhdChlLFwiY1wiKS5jb25jYXQocik7aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNrVUlEXCIsZCk7dmFyIHA9cy5zcGxpY2UoYyxsLWMrMSk7YT1sLWMscC5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gaC5hcHBlbmRDaGlsZCh0KX0pKSxzLnNwbGljZShjLDAsaCksdC5pbm5lckhUTUw9XCJcIixzLmZvckVhY2goKGZ1bmN0aW9uKGUpe3JldHVybiB0LmFwcGVuZENoaWxkKGUpfSkpLGkub3B0aW9ucy5kZWJ1ZyYmY29uc29sZS5sb2coXCJyb3dET01Db250YWluZXJcIixwLGMsbCxhKzEpfSkpLHR9fSx7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuY2xlYXIoKSx0aGlzLmluaXRpYWxpemVkfHx0aGlzLmJlZm9yZUZpcnN0UmVuZGVyKCksdGhpcy5iZWZvcmVSZW5kZXIoKTt2YXIgZT1cImhnLWxheW91dC1cIi5jb25jYXQodGhpcy5vcHRpb25zLmxheW91dE5hbWUpLG49dGhpcy5vcHRpb25zLmxheW91dHx8e2RlZmF1bHQ6W1wiYCAxIDIgMyA0IDUgNiA3IDggOSAwIC0gPSB7YmtzcH1cIixcInt0YWJ9IHEgdyBlIHIgdCB5IHUgaSBvIHAgWyBdIFxcXFxcIixcIntsb2NrfSBhIHMgZCBmIGcgaCBqIGsgbCA7ICcge2VudGVyfVwiLFwie3NoaWZ0fSB6IHggYyB2IGIgbiBtICwgLiAvIHtzaGlmdH1cIixcIi5jb20gQCB7c3BhY2V9XCJdLHNoaWZ0OltcIn4gISBAICMgJCAlIF4gJiAqICggKSBfICsge2Jrc3B9XCIsXCJ7dGFifSBRIFcgRSBSIFQgWSBVIEkgTyBQIHsgfSB8XCIsJ3tsb2NrfSBBIFMgRCBGIEcgSCBKIEsgTCA6IFwiIHtlbnRlcn0nLFwie3NoaWZ0fSBaIFggQyBWIEIgTiBNIDwgPiA/IHtzaGlmdH1cIixcIi5jb20gQCB7c3BhY2V9XCJdfSxvPXRoaXMub3B0aW9ucy51c2VUb3VjaEV2ZW50c3x8ITEsaT1vP1wiaGctdG91Y2gtZXZlbnRzXCI6XCJcIixzPXRoaXMub3B0aW9ucy51c2VNb3VzZUV2ZW50c3x8ITEsYT10aGlzLm9wdGlvbnMuZGlzYWJsZVJvd0J1dHRvbkNvbnRhaW5lcnM7dGhpcy5rZXlib2FyZERPTS5jbGFzc05hbWU9dGhpcy5nZXRLZXlib2FyZENsYXNzU3RyaW5nKHRoaXMub3B0aW9ucy50aGVtZSxlLHRoaXMua2V5Ym9hcmRQbHVnaW5DbGFzc2VzLGkpLG5bdGhpcy5vcHRpb25zLmxheW91dE5hbWVdLmZvckVhY2goKGZ1bmN0aW9uKGUsbil7dmFyIGk9ZS5zcGxpdChcIiBcIikscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3IuY2xhc3NOYW1lKz1cImhnLXJvd1wiO3ZhciB1PVtdLGM9W107aS5mb3JFYWNoKChmdW5jdGlvbihlLGkpe3ZhciBsLGg9IWEmJlwic3RyaW5nXCI9PT10eXBlb2YgZSYmZS5sZW5ndGg+MSYmMD09PWUuaW5kZXhPZihcIltcIiksZD0hYSYmXCJzdHJpbmdcIj09PXR5cGVvZiBlJiZlLmxlbmd0aD4xJiZlLmluZGV4T2YoXCJdXCIpPT09ZS5sZW5ndGgtMTtoJiYodS5wdXNoKGkpLGU9ZS5yZXBsYWNlKC9cXFsvZyxcIlwiKSksZCYmKGMucHVzaChpKSxlPWUucmVwbGFjZSgvXFxdL2csXCJcIikpO3ZhciBwPXQudXRpbGl0aWVzLmdldEJ1dHRvbkNsYXNzKGUpLGY9dC51dGlsaXRpZXMuZ2V0QnV0dG9uRGlzcGxheU5hbWUoZSx0Lm9wdGlvbnMuZGlzcGxheSx0Lm9wdGlvbnMubWVyZ2VEaXNwbGF5KSx5PXQub3B0aW9ucy51c2VCdXR0b25UYWc/XCJidXR0b25cIjpcImRpdlwiLGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh5KTtiLmNsYXNzTmFtZSs9XCJoZy1idXR0b24gXCIuY29uY2F0KHApLChsPWIuY2xhc3NMaXN0KS5hZGQuYXBwbHkobCxfdG9Db25zdW1hYmxlQXJyYXkodC5nZXRCdXR0b25UaGVtZUNsYXNzZXMoZSkpKSx0LnNldERPTUJ1dHRvbkF0dHJpYnV0ZXMoZSwoZnVuY3Rpb24odCxlKXtiLnNldEF0dHJpYnV0ZSh0LGUpfSkpLHQuYWN0aXZlQnV0dG9uQ2xhc3M9XCJoZy1hY3RpdmVCdXR0b25cIiwhdC51dGlsaXRpZXMucG9pbnRlckV2ZW50c1N1cHBvcnRlZCgpfHxvfHxzP28/KGIub250b3VjaHN0YXJ0PWZ1bmN0aW9uKG4pe3QuaGFuZGxlQnV0dG9uQ2xpY2tlZChlKSx0LmhhbmRsZUJ1dHRvbk1vdXNlRG93bihlLG4pfSxiLm9udG91Y2hlbmQ9ZnVuY3Rpb24obil7dC5oYW5kbGVCdXR0b25Nb3VzZVVwKGUsbil9LGIub250b3VjaGNhbmNlbD1mdW5jdGlvbihuKXt0LmhhbmRsZUJ1dHRvbk1vdXNlVXAoZSxuKX0pOihiLm9uY2xpY2s9ZnVuY3Rpb24oKXt0LmlzTW91c2VIb2xkPSExLHQuaGFuZGxlQnV0dG9uQ2xpY2tlZChlKX0sYi5vbm1vdXNlZG93bj1mdW5jdGlvbihuKXt0LmhhbmRsZUJ1dHRvbk1vdXNlRG93bihlLG4pfSxiLm9ubW91c2V1cD1mdW5jdGlvbihuKXt0LmhhbmRsZUJ1dHRvbk1vdXNlVXAoZSxuKX0pOihiLm9ucG9pbnRlcmRvd249ZnVuY3Rpb24obil7dC5oYW5kbGVCdXR0b25DbGlja2VkKGUpLHQuaGFuZGxlQnV0dG9uTW91c2VEb3duKGUsbil9LGIub25wb2ludGVydXA9ZnVuY3Rpb24obil7dC5oYW5kbGVCdXR0b25Nb3VzZVVwKGUsbil9LGIub25wb2ludGVyY2FuY2VsPWZ1bmN0aW9uKG4pe3QuaGFuZGxlQnV0dG9uTW91c2VVcChlLG4pfSksYi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNrQnRuXCIsZSk7dmFyIG09XCJcIi5jb25jYXQodC5vcHRpb25zLmxheW91dE5hbWUsXCItclwiKS5jb25jYXQobixcImJcIikuY29uY2F0KGkpO2Iuc2V0QXR0cmlidXRlKFwiZGF0YS1za0J0blVJRFwiLG0pO3ZhciBnPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO2cuaW5uZXJIVE1MPWYsYi5hcHBlbmRDaGlsZChnKSx0LmJ1dHRvbkVsZW1lbnRzW2VdfHwodC5idXR0b25FbGVtZW50c1tlXT1bXSksdC5idXR0b25FbGVtZW50c1tlXS5wdXNoKGIpLHIuYXBwZW5kQ2hpbGQoYil9KSkscj10LnBhcnNlUm93RE9NQ29udGFpbmVycyhyLG4sdSxjKSx0LmtleWJvYXJkRE9NLmFwcGVuZENoaWxkKHIpfSkpLHRoaXMub25SZW5kZXIoKSx0aGlzLmluaXRpYWxpemVkfHwodGhpcy5pbml0aWFsaXplZD0hMCwhdGhpcy51dGlsaXRpZXMucG9pbnRlckV2ZW50c1N1cHBvcnRlZCgpfHxvfHxzP28/KGRvY3VtZW50Lm9udG91Y2hlbmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5oYW5kbGVCdXR0b25Nb3VzZVVwKCl9LGRvY3VtZW50Lm9udG91Y2hjYW5jZWw9ZnVuY3Rpb24oKXtyZXR1cm4gdC5oYW5kbGVCdXR0b25Nb3VzZVVwKCl9LHRoaXMua2V5Ym9hcmRET00ub250b3VjaHN0YXJ0PWZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUtleWJvYXJkQ29udGFpbmVyTW91c2VEb3duKGUpfSk6b3x8KGRvY3VtZW50Lm9ubW91c2V1cD1mdW5jdGlvbigpe3JldHVybiB0LmhhbmRsZUJ1dHRvbk1vdXNlVXAoKX0sdGhpcy5rZXlib2FyZERPTS5vbm1vdXNlZG93bj1mdW5jdGlvbihlKXtyZXR1cm4gdC5oYW5kbGVLZXlib2FyZENvbnRhaW5lck1vdXNlRG93bihlKX0pOihkb2N1bWVudC5vbnBvaW50ZXJ1cD1mdW5jdGlvbigpe3JldHVybiB0LmhhbmRsZUJ1dHRvbk1vdXNlVXAoKX0sdGhpcy5rZXlib2FyZERPTS5vbnBvaW50ZXJkb3duPWZ1bmN0aW9uKGUpe3JldHVybiB0LmhhbmRsZUtleWJvYXJkQ29udGFpbmVyTW91c2VEb3duKGUpfSksdGhpcy5vbkluaXQoKSl9fV0pJiZLZXlib2FyZF9kZWZpbmVQcm9wZXJ0aWVzKHQucHJvdG90eXBlLGUpLG4mJktleWJvYXJkX2RlZmluZVByb3BlcnRpZXModCxuKSxTaW1wbGVLZXlib2FyZH0oKTtlLmRlZmF1bHQ9Y31dKX0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlxuLy8gQXV0b2dlbmVyYXRlZFxuLy8gLS0tLS0tLS0tLS0tLVxuLy8gZ3VscGZpbGUudHMvd2FzbS50cyAtLT4gZ2VuZXJhdGVCdWlsZEluZm9cblxuZXhwb3J0IGNvbnN0IEJ1aWxkID0ge1xuICAgIHZlcnNpb246IFwiMC43MS4wIChkNGJmYjJlZmMwMDQ2ZjFjNTljNmJmMjIyY2QzMDUzMylcIixcbiAgICBidWlsZFNlZWQ6IDE2MzA0OTE5MzA0MzEsXG4gICAgXCJ3ZG9zYm94Lndhc21cIjoge1xuICAgICAgICBcInNpemVcIjogMTQ2MTI1MCxcbiAgICAgICAgXCJnelNpemVcIjogNDkxMjMyXG4gICAgfSxcbiAgICBcIndkb3Nib3guanNcIjoge1xuICAgICAgICBcInNpemVcIjogMTA3NTg5LFxuICAgICAgICBcImd6U2l6ZVwiOiAyNzY1NlxuICAgIH0sXG4gICAgXCJ3bGliemlwLndhc21cIjoge1xuICAgICAgICBcInNpemVcIjogMTEyMzAwLFxuICAgICAgICBcImd6U2l6ZVwiOiA1NDA5MFxuICAgIH0sXG4gICAgXCJ3bGliemlwLmpzXCI6IHtcbiAgICAgICAgXCJzaXplXCI6IDgwMjUxLFxuICAgICAgICBcImd6U2l6ZVwiOiAyMDcyMFxuICAgIH1cbixcbn07XG4iLCJpbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSBcIi4uL2RvbS9sYXllcnNcIjtcbmltcG9ydCB7IG5hbWVkS2V5Q29kZXMsIEtCRF9OT05FIH0gZnJvbSBcIi4uL2RvbS9rZXlzXCI7XG5pbXBvcnQgeyBwb2ludGVyIH0gZnJvbSBcIi4uL2RvbS9wb2ludGVyXCI7XG5pbXBvcnQgeyBMYXlvdXRQb3NpdGlvbiB9IGZyb20gXCIuL2xheW91dFwiO1xuXG5leHBvcnQgdHlwZSBBY3Rpb25UeXBlID0gXCJjbGlja1wiIHwgXCJob2xkXCI7XG4vLyBob2xkIC0gbWVhbnMgdHJhY2sgcHJlc3MvcmVsZWFzZSBldmVudHMgc2VwYXJhdGVseVxuXG5leHBvcnQgdHlwZSBCaW5kaW5nID0gbnVtYmVyO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1dHRvbiB7XG4gICAgYWN0aW9uOiBBY3Rpb25UeXBlLFxuICAgIG1hcFRvOiBCaW5kaW5nLFxuICAgIHN5bWJvbD86IHN0cmluZyxcbiAgICBwb3NpdGlvbjogTGF5b3V0UG9zaXRpb24sXG59XG5cbmNvbnN0IGtleUNvZGVUb05hbWUgPSBpbml0S2V5Q29kZVRvTmFtZSgpO1xuXG5mdW5jdGlvbiBpbml0S2V5Q29kZVRvTmFtZSgpIHtcbiAgICBjb25zdCBrZXlDb2RlVG9OYW1lOiB7W2tleUNvZGU6IG51bWJlcl06IHN0cmluZ30gPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgT2JqZWN0LmtleXMobmFtZWRLZXlDb2RlcykpIHtcbiAgICAgICAga2V5Q29kZVRvTmFtZVtuYW1lZEtleUNvZGVzW25leHRdXSA9IG5leHQuc3Vic3RyKDQsIDIpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5Q29kZVRvTmFtZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCdXR0b25IYW5kbGVyIHtcbiAgICBvbkRvd24/OiAoKSA9PiB2b2lkO1xuICAgIG9uVXA/OiAoKSA9PiB2b2lkO1xuICAgIG9uQ2xpY2s/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhUTUxKc0Rvc0J1dHRvbkVsZW1lbnQgZXh0ZW5kcyBIVE1MRGl2RWxlbWVudCB7XG4gICAgd2lkdGhQeDogbnVtYmVyO1xuICAgIGhlaWdodFB4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCdXR0b24oc3ltYm9sOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXI6IEJ1dHRvbkhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IG51bWJlcik6IEhUTUxKc0Rvc0J1dHRvbkVsZW1lbnQge1xuICAgIGNvbnN0IGlubmVyU2l6ZSA9IE1hdGgucm91bmQoc2l6ZSAqIDAuNik7XG4gICAgY29uc3QgaW5uZXJUZXh0U2l6ZSA9IE1hdGgucm91bmQoc2l6ZSAqIDAuNSk7XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLnJvdW5kKHNpemUgLyAyMCkpO1xuICAgIGNvbnN0IGJhY2tncm91bmRJbWFnZSA9IHN5bWJvbFRvVXJsW3N5bWJvbC50b0xvd2VyQ2FzZSgpXTtcbiAgICBjb25zdCB0ZXh0ID0gYmFja2dyb3VuZEltYWdlID09PSB1bmRlZmluZWQgPyBzeW1ib2wgOiBcIlwiO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZURpdihcImVtdWxhdG9yLWJ1dHRvbi10b3VjaC16b25lXCIpIGFzIEhUTUxKc0Rvc0J1dHRvbkVsZW1lbnQ7XG4gICAgY29uc3QgaW5uZXJCdXR0b24gPSBjcmVhdGVEaXYoXCJlbXVsYXRvci1idXR0b25cIik7XG4gICAgY29uc3QgaW5uZXJUZXh0ID0gY3JlYXRlRGl2KFwiZW11bGF0b3ItYnV0dG9uLXRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlID09PSB1bmRlZmluZWQgPyAoKHRleHQgPT09IHVuZGVmaW5lZCB8fCB0ZXh0Lmxlbmd0aCA9PT0gMCkgPyBcIuKWoVwiIDogdGV4dC5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSkgOiBcIlwiKTtcblxuICAgIGlmIChiYWNrZ3JvdW5kSW1hZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbm5lckJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcInVybChcXFwiXCIgKyBiYWNrZ3JvdW5kSW1hZ2UgKyBcIlxcXCIpXCI7XG4gICAgfVxuICAgIGlubmVyQnV0dG9uLnN0eWxlLndpZHRoID0gaW5uZXJTaXplICsgXCJweFwiO1xuICAgIGlubmVyQnV0dG9uLnN0eWxlLmhlaWdodCA9IGlubmVyU2l6ZSArIFwicHhcIjtcbiAgICBpbm5lclRleHQuc3R5bGUuZm9udFNpemUgPSBpbm5lclRleHRTaXplICsgXCJweFwiO1xuXG4gICAgYnV0dG9uLndpZHRoUHggPSBzaXplIC0gYm9yZGVyV2lkdGggKiAyO1xuICAgIGJ1dHRvbi5oZWlnaHRQeCA9IHNpemUgLSBib3JkZXJXaWR0aCAqIDI7XG4gICAgYnV0dG9uLnN0eWxlLndpZHRoID0gYnV0dG9uLndpZHRoUHggKyBcInB4XCI7XG4gICAgYnV0dG9uLnN0eWxlLmhlaWdodCA9IGJ1dHRvbi5oZWlnaHRQeCArIFwicHhcIjtcbiAgICBidXR0b24uc3R5bGUuYm9yZGVyV2lkdGggPSBib3JkZXJXaWR0aCArIFwicHhcIjtcbiAgICBidXR0b24uYXBwZW5kQ2hpbGQoaW5uZXJCdXR0b24pO1xuICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChpbm5lclRleHQpO1xuXG4gICAgY29uc3Qgb25TdGFydCA9IChlOiBFdmVudCkgPT4ge1xuICAgICAgICBpZiAoaGFuZGxlci5vbkRvd24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFuZGxlci5vbkRvd24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlci5vbkNsaWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZXIub25DbGljaygpO1xuICAgICAgICB9XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uRW5kID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChoYW5kbGVyLm9uVXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFuZGxlci5vblVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG4gICAgY29uc3Qgb25QcmV2ZW50ID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfVxuICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLnN0YXJ0ZXJzKSB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uU3RhcnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5lbmRlcnMpIHtcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIobmV4dCwgb25FbmQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5jaGFuZ2Vycykge1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihuZXh0LCBvblByZXZlbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5sZWF2ZXJzKSB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uUHJldmVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLnByZXZlbnRzKSB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uUHJldmVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBidXR0b247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGVkQnV0dG9uKGxheWVyczogTGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICBjaTogQ29tbWFuZEludGVyZmFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uczogQnV0dG9uW10sXG4gICAgICAgICAgICAgICAgICAgICAgIHNpemU6IG51bWJlcikge1xuICAgIGNvbnN0IGlkZW50ID0gTWF0aC5yb3VuZChzaXplIC8gNCk7XG4gICAgY29uc3QgdG9SZW1vdmU6IEhUTUxFbGVtZW50W10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgbmV4dCBvZiBidXR0b25zKSB7XG4gICAgICAgIGlmIChuZXh0Lm1hcFRvID09PSBLQkRfTk9ORSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzeW1ib2wgPSAobmV4dC5zeW1ib2wgfHwgbWFwVG9TeW1ib2wobmV4dC5tYXBUbykpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBkZXByZWNhdGVkQ3JlYXRlSGFuZGxlcihuZXh0LCBsYXllcnMpO1xuICAgICAgICBjb25zdCBidXR0b24gPSBjcmVhdGVCdXR0b24oc3ltYm9sLCBoYW5kbGVyLCBzaXplKTtcblxuICAgICAgICBidXR0b24uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGNvbnN0IGNzc1N0eWxlID0gKG5leHQgYXMgYW55KS5zdHlsZTtcbiAgICAgICAgaWYgKGNzc1N0eWxlKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmtleXMoY3NzU3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgKGJ1dHRvbi5zdHlsZSBhcyBhbnkpW3Byb3BdID0gKGNzc1N0eWxlIGFzIGFueSlbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dC5wb3NpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0gbmV4dC5wb3NpdGlvbi5sZWZ0O1xuICAgICAgICAgICAgY29uc3QgdG9wID0gbmV4dC5wb3NpdGlvbi50b3A7XG4gICAgICAgICAgICBjb25zdCBib3R0b20gPSBuZXh0LnBvc2l0aW9uLmJvdHRvbTtcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gbmV4dC5wb3NpdGlvbi5yaWdodDtcblxuICAgICAgICAgICAgaWYgKGxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGlkZW50ICogbGVmdCArIHNpemUgKiAobGVmdCAtIDEpKSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBidXR0b24uc3R5bGUucmlnaHQgPSAoaWRlbnQgKiByaWdodCArIHNpemUgKiAocmlnaHQgLSAxKSkgKyBcInB4XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0b3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoaWRlbnQgKiB0b3AgKyBzaXplICogKHRvcCAtIDEpKSArIFwicHhcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmJvdHRvbSA9IChpZGVudCAqIGJvdHRvbSArIHNpemUgKiAoYm90dG9tIC0gMSkpICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxheWVycy5tb3VzZU92ZXJsYXkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgICAgdG9SZW1vdmUucHVzaChidXR0b24pO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiB0b1JlbW92ZSkge1xuICAgICAgICAgICAgaWYgKG5leHQucGFyZW50RWxlbWVudCA9PT0gbGF5ZXJzLm1vdXNlT3ZlcmxheSkge1xuICAgICAgICAgICAgICAgIGxheWVycy5tb3VzZU92ZXJsYXkucmVtb3ZlQ2hpbGQobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEaXYoY2xhc3NOYW1lOiBzdHJpbmcsIGlubmVySHRtbD86IHN0cmluZykge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgaWYgKGlubmVySHRtbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IGlubmVySHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBtYXBUb1N5bWJvbChtYXBUbzogQmluZGluZyk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBtYXBUbyA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4ga2V5Q29kZVRvTmFtZVttYXBUb107XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcFRvO1xufVxuXG5mdW5jdGlvbiBkZXByZWNhdGVkQ3JlYXRlSGFuZGxlcihidXR0b246IEJ1dHRvbixcbiAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBMYXllcnMpOiBCdXR0b25IYW5kbGVyIHtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbi5hY3Rpb24gPT09IFwiY2xpY2tcIiA/XG4gICAgICAgICAgICB7IG9uQ2xpY2s6ICgpID0+IGxheWVycy5maXJlS2V5UHJlc3MoYnV0dG9uLm1hcFRvKSB9IDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvbkRvd246ICgpID0+IGxheWVycy5maXJlS2V5RG93bihidXR0b24ubWFwVG8pLFxuICAgICAgICAgICAgICAgIG9uVXA6ICgpID0+IGxheWVycy5maXJlS2V5VXAoYnV0dG9uLm1hcFRvKVxuICAgICAgICAgICAgfTtcbn1cblxuY29uc3QgZG93biA9IFwiZGF0YTppbWFnZS9zdmcreG1sLCUzQyUzRnhtbCB2ZXJzaW9uPScxLjAnIGVuY29kaW5nPSd1dGYtOCclM0YlM0UlM0MhLS0gR2VuZXJhdG9yOiBBZG9iZSBJbGx1c3RyYXRvciAxNy4xLjAsIFNWRyBFeHBvcnQgUGx1Zy1JbiAuIFNWRyBWZXJzaW9uOiA2LjAwIEJ1aWxkIDApIC0tJTNFJTNDIURPQ1RZUEUgc3ZnIFBVQkxJQyAnLS8vVzNDLy9EVEQgU1ZHIDEuMS8vRU4nICdodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQnJTNFJTNDc3ZnIHZlcnNpb249JzEuMScgaWQ9J0xheWVyXzEnIHhtbG5zOnNrZXRjaD0naHR0cDovL3d3dy5ib2hlbWlhbmNvZGluZy5jb20vc2tldGNoL25zJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDIwIDIwJyBmaWxsPSclMjNGRkYnIGVuYWJsZS1iYWNrZ3JvdW5kPSduZXcgMCAwIDIwIDIwJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ3RpdGxlJTNFU2hhcGUlM0MvdGl0bGUlM0UlM0NkZXNjJTNFQ3JlYXRlZCB3aXRoIFNrZXRjaC4lM0MvZGVzYyUzRSUzQ2cgaWQ9J1BhZ2UtMScgc2tldGNoOnR5cGU9J01TUGFnZSclM0UlM0NnIGlkPSdBcnRib2FyZC0xJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMy4wMDAwMDAsIC0xLjAwMDAwMCknIHNrZXRjaDp0eXBlPSdNU0FydGJvYXJkR3JvdXAnJTNFJTNDcGF0aCBpZD0nU2hhcGUnIHNrZXRjaDp0eXBlPSdNU1NoYXBlR3JvdXAnIGQ9J00xOSwxMmMtMC4zLDAtMC41LDAuMS0wLjcsMC4zTDE0LDE2LjZWM2MwLTAuNS0wLjQtMS0xLTFzLTEsMC41LTEsMXYxMy42IGwtNC4zLTQuM0M3LjUsMTIuMSw3LjMsMTIsNywxMmMtMC41LDAtMSwwLjQtMSwxYzAsMC4zLDAuMSwwLjUsMC4zLDAuN2w2LDZjMC4yLDAuMiwwLjQsMC4zLDAuNywwLjNzMC41LTAuMSwwLjctMC4zbDYtNiBjMC4yLTAuMiwwLjMtMC40LDAuMy0wLjdDMjAsMTIuNCwxOS41LDEyLDE5LDEyTDE5LDEyeicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIjtcbmNvbnN0IGxlZnQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTcuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQyFET0NUWVBFIHN2ZyBQVUJMSUMgJy0vL1czQy8vRFREIFNWRyAxLjEvL0VOJyAnaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkJyUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDIwIDIwJyBlbmFibGUtYmFja2dyb3VuZD0nbmV3IDAgMCAyMCAyMCcgZmlsbD0nJTIzRkZGJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ2cgaWQ9J2xlZnRfYXJyb3dfMV8nJTNFJTNDZyUzRSUzQ3BhdGggZmlsbC1ydWxlPSdldmVub2RkJyBjbGlwLXJ1bGU9J2V2ZW5vZGQnIGQ9J00xOCw5SDQuNDFsNC4yOS00LjI5QzguODksNC41Myw5LDQuMjgsOSw0YzAtMC41NS0wLjQ1LTEtMS0xIEM3LjcyLDMsNy40NywzLjExLDcuMjksMy4yOWwtNiw2QzEuMTEsOS40NywxLDkuNzIsMSwxMGMwLDAuMjgsMC4xMSwwLjUzLDAuMjksMC43MWw2LDZDNy40NywxNi44OSw3LjcyLDE3LDgsMTcgYzAuNTUsMCwxLTAuNDUsMS0xYzAtMC4yOC0wLjExLTAuNTMtMC4yOS0wLjcxTDQuNDEsMTFIMThjMC41NSwwLDEtMC40NSwxLTFDMTksOS40NSwxOC41NSw5LDE4LDl6Jy8lM0UlM0MvZyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVwiO1xuY29uc3QgcmlnaHQgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTcuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQyFET0NUWVBFIHN2ZyBQVUJMSUMgJy0vL1czQy8vRFREIFNWRyAxLjEvL0VOJyAnaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkJyUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgZmlsbD0nJTIzZmZmJyB2aWV3Qm94PScwIDAgMjAgMjAnIGVuYWJsZS1iYWNrZ3JvdW5kPSduZXcgMCAwIDIwIDIwJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ2cgaWQ9J3JpZ2h0X2Fycm93XzFfJyUzRSUzQ2clM0UlM0NwYXRoIGZpbGwtcnVsZT0nZXZlbm9kZCcgY2xpcC1ydWxlPSdldmVub2RkJyBkPSdNMTguNzEsOS4yOWwtNi02QzEyLjUzLDMuMTEsMTIuMjgsMywxMiwzYy0wLjU1LDAtMSwwLjQ1LTEsMSBjMCwwLjI4LDAuMTEsMC41MywwLjI5LDAuNzFMMTUuNTksOUgyYy0wLjU1LDAtMSwwLjQ1LTEsMWMwLDAuNTUsMC40NSwxLDEsMWgxMy41OWwtNC4yOSw0LjI5QzExLjExLDE1LjQ3LDExLDE1LjcyLDExLDE2IGMwLDAuNTUsMC40NSwxLDEsMWMwLjI4LDAsMC41My0wLjExLDAuNzEtMC4yOWw2LTZDMTguODksMTAuNTMsMTksMTAuMjgsMTksMTBDMTksOS43MiwxOC44OSw5LjQ3LDE4LjcxLDkuMjl6Jy8lM0UlM0MvZyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVwiO1xuY29uc3QgZW50ZXIgPSBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTguMC4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgZmlsbD0nJTIzZmZmJyB2aWV3Qm94PScwIDAgMjAgMjAnIGVuYWJsZS1iYWNrZ3JvdW5kPSduZXcgMCAwIDIwIDIwJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ2cgaWQ9J2tleV9lbnRlcl8xXyclM0UlM0NnJTNFJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTE4LDJjLTAuNTUsMC0xLDAuNDUtMSwxdjVjMCwyLjIxLTEuNzksNC00LDRINC40MWwyLjI5LTIuMjkgQzYuODksOS41Myw3LDkuMjgsNyw5YzAtMC41NS0wLjQ1LTEtMS0xQzUuNzIsOCw1LjQ3LDguMTEsNS4yOSw4LjI5bC00LDRDMS4xMSwxMi40NywxLDEyLjcyLDEsMTNjMCwwLjI4LDAuMTEsMC41MywwLjI5LDAuNzEgbDQsNEM1LjQ3LDE3Ljg5LDUuNzIsMTgsNiwxOGMwLjU1LDAsMS0wLjQ1LDEtMWMwLTAuMjgtMC4xMS0wLjUzLTAuMjktMC43MUw0LjQxLDE0SDEzYzMuMzEsMCw2LTIuNjksNi02VjNDMTksMi40NSwxOC41NSwyLDE4LDIgeicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIjtcbmNvbnN0IHN5bWJvbFRvVXJsOiB7W3N5bWJvbDogc3RyaW5nXTogc3RyaW5nfSA9IHtcbiAgICBmdWxsc2NyZWVuOiBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTcuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQyFET0NUWVBFIHN2ZyBQVUJMSUMgJy0vL1czQy8vRFREIFNWRyAxLjEvL0VOJyAnaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkJyUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDE2IDE2JyBlbmFibGUtYmFja2dyb3VuZD0nbmV3IDAgMCAxNiAxNicgeG1sOnNwYWNlPSdwcmVzZXJ2ZSclM0UlM0NnIGlkPSdtYXhpbWl6ZV8xXycgZmlsbD0nJTIzRkZGRkZGJyUzRSUzQ2clM0UlM0NwYXRoIGZpbGwtcnVsZT0nZXZlbm9kZCcgY2xpcC1ydWxlPSdldmVub2RkJyBkPSdNNS45OSw4Ljk5Yy0wLjI4LDAtMC41MywwLjExLTAuNzEsMC4yOWwtMy4yOSwzLjI5di0xLjU5YzAtMC41NS0wLjQ1LTEtMS0xIHMtMSwwLjQ1LTEsMXY0YzAsMC41NSwwLjQ1LDEsMSwxaDRjMC41NSwwLDEtMC40NSwxLTFzLTAuNDUtMS0xLTFIMy40MUw2LjcsMTAuN2MwLjE4LTAuMTgsMC4yOS0wLjQzLDAuMjktMC43MSBDNi45OSw5LjQ0LDYuNTQsOC45OSw1Ljk5LDguOTl6IE0xNC45OS0wLjAxaC00Yy0wLjU1LDAtMSwwLjQ1LTEsMXMwLjQ1LDEsMSwxaDEuNTlMOS4yOCw1LjI5QzkuMSw1LjQ3LDguOTksNS43Miw4Ljk5LDUuOTkgYzAsMC41NSwwLjQ1LDEsMSwxYzAuMjgsMCwwLjUzLTAuMTEsMC43MS0wLjI5bDMuMjktMy4yOXYxLjU5YzAsMC41NSwwLjQ1LDEsMSwxczEtMC40NSwxLTF2LTRDMTUuOTksMC40NCwxNS41NC0wLjAxLDE0Ljk5LTAuMDEgeicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIixcbiAgICBzYXZlOiBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTguMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDE2IDE2JyBlbmFibGUtYmFja2dyb3VuZD0nbmV3IDAgMCAxNiAxNicgZmlsbD0nJTIzRkZGRkZGJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ2cgaWQ9J2Zsb3BweV9kaXNrJyUzRSUzQ2clM0UlM0NwYXRoIGZpbGwtcnVsZT0nZXZlbm9kZCcgY2xpcC1ydWxlPSdldmVub2RkJyBkPSdNMTUuNzEsMi4yOWwtMi0yQzEzLjUzLDAuMTEsMTMuMjgsMCwxMywwaC0xdjZINFYwSDFDMC40NSwwLDAsMC40NSwwLDF2MTQgYzAsMC41NSwwLjQ1LDEsMSwxaDE0YzAuNTUsMCwxLTAuNDUsMS0xVjNDMTYsMi43MiwxNS44OSwyLjQ3LDE1LjcxLDIuMjl6IE0xNCwxNUgyVjljMC0wLjU1LDAuNDUtMSwxLTFoMTBjMC41NSwwLDEsMC40NSwxLDFWMTUgeiBNMTEsMUg5djRoMlYxeicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0UlMEFcIixcbiAgICBvcHRpb25zOiBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTcuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQyFET0NUWVBFIHN2ZyBQVUJMSUMgJy0vL1czQy8vRFREIFNWRyAxLjEvL0VOJyAnaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkJyUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHhtbG5zOnhsaW5rPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyB4PScwcHgnIHk9JzBweCcgdmlld0JveD0nMCAwIDIwIDIwJyBlbmFibGUtYmFja2dyb3VuZD0nbmV3IDAgMCAyMCAyMCcgZmlsbD0nJTIzRkZGJyB4bWw6c3BhY2U9J3ByZXNlcnZlJyUzRSUzQ2cgaWQ9J2NvZ18yXyclM0UlM0NnJTNFJTNDcGF0aCBmaWxsLXJ1bGU9J2V2ZW5vZGQnIGNsaXAtcnVsZT0nZXZlbm9kZCcgZD0nTTE5LDhoLTIuMzFjLTAuMTQtMC40Ni0wLjMzLTAuODktMC41Ni0xLjNsMS43LTEuN2MwLjM5LTAuMzksMC4zOS0xLjAyLDAtMS40MSBsLTEuNDEtMS40MWMtMC4zOS0wLjM5LTEuMDItMC4zOS0xLjQxLDBsLTEuNywxLjdjLTAuNDEtMC4yMi0wLjg0LTAuNDEtMS4zLTAuNTVWMWMwLTAuNTUtMC40NS0xLTEtMUg5QzguNDUsMCw4LDAuNDUsOCwxdjIuMzMgQzcuNTIsMy40Nyw3LjA2LDMuNjcsNi42MywzLjkxTDUsMi4yOGMtMC4zNy0wLjM3LTAuOTgtMC4zNy0xLjM2LDBMMi4yOCwzLjY0QzEuOTEsNC4wMiwxLjkxLDQuNjMsMi4yOCw1bDEuNjIsMS42MiBDMy42Niw3LjA2LDMuNDYsNy41MSwzLjMxLDhIMUMwLjQ1LDgsMCw4LjQ1LDAsOXYyYzAsMC41NSwwLjQ1LDEsMSwxaDIuMzFjMC4xNCwwLjQ2LDAuMzMsMC44OSwwLjU2LDEuM0wyLjE3LDE1IGMtMC4zOSwwLjM5LTAuMzksMS4wMiwwLDEuNDFsMS40MSwxLjQxYzAuMzksMC4zOSwxLjAyLDAuMzksMS40MSwwbDEuNy0xLjdjMC40MSwwLjIyLDAuODQsMC40MSwxLjMsMC41NVYxOWMwLDAuNTUsMC40NSwxLDEsMWgyIGMwLjU1LDAsMS0wLjQ1LDEtMXYtMi4zM2MwLjQ4LTAuMTQsMC45NC0wLjM1LDEuMzctMC41OUwxNSwxNy43MmMwLjM3LDAuMzcsMC45OCwwLjM3LDEuMzYsMGwxLjM2LTEuMzYgYzAuMzctMC4zNywwLjM3LTAuOTgsMC0xLjM2bC0xLjYyLTEuNjJjMC4yNC0wLjQzLDAuNDUtMC44OSwwLjYtMS4zOEgxOWMwLjU1LDAsMS0wLjQ1LDEtMVY5QzIwLDguNDUsMTkuNTUsOCwxOSw4eiBNMTAsMTQgYy0yLjIxLDAtNC0xLjc5LTQtNGMwLTIuMjEsMS43OS00LDQtNHM0LDEuNzksNCw0QzE0LDEyLjIxLDEyLjIxLDE0LDEwLDE0eicvJTNFJTNDL2clM0UlM0MvZyUzRSUzQy9zdmclM0VcIixcbiAgICBrZXlib2FyZDogXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNDJTNGeG1sIHZlcnNpb249JzEuMCcgZW5jb2Rpbmc9J3V0Zi04JyUzRiUzRSUzQyEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE4LjAuMCwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgLS0lM0UlM0NzdmcgdmVyc2lvbj0nMS4xJyBpZD0nTGF5ZXJfMScgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgeD0nMHB4JyB5PScwcHgnIHZpZXdCb3g9JzAgMCAxNiAxNicgZW5hYmxlLWJhY2tncm91bmQ9J25ldyAwIDAgMTYgMTYnIHhtbDpzcGFjZT0ncHJlc2VydmUnJTNFJTNDZyBpZD0nbWFudWFsbHlfZW50ZXJlZF9kYXRhXzJfJyUzRSUzQ2clM0UlM0NwYXRoIGZpbGw9JyUyM0ZGRkZGRicgZmlsbC1ydWxlPSdldmVub2RkJyBjbGlwLXJ1bGU9J2V2ZW5vZGQnIGQ9J00xLDhoMy43NmwyLTJIMUMwLjQ1LDYsMCw2LjQ1LDAsN0MwLDcuNTUsMC40NSw4LDEsOHogTTE1LjQ5LDMuOTkgQzE1LjgsMy42NywxNiwzLjIzLDE2LDIuNzVDMTYsMS43OCwxNS4yMiwxLDE0LjI1LDFjLTAuNDgsMC0wLjkyLDAuMi0xLjI0LDAuNTFsLTEuNDQsMS40NGwyLjQ3LDIuNDdMMTUuNDksMy45OXogTTEsNGg3Ljc2bDItMiBIMUMwLjQ1LDIsMCwyLjQ1LDAsM0MwLDMuNTUsMC40NSw0LDEsNHogTTEsMTBjLTAuNTUsMC0xLDAuNDUtMSwxYzAsMC40OCwwLjM1LDAuODYsMC44LDAuOTZMMi43NiwxMEgxeiBNMTAuOTUsMy41N2wtNi42OSw2LjY5IGwyLjQ3LDIuNDdsNi42OS02LjY5TDEwLjk1LDMuNTd6IE0xNS4yLDYuMDRMMTMuMjQsOEgxNWMwLjU1LDAsMS0wLjQ1LDEtMUMxNiw2LjUyLDE1LjY1LDYuMTQsMTUuMiw2LjA0eiBNMiwxNWwzLjg2LTEuMzkgbC0yLjQ2LTIuNDRMMiwxNXogTTE1LDEwaC0zLjc2bC0yLDJIMTVjMC41NSwwLDEtMC40NSwxLTFDMTYsMTAuNDUsMTUuNTUsMTAsMTUsMTB6Jy8lM0UlM0MvZyUzRSUzQy9nJTNFJTNDL3N2ZyUzRVwiLFxuICAgIHVwOiBcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM0MlM0Z4bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0ndXRmLTgnJTNGJTNFJTNDIS0tIEdlbmVyYXRvcjogQWRvYmUgSWxsdXN0cmF0b3IgMTcuMS4wLCBTVkcgRXhwb3J0IFBsdWctSW4gLiBTVkcgVmVyc2lvbjogNi4wMCBCdWlsZCAwKSAtLSUzRSUzQyFET0NUWVBFIHN2ZyBQVUJMSUMgJy0vL1czQy8vRFREIFNWRyAxLjEvL0VOJyAnaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkJyUzRSUzQ3N2ZyB2ZXJzaW9uPScxLjEnIGlkPSdMYXllcl8xJyB4bWxuczpza2V0Y2g9J2h0dHA6Ly93d3cuYm9oZW1pYW5jb2RpbmcuY29tL3NrZXRjaC9ucycgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB4bWxuczp4bGluaz0naHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycgeD0nMHB4JyB5PScwcHgnIHZpZXdCb3g9JzAgMCAyMCAyMCcgZmlsbD0nJTIzRkZGJyBlbmFibGUtYmFja2dyb3VuZD0nbmV3IDAgMCAyMCAyMCcgeG1sOnNwYWNlPSdwcmVzZXJ2ZSclM0UlM0N0aXRsZSUzRVNoYXBlJTNDL3RpdGxlJTNFJTNDZGVzYyUzRUNyZWF0ZWQgd2l0aCBTa2V0Y2guJTNDL2Rlc2MlM0UlM0NnIGlkPSdQYWdlLTEnIHNrZXRjaDp0eXBlPSdNU1BhZ2UnJTNFJTNDZyBpZD0nQXJ0Ym9hcmQtMScgdHJhbnNmb3JtPSd0cmFuc2xhdGUoLTMuMDAwMDAwLCAtMS4wMDAwMDApJyBza2V0Y2g6dHlwZT0nTVNBcnRib2FyZEdyb3VwJyUzRSUzQ3BhdGggaWQ9J1NoYXBlJyBza2V0Y2g6dHlwZT0nTVNTaGFwZUdyb3VwJyBkPSdNMTkuNyw4LjNsLTYtNkMxMy41LDIuMSwxMy4zLDIsMTMsMnMtMC41LDAuMS0wLjcsMC4zbC02LDZDNi4xLDguNSw2LDguNyw2LDkgYzAsMC42LDAuNSwxLDEsMWMwLjMsMCwwLjUtMC4xLDAuNy0wLjNMMTIsNS40VjE5YzAsMC41LDAuNCwxLDEsMXMxLTAuNSwxLTFWNS40bDQuMyw0LjNDMTguNSw5LjksMTguNywxMCwxOSwxMGMwLjUsMCwxLTAuNCwxLTEgQzIwLDguNywxOS45LDguNSwxOS43LDguM0wxOS43LDguM3onLyUzRSUzQy9nJTNFJTNDL2clM0UlM0Mvc3ZnJTNFXCIsXG4gICAgZG93bixcbiAgICBkbzogZG93bixcbiAgICBkdzogZG93bixcbiAgICBkd246IGRvd24sXG4gICAgbGVmdCxcbiAgICBsZTogbGVmdCxcbiAgICBsZnQ6IGxlZnQsXG4gICAgcmlnaHQsXG4gICAgcmk6IHJpZ2h0LFxuICAgIHJnaHQ6IHJpZ2h0LFxuICAgIHJnaDogcmlnaHQsXG4gICAgZW50ZXIsXG4gICAgZW46IGVudGVyLFxuICAgIGVucjogZW50ZXIsXG4gICAgZW50OiBlbnRlcixcbiAgICBlbnRyOiBlbnRlcixcbn1cblxuIiwiZXhwb3J0IHR5cGUgR3JpZFR5cGUgPSBcInNxdWFyZVwiIHwgXCJob25leWNvbWJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBDZWxsIHtcbiAgICBjZW50ZXJYOiBudW1iZXI7XG4gICAgY2VudGVyWTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRDb25maWd1cmF0aW9uIHtcbiAgICBncmlkVHlwZTogR3JpZFR5cGUsXG4gICAgY2VsbHM6IENlbGxbXVtdO1xuICAgIGNvbHVtbldpZHRoOiBudW1iZXI7XG4gICAgcm93SGVpZ2h0OiBudW1iZXI7XG4gICAgY29sdW1uc1BhZGRpbmc6IG51bWJlcjtcbiAgICByb3dzUGFkZGluZzogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JpZCB7XG4gICAgZ2V0Q29uZmlndXJhdGlvbih3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IEdyaWRDb25maWd1cmF0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R3JpZChncmlkVHlwZTogR3JpZFR5cGUpIHtcbiAgICBzd2l0Y2ggKGdyaWRUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJzcXVhcmVcIjogcmV0dXJuIGdldFNxdWFyZUdyaWQoKTtcbiAgICAgICAgY2FzZSBcImhvbmV5Y29tYlwiOiByZXR1cm4gZ2V0SG9uZXlDb21iR3JpZCgpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZ3JpZCB0eXBlIFwiICsgZ3JpZFR5cGUpO1xufVxuXG5mdW5jdGlvbiBnZXRTcXVhcmVHcmlkKCk6IEdyaWQge1xuICAgIGNsYXNzIFNxdWFyZUdyaWQgaW1wbGVtZW50cyBHcmlkIHtcbiAgICAgICAgYXNwZWN0ID0gMjAwIC8gMzIwO1xuXG4gICAgICAgIGdldENvbmZpZ3VyYXRpb24od2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBHcmlkQ29uZmlndXJhdGlvbiB7XG4gICAgICAgICAgICBjb25zdCBjb2xzID0gdGhpcy5nZXRDb2xzKCk7XG4gICAgICAgICAgICBjb25zdCByb3dzID0gdGhpcy5nZXRSb3dzKCk7XG4gICAgICAgICAgICBjb25zdCBtaWRkbGVDb2wgPSBNYXRoLmZsb29yKGNvbHMgLyAyKTtcbiAgICAgICAgICAgIGNvbnN0IG1pZGRsZVJvdyA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uc1BhZGRpbmcgPSB3aWR0aCAqIDUgLyAxMDAgLyAyO1xuICAgICAgICAgICAgY29uc3Qgcm93c1BhZGRpbmcgPSBjb2x1bW5zUGFkZGluZztcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gKHdpZHRoIC0gY29sdW1uc1BhZGRpbmcgKiAyKSAvIGNvbHM7XG4gICAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSAoaGVpZ2h0IC0gcm93c1BhZGRpbmcgKiAyKSAvIHJvd3M7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gTWF0aC5taW4oY29sdW1uV2lkdGgsIHJvd0hlaWdodCk7XG4gICAgICAgICAgICBjb25zdCBjZWxsczogQ2VsbFtdW10gPSBbXTsgXG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dzOyArK3Jvdykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGxSb3c6IENlbGxbXSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGNvbHM7ICsrY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxSb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50ZXJYOiAgY29sIDwgbWlkZGxlQ29sID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zUGFkZGluZyArIHNpemUgKiAoY29sICsgMSAvIDIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCAtIGNvbHVtbnNQYWRkaW5nIC0gc2l6ZSAqICgoY29scyAtIGNvbCAtIDEpICsgMSAvIDIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyWTogcm93IDwgbWlkZGxlUm93ID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c1BhZGRpbmcgKyBzaXplICogKHJvdyArIDEgLyAyKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IC0gcm93c1BhZGRpbmcgLSBzaXplICogKChyb3dzIC0gcm93IC0gMSkgKyAxIC8gMiksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKGNlbGxSb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBncmlkVHlwZTogXCJzcXVhcmVcIixcbiAgICAgICAgICAgICAgICBjZWxscyxcbiAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogc2l6ZSxcbiAgICAgICAgICAgICAgICByb3dIZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgICAgY29sdW1uc1BhZGRpbmcsXG4gICAgICAgICAgICAgICAgcm93c1BhZGRpbmcsXG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0Q29scygpIHtcbiAgICAgICAgICAgIHJldHVybiAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHByaXZhdGUgZ2V0Um93cygpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMuZ2V0Q29scygpICogdGhpcy5hc3BlY3QpICsgMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3F1YXJlR3JpZCgpO1xufVxuXG5mdW5jdGlvbiBnZXRIb25leUNvbWJHcmlkKCk6IEdyaWQge1xuICAgIGNsYXNzIFNxdWFyZUdyaWQgaW1wbGVtZW50cyBHcmlkIHtcbiAgICAgICAgYXNwZWN0ID0gMjAwIC8gMzIwO1xuXG4gICAgICAgIGdldENvbmZpZ3VyYXRpb24od2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiBHcmlkQ29uZmlndXJhdGlvbiB7XG4gICAgICAgICAgICBjb25zdCBjb2xzID0gdGhpcy5nZXRDb2xzKCk7XG4gICAgICAgICAgICBjb25zdCByb3dzID0gdGhpcy5nZXRSb3dzKCk7XG4gICAgICAgICAgICBjb25zdCBtaWRkbGVDb2wgPSBNYXRoLmZsb29yKGNvbHMgLyAyKTtcbiAgICAgICAgICAgIGNvbnN0IG1pZGRsZVJvdyA9IE1hdGguZmxvb3Iocm93cyAvIDIpO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uc1BhZGRpbmcgPSB3aWR0aCAqIDUgLyAxMDAgLyAyO1xuICAgICAgICAgICAgY29uc3Qgcm93c1BhZGRpbmcgPSBjb2x1bW5zUGFkZGluZztcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbldpZHRoID0gKHdpZHRoIC0gY29sdW1uc1BhZGRpbmcgKiAyKSAvIGNvbHM7XG4gICAgICAgICAgICBjb25zdCByb3dIZWlnaHQgPSAoaGVpZ2h0IC0gcm93c1BhZGRpbmcgKiAyKSAvIHJvd3M7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gTWF0aC5taW4oY29sdW1uV2lkdGgsIHJvd0hlaWdodCk7XG4gICAgICAgICAgICBjb25zdCBjZWxsczogQ2VsbFtdW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHJvd3M7ICsrcm93KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbFJvdzogQ2VsbFtdID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbENvbHMgPSByb3cgJSAyID09IDAgPyBjb2xzIDogY29scyAtIDE7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFkZGluZyA9IHJvdyAlIDIgPT0gMCA/IDAgOiBzaXplIC8gMjtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCBjZWxsQ29sczsgKytjb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbFJvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlclg6IGNvbCA8IG1pZGRsZUNvbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyArIGNvbHVtbnNQYWRkaW5nICsgc2l6ZSAqIChjb2wgKyAxIC8gMik6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyArIHdpZHRoIC0gY29sdW1uc1BhZGRpbmcgLSBzaXplICogKChjb2xzIC0gY29sIC0gMSkgKyAxLzIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyWTogcm93IDwgbWlkZGxlUm93ID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c1BhZGRpbmcgKyBzaXplICogKHJvdyArIDEgLyAyKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0IC0gcm93c1BhZGRpbmcgLSBzaXplICogKChyb3dzIC0gcm93IC0gMSkgKyAxIC8gMiksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjZWxscy5wdXNoKGNlbGxSb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBncmlkVHlwZTogXCJob25leWNvbWJcIixcbiAgICAgICAgICAgICAgICBjZWxscyxcbiAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogc2l6ZSxcbiAgICAgICAgICAgICAgICByb3dIZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICAgICAgY29sdW1uc1BhZGRpbmcsXG4gICAgICAgICAgICAgICAgcm93c1BhZGRpbmcsXG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0Q29scygpIHtcbiAgICAgICAgICAgIHJldHVybiAxMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGdldFJvd3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmdldENvbHMoKSAqIHRoaXMuYXNwZWN0KSArIDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNxdWFyZUdyaWQoKTtcbn1cbiIsImltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2UgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQgeyBMYXllcnMgfSBmcm9tIFwiLi4vZG9tL2xheWVyc1wiO1xuXG5leHBvcnQgdHlwZSBNYXBwZXIgPSB7W2tleUNvZGU6IG51bWJlcl06IG51bWJlcn07XG5cbmV4cG9ydCBmdW5jdGlvbiBrZXlib2FyZChsYXllcnM6IExheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaTogQ29tbWFuZEludGVyZmFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwZXJPcHQ/OiBNYXBwZXIpIHtcbiAgICBjb25zdCBtYXBwZXIgPSBtYXBwZXJPcHQgfHwge307XG4gICAgZnVuY3Rpb24gbWFwKGtleUNvZGU6IG51bWJlcikge1xuICAgICAgICBpZiAobWFwcGVyW2tleUNvZGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBwZXJba2V5Q29kZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5Q29kZTtcbiAgICB9XG5cbiAgICBsYXllcnMuc2V0T25LZXlEb3duKChrZXlDb2RlOiBudW1iZXIpID0+IHtcbiAgICAgICAgY2kuc2VuZEtleUV2ZW50KG1hcChrZXlDb2RlKSwgdHJ1ZSk7XG4gICAgfSk7XG4gICAgbGF5ZXJzLnNldE9uS2V5VXAoKGtleUNvZGU6IG51bWJlcikgPT4ge1xuICAgICAgICBjaS5zZW5kS2V5RXZlbnQobWFwKGtleUNvZGUpLCBmYWxzZSk7XG4gICAgfSk7XG4gICAgbGF5ZXJzLnNldE9uS2V5UHJlc3MoKGtleUNvZGU6IG51bWJlcikgPT4ge1xuICAgICAgICBjaS5zaW11bGF0ZUtleVByZXNzKG1hcChrZXlDb2RlKSk7XG4gICAgfSk7XG4gICAgbGF5ZXJzLnNldE9uS2V5c1ByZXNzKChrZXlDb2RlczogbnVtYmVyW10pID0+IHtcbiAgICAgICAgY2kuc2ltdWxhdGVLZXlQcmVzcyguLi5rZXlDb2Rlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgbGF5ZXJzLnNldE9uS2V5RG93bigoa2V5Q29kZTogbnVtYmVyKSA9PiB7IC8qKi8gfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBsYXllcnMuc2V0T25LZXlVcCgoa2V5Q29kZTogbnVtYmVyKSA9PiB7IC8qKi8gfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBsYXllcnMuc2V0T25LZXlQcmVzcygoa2V5Q29kZTogbnVtYmVyKSA9PiB7IC8qKi8gfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBsYXllcnMuc2V0T25LZXlzUHJlc3MoKGtleUNvZGVzOiBudW1iZXJbXSkgPT4geyAvKiovIH0pO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi9idXR0b25cIjtcbmltcG9ydCB7IEV2ZW50TWFwcGluZyB9IGZyb20gXCIuL25pcHBsZVwiO1xuaW1wb3J0IHsgTWFwcGVyIH0gZnJvbSBcIi4va2V5Ym9hcmRcIjtcblxuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tIFwiLi9ncmlkXCI7XG5cbmV4cG9ydCB0eXBlIExheWVyQ29udHJvbFR5cGUgPSBcIk9wdGlvbnNcIiB8IFwiS2V5XCIgfCBcIktleWJvYXJkXCIgfCBcIlN3aXRjaFwiIHwgXCJTY3JlZW5Nb3ZlXCIgfCBcIlBvaW50ZXJCdXR0b25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBMYXllclBvc2l0aW9uIHtcbiAgICBjb2x1bW46IG51bWJlcjtcbiAgICByb3c6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYXllckNvbnRyb2wgZXh0ZW5kcyBMYXllclBvc2l0aW9uIHtcbiAgICB0eXBlOiBMYXllckNvbnRyb2xUeXBlLFxuICAgIHN5bWJvbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheWVyS2V5Q29udHJvbCBleHRlbmRzIExheWVyQ29udHJvbCB7XG4gICAgbWFwVG86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYXllclN3aXRjaENvbnRyb2wgZXh0ZW5kcyBMYXllckNvbnRyb2wge1xuICAgIGxheWVyTmFtZTogc3RyaW5nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheWVyU2NyZWVuTW92ZUNvbnRyb2wgZXh0ZW5kcyBMYXllckNvbnRyb2wge1xuICAgIGRpcmVjdGlvbjogXCJ1cFwiIHwgXCJkb3duXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIiB8XG4gICAgICAgIFwidXAtbGVmdFwiIHwgXCJ1cC1yaWdodFwiIHwgXCJkb3duLWxlZnRcIiB8IFwiZG93bi1yaWdodFwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheWVyUG9pbnRlckJ1dHRvbkNvbnRyb2wgZXh0ZW5kcyBMYXllckNvbnRyb2wge1xuICAgIGJ1dHRvbjogMCB8IDE7XG4gICAgY2xpY2s6IGJvb2xlYW47XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IGludGVyZmFjZSBMYXllck5pcHBsZUFjdGl2YXRvckNvbnRyb2wgZXh0ZW5kcyBMYXllckNvbnRyb2wge1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCBpbnRlcmZhY2UgTGF5ZXJQb2ludGVyUmVzZXRDb250cm9sIGV4dGVuZHMgTGF5ZXJDb250cm9sIHtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgaW50ZXJmYWNlIExheWVyUG9pbnRlclRvZ2dsZUNvbnRyb2wgZXh0ZW5kcyBMYXllckNvbnRyb2wge1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheWVyUG9pbnRlck1vdmVDb250cm9sIGV4dGVuZHMgTGF5ZXJDb250cm9sIHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTGF5ZXJDb25maWcge1xuICAgIGdyaWQ6IEdyaWRUeXBlLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgY29udHJvbHM6IExheWVyQ29udHJvbFtdLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheWVyc0NvbmZpZyB7XG4gICAgdmVyc2lvbjogbnVtYmVyLFxuICAgIGxheWVyczogTGF5ZXJDb25maWdbXSxcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2FjeUxheWVyQ29uZmlnIHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgYnV0dG9uczogQnV0dG9uW10sXG4gICAgZ2VzdHVyZXM6IEV2ZW50TWFwcGluZ1tdLFxuICAgIG1hcHBlcjogTWFwcGVyLFxufVxuXG5leHBvcnQgdHlwZSBMZWdhY3lMYXllcnNDb25maWcgPSB7W2luZGV4OiBzdHJpbmddOiBMZWdhY3lMYXllckNvbmZpZ307XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0TGF5ZXJzQ29uZmlnKGNvbmZpZzogYW55KTogTGF5ZXJzQ29uZmlnIHwgTGVnYWN5TGF5ZXJzQ29uZmlnIHwgbnVsbCB7XG4gICAgaWYgKGNvbmZpZy5sYXllcnNDb25maWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmxheWVyc0NvbmZpZztcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmxheWVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb25maWcubGF5ZXJzO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSBcIi4uL2RvbS9sYXllcnNcIjtcbmltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2UgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQge1xuICAgIExheWVyc0NvbmZpZywgTGF5ZXJDb25maWcsIExheWVyS2V5Q29udHJvbCxcbiAgICBMYXllckNvbnRyb2wsIExheWVyU3dpdGNoQ29udHJvbCwgTGF5ZXJTY3JlZW5Nb3ZlQ29udHJvbCxcbiAgICBMYXllclBvaW50ZXJCdXR0b25Db250cm9sLCBMYXllclBvaW50ZXJNb3ZlQ29udHJvbCwgTGF5ZXJQb2ludGVyUmVzZXRDb250cm9sLFxuICAgIExheWVyUG9pbnRlclRvZ2dsZUNvbnRyb2wsIExheWVyTmlwcGxlQWN0aXZhdG9yQ29udHJvbFxufSBmcm9tIFwiLi9sYXllcnMtY29uZmlnXCI7XG5pbXBvcnQgeyBnZXRHcmlkLCBHcmlkQ29uZmlndXJhdGlvbiB9IGZyb20gXCIuL2dyaWRcIjtcbmltcG9ydCB7IGNyZWF0ZUJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xuaW1wb3J0IHsgRG9zSW5zdGFuY2UgfSBmcm9tIFwiLi4vanMtZG9zXCI7XG5pbXBvcnQgeyBrZXlib2FyZCB9IGZyb20gXCIuL2tleWJvYXJkXCI7XG5pbXBvcnQgeyBtb3VzZSB9IGZyb20gXCIuL21vdXNlXCI7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xuaW1wb3J0IHsgcG9pbnRlciB9IGZyb20gXCIuLi9kb20vcG9pbnRlclwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IG5pcHBsZWpzID0gcmVxdWlyZShcIm5pcHBsZWpzXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdExheWVyc0NvbnRyb2woXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgbGF5ZXJzQ29uZmlnOiBMYXllcnNDb25maWcsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlLFxuICAgIGxheWVyTmFtZT86IHN0cmluZyk6ICgpID0+IHZvaWQge1xuICAgIGxldCBzZWxlY3RlZExheWVyID0gbGF5ZXJzQ29uZmlnLmxheWVyc1swXTtcbiAgICBpZiAobGF5ZXJOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIGxheWVyc0NvbmZpZy5sYXllcnMpIHtcbiAgICAgICAgICAgIGlmIChuZXh0LnRpdGxlID09PSBsYXllck5hbWUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZExheWVyID0gbmV4dDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5pdExheWVyQ29uZmlnKHNlbGVjdGVkTGF5ZXIsIGxheWVycywgY2ksIGRvc0luc3RhbmNlKTtcbn1cblxudHlwZSBTZW5zb3IgPSB7XG4gICAgYWN0aXZhdGU6ICgpID0+IHZvaWQ7XG4gICAgZGVhY3RpdmF0ZTogKCkgPT4gdm9pZDtcbn1cblxuY2xhc3MgQ29udHJvbFNlbnNvcnMge1xuXG4gICAgc2Vuc29yczogeyBba2V5OiBzdHJpbmddOiBTZW5zb3IgfSA9IHt9O1xuXG4gICAgYWN0aXZhdGUocm93OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHNlbnNvciA9IHRoaXMuc2Vuc29yc1tjb2x1bW4gKyBcIl9cIiArIHJvd107XG4gICAgICAgIGlmIChzZW5zb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc2Vuc29yLmFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZWFjdGl2YXRlKHJvdzogbnVtYmVyLCBjb2x1bW46IG51bWJlcikge1xuICAgICAgICBjb25zdCBzZW5zb3IgPSB0aGlzLnNlbnNvcnNbY29sdW1uICsgXCJfXCIgKyByb3ddO1xuICAgICAgICBpZiAoc2Vuc29yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbnNvci5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWdpc3Rlcihyb3c6IG51bWJlciwgY29sdW1uOiBudW1iZXIsIHNlbnNvcjogU2Vuc29yKSB7XG4gICAgICAgIHRoaXMuc2Vuc29yc1tjb2x1bW4gKyBcIl9cIiArIHJvd10gPSBzZW5zb3I7XG4gICAgfVxuXG59XG5cbnR5cGUgQ29udHJvbEZhY3RvcnkgPSAoY29udHJvbDogYW55LFxuICAgIGxheWVyczogTGF5ZXJzLFxuICAgIGNpOiBDb21tYW5kSW50ZXJmYWNlLFxuICAgIGdyaWRDb25maWc6IEdyaWRDb25maWd1cmF0aW9uLFxuICAgIHNlbnNvcnM6IENvbnRyb2xTZW5zb3JzLFxuICAgIGRvc0luc3RhbmNlOiBEb3NJbnN0YW5jZSkgPT4gKCkgPT4gdm9pZDtcblxuY29uc3QgZmFjdG9yeU1hcHBpbmc6IHsgW3R5cGU6IHN0cmluZ106IENvbnRyb2xGYWN0b3J5IH0gPSB7XG4gICAgS2V5OiBjcmVhdGVLZXlDb250cm9sLFxuICAgIE9wdGlvbnM6IGNyZWF0ZU9wdGlvbnNDb250cm9sLFxuICAgIEtleWJvYXJkOiBjcmVhdGVLZXlib2FyZENvbnRyb2wsXG4gICAgU3dpdGNoOiBjcmVhdGVTd2l0Y2hDb250cm9sLFxuICAgIFNjcmVlbk1vdmU6IGNyZWF0ZVNjcmVlbk1vdmVDb250cm9sLFxuICAgIFBvaW50ZXJCdXR0b246IGNyZWF0ZVBvaW50ZXJCdXR0b25Db250cm9sLFxuICAgIFBvaW50ZXJNb3ZlOiBjcmVhdGVQb2ludGVyTW92ZUNvbnRyb2wsXG4gICAgUG9pbnRlclJlc2V0OiBjcmVhdGVQb2ludGVyUmVzZXRDb250cm9sLFxuICAgIFBvaW50ZXJUb2dnbGU6IGNyZWF0ZVBvaW50ZXJUb2dnbGVDb250cm9sLFxuICAgIE5pcHBsZUFjdGl2YXRvcjogY3JlYXRlTmlwcGxlQWN0aXZhdG9yQ29udHJvbCxcbn07XG5cbmZ1bmN0aW9uIGluaXRMYXllckNvbmZpZyhsYXllckNvbmZpZzogTGF5ZXJDb25maWcsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKTogKCkgPT4gdm9pZCB7XG5cbiAgICBjb25zdCB1bmJpbmRLZXlib2FyZCA9IGtleWJvYXJkKGxheWVycywgY2kpO1xuICAgIGNvbnN0IHVuYmluZE1vdXNlID0gbW91c2UobGF5ZXJzLCBjaSk7XG5cbiAgICBjb25zdCB1bmJpbmRDb250cm9sczogKCgpID0+IHZvaWQpW10gPSBbXTtcbiAgICBmdW5jdGlvbiBvblJlc2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdW5iaW5kQ29udHJvbHMpIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICB1bmJpbmRDb250cm9scy5zcGxpY2UoMCwgdW5iaW5kQ29udHJvbHMubGVuZ3RoKTtcblxuICAgICAgICBjb25zdCBncmlkID0gZ2V0R3JpZChsYXllckNvbmZpZy5ncmlkKTtcbiAgICAgICAgY29uc3QgZ3JpZENvbmZpZyA9IGdyaWQuZ2V0Q29uZmlndXJhdGlvbih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY29uc3Qgc2Vuc29ycyA9IG5ldyBDb250cm9sU2Vuc29ycygpO1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgbGF5ZXJDb25maWcuY29udHJvbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSBmYWN0b3J5TWFwcGluZ1tuZXh0LnR5cGVdO1xuICAgICAgICAgICAgaWYgKGZhY3RvcnkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWN0b3J5IGZvciBjb250cm9sICdcIiArIG5leHQudHlwZSArIFwiJyBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdW5iaW5kID0gZmFjdG9yeShuZXh0LCBsYXllcnMsIGNpLCBncmlkQ29uZmlnLCBzZW5zb3JzLCBkb3NJbnN0YW5jZSk7XG4gICAgICAgICAgICB1bmJpbmRDb250cm9scy5wdXNoKHVuYmluZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsYXllcnMuYWRkT25SZXNpemUob25SZXNpemUpO1xuICAgIG9uUmVzaXplKGxheWVycy53aWR0aCwgbGF5ZXJzLmhlaWdodCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYXllcnMucmVtb3ZlT25SZXNpemUob25SZXNpemUpO1xuICAgICAgICB1bmJpbmRLZXlib2FyZCgpO1xuICAgICAgICB1bmJpbmRNb3VzZSgpO1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdW5iaW5kQ29udHJvbHMpIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleUNvbnRyb2woa2V5Q29udHJvbDogTGF5ZXJLZXlDb250cm9sLFxuICAgIGxheWVyczogTGF5ZXJzLFxuICAgIGNpOiBDb21tYW5kSW50ZXJmYWNlLFxuICAgIGdyaWRDb25maWc6IEdyaWRDb25maWd1cmF0aW9uLFxuICAgIHNlbnNvcnM6IENvbnRyb2xTZW5zb3JzLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGRvc0luc3RhbmNlOiBEb3NJbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgY2VsbHMsIGNvbHVtbldpZHRoIH0gPSBncmlkQ29uZmlnO1xuICAgIGNvbnN0IHsgcm93LCBjb2x1bW4gfSA9IGtleUNvbnRyb2w7XG4gICAgY29uc3QgeyBjZW50ZXJYLCBjZW50ZXJZIH0gPSBjZWxsc1tyb3ddW2NvbHVtbl07XG5cbiAgICBjb25zdCBoYW5kbGVyID0ge1xuICAgICAgICBvbkRvd246ICgpID0+IGNpLnNlbmRLZXlFdmVudChrZXlDb250cm9sLm1hcFRvLCB0cnVlKSxcbiAgICAgICAgb25VcDogKCkgPT4gY2kuc2VuZEtleUV2ZW50KGtleUNvbnRyb2wubWFwVG8sIGZhbHNlKSxcbiAgICB9O1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihrZXlDb250cm9sLnN5bWJvbCwgaGFuZGxlciwgY29sdW1uV2lkdGgpO1xuXG4gICAgYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGNlbnRlclggLSBidXR0b24ud2lkdGhQeCAvIDIpICsgXCJweFwiO1xuICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoY2VudGVyWSAtIGJ1dHRvbi5oZWlnaHRQeCAvIDIpICsgXCJweFwiO1xuXG4gICAgc2Vuc29ycy5yZWdpc3Rlcihyb3csIGNvbHVtbiwge1xuICAgICAgICBhY3RpdmF0ZTogaGFuZGxlci5vbkRvd24sXG4gICAgICAgIGRlYWN0aXZhdGU6IGhhbmRsZXIub25VcCxcbiAgICB9KTtcblxuICAgIGxheWVycy5tb3VzZU92ZXJsYXkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICByZXR1cm4gKCkgPT4gbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zQ29udHJvbChvcHRpb25Db250cm9sOiBMYXllckNvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgXG4gICAgaWYgKGxheWVycy5vcHRpb25zLm9wdGlvbkNvbnRyb2xzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgbGF5ZXJzLm9wdGlvbnMub3B0aW9uQ29udHJvbHMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGxheWVycy5vcHRpb25zLm9wdGlvbkNvbnRyb2xzWzBdID09PSBcImtleWJvYXJkXCIpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUtleWJvYXJkQ29udHJvbChvcHRpb25Db250cm9sLCBsYXllcnMsIGNpLCBncmlkQ29uZmlnLCBzZW5zb3JzLCBkb3NJbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGgsIHJvd0hlaWdodCB9ID0gZ3JpZENvbmZpZztcbiAgICBjb25zdCB7IHJvdywgY29sdW1uIH0gPSBvcHRpb25Db250cm9sO1xuICAgIGNvbnN0IHsgY2VudGVyWCwgY2VudGVyWSB9ID0gY2VsbHNbcm93XVtjb2x1bW5dO1xuXG4gICAgY29uc3QgdG9wID0gY2VudGVyWSAtIHJvd0hlaWdodCAvIDI7XG4gICAgY29uc3QgbGVmdCA9IGNlbnRlclggLSBjb2x1bW5XaWR0aCAvIDI7XG4gICAgY29uc3QgcmlnaHQgPSBncmlkQ29uZmlnLndpZHRoIC0gbGVmdCAtIGNvbHVtbldpZHRoO1xuXG4gICAgcmV0dXJuIG9wdGlvbnMobGF5ZXJzLCBbXCJkZWZhdWx0XCJdLCAoKSA9PiB7LyoqLyB9LFxuICAgICAgICBjb2x1bW5XaWR0aCxcbiAgICAgICAgdG9wLFxuICAgICAgICByaWdodCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleWJvYXJkQ29udHJvbChrZXlib2FyZENvbnRyb2w6IExheWVyQ29udHJvbCxcbiAgICBsYXllcnM6IExheWVycyxcbiAgICBjaTogQ29tbWFuZEludGVyZmFjZSxcbiAgICBncmlkQ29uZmlnOiBHcmlkQ29uZmlndXJhdGlvbixcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzZW5zb3JzOiBDb250cm9sU2Vuc29ycyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBkb3NJbnN0YW5jZTogRG9zSW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IGNlbGxzLCBjb2x1bW5XaWR0aCB9ID0gZ3JpZENvbmZpZztcbiAgICBjb25zdCB7IHJvdywgY29sdW1uIH0gPSBrZXlib2FyZENvbnRyb2w7XG4gICAgY29uc3QgeyBjZW50ZXJYLCBjZW50ZXJZIH0gPSBjZWxsc1tyb3ddW2NvbHVtbl07XG5cbiAgICBjb25zdCBidXR0b24gPSBjcmVhdGVCdXR0b24oXCJrZXlib2FyZFwiLCB7XG4gICAgICAgIG9uVXA6ICgpID0+IGxheWVycy50b2dnbGVLZXlib2FyZCgpLFxuICAgIH0sIGNvbHVtbldpZHRoKTtcblxuICAgIGNvbnN0IG9uS2V5Ym9hcmRWaXNpYmlsaXR5ID0gKHZpc2libGU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgIGJ1dHRvbi5jaGlsZHJlblswXS5jbGFzc0xpc3QuYWRkKFwiZW11bGF0b3ItY29udHJvbC1jbG9zZS1pY29uXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnV0dG9uLmNoaWxkcmVuWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJlbXVsYXRvci1jb250cm9sLWNsb3NlLWljb25cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxheWVycy5zZXRPbktleWJvYXJkVmlzaWJpbGl0eShvbktleWJvYXJkVmlzaWJpbGl0eSk7XG5cbiAgICBidXR0b24uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgYnV0dG9uLnN0eWxlLmxlZnQgPSAoY2VudGVyWCAtIGJ1dHRvbi53aWR0aFB4IC8gMikgKyBcInB4XCI7XG4gICAgYnV0dG9uLnN0eWxlLnRvcCA9IChjZW50ZXJZIC0gYnV0dG9uLmhlaWdodFB4IC8gMikgKyBcInB4XCI7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xuICAgICAgICBsYXllcnMucmVtb3ZlT25LZXlib2FyZFZpc2liaWxpdHkob25LZXlib2FyZFZpc2liaWxpdHkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3dpdGNoQ29udHJvbChzd2l0Y2hDb250cm9sOiBMYXllclN3aXRjaENvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGggfSA9IGdyaWRDb25maWc7XG4gICAgY29uc3QgeyByb3csIGNvbHVtbiB9ID0gc3dpdGNoQ29udHJvbDtcbiAgICBjb25zdCB7IGNlbnRlclgsIGNlbnRlclkgfSA9IGNlbGxzW3Jvd11bY29sdW1uXTtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihzd2l0Y2hDb250cm9sLnN5bWJvbCwge1xuICAgICAgICBvblVwOiAoKSA9PiBkb3NJbnN0YW5jZS5zZXRMYXllcnNDb25maWcoZG9zSW5zdGFuY2UuZ2V0TGF5ZXJzQ29uZmlnKCksIHN3aXRjaENvbnRyb2wubGF5ZXJOYW1lKSxcbiAgICB9LCBjb2x1bW5XaWR0aCk7XG5cbiAgICBidXR0b24uc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgYnV0dG9uLnN0eWxlLmxlZnQgPSAoY2VudGVyWCAtIGJ1dHRvbi53aWR0aFB4IC8gMikgKyBcInB4XCI7XG4gICAgYnV0dG9uLnN0eWxlLnRvcCA9IChjZW50ZXJZIC0gYnV0dG9uLmhlaWdodFB4IC8gMikgKyBcInB4XCI7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU2NyZWVuTW92ZUNvbnRyb2woc2NyZWVuTW92ZUNvbnRyb2w6IExheWVyU2NyZWVuTW92ZUNvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGggfSA9IGdyaWRDb25maWc7XG4gICAgY29uc3QgeyByb3csIGNvbHVtbiB9ID0gc2NyZWVuTW92ZUNvbnRyb2w7XG4gICAgY29uc3QgeyBjZW50ZXJYLCBjZW50ZXJZIH0gPSBjZWxsc1tyb3ddW2NvbHVtbl07XG5cbiAgICBsZXQgbVggPSAwLjU7XG4gICAgbGV0IG1ZID0gMC41O1xuXG4gICAgaWYgKHNjcmVlbk1vdmVDb250cm9sLmRpcmVjdGlvbi5pbmRleE9mKFwidXBcIikgPj0gMCkge1xuICAgICAgICBtWSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHNjcmVlbk1vdmVDb250cm9sLmRpcmVjdGlvbi5pbmRleE9mKFwiZG93blwiKSA+PSAwKSB7XG4gICAgICAgIG1ZID0gMTtcbiAgICB9XG5cbiAgICBpZiAoc2NyZWVuTW92ZUNvbnRyb2wuZGlyZWN0aW9uLmluZGV4T2YoXCJsZWZ0XCIpID49IDApIHtcbiAgICAgICAgbVggPSAwO1xuICAgIH1cblxuICAgIGlmIChzY3JlZW5Nb3ZlQ29udHJvbC5kaXJlY3Rpb24uaW5kZXhPZihcInJpZ2h0XCIpID49IDApIHtcbiAgICAgICAgbVggPSAxO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZXIgPSB7XG4gICAgICAgIG9uRG93bjogKCkgPT4ge1xuICAgICAgICAgICAgY2kuc2VuZE1vdXNlTW90aW9uKG1YLCBtWSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVXA6ICgpID0+IHtcbiAgICAgICAgICAgIGNpLnNlbmRNb3VzZU1vdGlvbigwLjUsIDAuNSk7XG4gICAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihzY3JlZW5Nb3ZlQ29udHJvbC5zeW1ib2wsIGhhbmRsZXIsIGNvbHVtbldpZHRoKTtcblxuICAgIGJ1dHRvbi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBidXR0b24uc3R5bGUubGVmdCA9IChjZW50ZXJYIC0gYnV0dG9uLndpZHRoUHggLyAyKSArIFwicHhcIjtcbiAgICBidXR0b24uc3R5bGUudG9wID0gKGNlbnRlclkgLSBidXR0b24uaGVpZ2h0UHggLyAyKSArIFwicHhcIjtcblxuICAgIHNlbnNvcnMucmVnaXN0ZXIocm93LCBjb2x1bW4sIHtcbiAgICAgICAgYWN0aXZhdGU6IGhhbmRsZXIub25Eb3duLFxuICAgICAgICBkZWFjdGl2YXRlOiBoYW5kbGVyLm9uVXAsXG4gICAgfSk7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9pbnRlckJ1dHRvbkNvbnRyb2wocG9pbnRlckJ1dHRvbkNvbnRyb2w6IExheWVyUG9pbnRlckJ1dHRvbkNvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGggfSA9IGdyaWRDb25maWc7XG4gICAgY29uc3QgeyByb3csIGNvbHVtbiwgY2xpY2sgfSA9IHBvaW50ZXJCdXR0b25Db250cm9sO1xuICAgIGNvbnN0IHsgY2VudGVyWCwgY2VudGVyWSB9ID0gY2VsbHNbcm93XVtjb2x1bW5dO1xuXG4gICAgY29uc3QgaGFuZGxlciA9IHtcbiAgICAgICAgb25Eb3duOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNsaWNrKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJzLnBvaW50ZXJCdXR0b24gPSBwb2ludGVyQnV0dG9uQ29udHJvbC5idXR0b247XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNpLnNlbmRNb3VzZUJ1dHRvbihwb2ludGVyQnV0dG9uQ29udHJvbC5idXR0b24sIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblVwOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNsaWNrKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJzLnBvaW50ZXJCdXR0b24gPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaS5zZW5kTW91c2VCdXR0b24ocG9pbnRlckJ1dHRvbkNvbnRyb2wuYnV0dG9uLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQnV0dG9uKHBvaW50ZXJCdXR0b25Db250cm9sLnN5bWJvbCwgaGFuZGxlciwgY29sdW1uV2lkdGgpO1xuXG4gICAgYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGNlbnRlclggLSBidXR0b24ud2lkdGhQeCAvIDIpICsgXCJweFwiO1xuICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoY2VudGVyWSAtIGJ1dHRvbi5oZWlnaHRQeCAvIDIpICsgXCJweFwiO1xuXG4gICAgc2Vuc29ycy5yZWdpc3Rlcihyb3csIGNvbHVtbiwge1xuICAgICAgICBhY3RpdmF0ZTogaGFuZGxlci5vbkRvd24sXG4gICAgICAgIGRlYWN0aXZhdGU6IGhhbmRsZXIub25VcCxcbiAgICB9KTtcblxuICAgIGxheWVycy5tb3VzZU92ZXJsYXkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYXllcnMubW91c2VPdmVybGF5LnJlbW92ZUNoaWxkKGJ1dHRvbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQb2ludGVyTW92ZUNvbnRyb2wocG9pbnRlck1vdmVDb250cm9sOiBMYXllclBvaW50ZXJNb3ZlQ29udHJvbCxcbiAgICBsYXllcnM6IExheWVycyxcbiAgICBjaTogQ29tbWFuZEludGVyZmFjZSxcbiAgICBncmlkQ29uZmlnOiBHcmlkQ29uZmlndXJhdGlvbixcbiAgICBzZW5zb3JzOiBDb250cm9sU2Vuc29ycyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBkb3NJbnN0YW5jZTogRG9zSW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IGNlbGxzLCBjb2x1bW5XaWR0aCB9ID0gZ3JpZENvbmZpZztcbiAgICBjb25zdCB7IHJvdywgY29sdW1uLCB4LCB5IH0gPSBwb2ludGVyTW92ZUNvbnRyb2w7XG4gICAgY29uc3QgeyBjZW50ZXJYLCBjZW50ZXJZIH0gPSBjZWxsc1tyb3ddW2NvbHVtbl07XG5cbiAgICBjb25zdCBoYW5kbGVyID0ge1xuICAgICAgICBvbkRvd246ICgpID0+IHtcbiAgICAgICAgICAgIGNpLnNlbmRNb3VzZU1vdGlvbih4LCB5KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25VcDogKCkgPT4ge1xuICAgICAgICAgICAgY2kuc2VuZE1vdXNlTW90aW9uKHgsIHkpO1xuICAgICAgICB9LFxuICAgIH1cbiAgICBjb25zdCBidXR0b24gPSBjcmVhdGVCdXR0b24ocG9pbnRlck1vdmVDb250cm9sLnN5bWJvbCwgaGFuZGxlciwgY29sdW1uV2lkdGgpO1xuXG4gICAgYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGNlbnRlclggLSBidXR0b24ud2lkdGhQeCAvIDIpICsgXCJweFwiO1xuICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoY2VudGVyWSAtIGJ1dHRvbi5oZWlnaHRQeCAvIDIpICsgXCJweFwiO1xuXG4gICAgc2Vuc29ycy5yZWdpc3Rlcihyb3csIGNvbHVtbiwge1xuICAgICAgICBhY3RpdmF0ZTogaGFuZGxlci5vbkRvd24sXG4gICAgICAgIGRlYWN0aXZhdGU6IGhhbmRsZXIub25VcCxcbiAgICB9KTtcblxuICAgIGxheWVycy5tb3VzZU92ZXJsYXkuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsYXllcnMubW91c2VPdmVybGF5LnJlbW92ZUNoaWxkKGJ1dHRvbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQb2ludGVyUmVzZXRDb250cm9sKHBvaW50ZXJSZXNldENvbnRyb2w6IExheWVyUG9pbnRlclJlc2V0Q29udHJvbCxcbiAgICBsYXllcnM6IExheWVycyxcbiAgICBjaTogQ29tbWFuZEludGVyZmFjZSxcbiAgICBncmlkQ29uZmlnOiBHcmlkQ29uZmlndXJhdGlvbixcbiAgICBzZW5zb3JzOiBDb250cm9sU2Vuc29ycyxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBkb3NJbnN0YW5jZTogRG9zSW5zdGFuY2UpIHtcbiAgICBjb25zdCB7IGNlbGxzLCBjb2x1bW5XaWR0aCB9ID0gZ3JpZENvbmZpZztcbiAgICBjb25zdCB7IHJvdywgY29sdW1uIH0gPSBwb2ludGVyUmVzZXRDb250cm9sO1xuICAgIGNvbnN0IHsgY2VudGVyWCwgY2VudGVyWSB9ID0gY2VsbHNbcm93XVtjb2x1bW5dO1xuXG4gICAgY29uc3QgaGFuZGxlciA9IHtcbiAgICAgICAgb25Eb3duOiAoKSA9PiB7XG4gICAgICAgICAgICBjaS5zZW5kTW91c2VTeW5jKCk7XG4gICAgICAgIH0sXG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihwb2ludGVyUmVzZXRDb250cm9sLnN5bWJvbCwgaGFuZGxlciwgY29sdW1uV2lkdGgpO1xuXG4gICAgYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGNlbnRlclggLSBidXR0b24ud2lkdGhQeCAvIDIpICsgXCJweFwiO1xuICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoY2VudGVyWSAtIGJ1dHRvbi5oZWlnaHRQeCAvIDIpICsgXCJweFwiO1xuXG4gICAgc2Vuc29ycy5yZWdpc3Rlcihyb3csIGNvbHVtbiwge1xuICAgICAgICBhY3RpdmF0ZTogaGFuZGxlci5vbkRvd24sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBkZWFjdGl2YXRlOiAoKSA9PiB7IH0sXG4gICAgfSk7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9pbnRlclRvZ2dsZUNvbnRyb2wocG9pbnRlclRvZ2dsZUNvbnRyb2w6IExheWVyUG9pbnRlclRvZ2dsZUNvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGggfSA9IGdyaWRDb25maWc7XG4gICAgY29uc3QgeyByb3csIGNvbHVtbiB9ID0gcG9pbnRlclRvZ2dsZUNvbnRyb2w7XG4gICAgY29uc3QgeyBjZW50ZXJYLCBjZW50ZXJZIH0gPSBjZWxsc1tyb3ddW2NvbHVtbl07XG5cbiAgICBjb25zdCBoYW5kbGVyID0ge1xuICAgICAgICBvbkRvd246ICgpID0+IHtcbiAgICAgICAgICAgIGxheWVycy5wb2ludGVyRGlzYWJsZWQgPSAhbGF5ZXJzLnBvaW50ZXJEaXNhYmxlZFxuICAgICAgICAgICAgaWYgKGxheWVycy5wb2ludGVyRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJlbXVsYXRvci1idXR0b24taGlnaGxpZ2h0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZW11bGF0b3ItYnV0dG9uLWhpZ2hsaWdodFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiZW11bGF0b3ItYnV0dG9uLWhpZ2hsaWdodFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9XG4gICAgY29uc3QgYnV0dG9uID0gY3JlYXRlQnV0dG9uKHBvaW50ZXJUb2dnbGVDb250cm9sLnN5bWJvbCwgaGFuZGxlciwgY29sdW1uV2lkdGgpO1xuXG4gICAgYnV0dG9uLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGJ1dHRvbi5zdHlsZS5sZWZ0ID0gKGNlbnRlclggLSBidXR0b24ud2lkdGhQeCAvIDIpICsgXCJweFwiO1xuICAgIGJ1dHRvbi5zdHlsZS50b3AgPSAoY2VudGVyWSAtIGJ1dHRvbi5oZWlnaHRQeCAvIDIpICsgXCJweFwiO1xuXG4gICAgc2Vuc29ycy5yZWdpc3Rlcihyb3csIGNvbHVtbiwge1xuICAgICAgICBhY3RpdmF0ZTogaGFuZGxlci5vbkRvd24sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBkZWFjdGl2YXRlOiAoKSA9PiB7IH0sXG4gICAgfSk7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVDaGlsZChidXR0b24pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTmlwcGxlQWN0aXZhdG9yQ29udHJvbChuaXBwbGVBY3RpdmF0b3JDb250cm9sOiBMYXllck5pcHBsZUFjdGl2YXRvckNvbnRyb2wsXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgZ3JpZENvbmZpZzogR3JpZENvbmZpZ3VyYXRpb24sXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc2Vuc29yczogQ29udHJvbFNlbnNvcnMsXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZG9zSW5zdGFuY2U6IERvc0luc3RhbmNlKSB7XG4gICAgY29uc3QgeyBjZWxscywgY29sdW1uV2lkdGgsIHJvd0hlaWdodCwgd2lkdGgsIGhlaWdodCB9ID0gZ3JpZENvbmZpZztcbiAgICBjb25zdCB7IHJvdywgY29sdW1uIH0gPSBuaXBwbGVBY3RpdmF0b3JDb250cm9sO1xuICAgIGNvbnN0IHsgY2VudGVyWCwgY2VudGVyWSB9ID0gY2VsbHNbcm93XVtjb2x1bW5dO1xuXG4gICAgY29uc3QgbmlwcGxlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb25zdCBjZWxsU2l6ZSA9IDEuNTtcbiAgICBjb25zdCBsZWZ0ID0gTWF0aC5tYXgoMCwgY2VudGVyWCAtIGNvbHVtbldpZHRoICogY2VsbFNpemUpO1xuICAgIGNvbnN0IHRvcCA9IE1hdGgubWF4KDAsIGNlbnRlclkgLSByb3dIZWlnaHQgKiBjZWxsU2l6ZSk7XG4gICAgY29uc3QgcmlnaHQgPSBNYXRoLm1heCgwLCB3aWR0aCAtIGNlbnRlclggLSBjb2x1bW5XaWR0aCAqIGNlbGxTaXplKTtcbiAgICBjb25zdCBib3R0b20gPSBNYXRoLm1heCgwLCBoZWlnaHQgLSBjZW50ZXJZIC0gcm93SGVpZ2h0ICogY2VsbFNpemUpO1xuXG4gICAgbmlwcGxlQ29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIG5pcHBsZUNvbnRhaW5lci5zdHlsZS56SW5kZXggPSBcIjk5OVwiO1xuICAgIG5pcHBsZUNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gbGVmdCArIFwicHhcIjtcbiAgICBuaXBwbGVDb250YWluZXIuc3R5bGUudG9wID0gdG9wICsgXCJweFwiO1xuICAgIG5pcHBsZUNvbnRhaW5lci5zdHlsZS5yaWdodCA9IHJpZ2h0ICsgXCJweFwiO1xuICAgIG5pcHBsZUNvbnRhaW5lci5zdHlsZS5ib3R0b20gPSBib3R0b20gKyBcInB4XCI7XG5cbiAgICBsYXllcnMubW91c2VPdmVybGF5LmFwcGVuZENoaWxkKG5pcHBsZUNvbnRhaW5lcik7XG5cbiAgICBjb25zdCBtYW5hZ2VyID0gbmlwcGxlanMuY3JlYXRlKHtcbiAgICAgICAgem9uZTogbmlwcGxlQ29udGFpbmVyLFxuICAgICAgICBtdWx0aXRvdWNoOiBmYWxzZSxcbiAgICAgICAgbWF4TnVtYmVyT2ZOaXBwbGVzOiAxLFxuICAgICAgICBtb2RlOiBcInN0YXRpY1wiLFxuICAgICAgICBmb2xsb3c6IGZhbHNlLFxuICAgICAgICBkeW5hbWljUGFnZTogdHJ1ZSxcbiAgICAgICAgc2l6ZTogTWF0aC5tYXgoY29sdW1uV2lkdGgsIHJvd0hlaWdodCkgKiAxLjUsXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICBsZWZ0OiAod2lkdGggLSByaWdodCAtIGxlZnQpIC8gMiArIFwicHhcIixcbiAgICAgICAgICAgIHRvcDogKGhlaWdodCAtIGJvdHRvbSAtIHRvcCkgLyAyICsgXCJweFwiXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBsZXQgYWN0aXZlQ29sdW1uID0gLTE7XG4gICAgbGV0IGFjdGl2ZVJvdyA9IC0xO1xuICAgIG1hbmFnZXIub24oXCJtb3ZlXCIsIChldnQ6IGFueSwgZGF0YTogYW55KSA9PiB7XG4gICAgICAgIGlmIChkYXRhLmRpc3RhbmNlIDwgMTApIHtcbiAgICAgICAgICAgIHNlbnNvcnMuZGVhY3RpdmF0ZShhY3RpdmVSb3csIGFjdGl2ZUNvbHVtbik7XG4gICAgICAgICAgICBhY3RpdmVDb2x1bW4gPSAtMTtcbiAgICAgICAgICAgIGFjdGl2ZVJvdyA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0YXJnZXRDb2x1bW4gPSAtMTtcbiAgICAgICAgbGV0IHRhcmdldFJvdyA9IC0xO1xuICAgICAgICBjb25zdCBzdGVwID0gMzYwIC8gODtcbiAgICAgICAgY29uc3QgaGFsZiA9IHN0ZXAgLyAyO1xuICAgICAgICBjb25zdCBkZWdyZWUgPSBkYXRhLmFuZ2xlLmRlZ3JlZTtcbiAgICAgICAgaWYgKGRlZ3JlZSA+IGhhbGYgJiYgZGVncmVlIDw9IGhhbGYgKyBzdGVwKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInVwLXJpZ2h0XCIpXG4gICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSBjb2x1bW4gKyAxO1xuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcm93IC0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWdyZWUgPiBoYWxmICsgc3RlcCAmJiBkZWdyZWUgPD0gaGFsZiArIHN0ZXAgKiAyKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInVwXCIpO1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uO1xuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcm93IC0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWdyZWUgPiBoYWxmICsgc3RlcCAqIDIgJiYgZGVncmVlIDw9IGhhbGYgKyBzdGVwICogMykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJ1cC1sZWZ0XCIpO1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uIC0gMTtcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHJvdyAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVncmVlID4gaGFsZiArIHN0ZXAgKiAzICYmIGRlZ3JlZSA8PSBoYWxmICsgc3RlcCAqIDQpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibGVmdFwiKTtcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IGNvbHVtbiAtIDE7XG4gICAgICAgICAgICB0YXJnZXRSb3cgPSByb3c7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVncmVlID4gaGFsZiArIHN0ZXAgKiA0ICYmIGRlZ3JlZSA8PSBoYWxmICsgc3RlcCAqIDUpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZG93bi1sZWZ0XCIpO1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uIC0gMTtcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHJvdyArIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVncmVlID4gaGFsZiArIHN0ZXAgKiA1ICYmIGRlZ3JlZSA8PSBoYWxmICsgc3RlcCAqIDYpIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZG93blwiKVxuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uO1xuICAgICAgICAgICAgdGFyZ2V0Um93ID0gcm93ICsgMTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWdyZWUgPiBoYWxmICsgc3RlcCAqIDYgJiYgZGVncmVlIDw9IGhhbGYgKyBzdGVwICogNykge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJkb3duLXJpZ2h0XCIpO1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uICsgMTtcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHJvdyArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJpZ2h0XCIpO1xuICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gY29sdW1uICsgMTtcbiAgICAgICAgICAgIHRhcmdldFJvdyA9IHJvdztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3RpdmVDb2x1bW4gIT09IHRhcmdldENvbHVtbiB8fCBhY3RpdmVSb3cgIT09IHRhcmdldFJvdykge1xuICAgICAgICAgICAgc2Vuc29ycy5kZWFjdGl2YXRlKGFjdGl2ZVJvdywgYWN0aXZlQ29sdW1uKTtcbiAgICAgICAgICAgIHNlbnNvcnMuYWN0aXZhdGUodGFyZ2V0Um93LCB0YXJnZXRDb2x1bW4pO1xuICAgICAgICAgICAgYWN0aXZlQ29sdW1uID0gdGFyZ2V0Q29sdW1uO1xuICAgICAgICAgICAgYWN0aXZlUm93ID0gdGFyZ2V0Um93O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBtYW5hZ2VyLm9uKFwic3RhcnRcIiwgKCkgPT4ge1xuICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIG1hbmFnZXIub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHNlbnNvcnMuZGVhY3RpdmF0ZShhY3RpdmVSb3csIGFjdGl2ZUNvbHVtbik7XG4gICAgICAgIGFjdGl2ZVJvdyA9IC0xO1xuICAgICAgICBhY3RpdmVDb2x1bW4gPSAtMTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25FbmQoZTogRXZlbnQpIHtcbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG1hbmFnZXIucHJvY2Vzc09uRW5kKGUpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLmVuZGVycykge1xuICAgICAgICBsYXllcnMubW91c2VPdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIobmV4dCwgb25FbmQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIG1hbmFnZXIuZGVzdHJveSgpO1xuICAgICAgICBsYXllcnMubW91c2VPdmVybGF5LnJlbW92ZUNoaWxkKG5pcHBsZUNvbnRhaW5lcik7XG4gICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLmVuZGVycykge1xuICAgICAgICAgICAgbGF5ZXJzLm1vdXNlT3ZlcmxheS5yZW1vdmVFdmVudExpc3RlbmVyKG5leHQsIG9uRW5kLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IExlZ2FjeUxheWVyc0NvbmZpZyB9IGZyb20gXCIuL2xheWVycy1jb25maWdcIjtcbmltcG9ydCB7IExheWVycyB9IGZyb20gXCIuLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuaW1wb3J0IHsgZGVwcmVjYXRlZEJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xuaW1wb3J0IHsgbW91c2UgfSBmcm9tIFwiLi9tb3VzZVwiO1xuaW1wb3J0IHsgbmlwcGxlIH0gZnJvbSBcIi4vbmlwcGxlXCI7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xuaW1wb3J0IHsga2V5Ym9hcmQgfSBmcm9tIFwiLi9rZXlib2FyZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdExlZ2FjeUxheWVyc0NvbnRyb2woXG4gICAgbGF5ZXJzOiBMYXllcnMsXG4gICAgbGF5ZXJzQ29uZmlnOiBMZWdhY3lMYXllcnNDb25maWcsXG4gICAgY2k6IENvbW1hbmRJbnRlcmZhY2UpIHtcbiAgICBjb25zdCBsYXllcnNOYW1lcyA9IE9iamVjdC5rZXlzKGxheWVyc0NvbmZpZyk7XG5cbiAgICBjb25zdCB1bmJpbmQgPSB7XG4gICAgICAgIGtleWJvYXJkOiAoKSA9PiB7LyoqL30sXG4gICAgICAgIG1vdXNlOiAoKSA9PiB7LyoqL30sXG4gICAgICAgIGdlc3R1cmVzOiAoKSA9PiB7LyoqL30sXG4gICAgICAgIGJ1dHRvbnM6ICgpID0+IHsvKiovfSxcbiAgICB9O1xuXG4gICAgY29uc3QgY2hhbmdlQ29udHJvbExheWVyID0gKGxheWVyTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgIHVuYmluZC5rZXlib2FyZCgpO1xuICAgICAgICB1bmJpbmQubW91c2UoKTtcbiAgICAgICAgdW5iaW5kLmdlc3R1cmVzKCk7XG4gICAgICAgIHVuYmluZC5idXR0b25zKCk7XG5cbiAgICAgICAgdW5iaW5kLmtleWJvYXJkID0gKCkgPT4gey8qKi99O1xuICAgICAgICB1bmJpbmQubW91c2UgPSAoKSA9PiB7LyoqL307XG4gICAgICAgIHVuYmluZC5nZXN0dXJlcyA9ICgpID0+IHsvKiovfTtcbiAgICAgICAgdW5iaW5kLmJ1dHRvbnMgPSAoKSA9PiB7LyoqL307XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSBsYXllcnNDb25maWdbbGF5ZXJOYW1lXTtcbiAgICAgICAgaWYgKGxheWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuYmluZC5rZXlib2FyZCA9IGtleWJvYXJkKGxheWVycywgY2ksIGxheWVyLm1hcHBlcik7XG5cbiAgICAgICAgaWYgKGxheWVyLmdlc3R1cmVzICE9PSB1bmRlZmluZWQgJiYgbGF5ZXIuZ2VzdHVyZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdW5iaW5kLmdlc3R1cmVzID0gbmlwcGxlKGxheWVycywgY2ksIGxheWVyLmdlc3R1cmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuYmluZC5tb3VzZSA9IG1vdXNlKGxheWVycywgY2kpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxheWVyLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBsYXllci5idXR0b25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdW5iaW5kLmJ1dHRvbnMgPSBkZXByZWNhdGVkQnV0dG9uKGxheWVycywgY2ksIGxheWVyLmJ1dHRvbnMsIDU0KTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgY29uc3QgdW5iaW5kT3B0aW9ucyA9IG9wdGlvbnMobGF5ZXJzLCBsYXllcnNOYW1lcywgY2hhbmdlQ29udHJvbExheWVyLCA1NCwgNTQgLyA0LCAwKTtcbiAgICBjaGFuZ2VDb250cm9sTGF5ZXIoXCJkZWZhdWx0XCIpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5iaW5kLmdlc3R1cmVzKCk7XG4gICAgICAgIHVuYmluZC5idXR0b25zKCk7XG4gICAgICAgIHVuYmluZC5tb3VzZSgpO1xuICAgICAgICB1bmJpbmQua2V5Ym9hcmQoKTtcbiAgICAgICAgdW5iaW5kT3B0aW9ucygpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSBcIi4uL2RvbS9sYXllcnNcIjtcbmltcG9ydCB7IHBvaW50ZXIsIGdldFBvaW50ZXJTdGF0ZSB9IGZyb20gXCIuLi9kb20vcG9pbnRlclwiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBtb3VzZShsYXllcnM6IExheWVycyxcbiAgICBjaTogQ29tbWFuZEludGVyZmFjZSkge1xuXG4gICAgbGV0IGF1dG9sb2NrID0gZmFsc2U7XG4gICAgaWYgKHBvaW50ZXIuY2FuTG9jaykge1xuICAgICAgICBjaS5jb25maWcoKVxuICAgICAgICAgICAgLnRoZW4oKGNvbmZpZykgPT4gYXV0b2xvY2sgPSBjb25maWcub3V0cHV0Py5vcHRpb25zPy5hdXRvbG9jaz8udmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgfVxuXG4gICAgY29uc3QgaW5zZW5zaXRpdmVQYWRkaW5nID0gMSAvIDEwMDtcblxuICAgIGZ1bmN0aW9uIG1hcFhZKGVYOiBudW1iZXIsIGVZOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZnJhbWVXaWR0aCA9IGNpLndpZHRoKCk7XG4gICAgICAgIGNvbnN0IGZyYW1lSGVpZ2h0ID0gY2kuaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gbGF5ZXJzLndpZHRoO1xuICAgICAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSBsYXllcnMuaGVpZ2h0O1xuXG4gICAgICAgIGNvbnN0IGFzcGVjdCA9IGZyYW1lV2lkdGggLyBmcmFtZUhlaWdodDtcblxuICAgICAgICBsZXQgd2lkdGggPSBjb250YWluZXJXaWR0aDtcbiAgICAgICAgbGV0IGhlaWdodCA9IGNvbnRhaW5lcldpZHRoIC8gYXNwZWN0O1xuXG4gICAgICAgIGlmIChoZWlnaHQgPiBjb250YWluZXJIZWlnaHQpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IGNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gY29udGFpbmVySGVpZ2h0ICogYXNwZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9wID0gKGNvbnRhaW5lckhlaWdodCAtIGhlaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBsZWZ0ID0gKGNvbnRhaW5lcldpZHRoIC0gd2lkdGgpIC8gMjtcblxuICAgICAgICBsZXQgeCA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIChlWCAtIGxlZnQpIC8gd2lkdGgpKTtcbiAgICAgICAgbGV0IHkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCAoZVkgLSB0b3ApIC8gaGVpZ2h0KSk7XG5cbiAgICAgICAgaWYgKHggPD0gaW5zZW5zaXRpdmVQYWRkaW5nKSB7XG4gICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID49ICgxIC0gaW5zZW5zaXRpdmVQYWRkaW5nKSkge1xuICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeSA8PSBpbnNlbnNpdGl2ZVBhZGRpbmcpIHtcbiAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPj0gKDEgLSBpbnNlbnNpdGl2ZVBhZGRpbmcpKSB7XG4gICAgICAgICAgICB5ID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc05vdExvY2tlZCgpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCAhPT0gZWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZURvd24oeDogbnVtYmVyLCB5OiBudW1iZXIsIGJ1dHRvbjogbnVtYmVyKSB7XG4gICAgICAgIGlmIChhdXRvbG9jayAmJiBpc05vdExvY2tlZCgpKSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0UG9pbnRlckxvY2sgPSBlbC5yZXF1ZXN0UG9pbnRlckxvY2sgfHxcbiAgICAgICAgICAgICAgICAoZWwgYXMgYW55KS5tb3pSZXF1ZXN0UG9pbnRlckxvY2sgfHxcbiAgICAgICAgICAgICAgICAoZWwgYXMgYW55KS53ZWJraXRSZXF1ZXN0UG9pbnRlckxvY2s7XG5cbiAgICAgICAgICAgIHJlcXVlc3RQb2ludGVyTG9jay5jYWxsKGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc05vdExvY2tlZCgpKSB7XG4gICAgICAgICAgICBjb25zdCB4eSA9IG1hcFhZKHgsIHkpO1xuICAgICAgICAgICAgY2kuc2VuZE1vdXNlTW90aW9uKHh5LngsIHh5LnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2kuc2VuZE1vdXNlQnV0dG9uKGJ1dHRvbiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZVVwKHg6IG51bWJlciwgeTogbnVtYmVyLCBidXR0b246IG51bWJlcikge1xuICAgICAgICBpZiAoaXNOb3RMb2NrZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgeHkgPSBtYXBYWSh4LCB5KTtcbiAgICAgICAgICAgIGNpLnNlbmRNb3VzZU1vdGlvbih4eS54LCB4eS55KTtcbiAgICAgICAgfVxuICAgICAgICBjaS5zZW5kTW91c2VCdXR0b24oYnV0dG9uLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIG1YOiBudW1iZXIsIG1ZOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGlzTm90TG9ja2VkKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHh5ID0gbWFwWFkoeCwgeSk7XG4gICAgICAgICAgICBjaS5zZW5kTW91c2VNb3Rpb24oeHkueCwgeHkueSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoY2kgYXMgYW55KS5zZW5kTW91c2VSZWxhdGl2ZU1vdGlvbihtWCwgbVkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Nb3VzZUxlYXZlKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHh5ID0gbWFwWFkoeCwgeSk7XG4gICAgICAgIGNpLnNlbmRNb3VzZU1vdGlvbih4eS54LCB4eS55KTtcbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGxheWVycy5tb3VzZU92ZXJsYXk7XG5cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0SWZOZWVkZWQoZTogRXZlbnQpIHtcbiAgICAgICAgLy8gbm90IG5lZWRlZCB5ZXRcbiAgICB9XG5cbiAgICBsZXQgcHJlc3NlZEJ1dHRvbiA9IDA7XG4gICAgY29uc3Qgb25TdGFydCA9IChlOiBFdmVudCkgPT4ge1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGF5ZXJzLnBvaW50ZXJEaXNhYmxlZCkge1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0SWZOZWVkZWQoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldFBvaW50ZXJTdGF0ZShlLCBlbCk7XG4gICAgICAgIHByZXNzZWRCdXR0b24gPSBzdGF0ZS5idXR0b24gfHwgbGF5ZXJzLnBvaW50ZXJCdXR0b247XG4gICAgICAgIG9uTW91c2VEb3duKHN0YXRlLngsIHN0YXRlLnksIHByZXNzZWRCdXR0b24pO1xuXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHByZXZlbnREZWZhdWx0SWZOZWVkZWQoZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uQ2hhbmdlID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXllcnMucG9pbnRlckRpc2FibGVkKSB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcHJldmVudERlZmF1bHRJZk5lZWRlZChlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0UG9pbnRlclN0YXRlKGUsIGVsKTtcbiAgICAgICAgb25Nb3VzZU1vdmUoc3RhdGUueCwgc3RhdGUueSwgc3RhdGUubVgsIHN0YXRlLm1ZKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcHJldmVudERlZmF1bHRJZk5lZWRlZChlKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25FbmQgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGxheWVycy5wb2ludGVyRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdElmTmVlZGVkKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRQb2ludGVyU3RhdGUoZSwgZWwpO1xuICAgICAgICBvbk1vdXNlVXAoc3RhdGUueCwgc3RhdGUueSwgcHJlc3NlZEJ1dHRvbik7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHByZXZlbnREZWZhdWx0SWZOZWVkZWQoZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uTGVhdmUgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxheWVycy5wb2ludGVyRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdElmTmVlZGVkKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRQb2ludGVyU3RhdGUoZSwgZWwpO1xuICAgICAgICBvbk1vdXNlTGVhdmUoc3RhdGUueCwgc3RhdGUueSk7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHByZXZlbnREZWZhdWx0SWZOZWVkZWQoZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uUHJldmVudCA9IChlOiBFdmVudCkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBwcmV2ZW50RGVmYXVsdElmTmVlZGVkKGUpO1xuICAgIH07XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBjYXB0dXJlOiBmYWxzZSxcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5zdGFydGVycykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uU3RhcnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5jaGFuZ2Vycykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uQ2hhbmdlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBuZXh0IG9mIHBvaW50ZXIuZW5kZXJzKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIobmV4dCwgb25FbmQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5wcmV2ZW50cykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uUHJldmVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLmxlYXZlcnMpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuZXh0LCBvbkxlYXZlLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5zdGFydGVycykge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuZXh0LCBvblN0YXJ0LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5jaGFuZ2Vycykge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuZXh0LCBvbkNoYW5nZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHBvaW50ZXIuZW5kZXJzKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKG5leHQsIG9uRW5kLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5wcmV2ZW50cykge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihuZXh0LCBvblByZXZlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiBwb2ludGVyLmxlYXZlcnMpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIobmV4dCwgb25MZWF2ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9O1xufSIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuY29uc3QgbmlwcGxlanMgPSByZXF1aXJlKFwibmlwcGxlanNcIik7XG5cbmltcG9ydCB7IEtCRF9OT05FIH0gZnJvbSBcIi4uL2RvbS9rZXlzXCI7XG5cbmltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2UgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQgeyBMYXllcnMgfSBmcm9tIFwiLi4vZG9tL2xheWVyc1wiO1xuXG5leHBvcnQgdHlwZSBFdmVudCA9XG4gICAgXCJkaXI6dXBcIiB8IFwiZGlyOmRvd25cIiB8IFwiZGlyOmxlZnRcIiB8IFwiZGlyOnJpZ2h0XCIgfFxuICAgIFwicGxhaW46dXBcIiB8IFwicGxhaW46ZG93blwiIHwgXCJwbGFpbjpsZWZ0XCIgfCBcInBsYWluOnJpZ2h0XCIgfFxuICAgIFwiZW5kOnJlbGVhc2VcIiB8IFwidGFwXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXZlbnRNYXBwaW5nIHtcbiAgICBqb3lzdGlja0lkOiAwIHwgMSxcbiAgICBldmVudDogRXZlbnQsXG4gICAgbWFwVG86IG51bWJlcixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5pcHBsZShsYXllcnM6IExheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmc6IEV2ZW50TWFwcGluZ1tdKSB7XG4gICAgY29uc3QgbWFuYWdlciA9IG5pcHBsZWpzLmNyZWF0ZSh7XG4gICAgICAgIHpvbmU6IGxheWVycy5tb3VzZU92ZXJsYXksXG4gICAgICAgIG11bHRpdG91Y2g6IHRydWUsXG4gICAgICAgIG1heE51bWJlck9mTmlwcGxlczogMixcbiAgICB9KTtcblxuICAgIGxldCBwcmVzc2VkID0gLTE7XG5cbiAgICBjb25zdCBwcmVzcyA9IChrZXlDb2RlOiBudW1iZXIpID0+IHtcbiAgICAgICAgbGF5ZXJzLmZpcmVLZXlEb3duKGtleUNvZGUpO1xuICAgICAgICBwcmVzc2VkID0ga2V5Q29kZTtcbiAgICB9XG5cbiAgICBjb25zdCByZWxlYXNlID0gKCkgPT4ge1xuICAgICAgICBpZiAocHJlc3NlZCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGxheWVycy5maXJlS2V5VXAocHJlc3NlZCk7XG4gICAgICAgICAgICBwcmVzc2VkID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByZWxlYXNlT25FbmQ6IHtbaW5kZXg6IG51bWJlcl06IGJvb2xlYW59ID0ge307XG4gICAgY29uc3QgdGFwSm95c3RpY2tzOiB7W2luZGV4OiBudW1iZXJdOiBudW1iZXJ9ID0ge307XG4gICAgY29uc3QgdXNlZFRpbWVzOiB7W2luZGV4OiBudW1iZXJdOiBudW1iZXJ9ID0ge1xuICAgIH07XG4gICAgZm9yIChjb25zdCBuZXh0IG9mIG1hcHBpbmcpIHtcbiAgICAgICAgaWYgKG5leHQuZXZlbnQgPT09IFwiZW5kOnJlbGVhc2VcIikge1xuICAgICAgICAgICAgcmVsZWFzZU9uRW5kW25leHQuam95c3RpY2tJZF0gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG5leHQubWFwVG8gIT09IEtCRF9OT05FKSB7XG4gICAgICAgICAgICBpZiAobmV4dC5ldmVudCA9PT0gXCJ0YXBcIikge1xuICAgICAgICAgICAgICAgIHRhcEpveXN0aWNrc1tuZXh0LmpveXN0aWNrSWRdID0gbmV4dC5tYXBUbztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFuYWdlci5vbihuZXh0LmV2ZW50LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZWRUaW1lc1tuZXh0LmpveXN0aWNrSWRdID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSgpO1xuICAgICAgICAgICAgICAgICAgICBwcmVzcyhuZXh0Lm1hcFRvKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0YXJ0VGltZXM6IHtbaW5kZXg6IG51bWJlcl06IG51bWJlcn0gPSB7fTtcbiAgICBtYW5hZ2VyLm9uKFwic3RhcnRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IG1hbmFnZXIuaWRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHN0YXJ0VGltZXNbaWRdID0gRGF0ZS5ub3coKTtcbiAgICB9KTtcblxuICAgIG1hbmFnZXIub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICBjb25zdCBpZCA9IG1hbmFnZXIuaWRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZXNbaWRdO1xuXG4gICAgICAgIGlmIChyZWxlYXNlT25FbmRbaWRdID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFwSm95c3RpY2tzW2lkXSAmJiBkZWxheSA8IDUwMCAmJiB1c2VkVGltZXNbaWRdIDwgc3RhcnRUaW1lc1tpZF0pIHtcbiAgICAgICAgICAgIGxheWVycy5maXJlS2V5UHJlc3ModGFwSm95c3RpY2tzW2lkXSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiBtYW5hZ2VyLmRlc3Ryb3koKTtcbn1cblxuIiwiaW1wb3J0IHsgTGF5ZXJzIH0gZnJvbSBcIi4uL2RvbS9sYXllcnNcIjtcbmltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2UgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQgeyBrZXlib2FyZCB9IGZyb20gXCIuL2tleWJvYXJkXCI7XG5pbXBvcnQgeyBtb3VzZSB9IGZyb20gXCIuL21vdXNlXCI7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdE51bGxMYXllcnNDb250cm9sKFxuICAgIGxheWVyczogTGF5ZXJzLFxuICAgIGNpOiBDb21tYW5kSW50ZXJmYWNlKSB7XG5cbiAgICBjb25zdCB1bmJpbmRLZXlib2FyZCA9IGtleWJvYXJkKGxheWVycywgY2kpO1xuICAgIGNvbnN0IHVuYmluZE1vdXNlID0gbW91c2UobGF5ZXJzLCBjaSk7XG4gICAgY29uc3QgdW5iaW5kT3B0aW9ucyA9IG9wdGlvbnMobGF5ZXJzLCBbXCJkZWZhdWx0XCJdLCAoKSA9PiB7LyoqL30sIDU0LCA1NCAvIDQsIDApO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgdW5iaW5kS2V5Ym9hcmQoKTtcbiAgICAgICAgdW5iaW5kTW91c2UoKTtcbiAgICAgICAgdW5iaW5kT3B0aW9ucygpO1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBMYXllcnMgfSBmcm9tIFwiLi4vZG9tL2xheWVyc1wiO1xuaW1wb3J0IHsgY3JlYXRlQnV0dG9uIH0gZnJvbSBcIi4vYnV0dG9uXCI7XG5pbXBvcnQgeyBjcmVhdGVEaXYsIHN0b3BQcm9wYWdhdGlvbiB9IGZyb20gXCIuLi9kb20vaGVscGVyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gb3B0aW9ucyhsYXllcnM6IExheWVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyc05hbWVzOiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uTGF5ZXJDaGFuZ2U6IChsYXllcjogc3RyaW5nKSA9PiB2b2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogbnVtYmVyKSB7XG4gICAgY29uc3QgaWRlbnQgPSBNYXRoLnJvdW5kKHNpemUgLyA0KTtcblxuICAgIGxldCBjb250cm9sc1Zpc2JpbGUgPSBmYWxzZTtcbiAgICBsZXQga2V5Ym9hcmRWaXNpYmxlID0gZmFsc2U7XG5cbiAgICBjb25zdCB1cGRhdGVWaXNpYmlsaXR5ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gY29udHJvbHNWaXNiaWxlID8gXCJmbGV4XCIgOiBcIm5vbmVcIjtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAobmV4dCA9PSBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5leHQuc3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgdG9nZ2xlT3B0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgY29udHJvbHNWaXNiaWxlID0gIWNvbnRyb2xzVmlzYmlsZTtcblxuICAgICAgICBpZiAoIWNvbnRyb2xzVmlzYmlsZSAmJiBrZXlib2FyZFZpc2libGUpIHtcbiAgICAgICAgICAgIGxheWVycy50b2dnbGVLZXlib2FyZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlVmlzaWJpbGl0eSgpO1xuICAgIH07XG5cbiAgICBjb25zdCBjaGlsZHJlbjogSFRNTEVsZW1lbnRbXSA9IFtcbiAgICAgICAgY3JlYXRlU2VsZWN0Rm9yTGF5ZXJzKGxheWVyc05hbWVzLCBvbkxheWVyQ2hhbmdlKSxcbiAgICAgICAgY3JlYXRlQnV0dG9uKFwia2V5Ym9hcmRcIiwge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxheWVycy50b2dnbGVLZXlib2FyZCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzVmlzYmlsZSAmJiAha2V5Ym9hcmRWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzVmlzYmlsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVWaXNpYmlsaXR5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgc2l6ZSksXG4gICAgICAgIGNyZWF0ZUJ1dHRvbihcInNhdmVcIiwge1xuICAgICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxheWVycy5zYXZlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbHNWaXNiaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZU9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHNpemUpLFxuICAgICAgICBjcmVhdGVCdXR0b24oXCJmdWxsc2NyZWVuXCIsIHtcbiAgICAgICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsYXllcnMudG9nZ2xlRnVsbHNjcmVlbigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzVmlzYmlsZSkge1xuICAgICAgICAgICAgICAgICAgICB0b2dnbGVPcHRpb25zKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgc2l6ZSksXG4gICAgICAgIGNyZWF0ZUJ1dHRvbihcIm9wdGlvbnNcIiwge1xuICAgICAgICAgICAgb25DbGljazogdG9nZ2xlT3B0aW9ucyxcbiAgICAgICAgfSwgc2l6ZSlcbiAgICBdO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBmdWxsc2NyZWVuID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMl0uY2hpbGRyZW5bMF07XG4gICAgY29uc3Qga2V5Ym9hcmQgPSBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSA0XS5jaGlsZHJlblswXTtcblxuICAgIGNvbnN0IG9uS2V5Ym9hcmRWaXNpYmlsaXR5ID0gKHZpc2libGU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAga2V5Ym9hcmRWaXNpYmxlID0gdmlzaWJsZTtcblxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAga2V5Ym9hcmQuY2xhc3NMaXN0LmFkZChcImVtdWxhdG9yLWNvbnRyb2wtY2xvc2UtaWNvblwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleWJvYXJkLmNsYXNzTGlzdC5yZW1vdmUoXCJlbXVsYXRvci1jb250cm9sLWNsb3NlLWljb25cIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxheWVycy5zZXRPbktleWJvYXJkVmlzaWJpbGl0eShvbktleWJvYXJkVmlzaWJpbGl0eSk7XG4gICAgb25LZXlib2FyZFZpc2liaWxpdHkobGF5ZXJzLmtleWJvYXJkVmlzaWJsZSk7XG5cbiAgICBsYXllcnMuc2V0T25GdWxsc2NyZWVuKChmdWxsc2NyZWVuRW5hYmxlZCkgPT4ge1xuICAgICAgICBpZiAoZnVsbHNjcmVlbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIGlmICghZnVsbHNjcmVlbi5jbGFzc0xpc3QuY29udGFpbnMoXCJlbXVsYXRvci1jb250cm9sLWV4aXQtZnVsbHNjcmVlbi1pY29uXCIpKSB7XG4gICAgICAgICAgICAgICAgZnVsbHNjcmVlbi5jbGFzc0xpc3QuYWRkKFwiZW11bGF0b3ItY29udHJvbC1leGl0LWZ1bGxzY3JlZW4taWNvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZ1bGxzY3JlZW4uY2xhc3NMaXN0LnJlbW92ZShcImVtdWxhdG9yLWNvbnRyb2wtZXhpdC1mdWxsc2NyZWVuLWljb25cIik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChsYXllcnMuZnVsbHNjcmVlbikge1xuICAgICAgICBmdWxsc2NyZWVuLmNsYXNzTGlzdC5hZGQoXCJlbXVsYXRvci1jb250cm9sLWV4aXQtZnVsbHNjcmVlbi1pY29uXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGNyZWF0ZURpdihcImVtdWxhdG9yLW9wdGlvbnNcIik7XG4gICAgY29uc3QgaW50aWFsRGlzcGxheSA9IGtleWJvYXJkVmlzaWJsZSA/IFwiZmxleFwiIDogXCJub25lXCI7XG4gICAgZm9yIChjb25zdCBuZXh0IG9mIGNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChuZXh0ICE9PSBvcHRpb25zKSB7XG4gICAgICAgICAgICBuZXh0LmNsYXNzTGlzdC5hZGQoXCJlbXVsYXRvci1idXR0b24tY29udHJvbFwiKTtcbiAgICAgICAgfVxuICAgICAgICBuZXh0LnN0eWxlLm1hcmdpblJpZ2h0ID0gaWRlbnQgKyBcInB4XCI7XG4gICAgICAgIG5leHQuc3R5bGUubWFyZ2luQm90dG9tID0gaWRlbnQgKyBcInB4XCI7XG4gICAgICAgIGlmIChuZXh0ICE9PSBvcHRpb25zKSB7XG4gICAgICAgICAgICBuZXh0LnN0eWxlLmRpc3BsYXkgPSBpbnRpYWxEaXNwbGF5O1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChuZXh0KTtcbiAgICB9XG5cbiAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgY29udGFpbmVyLnN0eWxlLnJpZ2h0ID0gcmlnaHQgKyBcInB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLnRvcCA9IHRvcCArIFwicHhcIjtcblxuICAgIGxheWVycy5tb3VzZU92ZXJsYXkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxheWVycy5tb3VzZU92ZXJsYXkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgbGF5ZXJzLnNldE9uRnVsbHNjcmVlbigoKSA9PiB7LyoqL30pO1xuICAgICAgICBsYXllcnMucmVtb3ZlT25LZXlib2FyZFZpc2liaWxpdHkob25LZXlib2FyZFZpc2liaWxpdHkpO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdEZvckxheWVycyhsYXllcnM6IHN0cmluZ1tdLCBvbkNoYW5nZTogKGxheWVyOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICBpZiAobGF5ZXJzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gICAgc2VsZWN0LmNsYXNzTGlzdC5hZGQoXCJlbXVsYXRvci1jb250cm9sLXNlbGVjdFwiKTtcblxuXG4gICAgZm9yIChjb25zdCBuZXh0IG9mIGxheWVycykge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICBvcHRpb24udmFsdWUgPSBuZXh0O1xuICAgICAgICBvcHRpb24uaW5uZXJIVE1MID0gbmV4dDtcbiAgICAgICAgc2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuXG4gICAgc2VsZWN0Lm9uY2hhbmdlID0gKGU6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBsYXllciA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBvbkNoYW5nZShsYXllcik7XG4gICAgfTtcblxuICAgIHN0b3BQcm9wYWdhdGlvbihzZWxlY3QsIGZhbHNlKTtcblxuICAgIHJldHVybiBzZWxlY3Q7XG59XG5cbiIsImltcG9ydCB7IHBvaW50ZXIgfSBmcm9tIFwiLi9wb2ludGVyXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXYoY2xhc3NOYW1lOiBzdHJpbmcsIGlubmVySHRtbD86IHN0cmluZykge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgaWYgKGlubmVySHRtbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IGlubmVySHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKGVsOiBIVE1MRWxlbWVudCwgcHJldmVudERlZmF1bHQgPSB0cnVlKSB7XG4gICAgY29uc3Qgb25TdG9wID0gKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfTtcbiAgICBjb25zdCBvblByZXZlbnQgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgaWYgKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGNhcHR1cmU6IGZhbHNlLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBuZXh0IG9mIHBvaW50ZXIuc3RhcnRlcnMpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuZXh0LCBvblN0b3AsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5lbmRlcnMpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuZXh0LCBvblN0b3AsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgcG9pbnRlci5wcmV2ZW50cykge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKG5leHQsIG9uUHJldmVudCwgb3B0aW9ucyk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IEtCRF9OT05FID0gMDtcbmV4cG9ydCBjb25zdCBLQkRfMCA9IDQ4O1xuZXhwb3J0IGNvbnN0IEtCRF8xID0gNDk7XG5leHBvcnQgY29uc3QgS0JEXzIgPSA1MDtcbmV4cG9ydCBjb25zdCBLQkRfMyA9IDUxO1xuZXhwb3J0IGNvbnN0IEtCRF80ID0gNTI7XG5leHBvcnQgY29uc3QgS0JEXzUgPSA1MztcbmV4cG9ydCBjb25zdCBLQkRfNiA9IDU0O1xuZXhwb3J0IGNvbnN0IEtCRF83ID0gNTU7XG5leHBvcnQgY29uc3QgS0JEXzggPSA1NjtcbmV4cG9ydCBjb25zdCBLQkRfOSA9IDU3O1xuZXhwb3J0IGNvbnN0IEtCRF9hID0gNjU7XG5leHBvcnQgY29uc3QgS0JEX2IgPSA2NjtcbmV4cG9ydCBjb25zdCBLQkRfYyA9IDY3O1xuZXhwb3J0IGNvbnN0IEtCRF9kID0gNjg7XG5leHBvcnQgY29uc3QgS0JEX2UgPSA2OTtcbmV4cG9ydCBjb25zdCBLQkRfZiA9IDcwO1xuZXhwb3J0IGNvbnN0IEtCRF9nID0gNzE7XG5leHBvcnQgY29uc3QgS0JEX2ggPSA3MjtcbmV4cG9ydCBjb25zdCBLQkRfaSA9IDczO1xuZXhwb3J0IGNvbnN0IEtCRF9qID0gNzQ7XG5leHBvcnQgY29uc3QgS0JEX2sgPSA3NTtcbmV4cG9ydCBjb25zdCBLQkRfbCA9IDc2O1xuZXhwb3J0IGNvbnN0IEtCRF9tID0gNzc7XG5leHBvcnQgY29uc3QgS0JEX24gPSA3ODtcbmV4cG9ydCBjb25zdCBLQkRfbyA9IDc5O1xuZXhwb3J0IGNvbnN0IEtCRF9wID0gODA7XG5leHBvcnQgY29uc3QgS0JEX3EgPSA4MTtcbmV4cG9ydCBjb25zdCBLQkRfciA9IDgyO1xuZXhwb3J0IGNvbnN0IEtCRF9zID0gODM7XG5leHBvcnQgY29uc3QgS0JEX3QgPSA4NDtcbmV4cG9ydCBjb25zdCBLQkRfdSA9IDg1O1xuZXhwb3J0IGNvbnN0IEtCRF92ID0gODY7XG5leHBvcnQgY29uc3QgS0JEX3cgPSA4NztcbmV4cG9ydCBjb25zdCBLQkRfeCA9IDg4O1xuZXhwb3J0IGNvbnN0IEtCRF95ID0gODk7XG5leHBvcnQgY29uc3QgS0JEX3ogPSA5MDtcbmV4cG9ydCBjb25zdCBLQkRfZjEgPSAyOTA7XG5leHBvcnQgY29uc3QgS0JEX2YyID0gMjkxO1xuZXhwb3J0IGNvbnN0IEtCRF9mMyA9IDI5MjtcbmV4cG9ydCBjb25zdCBLQkRfZjQgPSAyOTM7XG5leHBvcnQgY29uc3QgS0JEX2Y1ID0gMjk0O1xuZXhwb3J0IGNvbnN0IEtCRF9mNiA9IDI5NTtcbmV4cG9ydCBjb25zdCBLQkRfZjcgPSAyOTY7XG5leHBvcnQgY29uc3QgS0JEX2Y4ID0gMjk3O1xuZXhwb3J0IGNvbnN0IEtCRF9mOSA9IDI5ODtcbmV4cG9ydCBjb25zdCBLQkRfZjEwID0gMjk5O1xuZXhwb3J0IGNvbnN0IEtCRF9mMTEgPSAzMDA7XG5leHBvcnQgY29uc3QgS0JEX2YxMiA9IDMwMTtcblxuZXhwb3J0IGNvbnN0IEtCRF9rcDAgPSAzMjA7XG5leHBvcnQgY29uc3QgS0JEX2twMSA9IDMyMTtcbmV4cG9ydCBjb25zdCBLQkRfa3AyID0gMzIyO1xuZXhwb3J0IGNvbnN0IEtCRF9rcDMgPSAzMjM7XG5leHBvcnQgY29uc3QgS0JEX2twNCA9IDMyNDtcbmV4cG9ydCBjb25zdCBLQkRfa3A1ID0gMzI1O1xuZXhwb3J0IGNvbnN0IEtCRF9rcDYgPSAzMjY7XG5leHBvcnQgY29uc3QgS0JEX2twNyA9IDMyNztcbmV4cG9ydCBjb25zdCBLQkRfa3A4ID0gMzI4O1xuZXhwb3J0IGNvbnN0IEtCRF9rcDkgPSAzMjk7XG5cbmV4cG9ydCBjb25zdCBLQkRfa3BwZXJpb2QgPSAzMzA7XG5leHBvcnQgY29uc3QgS0JEX2twZGl2aWRlID0gMzMxO1xuZXhwb3J0IGNvbnN0IEtCRF9rcG11bHRpcGx5ID0gMzMyO1xuZXhwb3J0IGNvbnN0IEtCRF9rcG1pbnVzID0gMzMzO1xuZXhwb3J0IGNvbnN0IEtCRF9rcHBsdXMgPSAzMzQ7XG5leHBvcnQgY29uc3QgS0JEX2twZW50ZXIgPSAzMzU7XG5cbmV4cG9ydCBjb25zdCBLQkRfZXNjID0gMjU2O1xuZXhwb3J0IGNvbnN0IEtCRF90YWIgPSAyNTg7XG5leHBvcnQgY29uc3QgS0JEX2JhY2tzcGFjZSA9IDI1OTtcbmV4cG9ydCBjb25zdCBLQkRfZW50ZXIgPSAyNTc7XG5leHBvcnQgY29uc3QgS0JEX3NwYWNlID0gMzI7XG5leHBvcnQgY29uc3QgS0JEX2xlZnRhbHQgPSAzNDI7XG5leHBvcnQgY29uc3QgS0JEX3JpZ2h0YWx0ID0gMzQ2O1xuZXhwb3J0IGNvbnN0IEtCRF9sZWZ0Y3RybCA9IDM0MTtcbmV4cG9ydCBjb25zdCBLQkRfcmlnaHRjdHJsID0gMzQ1O1xuZXhwb3J0IGNvbnN0IEtCRF9sZWZ0c2hpZnQgPSAzNDA7XG5leHBvcnQgY29uc3QgS0JEX3JpZ2h0c2hpZnQgPSAzNDQ7XG5leHBvcnQgY29uc3QgS0JEX2NhcHNsb2NrID0gMjgwO1xuZXhwb3J0IGNvbnN0IEtCRF9zY3JvbGxsb2NrID0gMjgxO1xuZXhwb3J0IGNvbnN0IEtCRF9udW1sb2NrID0gMjgyO1xuZXhwb3J0IGNvbnN0IEtCRF9ncmF2ZSA9IDk2O1xuZXhwb3J0IGNvbnN0IEtCRF9taW51cyA9IDQ1O1xuZXhwb3J0IGNvbnN0IEtCRF9lcXVhbHMgPSA2MTtcbmV4cG9ydCBjb25zdCBLQkRfYmFja3NsYXNoID0gOTI7XG5leHBvcnQgY29uc3QgS0JEX2xlZnRicmFja2V0ID0gOTE7XG5leHBvcnQgY29uc3QgS0JEX3JpZ2h0YnJhY2tldCA9IDkzO1xuZXhwb3J0IGNvbnN0IEtCRF9zZW1pY29sb24gPSA1OTtcbmV4cG9ydCBjb25zdCBLQkRfcXVvdGUgPSAzOTtcbmV4cG9ydCBjb25zdCBLQkRfcGVyaW9kID0gNDY7XG5leHBvcnQgY29uc3QgS0JEX2NvbW1hID0gNDQ7XG5leHBvcnQgY29uc3QgS0JEX3NsYXNoID0gNDc7XG5leHBvcnQgY29uc3QgS0JEX3ByaW50c2NyZWVuID0gMjgzO1xuZXhwb3J0IGNvbnN0IEtCRF9wYXVzZSA9IDI4NDtcbmV4cG9ydCBjb25zdCBLQkRfaW5zZXJ0ID0gMjYwO1xuZXhwb3J0IGNvbnN0IEtCRF9ob21lID0gMjY4O1xuZXhwb3J0IGNvbnN0IEtCRF9wYWdldXAgPSAyNjY7XG5leHBvcnQgY29uc3QgS0JEX2RlbGV0ZSA9IDI2MTtcbmV4cG9ydCBjb25zdCBLQkRfZW5kID0gMjY5O1xuZXhwb3J0IGNvbnN0IEtCRF9wYWdlZG93biA9IDI2NztcbmV4cG9ydCBjb25zdCBLQkRfbGVmdCA9IDI2MztcbmV4cG9ydCBjb25zdCBLQkRfdXAgPSAyNjU7XG5leHBvcnQgY29uc3QgS0JEX2Rvd24gPSAyNjQ7XG5leHBvcnQgY29uc3QgS0JEX3JpZ2h0ID0gMjYyO1xuZXhwb3J0IGNvbnN0IEtCRF9leHRyYV9sdF9ndCA9IDM0ODsgLy8gPz8/XG5cbmV4cG9ydCBjb25zdCBkb21Ub0tleUNvZGVzOiB7W2luZGV4OiBudW1iZXJdOiBudW1iZXJ9ID0ge1xuICAgIDg6IEtCRF9iYWNrc3BhY2UsXG4gICAgOTogS0JEX3RhYixcbiAgICAxMzogS0JEX2VudGVyLFxuICAgIDE2OiBLQkRfbGVmdHNoaWZ0LFxuICAgIDE3OiBLQkRfbGVmdGN0cmwsXG4gICAgMTg6IEtCRF9sZWZ0YWx0LFxuICAgIDE5OiBLQkRfcGF1c2UsXG4gICAgMjc6IEtCRF9lc2MsXG4gICAgMzI6IEtCRF9zcGFjZSxcbiAgICAzMzogS0JEX3BhZ2V1cCxcbiAgICAzNDogS0JEX3BhZ2Vkb3duLFxuICAgIDM1OiBLQkRfZW5kLFxuICAgIDM2OiBLQkRfaG9tZSxcbiAgICAzNzogS0JEX2xlZnQsXG4gICAgMzg6IEtCRF91cCxcbiAgICAzOTogS0JEX3JpZ2h0LFxuICAgIDQwOiBLQkRfZG93bixcbiAgICA0NTogS0JEX2luc2VydCxcbiAgICA0NjogS0JEX2RlbGV0ZSxcbiAgICA0ODogS0JEXzAsXG4gICAgNDk6IEtCRF8xLFxuICAgIDUwOiBLQkRfMixcbiAgICA1MTogS0JEXzMsXG4gICAgNTI6IEtCRF80LFxuICAgIDUzOiBLQkRfNSxcbiAgICA1NDogS0JEXzYsXG4gICAgNTU6IEtCRF83LFxuICAgIDU2OiBLQkRfOCxcbiAgICA1NzogS0JEXzksXG4gICAgNTk6IEtCRF9zZW1pY29sb24sXG4gICAgNjQ6IEtCRF9lcXVhbHMsXG4gICAgNjU6IEtCRF9hLFxuICAgIDY2OiBLQkRfYixcbiAgICA2NzogS0JEX2MsXG4gICAgNjg6IEtCRF9kLFxuICAgIDY5OiBLQkRfZSxcbiAgICA3MDogS0JEX2YsXG4gICAgNzE6IEtCRF9nLFxuICAgIDcyOiBLQkRfaCxcbiAgICA3MzogS0JEX2ksXG4gICAgNzQ6IEtCRF9qLFxuICAgIDc1OiBLQkRfayxcbiAgICA3NjogS0JEX2wsXG4gICAgNzc6IEtCRF9tLFxuICAgIDc4OiBLQkRfbixcbiAgICA3OTogS0JEX28sXG4gICAgODA6IEtCRF9wLFxuICAgIDgxOiBLQkRfcSxcbiAgICA4MjogS0JEX3IsXG4gICAgODM6IEtCRF9zLFxuICAgIDg0OiBLQkRfdCxcbiAgICA4NTogS0JEX3UsXG4gICAgODY6IEtCRF92LFxuICAgIDg3OiBLQkRfdyxcbiAgICA4ODogS0JEX3gsXG4gICAgODk6IEtCRF95LFxuICAgIDkwOiBLQkRfeixcbiAgICA5MTogS0JEX2xlZnRicmFja2V0LFxuICAgIDkzOiBLQkRfcmlnaHRicmFja2V0LFxuICAgIDk2OiBLQkRfa3AwLFxuICAgIDk3OiBLQkRfa3AxLFxuICAgIDk4OiBLQkRfa3AyLFxuICAgIDk5OiBLQkRfa3AzLFxuICAgIDEwMDogS0JEX2twNCxcbiAgICAxMDE6IEtCRF9rcDUsXG4gICAgMTAyOiBLQkRfa3A2LFxuICAgIDEwMzogS0JEX2twNyxcbiAgICAxMDQ6IEtCRF9rcDgsXG4gICAgMTA1OiBLQkRfa3A5LFxuICAgIC8vIDEwNjogS0JEX2twbXVsdGlwbHksXG4gICAgLy8gMTA3OiBLQkRfa3BhZGQsXG4gICAgLy8gMTA5OiBLQkRfa3BzdWJ0cmFjdCxcbiAgICAvLyAxMTA6IEtCRF9rcGRlY2ltYWwsXG4gICAgMTExOiBLQkRfa3BkaXZpZGUsXG4gICAgMTEyOiBLQkRfZjEsXG4gICAgMTEzOiBLQkRfZjIsXG4gICAgMTE0OiBLQkRfZjMsXG4gICAgMTE1OiBLQkRfZjQsXG4gICAgMTE2OiBLQkRfZjUsXG4gICAgMTE3OiBLQkRfZjYsXG4gICAgMTE4OiBLQkRfZjcsXG4gICAgMTE5OiBLQkRfZjgsXG4gICAgMTIwOiBLQkRfZjksXG4gICAgMTIxOiBLQkRfZjEwLFxuICAgIDEyMjogS0JEX2YxMSxcbiAgICAxMjM6IEtCRF9mMTIsXG4gICAgMTQ0OiBLQkRfbnVtbG9jayxcbiAgICAxNDU6IEtCRF9zY3JvbGxsb2NrLFxuICAgIDE3MzogS0JEX21pbnVzLFxuICAgIDE4NjogS0JEX3NlbWljb2xvbixcbiAgICAxODc6IEtCRF9lcXVhbHMsXG4gICAgMTg4OiBLQkRfY29tbWEsXG4gICAgMTg5OiBLQkRfbWludXMsXG4gICAgMTkwOiBLQkRfcGVyaW9kLFxuICAgIDE5MTogS0JEX3NsYXNoLFxuICAgIC8vIDE5MjogS0JEX2dyYXZlYWNjZW50LFxuICAgIDIxOTogS0JEX2xlZnRicmFja2V0LFxuICAgIDIyMDogS0JEX2JhY2tzbGFzaCxcbiAgICAyMjE6IEtCRF9yaWdodGJyYWNrZXQsXG4gICAgLy8gMjIyOiBLQkRfYXBvc3Ryb3BoZSxcbiAgICAvLyAyMjQ6IEtCRF9sZWZ0X3N1cGVyLFxufVxuXG5leHBvcnQgY29uc3QgbmFtZWRLZXlDb2Rlczoge1tuYW1lOiBzdHJpbmddOiBudW1iZXJ9ID0ge1xuICAgIFwiS0JEX05PTkVcIjogS0JEX05PTkUsXG4gICAgXCJLQkRfMFwiOiBLQkRfMCxcbiAgICBcIktCRF8xXCI6IEtCRF8xLFxuICAgIFwiS0JEXzJcIjogS0JEXzIsXG4gICAgXCJLQkRfM1wiOiBLQkRfMyxcbiAgICBcIktCRF80XCI6IEtCRF80LFxuICAgIFwiS0JEXzVcIjogS0JEXzUsXG4gICAgXCJLQkRfNlwiOiBLQkRfNixcbiAgICBcIktCRF83XCI6IEtCRF83LFxuICAgIFwiS0JEXzhcIjogS0JEXzgsXG4gICAgXCJLQkRfOVwiOiBLQkRfOSxcbiAgICBcIktCRF9hXCI6IEtCRF9hLFxuICAgIFwiS0JEX2JcIjogS0JEX2IsXG4gICAgXCJLQkRfY1wiOiBLQkRfYyxcbiAgICBcIktCRF9kXCI6IEtCRF9kLFxuICAgIFwiS0JEX2VcIjogS0JEX2UsXG4gICAgXCJLQkRfZlwiOiBLQkRfZixcbiAgICBcIktCRF9nXCI6IEtCRF9nLFxuICAgIFwiS0JEX2hcIjogS0JEX2gsXG4gICAgXCJLQkRfaVwiOiBLQkRfaSxcbiAgICBcIktCRF9qXCI6IEtCRF9qLFxuICAgIFwiS0JEX2tcIjogS0JEX2ssXG4gICAgXCJLQkRfbFwiOiBLQkRfbCxcbiAgICBcIktCRF9tXCI6IEtCRF9tLFxuICAgIFwiS0JEX25cIjogS0JEX24sXG4gICAgXCJLQkRfb1wiOiBLQkRfbyxcbiAgICBcIktCRF9wXCI6IEtCRF9wLFxuICAgIFwiS0JEX3FcIjogS0JEX3EsXG4gICAgXCJLQkRfclwiOiBLQkRfcixcbiAgICBcIktCRF9zXCI6IEtCRF9zLFxuICAgIFwiS0JEX3RcIjogS0JEX3QsXG4gICAgXCJLQkRfdVwiOiBLQkRfdSxcbiAgICBcIktCRF92XCI6IEtCRF92LFxuICAgIFwiS0JEX3dcIjogS0JEX3csXG4gICAgXCJLQkRfeFwiOiBLQkRfeCxcbiAgICBcIktCRF95XCI6IEtCRF95LFxuICAgIFwiS0JEX3pcIjogS0JEX3osXG4gICAgXCJLQkRfZjFcIjogS0JEX2YxLFxuICAgIFwiS0JEX2YyXCI6IEtCRF9mMixcbiAgICBcIktCRF9mM1wiOiBLQkRfZjMsXG4gICAgXCJLQkRfZjRcIjogS0JEX2Y0LFxuICAgIFwiS0JEX2Y1XCI6IEtCRF9mNSxcbiAgICBcIktCRF9mNlwiOiBLQkRfZjYsXG4gICAgXCJLQkRfZjdcIjogS0JEX2Y3LFxuICAgIFwiS0JEX2Y4XCI6IEtCRF9mOCxcbiAgICBcIktCRF9mOVwiOiBLQkRfZjksXG4gICAgXCJLQkRfZjEwXCI6IEtCRF9mMTAsXG4gICAgXCJLQkRfZjExXCI6IEtCRF9mMTEsXG4gICAgXCJLQkRfZjEyXCI6IEtCRF9mMTIsXG5cbiAgICBcIktCRF9rcDBcIjogS0JEX2twMCxcbiAgICBcIktCRF9rcDFcIjogS0JEX2twMSxcbiAgICBcIktCRF9rcDJcIjogS0JEX2twMixcbiAgICBcIktCRF9rcDNcIjogS0JEX2twMyxcbiAgICBcIktCRF9rcDRcIjogS0JEX2twNCxcbiAgICBcIktCRF9rcDVcIjogS0JEX2twNSxcbiAgICBcIktCRF9rcDZcIjogS0JEX2twNixcbiAgICBcIktCRF9rcDdcIjogS0JEX2twNyxcbiAgICBcIktCRF9rcDhcIjogS0JEX2twOCxcbiAgICBcIktCRF9rcDlcIjogS0JEX2twOSxcblxuICAgIFwiS0JEX2twcGVyaW9kXCI6IEtCRF9rcHBlcmlvZCxcbiAgICBcIktCRF9rcGRpdmlkZVwiOiBLQkRfa3BkaXZpZGUsXG4gICAgXCJLQkRfa3BtdWx0aXBseVwiOiBLQkRfa3BtdWx0aXBseSxcbiAgICBcIktCRF9rcG1pbnVzXCI6IEtCRF9rcG1pbnVzLFxuICAgIFwiS0JEX2twcGx1c1wiOiBLQkRfa3BwbHVzLFxuICAgIFwiS0JEX2twZW50ZXJcIjogS0JEX2twZW50ZXIsXG5cbiAgICBcIktCRF9lc2NcIjogS0JEX2VzYyxcbiAgICBcIktCRF90YWJcIjogS0JEX3RhYixcbiAgICBcIktCRF9iYWNrc3BhY2VcIjogS0JEX2JhY2tzcGFjZSxcbiAgICBcIktCRF9lbnRlclwiOiBLQkRfZW50ZXIsXG4gICAgXCJLQkRfc3BhY2VcIjogS0JEX3NwYWNlLFxuICAgIFwiS0JEX2xlZnRhbHRcIjogS0JEX2xlZnRhbHQsXG4gICAgXCJLQkRfcmlnaHRhbHRcIjogS0JEX3JpZ2h0YWx0LFxuICAgIFwiS0JEX2xlZnRjdHJsXCI6IEtCRF9sZWZ0Y3RybCxcbiAgICBcIktCRF9yaWdodGN0cmxcIjogS0JEX3JpZ2h0Y3RybCxcbiAgICBcIktCRF9sZWZ0c2hpZnRcIjogS0JEX2xlZnRzaGlmdCxcbiAgICBcIktCRF9yaWdodHNoaWZ0XCI6IEtCRF9yaWdodHNoaWZ0LFxuICAgIFwiS0JEX2NhcHNsb2NrXCI6IEtCRF9jYXBzbG9jayxcbiAgICBcIktCRF9zY3JvbGxsb2NrXCI6IEtCRF9zY3JvbGxsb2NrLFxuICAgIFwiS0JEX251bWxvY2tcIjogS0JEX251bWxvY2ssXG4gICAgXCJLQkRfZ3JhdmVcIjogS0JEX2dyYXZlLFxuICAgIFwiS0JEX21pbnVzXCI6IEtCRF9taW51cyxcbiAgICBcIktCRF9lcXVhbHNcIjogS0JEX2VxdWFscyxcbiAgICBcIktCRF9iYWNrc2xhc2hcIjogS0JEX2JhY2tzbGFzaCxcbiAgICBcIktCRF9sZWZ0YnJhY2tldFwiOiBLQkRfbGVmdGJyYWNrZXQsXG4gICAgXCJLQkRfcmlnaHRicmFja2V0XCI6IEtCRF9yaWdodGJyYWNrZXQsXG4gICAgXCJLQkRfc2VtaWNvbG9uXCI6IEtCRF9zZW1pY29sb24sXG4gICAgXCJLQkRfcXVvdGVcIjogS0JEX3F1b3RlLFxuICAgIFwiS0JEX3BlcmlvZFwiOiBLQkRfcGVyaW9kLFxuICAgIFwiS0JEX2NvbW1hXCI6IEtCRF9jb21tYSxcbiAgICBcIktCRF9zbGFzaFwiOiBLQkRfc2xhc2gsXG4gICAgXCJLQkRfcHJpbnRzY3JlZW5cIjogS0JEX3ByaW50c2NyZWVuLFxuICAgIFwiS0JEX3BhdXNlXCI6IEtCRF9wYXVzZSxcbiAgICBcIktCRF9pbnNlcnRcIjogS0JEX2luc2VydCxcbiAgICBcIktCRF9ob21lXCI6IEtCRF9ob21lLFxuICAgIFwiS0JEX3BhZ2V1cFwiOiBLQkRfcGFnZXVwLFxuICAgIFwiS0JEX2RlbGV0ZVwiOiBLQkRfZGVsZXRlLFxuICAgIFwiS0JEX2VuZFwiOiBLQkRfZW5kLFxuICAgIFwiS0JEX3BhZ2Vkb3duXCI6IEtCRF9wYWdlZG93bixcbiAgICBcIktCRF9sZWZ0XCI6IEtCRF9sZWZ0LFxuICAgIFwiS0JEX3VwXCI6IEtCRF91cCxcbiAgICBcIktCRF9kb3duXCI6IEtCRF9kb3duLFxuICAgIFwiS0JEX3JpZ2h0XCI6IEtCRF9yaWdodCxcbiAgICBcIktCRF9leHRyYV9sdF9ndFwiOiBLQkRfZXh0cmFfbHRfZ3QsXG59O1xuXG5leHBvcnQgY29uc3Qga2V5Q29kZXNUb0RvbToge1tpbmRleDogbnVtYmVyXTogbnVtYmVyfSA9IHt9O1xuZm9yIChjb25zdCBuZXh0IG9mIE9iamVjdC5rZXlzKGRvbVRvS2V5Q29kZXMpKSB7XG4gICAgY29uc3Qga2V5ID0gTnVtYmVyLnBhcnNlSW50KG5leHQsIDEwKTtcbiAgICBrZXlDb2Rlc1RvRG9tW2RvbVRvS2V5Q29kZXNba2V5XV0gPSBrZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21Ub0tleUNvZGUoZG9tQ29kZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGRvbVRvS2V5Q29kZXNbZG9tQ29kZV0gfHwgMDtcbn1cbiIsImltcG9ydCB7IE5vdHlmIH0gZnJvbSBcIm5vdHlmXCI7XG5pbXBvcnQgS2V5Ym9hcmQgZnJvbSBcInNpbXBsZS1rZXlib2FyZFwiO1xuaW1wb3J0IHsgY3JlYXRlRGl2LCBzdG9wUHJvcGFnYXRpb24gfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5cbmltcG9ydCB7IGRvbVRvS2V5Q29kZSwgS0JEX2VudGVyLCBLQkRfbGVmdHNoaWZ0LCBLQkRfYmFja3NwYWNlLCBLQkRfY2Fwc2xvY2ssIEtCRF90YWIsIEtCRF9zcGFjZSwgS0JEX2VzYywgS0JEX2xlZnRjdHJsLCBLQkRfbGVmdGFsdCwgS0JEX2NvbW1hLCBLQkRfcGVyaW9kLCBLQkRfcXVvdGUsIEtCRF9zZW1pY29sb24sIEtCRF9sZWZ0YnJhY2tldCwgS0JEX3JpZ2h0YnJhY2tldCB9IGZyb20gXCIuL2tleXNcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5jb25zdCBlbGVtZW50UmVzaXplRGV0ZWN0b3IgPSByZXF1aXJlKFwiZWxlbWVudC1yZXNpemUtZGV0ZWN0b3JcIik7XG5jb25zdCByZXNpemVEZXRlY3RvciA9IGVsZW1lbnRSZXNpemVEZXRlY3Rvcih7XG59KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgaW50ZXJmYWNlIExheWVyc09wdGlvbnMge1xuICAgIG9wdGlvbkNvbnRyb2xzPzogc3RyaW5nW107XG4gICAga2V5Ym9hcmREaXY/OiBIVE1MRGl2RWxlbWVudDtcbiAgICBmdWxsc2NyZWVuRWxlbWVudD86IEhUTUxFbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGF5ZXJzKHJvb3Q6IEhUTUxEaXZFbGVtZW50LCBvcHRpb25zPzogTGF5ZXJzT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgTGF5ZXJzKHJvb3QsIG9wdGlvbnMgfHwge30pO1xufVxuXG5leHBvcnQgY2xhc3MgTGF5ZXJzIHtcbiAgICBvcHRpb25zOiBMYXllcnNPcHRpb25zO1xuICAgIHJvb3Q6IEhUTUxEaXZFbGVtZW50O1xuICAgIGxvYWRpbmc6IEhUTUxEaXZFbGVtZW50O1xuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgbW91c2VPdmVybGF5OiBIVE1MRGl2RWxlbWVudDtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIGZ1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICBrZXlib2FyZFZpc2libGUgPSBmYWxzZTtcbiAgICBwb2ludGVyTG9jayA9IGZhbHNlO1xuICAgIHBvaW50ZXJEaXNhYmxlZCA9IGZhbHNlO1xuICAgIHBvaW50ZXJCdXR0b246IDAgfCAxID0gMDtcblxuICAgIG5vdHlmID0gbmV3IE5vdHlmKCk7XG4gICAgdG9nZ2xlS2V5Ym9hcmQ6ICgpID0+IGJvb2xlYW4gPSAoKSA9PiBmYWxzZTtcblxuICAgIHByaXZhdGUgZnVsbHNjcmVlbkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgY2xpY2tUb1N0YXJ0OiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcml2YXRlIGxvYWRlclRleHQ6IEhUTUxQcmVFbGVtZW50O1xuICAgIHByaXZhdGUgb25SZXNpemU6ICgod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQpW107XG5cbiAgICBwcml2YXRlIG9uS2V5RG93bjogKGtleUNvZGU6IG51bWJlcikgPT4gdm9pZDtcbiAgICBwcml2YXRlIG9uS2V5VXA6IChrZXlDb2RlOiBudW1iZXIpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBvbktleVByZXNzOiAoa2V5Q29kZTogbnVtYmVyKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgb25LZXlzUHJlc3M6IChrZXlDb2RlczogbnVtYmVyW10pID0+IHZvaWQ7XG5cbiAgICBwcml2YXRlIG9uU2F2ZTogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIG9uU2F2ZVN0YXJ0ZWQ6ICgpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBvblNhdmVFbmRlZDogKCkgPT4gdm9pZDtcblxuICAgIHByaXZhdGUgb25GdWxsc2NyZWVuQ2hhbmdlZDogKChmdWxsc2NyZWVuOiBib29sZWFuKSA9PiB2b2lkKVtdID0gW107XG4gICAgcHJpdmF0ZSBvbktleWJvYXJkQ2hhbmdlZDogKCh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkKVtdID0gW107XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBjb25zdHJ1Y3Rvcihyb290OiBIVE1MRGl2RWxlbWVudCwgb3B0aW9uczogTGF5ZXJzT3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLnJvb3QgPSByb290O1xuICAgICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChcImVtdWxhdG9yLXJvb3RcIik7XG4gICAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnQgPSBvcHRpb25zLmZ1bGxzY3JlZW5FbGVtZW50IHx8IHRoaXMucm9vdDtcblxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAgIHRoaXMuY2FudmFzLmNsYXNzTmFtZSA9IFwiZW11bGF0b3ItY2FudmFzXCI7XG5cbiAgICAgICAgdGhpcy52aWRlbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ2aWRlb1wiKTtcbiAgICAgICAgdGhpcy52aWRlby5zZXRBdHRyaWJ1dGUoXCJhdXRvcGxheVwiLCBcIlwiKTtcbiAgICAgICAgdGhpcy52aWRlby5zZXRBdHRyaWJ1dGUoXCJwbGF5c2lubGluZVwiLCBcIlwiKTtcbiAgICAgICAgdGhpcy52aWRlby5jbGFzc05hbWUgPSBcImVtdWxhdG9yLXZpZGVvXCI7XG5cbiAgICAgICAgdGhpcy5sb2FkaW5nID0gY3JlYXRlTG9hZGluZ0xheWVyKCk7XG4gICAgICAgIHRoaXMubG9hZGVyVGV4dCA9IHRoaXMubG9hZGluZy5xdWVyeVNlbGVjdG9yKFwiLmVtdWxhdG9yLWxvYWRpbmctcHJlLTJcIikgYXMgSFRNTFByZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMubW91c2VPdmVybGF5ID0gY3JlYXRlTW91c2VPdmVybGF5TGF5ZXIoKTtcblxuICAgICAgICB0aGlzLmNsaWNrVG9TdGFydCA9IGNyZWF0ZUNsaWNrVG9TdGFydExheWVyKCk7XG4gICAgICAgIHRoaXMuY2xpY2tUb1N0YXJ0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNsaWNrVG9TdGFydC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgICAgICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy52aWRlbyk7XG4gICAgICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZCh0aGlzLm1vdXNlT3ZlcmxheSk7XG4gICAgICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZCh0aGlzLmNsaWNrVG9TdGFydCk7XG4gICAgICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZCh0aGlzLmxvYWRpbmcpO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSByb290Lm9mZnNldFdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHJvb3Qub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIHRoaXMub25SZXNpemUgPSBbXTtcbiAgICAgICAgdGhpcy5vbktleURvd24gPSAoKSA9PiB7IC8qKi8gfTtcbiAgICAgICAgdGhpcy5vbktleVVwID0gKCkgPT4geyAvKiovIH07XG4gICAgICAgIHRoaXMub25LZXlQcmVzcyA9ICgpID0+IHsgLyoqLyB9O1xuICAgICAgICB0aGlzLm9uS2V5c1ByZXNzID0gKCkgPT4geyAvKiovIH07XG4gICAgICAgIHRoaXMub25TYXZlID0gKCkgPT4geyByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm90IGltcGxlbWVudGVkXCIpKTsgfTtcbiAgICAgICAgdGhpcy5vblNhdmVTdGFydGVkID0gKCkgPT4geyAvKiovIH07XG4gICAgICAgIHRoaXMub25TYXZlRW5kZWQgPSAoKSA9PiB7IC8qKi8gfTtcblxuICAgICAgICByZXNpemVEZXRlY3Rvci5saXN0ZW5Ubyh0aGlzLnJvb3QsIChlbDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbCAhPT0gcm9vdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdGhpcy5vblJlc2l6ZSkge1xuICAgICAgICAgICAgICAgIG5leHQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRLZXlFdmVudHMoKTtcbiAgICAgICAgdGhpcy5pbml0S2V5Ym9hcmQoKTtcbiAgICAgICAgdGhpcy5wcmV2ZW50Q29udGV4dE1lbnUoKTtcblxuXG4gICAgICAgIHRoaXMuZnVsbHNjcmVlbkVsZW1lbnQub25mdWxsc2NyZWVuY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50ICE9PSB0aGlzLmZ1bGxzY3JlZW5FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgIG5leHQodGhpcy5mdWxsc2NyZWVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRLZXlFdmVudHMoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5Q29kZSA9IGRvbVRvS2V5Q29kZShlLmtleUNvZGUpO1xuICAgICAgICAgICAgdGhpcy5vbktleURvd24oa2V5Q29kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleUNvZGUgPSBkb21Ub0tleUNvZGUoZS5rZXlDb2RlKTtcbiAgICAgICAgICAgIHRoaXMub25LZXlVcChrZXlDb2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJldmVudENvbnRleHRNZW51KCkge1xuICAgICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhZGRPblJlc2l6ZShoYW5kbGVyOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5vblJlc2l6ZS5wdXNoKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJlbW92ZU9uUmVzaXplKGhhbmRsZXI6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uUmVzaXplID0gdGhpcy5vblJlc2l6ZS5maWx0ZXIoKG4pID0+IG4gIT09IGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHNldE9uS2V5RG93bihoYW5kbGVyOiAoa2V5Q29kZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25LZXlEb3duID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICBmaXJlS2V5RG93bihrZXlDb2RlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5vbktleURvd24oa2V5Q29kZSk7XG4gICAgfVxuXG4gICAgc2V0T25LZXlVcChoYW5kbGVyOiAoa2V5Q29kZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25LZXlVcCA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgZmlyZUtleVVwKGtleUNvZGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLm9uS2V5VXAoa2V5Q29kZSk7XG4gICAgfVxuXG4gICAgc2V0T25LZXlQcmVzcyhoYW5kbGVyOiAoa2V5Q29kZTogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25LZXlQcmVzcyA9IGhhbmRsZXI7XG4gICAgfVxuXG4gICAgZmlyZUtleVByZXNzKGtleUNvZGU6IG51bWJlcikge1xuICAgICAgICB0aGlzLm9uS2V5UHJlc3Moa2V5Q29kZSk7XG4gICAgfVxuXG4gICAgc2V0T25LZXlzUHJlc3MoaGFuZGxlcjogKGtleUNvZGVzOiBudW1iZXJbXSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uS2V5c1ByZXNzID0gaGFuZGxlcjtcbiAgICB9XG5cblxuICAgIGZpcmVLZXlzUHJlc3Moa2V5Q29kZXM6IG51bWJlcltdKSB7XG4gICAgICAgIHRoaXMub25LZXlzUHJlc3Moa2V5Q29kZXMpO1xuICAgIH1cblxuICAgIHRvZ2dsZUZ1bGxzY3JlZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmZ1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbHNjcmVlbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbHNjcmVlbkVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZW11bGF0b3ItZnVsbHNjcmVlbi13b3JrYXJvdW5kXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZW11bGF0b3ItZnVsbHNjcmVlbi13b3JrYXJvdW5kXCIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5leGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChkb2N1bWVudCBhcyBhbnkpLndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgKGRvY3VtZW50IGFzIGFueSkud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGRvY3VtZW50IGFzIGFueSkubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGRvY3VtZW50IGFzIGFueSkubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLm1zRXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiB0aGlzLm9uRnVsbHNjcmVlbkNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZnVsbHNjcmVlbiA9IHRydWU7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5mdWxsc2NyZWVuRWxlbWVudCBhcyBhbnk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQud2Via2l0RW50ZXJGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC53ZWJraXRFbnRlckZ1bGxzY3JlZW4oKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mdWxsc2NyZWVuRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZW11bGF0b3ItZnVsbHNjcmVlbi13b3JrYXJvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG5leHQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRPbkZ1bGxzY3JlZW4ob25GdWxsc2NyZWVuQ2hhbmdlZDogKGZ1bGxzY3JlZW46IGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5vbkZ1bGxzY3JlZW5DaGFuZ2VkLnB1c2gob25GdWxsc2NyZWVuQ2hhbmdlZCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlT25GdWxsc2NyZWVuKG9uRnVsbHNjcmVlbkNoYW5nZWQ6ICh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlZCA9IHRoaXMub25GdWxsc2NyZWVuQ2hhbmdlZC5maWx0ZXIoKG4pID0+IG4gIT09IG9uRnVsbHNjcmVlbkNoYW5nZWQpO1xuICAgIH1cblxuICAgIHNldE9uS2V5Ym9hcmRWaXNpYmlsaXR5KG9uS2V5Ym9hcmRDaGFuZ2VkOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uS2V5Ym9hcmRDaGFuZ2VkLnB1c2gob25LZXlib2FyZENoYW5nZWQpO1xuICAgIH1cblxuICAgIHJlbW92ZU9uS2V5Ym9hcmRWaXNpYmlsaXR5KG9uS2V5Ym9hcmRDaGFuZ2VkOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uS2V5Ym9hcmRDaGFuZ2VkID0gdGhpcy5vbktleWJvYXJkQ2hhbmdlZC5maWx0ZXIoKG4pID0+IG4gIT09IG9uS2V5Ym9hcmRDaGFuZ2VkKTtcbiAgICB9XG5cbiAgICBzYXZlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLm9uU2F2ZVN0YXJ0ZWQoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub25TYXZlKClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdHlmLnN1Y2Nlc3MoXCJTYXZlZFwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uU2F2ZUVuZGVkKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm90eWYuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNhdmVFbmRlZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2V0T25TYXZlKGhhbmRsZXI6ICgpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgICAgICAgdGhpcy5vblNhdmUgPSBoYW5kbGVyO1xuICAgIH1cblxuICAgIHNldE9uU2F2ZVN0YXJ0ZWQoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5vblNhdmVTdGFydGVkID0gY2FsbGJhY2s7XG4gICAgfVxuICAgIFxuICAgIHNldE9uU2F2ZUVuZGVkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25TYXZlRW5kZWQgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBoaWRlTG9hZGluZ0xheWVyKCkge1xuICAgICAgICB0aGlzLmxvYWRpbmcuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgfVxuXG4gICAgc2hvd0xvYWRpbmdMYXllcigpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICB9XG5cbiAgICBzZXRMb2FkaW5nTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2FkZXJUZXh0LmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgc3dpdGNoVG9WaWRlbygpIHtcbiAgICAgICAgdGhpcy52aWRlby5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICB0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuXG4gICAgc2hvd0NsaWNrVG9TdGFydCgpIHtcbiAgICAgICAgdGhpcy5jbGlja1RvU3RhcnQuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdEtleWJvYXJkKCkge1xuICAgICAgICBsZXQga2V5Ym9hcmRWaXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgbGF5b3V0ID0ge1xuICAgICAgICAgICAgZW46IFtcbiAgICAgICAgICAgICAgICAne2VzY30gYCAxIDIgMyA0IDUgNiA3IDggOSAwIC0gPSB7YmtzcH0nLFxuICAgICAgICAgICAgICAgICdxIHcgZSByIHQgeSB1IGkgbyBwIHsgfSBcXFxcJyxcbiAgICAgICAgICAgICAgICAnYSBzIGQgZiBnIGggaiBrIGwgOyBcXCcgWyB7ZW50ZXJ9JyxcbiAgICAgICAgICAgICAgICAn4o6YIHogeCBjIHYgYiBuIG0gLCAuIC8gXSB7c3BhY2V9JyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVuTGF5b3V0RGlzcGxheSA9IHtcbiAgICAgICAgICAgICd7ZXNjfSc6ICdFU0MnLFxuICAgICAgICAgICAgJ3tia3NwfSc6ICdCYWNrc3BhY2UnLFxuICAgICAgICAgICAgJ3tlbnRlcn0nOiAn4o+OJyxcbiAgICAgICAgICAgICd7c3BhY2V9JzogJ1NwYWNlJyxcbiAgICAgICAgfTsgXG4gICAgICAgIGNvbnN0IHJ1TGF5b3V0RGlzcGxheSA9IHtcbiAgICAgICAgICAgICd7ZXNjfSc6ICdFU0MnLFxuICAgICAgICAgICAgJ3tia3NwfSc6ICdCYWNrc3BhY2UnLFxuICAgICAgICAgICAgJ3tlbnRlcn0nOiAn4o+OJyxcbiAgICAgICAgICAgICd7c3BhY2V9JzogJ1NwYWNlJyxcbiAgICAgICAgICAgICdxJzogJ9C5JywgJ3cnOiAn0YYnLCAnZSc6ICfRgycsICdyJzogJ9C6JywgJ3QnOiAn0LUnLCAneSc6ICfQvScsICd1JzogJ9CzJywgJ2knOiAn0YgnLCAnbyc6ICfRiScsICdwJzogJ9C3JywgJ3snOiAn0YUnLCAnfSc6ICfRiicsXG4gICAgICAgICAgICAnYSc6ICfRhCcsICdzJzogJ9GLJywgJ2QnOiAn0LInLCAnZic6ICfQsCcsICdnJzogJ9C/JywgJ2gnOiAn0YAnLCAnaic6ICfQvicsICdrJzogJ9C7JywgJ2wnOiAn0LQnLCAnOyc6ICfQticsICdcXCcnOiAn0Y0nLFxuICAgICAgICAgICAgJ3onOiAn0Y8nLCAneCc6ICfRhycsICdjJzogJ9GBJywgJ3YnOiAn0LwnLCAnYic6ICfQuCcsICduJzogJ9GCJywgJ20nOiAn0YwnLCAnLCc6ICfQsScsICcuJzogJ9GOJywgXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRpc3BsYXlPcmRlciA9IFtlbkxheW91dERpc3BsYXksIHJ1TGF5b3V0RGlzcGxheV07XG4gICAgICAgIGxldCBkaXNwbGF5SW5kZXggPSAwO1xuXG4gICAgICAgIGNvbnN0IGtleWJvYXJkRGl2ID0gdGhpcy5vcHRpb25zLmtleWJvYXJkRGl2IHx8IGNyZWF0ZURpdihcIlwiKTtcbiAgICAgICAga2V5Ym9hcmREaXYuY2xhc3NMaXN0LmFkZChcImVtdWxhdG9yLWtleWJvYXJkXCIpO1xuICAgICAgICBrZXlib2FyZERpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbihrZXlib2FyZERpdik7XG5cblxuICAgICAgICBjb25zdCBrZXlib2FyZCA9IG5ldyBLZXlib2FyZChrZXlib2FyZERpdiwge1xuICAgICAgICAgICAgbGF5b3V0LFxuICAgICAgICAgICAgbGF5b3V0TmFtZTogXCJlblwiLFxuICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheU9yZGVyW2Rpc3BsYXlJbmRleF0sXG4gICAgICAgICAgICBvbktleVByZXNzOiBidXR0b24gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChidXR0b24gPT09IFwi4o6YXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheUluZGV4ID0gKGRpc3BsYXlJbmRleCArIDEpICUgZGlzcGxheU9yZGVyLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBkaXNwbGF5T3JkZXJbZGlzcGxheUluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBrZXlDb2RlcyA9IGJ1dHRvblRvQ29kZShidXR0b24pO1xuICAgICAgICAgICAgICAgIGlmIChrZXlDb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlS2V5UHJlc3Moa2V5Q29kZXNbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5Q29kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVLZXlzUHJlc3Moa2V5Q29kZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2ZW50TW91c2VEb3duRGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHByZXZlbnRNb3VzZVVwRGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgICAgIHN0b3BNb3VzZURvd25Qcm9wYWdhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIHN0b3BNb3VzZVVwUHJvcGFnYXRpb246IHRydWUsXG4gICAgICAgICAgICBhdXRvVXNlVG91Y2hFdmVudHM6IHRydWUsXG4gICAgICAgICAgICB1c2VNb3VzZUV2ZW50czogdHJ1ZSxcbiAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICB0aGlzLnRvZ2dsZUtleWJvYXJkID0gKCkgPT4ge1xuICAgICAgICAgICAga2V5Ym9hcmRWaXNpYmxlID0gIWtleWJvYXJkVmlzaWJsZTtcbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYXkgPSBrZXlib2FyZFZpc2libGUgPyBcImJsb2NrXCIgOiBcIm5vbmVcIjtcbiAgICAgICAgICAgIGtleWJvYXJkRGl2LnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdGhpcy5vbktleWJvYXJkQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG5leHQoa2V5Ym9hcmRWaXNpYmxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5rZXlib2FyZFZpc2libGUgPSBrZXlib2FyZFZpc2libGU7XG4gICAgICAgICAgICByZXR1cm4ga2V5Ym9hcmRWaXNpYmxlO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmtleWJvYXJkRGl2KSB7XG4gICAgICAgICAgICB0aGlzLm1vdXNlT3ZlcmxheS5hcHBlbmRDaGlsZChrZXlib2FyZERpdik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvYWRpbmdMYXllcigpIHtcbiAgICByZXR1cm4gY3JlYXRlRGl2KFwiZW11bGF0b3ItbG9hZGluZ1wiLCBgXG48ZGl2IGNsYXNzPSdlbXVsYXRvci1sb2FkaW5nLWlubmVyJz5cbjxwcmUgY2xhc3M9J2VtdWxhdG9yLWxvYWRpbmctcHJlLTEnPlxuICAgICAgICBfICAgICAgICAgICAgICAgIF9fXG4gICAgICAgKF8pX19fXyAgICAgIF9fX18vIC9fX18gIF9fX19fIF9fX19fX19fXyAgX19fXyBfX19cbiAgICAgIC8gLyBfX18vX19fX18vIF9fICAvIF9fIFxcXFwvIF9fXy8vIF9fXy8gX18gXFxcXC8gX18gXFxgX18gXFxcXFxuICAgICAvIChfXyAgKV9fX19fLyAvXy8gLyAvXy8gKF9fICApLyAvX18vIC9fLyAvIC8gLyAvIC8gL1xuICBfXy8gL19fX18vICAgICAgXFxcXF9fLF8vXFxcXF9fX18vX19fXyhfKV9fXy9cXFxcX19fXy9fLyAvXy8gL18vXG4gL19fXy9cbjwvcHJlPlxuPHByZSBjbGFzcz0nZW11bGF0b3ItbG9hZGluZy1wcmUtMic+XG48L3ByZT5cbjxkaXYgY2xhc3M9J2VtdWxhdG9yLWxvYWRlcic+XG48L2Rpdj5cbjwvZGl2PlxuYCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vdXNlT3ZlcmxheUxheWVyKCkge1xuICAgIHJldHVybiBjcmVhdGVEaXYoXCJlbXVsYXRvci1tb3VzZS1vdmVybGF5XCIsIFwiXCIpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGlja1RvU3RhcnRMYXllcigpIHtcbiAgICByZXR1cm4gY3JlYXRlRGl2KFwiZW11bGF0b3ItY2xpY2stdG8tc3RhcnQtb3ZlcmxheVwiLCBgXG48ZGl2IGNsYXNzPVwiZW11bGF0b3ItY2xpY2stdG8tc3RhcnQtdGV4dFwiPlByZXNzIHRvIHN0YXJ0PC9kaXY+XG48ZGl2IGNsYXNzPVwiZW11bGF0b3ItY2xpY2stdG8tc3RhcnQtaWNvblwiPjwvZGl2PlxuYCk7XG59XG5cbmZ1bmN0aW9uIGJ1dHRvblRvQ29kZShidXR0b246IHN0cmluZyk6IG51bWJlcltdIHtcbiAgICBpZiAoYnV0dG9uLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgaWYgKGJ1dHRvbiA9PT0gXCJ7ZW50ZXJ9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbS0JEX2VudGVyXTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwie3NoaWZ0fVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW0tCRF9sZWZ0c2hpZnRdO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJ7YmtzcH1cIikge1xuICAgICAgICAgICAgcmV0dXJuIFtLQkRfYmFja3NwYWNlXTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwie2xvY2t9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbS0JEX2NhcHNsb2NrXTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwie3RhYn1cIikge1xuICAgICAgICAgICAgcmV0dXJuIFtLQkRfdGFiXTtcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwie3NwYWNlfVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW0tCRF9zcGFjZV07XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBcIntlc2N9XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBbS0JEX2VzY107XG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBcImN0cmxcIikge1xuICAgICAgICAgICAgcmV0dXJuIFtLQkRfbGVmdGN0cmxdO1xuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJ7YWx0fVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gW0tCRF9sZWZ0YWx0XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVua25vd24gYnV0dG9uXCIsIGJ1dHRvbik7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCIsXCIpIHtcbiAgICAgICAgcmV0dXJuIFtLQkRfY29tbWFdO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBcIi5cIikge1xuICAgICAgICByZXR1cm4gW0tCRF9wZXJpb2RdO1xuICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBcIidcIikge1xuICAgICAgICByZXR1cm4gW0tCRF9xdW90ZV07XG4gICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwiOlwiKSB7XG4gICAgICAgIHJldHVybiBbS0JEX3NlbWljb2xvbl07XG4gICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwie1wiKSB7XG4gICAgICAgIHJldHVybiBbS0JEX2xlZnRzaGlmdCwgS0JEX2xlZnRicmFja2V0XTtcbiAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJ9XCIpIHtcbiAgICAgICAgcmV0dXJuIFtLQkRfbGVmdHNoaWZ0LCBLQkRfcmlnaHRicmFja2V0XTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlDb2RlID0gZG9tVG9LZXlDb2RlKGJ1dHRvbi50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCkpO1xuICAgIGlmIChrZXlDb2RlID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2tleUNvZGVdO1xufVxuIiwiaW1wb3J0IHsgQ29tbWFuZEludGVyZmFjZSB9IGZyb20gXCJlbXVsYXRvcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpZmVjeWNsZShjaTogQ29tbWFuZEludGVyZmFjZSkge1xuICAgIGxldCBoaWRkZW4gPSBcIlwiO1xuICAgIGxldCB2aXNpYmlsaXR5Q2hhbmdlID0gXCJcIjtcblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQuaGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGhpZGRlbiA9IFwiaGlkZGVuXCI7XG4gICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiAoZG9jdW1lbnQgYXMgYW55KS5tb3pIaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaGlkZGVuID0gXCJtb3pIaWRkZW5cIjtcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwibW96dmlzaWJpbGl0eWNoYW5nZVwiO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIChkb2N1bWVudCBhcyBhbnkpLm1zSGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGhpZGRlbiA9IFwibXNIaWRkZW5cIjtcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9IFwibXN2aXNpYmlsaXR5Y2hhbmdlXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgKGRvY3VtZW50IGFzIGFueSkud2Via2l0SGlkZGVuICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGhpZGRlbiA9IFwid2Via2l0SGlkZGVuXCI7XG4gICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSBcIndlYmtpdHZpc2liaWxpdHljaGFuZ2VcIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2aXNpYmlsaXRIYW5kbGVyKCkge1xuICAgICAgICAoZG9jdW1lbnQgYXMgYW55KVtoaWRkZW5dID8gY2kucGF1c2UoKSA6IGNpLnJlc3VtZSgpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodmlzaWJpbGl0eUNoYW5nZSBhcyBhbnksIHZpc2liaWxpdEhhbmRsZXIpO1xuICAgIGNpLmV2ZW50cygpLm9uRXhpdCgoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodmlzaWJpbGl0eUNoYW5nZSBhcyBhbnksIHZpc2liaWxpdEhhbmRsZXIpO1xuICAgIH0pO1xufSIsImV4cG9ydCBjb25zdCBwb2ludGVyID0gaW5pdEJpbmQoKTtcblxuZnVuY3Rpb24gaW5pdEJpbmQoKSB7XG4gICAgY29uc3QgaXNNb2JpbGUgPSAvaVBob25lfGlQYWR8aVBvZHxBbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBjb25zdCBpc1RvdWNoID0gaXNNb2JpbGUgJiYgISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KTtcbiAgICBjb25zdCBpc1BvaW50ZXIgPSBpc01vYmlsZSAmJiAod2luZG93LlBvaW50ZXJFdmVudCA/IHRydWUgOiBmYWxzZSk7XG4gICAgY29uc3QgaXNNU1BvaW50ZXIgPSBpc01vYmlsZSAmJiAod2luZG93Lk1TUG9pbnRlckV2ZW50ID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICBsZXQgY2FuTG9jayA9IHRydWU7XG5cbiAgICBjb25zdCBzdGFydGVyczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBjaGFuZ2Vyczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBlbmRlcnM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgbGVhdmVyczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBwcmV2ZW50czogc3RyaW5nW10gPSBbXTtcblxuICAgIGlmIChpc1BvaW50ZXIpIHtcbiAgICAgICAgc3RhcnRlcnMucHVzaChcInBvaW50ZXJkb3duXCIpO1xuICAgICAgICBlbmRlcnMucHVzaChcInBvaW50ZXJ1cFwiLCBcInBvaW50ZXJjYW5jZWxcIik7XG4gICAgICAgIGNoYW5nZXJzLnB1c2goXCJwb2ludGVybW92ZVwiKTtcbiAgICAgICAgcHJldmVudHMucHVzaChcInRvdWNoc3RhcnRcIiwgXCJ0b3VjaG1vdmVcIiwgXCJ0b3VjaGVuZFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzTVNQb2ludGVyKSB7XG4gICAgICAgIHN0YXJ0ZXJzLnB1c2goXCJNU1BvaW50ZXJEb3duXCIpO1xuICAgICAgICBjaGFuZ2Vycy5wdXNoKFwiTVNQb2ludGVyTW92ZVwiKTtcbiAgICAgICAgZW5kZXJzLnB1c2goXCJNU1BvaW50ZXJVcFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgY2FuTG9jayA9IGZhbHNlO1xuICAgICAgICBzdGFydGVycy5wdXNoKFwidG91Y2hzdGFydFwiLCBcIm1vdXNlZG93blwiKTtcbiAgICAgICAgY2hhbmdlcnMucHVzaChcInRvdWNobW92ZVwiKTtcbiAgICAgICAgZW5kZXJzLnB1c2goXCJ0b3VjaGVuZFwiLCBcInRvdWNoY2FuY2VsXCIsIFwibW91c2V1cFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydGVycy5wdXNoKFwibW91c2Vkb3duXCIpO1xuICAgICAgICBjaGFuZ2Vycy5wdXNoKFwibW91c2Vtb3ZlXCIpO1xuICAgICAgICBlbmRlcnMucHVzaChcIm1vdXNldXBcIik7XG4gICAgICAgIGxlYXZlcnMucHVzaChcIm1vdXNlbGVhdmVcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbW9iaWxlOiBpc01vYmlsZSxcbiAgICAgICAgY2FuTG9jayxcbiAgICAgICAgc3RhcnRlcnMsXG4gICAgICAgIGNoYW5nZXJzLFxuICAgICAgICBlbmRlcnMsXG4gICAgICAgIHByZXZlbnRzLFxuICAgICAgICBsZWF2ZXJzLFxuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnRlclN0YXRlIHtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIG1YOiBudW1iZXIsXG4gICAgbVk6IG51bWJlcixcbiAgICBidXR0b24/OiBudW1iZXIsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQb2ludGVyU3RhdGUoZTogRXZlbnQsIGVsOiBIVE1MRWxlbWVudCk6IFBvaW50ZXJTdGF0ZSB7XG4gICAgaWYgKGUudHlwZS5tYXRjaCgvXnRvdWNoLykpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gZSBhcyBUb3VjaEV2ZW50O1xuICAgICAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBldnQudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC54LFxuICAgICAgICAgICAgeTogZXZ0LnRhcmdldFRvdWNoZXNbMF0uY2xpZW50WSAtIHJlY3QueSxcbiAgICAgICAgICAgIG1YOiAwLFxuICAgICAgICAgICAgbVk6IDAsXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChlLnR5cGUubWF0Y2goL15wb2ludGVyLykpIHtcbiAgICAgICAgY29uc3QgZXZ0ID0gZSBhcyBQb2ludGVyRXZlbnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBldnQub2Zmc2V0WCxcbiAgICAgICAgICAgIHk6IGV2dC5vZmZzZXRZLFxuICAgICAgICAgICAgbVg6IGV2dC5tb3ZlbWVudFgsXG4gICAgICAgICAgICBtWTogZXZ0Lm1vdmVtZW50WSxcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGV2dCA9IGUgYXMgTW91c2VFdmVudDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGV2dC5vZmZzZXRYLFxuICAgICAgICAgICAgeTogZXZ0Lm9mZnNldFksXG4gICAgICAgICAgICBtWDogZXZ0Lm1vdmVtZW50WCxcbiAgICAgICAgICAgIG1ZOiBldnQubW92ZW1lbnRZLFxuICAgICAgICAgICAgYnV0dG9uOiBldnQuYnV0dG9uID09PSAwID8gMCA6IDEsXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBwb2ludGVycyA9IHtcbiAgICBiaW5kOiBwb2ludGVyLFxuICAgIGdldFBvaW50ZXJTdGF0ZSxcbn07XG4iLCJpbXBvcnQgeyBsYXllcnMgfSBmcm9tIFwiLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBsaWZlY3ljbGUgfSBmcm9tIFwiLi9kb20vbGlmZWN5Y2xlXCI7XG5pbXBvcnQgeyByZXNvbHZlQnVuZGxlIH0gZnJvbSBcIi4vbmV0d29yay94aHJcIjtcbmltcG9ydCB7IF8yZCB9IGZyb20gXCIuL2dyYXBoaWNzL18yZFwiO1xuaW1wb3J0IHsgd2ViR2wgfSBmcm9tIFwiLi9ncmFwaGljcy93ZWJnbFwiO1xuaW1wb3J0IHsgdmlkZW8gfSBmcm9tIFwiLi9ncmFwaGljcy92aWRlb1wiO1xuaW1wb3J0IHsga2V5Ym9hcmQgfSBmcm9tIFwiLi9jb250cm9scy9rZXlib2FyZFwiO1xuaW1wb3J0IHsgbW91c2UgfSBmcm9tIFwiLi9jb250cm9scy9tb3VzZVwiO1xuaW1wb3J0IHsgbmlwcGxlIH0gZnJvbSBcIi4vY29udHJvbHMvbmlwcGxlXCI7XG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcIi4vY29udHJvbHMvb3B0aW9uc1wiO1xuaW1wb3J0IHsgZG9tVG9LZXlDb2RlLCBkb21Ub0tleUNvZGVzLCBrZXlDb2Rlc1RvRG9tLCBuYW1lZEtleUNvZGVzIH0gZnJvbSBcIi4vZG9tL2tleXNcIjtcbmltcG9ydCB7IGF1ZGlvTm9kZSB9IGZyb20gXCIuL3NvdW5kL2F1ZGlvLW5vZGVcIjtcbmltcG9ydCB7IG5vdHlmIH0gZnJvbSBcIi4vbm90aWZpY2F0aW9uL25vdHlmXCI7XG5pbXBvcnQgeyBzYXZlLCBsb2FkIH0gZnJvbSBcIi4vcGVyc2lzdC9zYXZlLWxvYWRcIjtcbmltcG9ydCB7IGdldEdyaWQgfSBmcm9tIFwiLi9jb250cm9scy9ncmlkXCI7XG5pbXBvcnQgeyBwb2ludGVycyB9IGZyb20gXCIuL2RvbS9wb2ludGVyXCI7XG5cbmltcG9ydCB7IERvc0luc3RhbmNlLCBEb3NGYWN0b3J5VHlwZSwgRG9zT3B0aW9ucyB9IGZyb20gXCIuL2pzLWRvc1wiO1xuXG5leHBvcnQgY2xhc3MgRW11bGF0b3JzVWkge1xuICAgIGRvbSA9IHtcbiAgICAgICAgbGF5ZXJzLCAvLyBET00gY29tcG9uZW50cyB0aGF0IHVzZWQgYnkganMtZG9zIHBsYXllclxuICAgICAgICBsaWZlY3ljbGUsIC8vIGNvbXBuZW50IHRoYXQgbWFuZ2VzIGxpZWZjeWNsZSBldmVudHNcbiAgICAgICAgcG9pbnRlcnMsIC8vIGFic3RyYWN0aW9uIG92ZXIgbW91c2UsIHRvdWNoLCBwb2ludGVyIEFQSVxuICAgIH07XG5cbiAgICBuZXR3b3JrID0ge1xuICAgICAgICByZXNvbHZlQnVuZGxlLCAvLyBHRVQgcmVxdWVzdCB0byBkb3dubG9hZCBidW5kbGVzXG4gICAgfTtcblxuICAgIGdyYXBoaWNzID0ge1xuICAgICAgICB3ZWJHbCwgLy8gZGVmYXVsdCB3ZWJnbCByZW5kZXJlclxuICAgICAgICBfMmQsIC8vIGZhbGxiYWNrIHJlbmRlcmVyXG4gICAgICAgIHZpZGVvLCAvLyBkZWZhdWx0IGphbnVzIHJlbmRlcmVyXG4gICAgfTtcblxuICAgIHNvdW5kID0ge1xuICAgICAgICBhdWRpb05vZGUsIC8vIGRlZmF1bHQgYXVpZGlvIHByb2Nlc3NvclxuICAgIH07XG5cbiAgICBwZXJzaXN0ID0ge1xuICAgICAgICBzYXZlLCAvLyBzdG9yZSB1cGRhdGVkIGJ1bmRsZSBpbnRvICdwZXJzaXN0LmRiJ1xuICAgICAgICBsb2FkLCAvLyBnZXQgdXBkYXRlZCBidW5kbGUgZm9ybSBgcGVyc2lzdC5kYmBcbiAgICB9O1xuXG4gICAgY29udHJvbHMgPSB7XG4gICAgICAgIGdldEdyaWQsIC8vIHJldHVybnMgZ3JpZCBwcm9jZXNzb3IgYnkgZ3JpZCB0eXBlXG4gICAgICAgIG5hbWVkS2V5Q29kZXMsIC8vIG1hcHBpbmcgZnJvbSBrZXkgbmFtZSB0byBpdCdzIGtleSBjb2RlXG4gICAgICAgIGRvbVRvS2V5Q29kZXMsIC8vIG1hcHBpbmcgZnJvbSBET00ga2V5IGNvZGVzIHRvIGpzLWRvcyBrZXkgY29kZXNcbiAgICAgICAgZG9tVG9LZXlDb2RlLCAvLyBmdW5jdGlvbiB0aGF0IGNvbnZlcnRzIERPTSBrZXkgY29kZSB0byBqcy1kb3Mga2V5IGNvZGVcbiAgICAgICAga2V5Q29kZXNUb0RvbSwgLy8gbWFwcGluZyBmcm9tIGpzLWRvcyBrZXkgY29kZXMgdG8gRE9NIGtleSBjb2Rlc1xuICAgICAgICBrZXlib2FyZCwgLy8gZGVmYXVsdCBrZXlib2FyZCBwcm9jZXNzb3JcbiAgICAgICAgbW91c2UsIC8vIGRlZmF1bHQgbW91c2UgcHJvY2Vzc29yXG4gICAgICAgIG5pcHBsZSwgLy8gbXVsdGl0b3VjaCBjb250cm9sIGZvciBlbXVsYXRpbmcga2V5Ym9hcmQgb24gbW9iaWxlc1xuICAgICAgICBvcHRpb25zIC8vIGRlZmF1bHQgb3B0aW9ucyBjb250cm9sIChmdWxsc2NyZWVuLCBzYXZlLCBldGMuKVxuICAgIH07XG5cbiAgICBub3RpZmljYXRpb25zID0ge1xuICAgICAgICBub3R5ZiwgLy8gZGVmYXVsdCBub3RpZmljYXRpb25zIHN5c3RlbVxuICAgIH07XG5cbiAgICAvLyBkZWZhdWx0IHBsYXllclxuICAgIGRvczogRG9zRmFjdG9yeVR5cGUgPSAocm9vdDogSFRNTERpdkVsZW1lbnQsIG9wdGlvbnM/OiBEb3NPcHRpb25zKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgRG9zSW5zdGFuY2Uocm9vdCwgdGhpcywgb3B0aW9ucyB8fCB7fSk7XG4gICAgfTtcbn1cblxuY29uc3QgaW1wbCA9IG5ldyBFbXVsYXRvcnNVaSgpO1xuKHdpbmRvdyBhcyBhbnkpLmVtdWxhdG9yc1VpID0gaW1wbDtcbih3aW5kb3cgYXMgYW55KS5Eb3MgPSBpbXBsLmRvcztcbiIsImltcG9ydCB7IExheWVycyB9IGZyb20gXCIuLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gXzJkKGxheWVyczogTGF5ZXJzLCBjaTogQ29tbWFuZEludGVyZmFjZSkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGxheWVycy5jYW52YXM7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSAyZCBjb250ZXh0IG9uIGdpdmVuIGNhbnZhc1wiKTtcbiAgICB9XG5cbiAgICBsZXQgY29udGFpbmVyV2lkdGggPSBsYXllcnMud2lkdGg7XG4gICAgbGV0IGNvbnRhaW5lckhlaWdodCA9IGxheWVycy5oZWlnaHQ7XG4gICAgbGV0IGZyYW1lV2lkdGggPSAwO1xuICAgIGxldCBmcmFtZUhlaWdodCA9IDA7XG5cbiAgICBjb25zdCBvblJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYXNwZWN0ID0gZnJhbWVXaWR0aCAvIGZyYW1lSGVpZ2h0O1xuXG4gICAgICAgIGxldCB3aWR0aCA9IGNvbnRhaW5lcldpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gY29udGFpbmVyV2lkdGggLyBhc3BlY3Q7XG5cbiAgICAgICAgaWYgKGhlaWdodCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSBjb250YWluZXJIZWlnaHQgKiBhc3BlY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS50b3AgPSAoY29udGFpbmVySGVpZ2h0IC0gaGVpZ2h0KSAvIDIgKyBcInB4XCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gKGNvbnRhaW5lcldpZHRoIC0gd2lkdGgpIC8gMiArIFwicHhcIjtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uUmVzaXplTGF5ZXIgPSAodzogbnVtYmVyLCBoOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29udGFpbmVyV2lkdGggPSB3O1xuICAgICAgICBjb250YWluZXJIZWlnaHQgPSBoO1xuICAgICAgICBvblJlc2l6ZSgpO1xuICAgIH1cbiAgICBsYXllcnMuYWRkT25SZXNpemUob25SZXNpemVMYXllcik7XG5cbiAgICBsZXQgcmdiYSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgwKTtcbiAgICBjb25zdCBvblJlc2l6ZUZyYW1lID0gKHc6IG51bWJlciwgaDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGZyYW1lV2lkdGggPSB3O1xuICAgICAgICBmcmFtZUhlaWdodCA9IGg7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGZyYW1lV2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBmcmFtZUhlaWdodDtcbiAgICAgICAgcmdiYSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3ICogaCAqIDQpO1xuICAgICAgICBvblJlc2l6ZSgpO1xuICAgIH07XG4gICAgY2kuZXZlbnRzKCkub25GcmFtZVNpemUob25SZXNpemVGcmFtZSk7XG4gICAgY2kuZXZlbnRzKCkub25GcmFtZSgocmdiKSA9PiB7XG4gICAgICAgIGxldCByZ2JPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgcmdiYU9mZnNldCA9IDBcblxuICAgICAgICB3aGlsZSAocmdiYU9mZnNldCA8IHJnYmEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZ2JhW3JnYmFPZmZzZXQrK10gPSByZ2JbcmdiT2Zmc2V0KytdO1xuICAgICAgICAgICAgcmdiYVtyZ2JhT2Zmc2V0KytdID0gcmdiW3JnYk9mZnNldCsrXTtcbiAgICAgICAgICAgIHJnYmFbcmdiYU9mZnNldCsrXSA9IHJnYltyZ2JPZmZzZXQrK107XG4gICAgICAgICAgICByZ2JhW3JnYmFPZmZzZXQrK10gPSAyNTU7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LnB1dEltYWdlRGF0YShuZXcgSW1hZ2VEYXRhKHJnYmEsIGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0KSwgMCwgMCk7XG4gICAgfSk7XG5cbiAgICBvblJlc2l6ZUZyYW1lKGNpLndpZHRoKCksIGNpLmhlaWdodCgpKTtcblxuICAgIGNpLmV2ZW50cygpLm9uRXhpdCgoKSA9PiB7XG4gICAgICAgIGxheWVycy5yZW1vdmVPblJlc2l6ZShvblJlc2l6ZUxheWVyKTtcbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IExheWVycyB9IGZyb20gXCIuLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuaW1wb3J0IHsgSmFudXNNZXNzYWdlVHlwZSB9IGZyb20gXCJlbXVsYXRvcnMvZGlzdC90eXBlcy9qYW51cy9qYW51cy1pbXBsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB2aWRlbyhsYXllcnM6IExheWVycywgY2k6IENvbW1hbmRJbnRlcmZhY2UpIHtcbiAgICBsYXllcnMuc3dpdGNoVG9WaWRlbygpO1xuXG4gICAgY2kuZXZlbnRzKCkub25NZXNzYWdlKChtc2dUeXBlOiBKYW51c01lc3NhZ2VUeXBlIHwgc3RyaW5nLCBzdHJlYW06IE1lZGlhU3RyZWFtKSA9PiB7XG4gICAgICAgIGlmIChtc2dUeXBlID09PSBcIm9ucmVtb3Rlc3RyZWFtXCIpIHtcblx0XHRcdFx0XHRcdCh3aW5kb3cgYXMgYW55KS5KYW51cy5hdHRhY2hNZWRpYVN0cmVhbShsYXllcnMudmlkZW8sIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IExheWVycyB9IGZyb20gXCIuLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuXG5jb25zdCB2c1NvdXJjZSA9IGBcbmF0dHJpYnV0ZSB2ZWM0IGFWZXJ0ZXhQb3NpdGlvbjtcbmF0dHJpYnV0ZSB2ZWMyIGFUZXh0dXJlQ29vcmQ7XG5cbnZhcnlpbmcgaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkO1xuXG52b2lkIG1haW4odm9pZCkge1xuICBnbF9Qb3NpdGlvbiA9IGFWZXJ0ZXhQb3NpdGlvbjtcbiAgdlRleHR1cmVDb29yZCA9IGFUZXh0dXJlQ29vcmQ7XG59XG5gO1xuXG5jb25zdCBmc1NvdXJjZSA9IGBcbnZhcnlpbmcgaGlnaHAgdmVjMiB2VGV4dHVyZUNvb3JkO1xudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XG5cblxudm9pZCBtYWluKHZvaWQpIHtcbiAgaGlnaHAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XG4gIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IuciwgY29sb3IuZywgY29sb3IuYiwgMS4wKTtcbn1cbmA7XG5cbmV4cG9ydCBmdW5jdGlvbiB3ZWJHbChsYXllcnM6IExheWVycywgY2k6IENvbW1hbmRJbnRlcmZhY2UpIHtcbiAgICBjb25zdCBjYW52YXMgPSBsYXllcnMuY2FudmFzO1xuICAgIGNvbnN0IGdsID0gY2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKTtcbiAgICBpZiAoZ2wgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGNyZWF0ZSB3ZWJnbCBjb250ZXh0IG9uIGdpdmVuIGNhbnZhc1wiKTtcbiAgICB9XG5cbiAgICBjb25zdCBzaGFkZXJQcm9ncmFtID0gaW5pdFNoYWRlclByb2dyYW0oZ2wsIHZzU291cmNlLCBmc1NvdXJjZSk7XG4gICAgY29uc3QgdmVydGV4UG9zaXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAnYVZlcnRleFBvc2l0aW9uJyk7XG4gICAgY29uc3QgdGV4dHVyZUNvb3JkID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ2FUZXh0dXJlQ29vcmQnKTtcbiAgICBjb25zdCB1U2FtcGxlciA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAndVNhbXBsZXInKTtcblxuICAgIGluaXRCdWZmZXJzKGdsLCB2ZXJ0ZXhQb3NpdGlvbiwgdGV4dHVyZUNvb3JkKTtcblxuICAgIGNvbnN0IHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG5cbiAgICBjb25zdCBwaXhlbCA9IG5ldyBVaW50OEFycmF5KFswLCAwLCAwXSk7XG4gICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0IsXG4gICAgICAgICAgICAgICAgICAxLCAxLCAwLCBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgICAgICAgICBwaXhlbCk7XG5cbiAgICBnbC51c2VQcm9ncmFtKHNoYWRlclByb2dyYW0pO1xuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xuICAgIGdsLnVuaWZvcm0xaSh1U2FtcGxlciwgMCk7XG5cbiAgICBsZXQgY29udGFpbmVyV2lkdGggPSBsYXllcnMud2lkdGg7XG4gICAgbGV0IGNvbnRhaW5lckhlaWdodCA9IGxheWVycy5oZWlnaHQ7XG4gICAgbGV0IGZyYW1lV2lkdGggPSAwO1xuICAgIGxldCBmcmFtZUhlaWdodCA9IDA7XG5cbiAgICBjb25zdCBvblJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgYXNwZWN0ID0gZnJhbWVXaWR0aCAvIGZyYW1lSGVpZ2h0O1xuXG4gICAgICAgIGxldCB3aWR0aCA9IGNvbnRhaW5lcldpZHRoO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gY29udGFpbmVyV2lkdGggLyBhc3BlY3Q7XG5cbiAgICAgICAgaWYgKGhlaWdodCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICAgICAgaGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSBjb250YWluZXJIZWlnaHQgKiBhc3BlY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS50b3AgPSAoY29udGFpbmVySGVpZ2h0IC0gaGVpZ2h0KSAvIDIgKyBcInB4XCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gKGNvbnRhaW5lcldpZHRoIC0gd2lkdGgpIC8gMiArIFwicHhcIjtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyBcInB4XCI7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uUmVzaXplTGF5ZXIgPSAodzogbnVtYmVyLCBoOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29udGFpbmVyV2lkdGggPSB3O1xuICAgICAgICBjb250YWluZXJIZWlnaHQgPSBoO1xuICAgICAgICBvblJlc2l6ZSgpO1xuICAgIH1cbiAgICBsYXllcnMuYWRkT25SZXNpemUob25SZXNpemVMYXllcik7XG5cbiAgICBjb25zdCBvblJlc2l6ZUZyYW1lID0gKHc6IG51bWJlciwgaDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGZyYW1lV2lkdGggPSB3O1xuICAgICAgICBmcmFtZUhlaWdodCA9IGg7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGZyYW1lV2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBmcmFtZUhlaWdodDtcbiAgICAgICAgZ2wudmlld3BvcnQoMCwgMCwgZnJhbWVXaWR0aCwgZnJhbWVIZWlnaHQpO1xuICAgICAgICBvblJlc2l6ZSgpO1xuICAgIH07XG4gICAgY2kuZXZlbnRzKCkub25GcmFtZVNpemUob25SZXNpemVGcmFtZSk7XG4gICAgY2kuZXZlbnRzKCkub25GcmFtZSgocmdiKSA9PiB7XG4gICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCLFxuICAgICAgICAgICAgICAgICAgICAgIGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0LCAwLCBnbC5SR0IsIGdsLlVOU0lHTkVEX0JZVEUsXG4gICAgICAgICAgICAgICAgICAgICAgcmdiKTtcbiAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDYpO1xuICAgIH0pO1xuXG4gICAgb25SZXNpemVGcmFtZShjaS53aWR0aCgpLCBjaS5oZWlnaHQoKSk7XG5cbiAgICBjaS5ldmVudHMoKS5vbkV4aXQoKCkgPT4ge1xuICAgICAgICBsYXllcnMucmVtb3ZlT25SZXNpemUob25SZXNpemVMYXllcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluaXRTaGFkZXJQcm9ncmFtKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZzU291cmNlOiBzdHJpbmcsIGZzU291cmNlOiBzdHJpbmcpIHtcbiAgY29uc3QgdmVydGV4U2hhZGVyID0gbG9hZFNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdnNTb3VyY2UpO1xuICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGxvYWRTaGFkZXIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgZnNTb3VyY2UpO1xuXG4gIGNvbnN0IHNoYWRlclByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCkgYXMgV2ViR0xTaGFkZXI7XG4gIGdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICBnbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuICBnbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcblxuICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyUHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gaW5pdGlhbGl6ZSB0aGUgc2hhZGVyIHByb2dyYW06ICcgKyBnbC5nZXRQcm9ncmFtSW5mb0xvZyhzaGFkZXJQcm9ncmFtKSk7XG4gIH1cblxuICByZXR1cm4gc2hhZGVyUHJvZ3JhbTtcbn1cblxuZnVuY3Rpb24gbG9hZFNoYWRlcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBzaGFkZXJUeXBlOiBHTGVudW0sIHNvdXJjZTogc3RyaW5nKSB7XG4gIGNvbnN0IHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKSBhcyBXZWJHTFNoYWRlcjtcbiAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc291cmNlKTtcbiAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuICAgICAgY29uc3QgaW5mbyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcbiAgICAgIGdsLmRlbGV0ZVNoYWRlcihzaGFkZXIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6ICcgKyBpbmZvKTtcbiAgfVxuXG4gIHJldHVybiBzaGFkZXI7XG59XG5cbmZ1bmN0aW9uIGluaXRCdWZmZXJzKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQsIHZlcnRleFBvc2l0aW9uOiBudW1iZXIsIHRleHR1cmVDb29yZDogbnVtYmVyKSB7XG4gIGNvbnN0IHBvc2l0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwb3NpdGlvbkJ1ZmZlcik7XG4gIGNvbnN0IHBvc2l0aW9ucyA9IFtcbiAgICAtMS4wLCAtMS4wLCAgMC4wLFxuICAgICAxLjAsIC0xLjAsICAwLjAsXG4gICAgIDEuMCwgIDEuMCwgIDAuMCxcbiAgICAtMS4wLCAtMS4wLCAgMC4wLFxuICAgICAxLjAsICAxLjAsICAwLjAsXG4gICAgLTEuMCwgIDEuMCwgIDAuMCxcbiAgXTtcbiAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25zKSwgZ2wuU1RBVElDX0RSQVcpO1xuICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHZlcnRleFBvc2l0aW9uLCAzLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh2ZXJ0ZXhQb3NpdGlvbik7XG5cbiAgY29uc3QgdGV4dHVyZUNvb3JkQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0ZXh0dXJlQ29vcmRCdWZmZXIpO1xuICBjb25zdCB0ZXh0dXJlQ29vcmRpbmF0ZXMgPSBbXG4gICAgMC4wLCAgMS4wLFxuICAgIDEuMCwgIDEuMCxcbiAgICAxLjAsICAwLjAsXG4gICAgMC4wLCAgMS4wLFxuICAgIDEuMCwgIDAuMCxcbiAgICAwLjAsICAwLjAsXG4gIF07XG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRleHR1cmVDb29yZGluYXRlcyksXG4gICAgICAgICAgICAgICAgZ2wuU1RBVElDX0RSQVcpO1xuXG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGV4dHVyZUNvb3JkLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0ZXh0dXJlQ29vcmQpO1xufVxuIiwiaW1wb3J0IHsgRW11bGF0b3JzLCBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcImVtdWxhdG9yc1wiO1xuaW1wb3J0IHsgVHJhbnNwb3J0TGF5ZXIgfSBmcm9tIFwiZW11bGF0b3JzL2Rpc3QvdHlwZXMvcHJvdG9jb2wvcHJvdG9jb2xcIjtcbmltcG9ydCB7IEVtdWxhdG9yc1VpIH0gZnJvbSBcIi4vZW11bGF0b3JzLXVpXCI7XG5pbXBvcnQgeyBMYXllcnMsIExheWVyc09wdGlvbnMgfSBmcm9tIFwiLi9kb20vbGF5ZXJzXCI7XG5pbXBvcnQgeyBCdWlsZCB9IGZyb20gXCIuL2J1aWxkXCI7XG5cbmltcG9ydCB7IGV4dHJhY3RMYXllcnNDb25maWcsIExlZ2FjeUxheWVyc0NvbmZpZywgTGF5ZXJzQ29uZmlnIH0gZnJvbSBcIi4vY29udHJvbHMvbGF5ZXJzLWNvbmZpZ1wiO1xuXG5pbXBvcnQgeyBpbml0TGVnYWN5TGF5ZXJzQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xzL2xlZ2FjeS1sYXllcnMtY29udHJvbFwiO1xuaW1wb3J0IHsgaW5pdE51bGxMYXllcnNDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbHMvbnVsbC1sYXllcnMtY29udHJvbFwiO1xuaW1wb3J0IHsgaW5pdExheWVyc0NvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9scy9sYXllcnMtY29udHJvbFwiO1xuXG5pbXBvcnQgeyBwb2ludGVycyB9IGZyb20gXCIuL2RvbS9wb2ludGVyXCI7XG5cbmRlY2xhcmUgY29uc3QgZW11bGF0b3JzOiBFbXVsYXRvcnM7XG5cbmV4cG9ydCB0eXBlIEVtdWxhdG9yRnVuY3Rpb24gPSBcImRvc2JveFdvcmtlclwiIHwgXCJkb3Nib3hEaXJlY3RcIiB8IFwiZG9zYm94Tm9kZVwiIHwgXCJqYW51c1wiIHwgXCJiYWNrZW5kXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9zT3B0aW9ucyB7XG4gICAgbm9XZWJHTD86IGJvb2xlYW47XG4gICAgZW11bGF0b3JGdW5jdGlvbj86IEVtdWxhdG9yRnVuY3Rpb247XG4gICAgY2xpY2tUb1N0YXJ0PzogYm9vbGVhbjtcbiAgICBsYXllcnNPcHRpb25zPzogTGF5ZXJzT3B0aW9ucztcbiAgICBjcmVhdGVUcmFuc3BvcnRMYXllcj86ICgpID0+IFRyYW5zcG9ydExheWVyO1xufVxuXG5leHBvcnQgY2xhc3MgRG9zSW5zdGFuY2Uge1xuICAgIHN0YXRpYyBpbml0aWFsUnVuID0gdHJ1ZTtcblxuICAgIGVtdWxhdG9yc1VpOiBFbXVsYXRvcnNVaTtcbiAgICBlbXVsYXRvckZ1bmN0aW9uOiBFbXVsYXRvckZ1bmN0aW9uO1xuICAgIGNyZWF0ZVRyYW5zcG9ydExheWVyPzogKCkgPT4gVHJhbnNwb3J0TGF5ZXI7XG4gICAgbGF5ZXJzOiBMYXllcnM7XG4gICAgbGF5ZXJzQ29uZmlnOiBMYXllcnNDb25maWcgfCBMZWdhY3lMYXllcnNDb25maWcgfCBudWxsID0gbnVsbDtcbiAgICBjaVByb21pc2U/OiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+O1xuXG4gICAgb3B0aW9uczogRG9zT3B0aW9ucztcbiAgICBtb2JpbGVDb250cm9sczogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgY2xpY2tUb1N0YXJ0OiBib29sZWFuO1xuICAgIHByaXZhdGUgdW5iaW5kQ29udHJvbHM6ICgpID0+IHZvaWQgPSAoKSA9PiB7LyoqL307XG4gICAgcHJpdmF0ZSBzdG9yZWRMYXllcnNDb25maWc6IExheWVyc0NvbmZpZyB8IExlZ2FjeUxheWVyc0NvbmZpZyB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgb25Nb2JpbGVDb250cm9sc0NoYW5nZWQ6ICh2aXNpYmxlOiBib29sZWFuKSA9PiB2b2lkO1xuXG4gICAgY29uc3RydWN0b3Iocm9vdDogSFRNTERpdkVsZW1lbnQsIGVtdWxhdG9yc1VpOiBFbXVsYXRvcnNVaSwgb3B0aW9uczogRG9zT3B0aW9ucykge1xuICAgICAgICBpZiAoRG9zSW5zdGFuY2UuaW5pdGlhbFJ1bikge1xuICAgICAgICAgICAgZW11bGF0b3JzLmNhY2hlU2VlZCArPSBcIiB1aSAoXCIgKyBCdWlsZC5zaG9ydCArIFwiKVwiO1xuICAgICAgICAgICAgRG9zSW5zdGFuY2UuaW5pdGlhbFJ1biA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5lbXVsYXRvcnNVaSA9IGVtdWxhdG9yc1VpO1xuICAgICAgICB0aGlzLmVtdWxhdG9yRnVuY3Rpb24gPSBvcHRpb25zLmVtdWxhdG9yRnVuY3Rpb24gfHwgXCJkb3Nib3hXb3JrZXJcIjtcbiAgICAgICAgdGhpcy5jbGlja1RvU3RhcnQgPSBvcHRpb25zLmNsaWNrVG9TdGFydCB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXllcnMgPSB0aGlzLmVtdWxhdG9yc1VpLmRvbS5sYXllcnMocm9vdCwgb3B0aW9ucy5sYXllcnNPcHRpb25zKTtcbiAgICAgICAgdGhpcy5sYXllcnMuc2hvd0xvYWRpbmdMYXllcigpO1xuICAgICAgICB0aGlzLmNyZWF0ZVRyYW5zcG9ydExheWVyID0gb3B0aW9ucy5jcmVhdGVUcmFuc3BvcnRMYXllcjtcbiAgICAgICAgdGhpcy5tb2JpbGVDb250cm9scyA9IHBvaW50ZXJzLmJpbmQubW9iaWxlO1xuICAgICAgICB0aGlzLm9uTW9iaWxlQ29udHJvbHNDaGFuZ2VkID0gKCkgPT4geyAvKiovIH07XG5cbiAgICAgICAgaWYgKHRoaXMuZW11bGF0b3JGdW5jdGlvbiA9PT0gXCJiYWNrZW5kXCIgJiYgdGhpcy5jcmVhdGVUcmFuc3BvcnRMYXllciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbXVsYXRvciBmdW5jdGlvbiBzZXQgdG8gJ2JhY2tlbmQnIGJ1dCAnY3JlYXRlVHJhbnNwb3J0TGF5ZXInIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcnVuKGJ1bmRsZVVybDogc3RyaW5nLCBcbiAgICAgICAgb3B0aW9uYWxDaGFuZ2VzVXJsPzogc3RyaW5nLFxuICAgICAgICBvcHRpb25hbFBlcnNpc3RLZXk/OiBzdHJpbmcpOiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMubGF5ZXJzLnNldExvYWRpbmdNZXNzYWdlKFwiU3RhcnRpbmcuLi5cIik7XG5cbiAgICAgICAgY29uc3QgcGVyc2lzdEtleSA9IG9wdGlvbmFsUGVyc2lzdEtleSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbmFsUGVyc2lzdEtleSAhPT0gbnVsbCAmJiBvcHRpb25hbFBlcnNpc3RLZXkubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICBvcHRpb25hbFBlcnNpc3RLZXkgOlxuICAgICAgICAgICAgYnVuZGxlVXJsICsgXCIuY2hhbmdlc1wiO1xuXG4gICAgICAgIGxldCBjaTogQ29tbWFuZEludGVyZmFjZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNpID0gYXdhaXQgdGhpcy5ydW5CdW5kbGUoYnVuZGxlVXJsLCBvcHRpb25hbENoYW5nZXNVcmwsIHBlcnNpc3RLZXkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVycy5zZXRMb2FkaW5nTWVzc2FnZShcIlVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJlZC4uLlwiKTtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJzLm5vdHlmLmVycm9yKHsgbWVzc2FnZTogXCJDYW4ndCBzdGFydCBlbXVsYXRvciBsb29rIGJyb3dzZXIgbG9ncyBmb3IgbW9yZSBpbmZvXCJ9KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbXVsYXRvcnNVaSA9IHRoaXMuZW11bGF0b3JzVWk7XG4gICAgICAgIGlmICh0aGlzLmVtdWxhdG9yRnVuY3Rpb24gPT09IFwiamFudXNcIikge1xuICAgICAgICAgICAgZW11bGF0b3JzVWkuZ3JhcGhpY3MudmlkZW8odGhpcy5sYXllcnMsIGNpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVtdWxhdG9yc1VpLnBlcnNpc3Quc2F2ZShwZXJzaXN0S2V5LCB0aGlzLmxheWVycywgY2ksIGVtdWxhdG9ycyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubm9XZWJHTCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBpcyBkaXNhYmxlZCBieSBvcHRpb25zXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbXVsYXRvcnNVaS5ncmFwaGljcy53ZWJHbCh0aGlzLmxheWVycywgY2kpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbmFibGUgdG8gY3JlYXRlIHdlYmdsIGNhbnZhcywgZmFsbGJhY2sgdG8gMmQgcmVuZGVyaW5nXCIpO1xuICAgICAgICAgICAgICAgIGVtdWxhdG9yc1VpLmdyYXBoaWNzLl8yZCh0aGlzLmxheWVycywgY2kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW11bGF0b3JzVWkuc291bmQuYXVkaW9Ob2RlKGNpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtdWxhdG9yc1VpLmRvbS5saWZlY3ljbGUoY2kpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IGNpLmNvbmZpZygpO1xuICAgICAgICBhd2FpdCB0aGlzLnNldExheWVyc0NvbmZpZyhleHRyYWN0TGF5ZXJzQ29uZmlnKGNvbmZpZykpXG5cbiAgICAgICAgaWYgKCF0aGlzLm1vYmlsZUNvbnRyb2xzKSB7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVNb2JpbGVDb250cm9scygpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sYXllcnMuc2V0TG9hZGluZ01lc3NhZ2UoXCJSZWFkeVwiKTtcbiAgICAgICAgdGhpcy5sYXllcnMuaGlkZUxvYWRpbmdMYXllcigpO1xuXG4gICAgICAgIGlmICh0aGlzLmNsaWNrVG9TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5sYXllcnMuc2hvd0NsaWNrVG9TdGFydCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNpO1xuICAgIH1cblxuICAgIGFzeW5jIHN0b3AoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMubGF5ZXJzLnNob3dMb2FkaW5nTGF5ZXIoKTtcblxuICAgICAgICBpZiAodGhpcy5jaVByb21pc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2kgPSBhd2FpdCB0aGlzLmNpUHJvbWlzZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2lQcm9taXNlO1xuICAgICAgICBhd2FpdCBjaS5leGl0KCk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBzZXRMYXllcnNDb25maWcoY29uZmlnOiBMYXllcnNDb25maWcgfCBMZWdhY3lMYXllcnNDb25maWcgfCBudWxsLCBsYXllck5hbWU/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuY2lQcm9taXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdGhpcy5jaVByb21pc2U7XG5cbiAgICAgICAgdGhpcy5sYXllcnNDb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMudW5iaW5kQ29udHJvbHMoKTtcblxuICAgICAgICBpZiAoY29uZmlnID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZENvbnRyb2xzID0gaW5pdE51bGxMYXllcnNDb250cm9sKHRoaXMubGF5ZXJzLCBjaSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uZmlnLnZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRDb250cm9scyA9IGluaXRMZWdhY3lMYXllcnNDb250cm9sKHRoaXMubGF5ZXJzLCBjb25maWcgYXMgTGVnYWN5TGF5ZXJzQ29uZmlnLCBjaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZENvbnRyb2xzID0gaW5pdExheWVyc0NvbnRyb2wodGhpcy5sYXllcnMsIGNvbmZpZyBhcyBMYXllcnNDb25maWcsIGNpLCB0aGlzLCBsYXllck5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldExheWVyc0NvbmZpZygpOiBMYXllcnNDb25maWcgfCBMZWdhY3lMYXllcnNDb25maWcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGF5ZXJzQ29uZmlnO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmFibGVNb2JpbGVDb250cm9scygpIHtcbiAgICAgICAgdGhpcy5tb2JpbGVDb250cm9scyA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0TGF5ZXJzQ29uZmlnKHRoaXMuc3RvcmVkTGF5ZXJzQ29uZmlnKTtcbiAgICAgICAgdGhpcy5zdG9yZWRMYXllcnNDb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLm9uTW9iaWxlQ29udHJvbHNDaGFuZ2VkKHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNhYmxlTW9iaWxlQ29udHJvbHMoKSB7XG4gICAgICAgIHRoaXMubW9iaWxlQ29udHJvbHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdG9yZWRMYXllcnNDb25maWcgPSB0aGlzLmxheWVyc0NvbmZpZztcbiAgICAgICAgdGhpcy5zZXRMYXllcnNDb25maWcobnVsbCk7XG4gICAgICAgIHRoaXMub25Nb2JpbGVDb250cm9sc0NoYW5nZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRPbk1vYmlsZUNvbnRyb2xzQ2hhbmdlZChoYW5kbGVyOiAodmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLm9uTW9iaWxlQ29udHJvbHNDaGFuZ2VkID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJ1bkJ1bmRsZShidW5kbGVVcmw6IHN0cmluZywgb3B0aW9uYWxDaGFuZ2VzVXJsOiBzdHJpbmcgfCB1bmRlZmluZWQsIHBlcnNpc3RLZXk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBlbXVsYXRvcnNVaSA9IHRoaXMuZW11bGF0b3JzVWk7XG4gICAgICAgIGlmICh0aGlzLmVtdWxhdG9yRnVuY3Rpb24gPT09IFwiamFudXNcIikge1xuICAgICAgICAgICAgdGhpcy5sYXllcnMuc2V0TG9hZGluZ01lc3NhZ2UoXCJDb25uZWN0aW5nLi4uXCIpO1xuICAgICAgICAgICAgdGhpcy5jaVByb21pc2UgPSBlbXVsYXRvcnMuamFudXMoYnVuZGxlVXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJzLnNldExvYWRpbmdNZXNzYWdlKFwiRG93bmxvYWRpbmcgYnVuZGxlIC4uLlwiKTtcbiAgICAgICAgICAgIGNvbnN0IGJ1bmRsZVByb21pc2UgPSBlbXVsYXRvcnNVaS5uZXR3b3JrLnJlc29sdmVCdW5kbGUoYnVuZGxlVXJsLCB7XG4gICAgICAgICAgICAgICAgb25wcm9ncmVzczogKHBlcmNlbnQpID0+IHRoaXMubGF5ZXJzLnNldExvYWRpbmdNZXNzYWdlKFwiRG93bmxvYWRpbmcgYnVuZGxlIFwiICsgcGVyY2VudCArIFwiJVwiKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgY2hhbmdlc0J1bmRsZTogVWludDhBcnJheSB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWxDaGFuZ2VzVXJsICE9PSB1bmRlZmluZWQgJiYgb3B0aW9uYWxDaGFuZ2VzVXJsICE9PSBudWxsICYmIG9wdGlvbmFsQ2hhbmdlc1VybC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZXNCdW5kbGUgPSBhd2FpdCBlbXVsYXRvcnNVaS5uZXR3b3JrLnJlc29sdmVCdW5kbGUob3B0aW9uYWxDaGFuZ2VzVXJsLCB7IGh0dHBDYWNoZTogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlc0J1bmRsZSA9IGF3YWl0IGVtdWxhdG9yc1VpLnBlcnNpc3QubG9hZChwZXJzaXN0S2V5LCBlbXVsYXRvcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBidW5kbGUgPSBhd2FpdCBidW5kbGVQcm9taXNlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVtdWxhdG9yRnVuY3Rpb24gPT09IFwiYmFja2VuZFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2lQcm9taXNlID0gZW11bGF0b3JzLmJhY2tlbmQoW2J1bmRsZSwgY2hhbmdlc0J1bmRsZV0sICh0aGlzIGFzIGFueSkuY3JlYXRlVHJhbnNwb3J0TGF5ZXIoKSBhcyBUcmFuc3BvcnRMYXllcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaVByb21pc2UgPSBlbXVsYXRvcnNbdGhpcy5lbXVsYXRvckZ1bmN0aW9uXShbYnVuZGxlLCBjaGFuZ2VzQnVuZGxlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVuZGxlID0gYXdhaXQgYnVuZGxlUHJvbWlzZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbXVsYXRvckZ1bmN0aW9uID09PSBcImJhY2tlbmRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNpUHJvbWlzZSA9IGVtdWxhdG9ycy5iYWNrZW5kKFtidW5kbGVdLCAodGhpcyBhcyBhbnkpLmNyZWF0ZVRyYW5zcG9ydExheWVyKCkgYXMgVHJhbnNwb3J0TGF5ZXIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2lQcm9taXNlID0gZW11bGF0b3JzW3RoaXMuZW11bGF0b3JGdW5jdGlvbl0oW2J1bmRsZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNpUHJvbWlzZTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIERvc0ZhY3RvcnlUeXBlID0gKHJvb3Q6IEhUTUxEaXZFbGVtZW50LCBvcHRpb25zPzogRG9zT3B0aW9ucykgPT4gRG9zSW5zdGFuY2U7XG4iLCJpbXBvcnQgeyBFbXVsYXRvcnMgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gXCJlbXVsYXRvcnMvZGlzdC90eXBlcy9jYWNoZVwiO1xuXG5kZWNsYXJlIGNvbnN0IGVtdWxhdG9yczogRW11bGF0b3JzO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVzb2x2ZUJ1bmRsZSh1cmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM/OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU/OiBDYWNoZSB8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cENhY2hlPzogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnByb2dyZXNzPzogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICBjb25zdCBjYWNoZSA9IG9wdGlvbnM/LmNhY2hlIHx8IG51bGw7XG4gICAgY29uc3Qgb25wcm9ncmVzcyA9IG9wdGlvbnM/Lm9ucHJvZ3Jlc3M7XG4gICAgY29uc3QgaHR0cENhY2hlID0gIShvcHRpb25zPy5odHRwQ2FjaGUgPT09IGZhbHNlKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChjYWNoZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8tY2FjaGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FjaGVJbXBsID0gY2FjaGUgfHwgYXdhaXQgZW11bGF0b3JzLmNhY2hlKCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGNhY2hlSW1wbC5nZXQodXJsKSBhcyBBcnJheUJ1ZmZlcjtcbiAgICAgICAgaWYgKG9ucHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb25wcm9ncmVzcygxMDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShidWZmZXIpXG4gICAgfSBjYXRjaCB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxVaW50OEFycmF5PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XG4gICAgICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk5ldHdvcmsgZXJyb3IsIGNhbid0IGRvd25sb2FkIFwiICsgdXJsKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiUmVxdWVzdCBjYW5jZWxlZCBmb3IgdXJsIFwiICsgdXJsKSk7XG4gICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbnByb2dyZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnByb2dyZXNzKDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHJlcXVlc3QucmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJOZXR3b3JrIGVycm9yLCBjYW4ndCBkb3dubG9hZCBcIiArIHVybCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChvbnByb2dyZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9ucHJvZ3Jlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnRvdGFsICYmIGV2ZW50LnRvdGFsID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9yZ3Jlc3MgPSBNYXRoLnJvdW5kKGV2ZW50LmxvYWRlZCAqIDEwMDAwIC8gZXZlbnQudG90YWwpIC8gMTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25wcm9ncmVzcyhwb3JncmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaHR0cENhY2hlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihcIkNhY2hlLUNvbnRyb2xcIiwgXCJuby1jYWNoZSwgbm8tc3RvcmUsIG1heC1hZ2U9MFwiKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJFeHBpcmVzXCIsIFwiVHVlLCAwMSBKYW4gMTk4MCAxOjAwOjAwIEdNVFwiKTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXCJQcmFnbWFcIiwgXCJuby1jYWNoZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlLCBNZXNzYWdlVHlwZSB9IGZyb20gXCJlbXVsYXRvcnNcIjtcbmltcG9ydCB7IExheWVycyB9IGZyb20gXCIuLi9kb20vbGF5ZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3R5ZihsYXllcnM6IExheWVycywgY2k6IENvbW1hbmRJbnRlcmZhY2UpIHtcbiAgICBjb25zdCBub3R5ZiA9IGxheWVycy5ub3R5ZjtcbiAgICBjaS5ldmVudHMoKS5vbk1lc3NhZ2UoKG1zZ1R5cGU6IE1lc3NhZ2VUeXBlLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGlmIChtc2dUeXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIG5vdHlmLmVycm9yKHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShhcmdzKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlLCBFbXVsYXRvcnMgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5pbXBvcnQgeyBMYXllcnMgfSBmcm9tIFwiLi4vZG9tL2xheWVyc1wiO1xuXG5jb25zdCBjYWNoZU5hbWUgPSBcImVtdWxhdG9ycy11aS1zYXZlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2F2ZShrZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgIGxheWVyczogTGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgY2k6IENvbW1hbmRJbnRlcmZhY2UsXG4gICAgICAgICAgICAgICAgICAgICBlbXVsYXRvcnM6IEVtdWxhdG9ycykge1xuICAgIGxheWVycy5zZXRPblNhdmUoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGVtdWxhdG9ycy5jYWNoZShjYWNoZU5hbWUpO1xuICAgICAgICBjb25zdCB1cGRhdGVkID0gYXdhaXQgY2kucGVyc2lzdCgpO1xuICAgICAgICByZXR1cm4gY2FjaGUucHV0KGtleSwgdXBkYXRlZC5idWZmZXIpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZChrZXk6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtdWxhdG9yczogRW11bGF0b3JzKSB7XG4gICAgY29uc3QgY2FjaGUgPSBhd2FpdCBlbXVsYXRvcnMuY2FjaGUoY2FjaGVOYW1lKTtcbiAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSkudGhlbigoYnVmZmVyKSA9PiBuZXcgVWludDhBcnJheShidWZmZXIgYXMgQXJyYXlCdWZmZXIpKTtcbn1cbiIsImltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2UgfSBmcm9tIFwiZW11bGF0b3JzXCI7XG5cbmNsYXNzIFNhbXBsZXNRdWV1ZSB7XG4gICAgcHJpdmF0ZSBzYW1wbGVzUXVldWU6IEZsb2F0MzJBcnJheVtdID0gW107XG5cbiAgICBwdXNoKHNhbXBsZXM6IEZsb2F0MzJBcnJheSkge1xuICAgICAgICB0aGlzLnNhbXBsZXNRdWV1ZS5wdXNoKHNhbXBsZXMpO1xuICAgIH1cblxuICAgIGxlbmd0aCgpIHtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMuc2FtcGxlc1F1ZXVlKSB7XG4gICAgICAgICAgICB0b3RhbCArPSBuZXh0Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG90YWw7XG4gICAgfVxuXG4gICAgd3JpdGVUbyhkc3Q6IEZsb2F0MzJBcnJheSwgYnVmZmVyU2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIGxldCB3cml0ZUl0ID0gMDtcbiAgICAgICAgd2hpbGUgKHRoaXMuc2FtcGxlc1F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IHRoaXMuc2FtcGxlc1F1ZXVlWzBdO1xuICAgICAgICAgICAgY29uc3QgdG9SZWFkID0gTWF0aC5taW4oYnVmZmVyU2l6ZSAtIHdyaXRlSXQsIHNyYy5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKHRvUmVhZCA9PT0gc3JjLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRzdC5zZXQoc3JjLCB3cml0ZUl0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhbXBsZXNRdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkc3Quc2V0KHNyYy5zbGljZSgwLCB0b1JlYWQpLCB3cml0ZUl0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhbXBsZXNRdWV1ZVswXSA9IHNyYy5zbGljZSh0b1JlYWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3cml0ZUl0ICs9IHRvUmVhZDtcblxuICAgICAgICAgICAgaWYgKHdyaXRlSXQgPT09IGJ1ZmZlclNpemUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3cml0ZUl0IDwgYnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgZHN0LmZpbGwoMCwgd3JpdGVJdCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdWRpb05vZGUoY2k6IENvbW1hbmRJbnRlcmZhY2UpIHtcbiAgICBjb25zdCBzYW1wbGVSYXRlID0gY2kuc291bmRGcmVxdWVuY3koKTtcbiAgICBjb25zdCBjaGFubmVscyA9IDE7XG5cbiAgICBpZiAoc2FtcGxlUmF0ZSA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBjcmVhdGUgYXVkaW8gbm9kZSB3aXRoIHNhbXBsZVJhdGUgPT09IDAsIGluZ25vcmluZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBhdWRpb0NvbnRleHQ6IEF1ZGlvQ29udGV4dCB8IG51bGwgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBBdWRpb0NvbnRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGF1ZGlvQ29udGV4dCA9IG5ldyBBdWRpb0NvbnRleHQoe1xuICAgICAgICAgICAgc2FtcGxlUmF0ZSxcbiAgICAgICAgICAgIGxhdGVuY3lIaW50OiAnaW50ZXJhY3RpdmUnLFxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiAod2luZG93IGFzIGFueSkud2Via2l0QXVkaW9Db250ZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhdWRpb0NvbnRleHQgPSBuZXcgKHdpbmRvdyBhcyBhbnkpLndlYmtpdEF1ZGlvQ29udGV4dCh7XG4gICAgICAgICAgICBzYW1wbGVSYXRlLFxuICAgICAgICAgICAgbGF0ZW5jeUhpbnQ6ICdpbnRlcmFjdGl2ZScsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChhdWRpb0NvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2FtcGxlc1F1ZXVlID0gbmV3IFNhbXBsZXNRdWV1ZSgpO1xuICAgIGNvbnN0IGJ1ZmZlclNpemUgPSAyMDQ4O1xuICAgIGNvbnN0IHByZUJ1ZmZlclNpemUgPSAyMDQ4O1xuXG4gICAgY2kuZXZlbnRzKCkub25Tb3VuZFB1c2goKHNhbXBsZXMpID0+IHtcbiAgICAgICAgaWYgKHNhbXBsZXNRdWV1ZS5sZW5ndGgoKSA8IGJ1ZmZlclNpemUgKiAyICsgcHJlQnVmZmVyU2l6ZSkge1xuICAgICAgICAgICAgc2FtcGxlc1F1ZXVlLnB1c2goc2FtcGxlcyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGF1ZGlvTm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoYnVmZmVyU2l6ZSwgMCwgY2hhbm5lbHMpO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgYXVkaW9Ob2RlLm9uYXVkaW9wcm9jZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG51bUZyYW1lcyA9IGV2ZW50Lm91dHB1dEJ1ZmZlci5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG51bUNoYW5uZWxzID0gZXZlbnQub3V0cHV0QnVmZmVyLm51bWJlck9mQ2hhbm5lbHM7XG4gICAgICAgIGNvbnN0IHNhbXBsZXNDb3VudCA9IHNhbXBsZXNRdWV1ZS5sZW5ndGgoKTtcblxuICAgICAgICBpZiAoIXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBzYW1wbGVzQ291bnQgPj0gcHJlQnVmZmVyU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBudW1DaGFubmVsczsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFubmVsRGF0YSA9IGV2ZW50Lm91dHB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YShjaGFubmVsKTtcbiAgICAgICAgICAgIHNhbXBsZXNRdWV1ZS53cml0ZVRvKGNoYW5uZWxEYXRhLCBudW1GcmFtZXMpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGF1ZGlvTm9kZS5jb25uZWN0KGF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG5cbiAgICBjb25zdCByZXN1bWVXZWJBdWRpbyA9ICgpID0+IHtcbiAgICAgICAgaWYgKGF1ZGlvQ29udGV4dCAhPT0gbnVsbCAmJiBhdWRpb0NvbnRleHQuc3RhdGUgPT09ICdzdXNwZW5kZWQnKSB7XG4gICAgICAgICAgICBhdWRpb0NvbnRleHQucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXN1bWVXZWJBdWRpbywge29uY2U6dHJ1ZX0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByZXN1bWVXZWJBdWRpbywge29uY2U6dHJ1ZX0pO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCByZXN1bWVXZWJBdWRpbywge29uY2U6dHJ1ZX0pO1xuXG4gICAgY2kuZXZlbnRzKCkub25FeGl0KCgpID0+IHtcbiAgICAgICAgaWYgKGF1ZGlvQ29udGV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgYXVkaW9Ob2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIGF1ZGlvQ29udGV4dC5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXN1bWVXZWJBdWRpbyk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCByZXN1bWVXZWJBdWRpbyk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCByZXN1bWVXZWJBdWRpbyk7XG4gICAgfSk7XG59XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBFUFNJTE9OID0gcG93KDIsIC01Mik7XG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcbnZhciBNSU4zMiA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcbiAgdmFyICRzaWduID0gc2lnbih4KTtcbiAgdmFyIGEsIHJlc3VsdDtcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgUmVmbGVjdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciAkU1BMSVQgPSAnc3BsaXQnO1xudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbnZhciBNQVhfVUlOVDMyID0gMHhmZmZmZmZmZjtcblxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBTVVBQT1JUU19ZID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsgUmVnRXhwKE1BWF9VSU5UMzIsICd5Jyk7IH0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFNQTElULCAkc3BsaXQsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICB2YXIgaW50ZXJuYWxTcGxpdDtcbiAgaWYgKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApIHtcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHJldHVybiAkc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdO1xuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSAkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmIChvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiAkc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGludGVybmFsU3BsaXQgPSAkc3BsaXQ7XG4gIH1cblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgICByZXR1cm4gc3BsaXR0ZXIgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgbGltaXQpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IocngsIFJlZ0V4cCk7XG5cbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xuICAgICAgdmFyIGZsYWdzID0gKHJ4Lmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoU1VQUE9SVFNfWSA/ICd5JyA6ICdnJyk7XG5cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKGxpbSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XG4gICAgICB2YXIgcCA9IDA7XG4gICAgICB2YXIgcSA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xuICAgICAgICBzcGxpdHRlci5sYXN0SW5kZXggPSBTVVBQT1JUU19ZID8gcSA6IDA7XG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcbiAgICAgICAgKSB7XG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEEucHVzaChTLnNsaWNlKHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIEEucHVzaCh6W2ldKTtcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcSA9IHAgPSBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBLnB1c2goUy5zbGljZShwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XG52YXIgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuL19vd24ta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXksIGRlc2M7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIvKiBlc2xpbnQgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzOiAwICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGUge1xuICAgIHB1dDogKGtleTogc3RyaW5nLCBkYXRhOiBzdHJpbmcgfCBBcnJheUJ1ZmZlcikgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICBnZXQ6IChrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogc3RyaW5nIHwgQXJyYXlCdWZmZXIpID0+IFByb21pc2U8c3RyaW5nIHwgQXJyYXlCdWZmZXI+O1xuICAgIGZvckVhY2g6IChlYWNoOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHZvaWQsIG9uZW5kOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgIGNsb3NlOiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQ2FjaGVOb29wIGltcGxlbWVudHMgQ2FjaGUge1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcHVibGljIGNsb3NlKCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBwdXQoa2V5OiBzdHJpbmcsIGRhdGE6IHN0cmluZyB8IEFycmF5QnVmZmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgfCBBcnJheUJ1ZmZlcik6IFByb21pc2U8c3RyaW5nIHwgQXJyYXlCdWZmZXI+IHtcbiAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwiQ2FjaGUgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGhvc3RcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGZvckVhY2goZWFjaDogKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB2b2lkLCBvbmVuZDogKCkgPT4gdm9pZCkge1xuICAgICAgICBvbmVuZCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENhY2hlRGIodmVyc2lvbjogc3RyaW5nLCBsb2dnZXI6IHsgb25FcnIoLi4uYXJnczogYW55W10pOiBhbnkgfSk6IFByb21pc2U8Q2FjaGU+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgbmV3IENhY2hlRGJJbXBsKHZlcnNpb24sIHJlc29sdmUsIChtc2c6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgbG9nZ2VyLm9uRXJyKG1zZyk7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBDYWNoZU5vb3AoKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5jbGFzcyBDYWNoZURiSW1wbCBpbXBsZW1lbnRzIENhY2hlIHtcblxuICAgIHB1YmxpYyB2ZXJzaW9uOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBzdG9yZU5hbWUgPSBcImZpbGVzXCI7XG4gICAgcHJpdmF0ZSBpbmRleGVkREI6IElEQkZhY3Rvcnk7XG4gICAgcHJpdmF0ZSBkYjogSURCRGF0YWJhc2UgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHZlcnNpb246IHN0cmluZywgb25yZWFkeTogKGNhY2hlOiBDYWNoZSkgPT4gdm9pZCwgb25lcnJvcjogKG1zZzogc3RyaW5nKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMuaW5kZXhlZERCID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyB1bmRlZmluZWQgOiB3aW5kb3cuaW5kZXhlZERCIHx8ICh3aW5kb3cgYXMgYW55KS5tb3pJbmRleGVkREJcbiAgICAgICAgICAgIHx8ICh3aW5kb3cgYXMgYW55KS53ZWJraXRJbmRleGVkREIgfHwgKHdpbmRvdyBhcyBhbnkpLm1zSW5kZXhlZERCKSBhcyBhbnk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmluZGV4ZWREQikge1xuICAgICAgICAgICAgb25lcnJvcihcIkluZGV4ZWQgZGIgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGhvc3RcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcGVuUmVxdWVzdCA9IHRoaXMuaW5kZXhlZERCLm9wZW4oXCJqcy1kb3MtY2FjaGUgKFwiICsgdmVyc2lvbiArIFwiKVwiLCAxKTtcbiAgICAgICAgb3BlblJlcXVlc3Qub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgb25lcnJvcihcIkNhbid0IG9wZW4gY2FjaGUgZGF0YWJhc2U6IFwiICsgb3BlblJlcXVlc3QuZXJyb3I/Lm1lc3NhZ2UpO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuUmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGIgPSBvcGVuUmVxdWVzdC5yZXN1bHQ7XG4gICAgICAgICAgICBvbnJlYWR5KHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYiA9IG9wZW5SZXF1ZXN0LnJlc3VsdDtcbiAgICAgICAgICAgICAgICB0aGlzLmRiLm9uZXJyb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25lcnJvcihcIkNhbid0IHVwZ3JhZGUgY2FjaGUgZGF0YWJhc2VcIik7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUodGhpcy5zdG9yZU5hbWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIG9uZXJyb3IoXCJDYW4ndCB1cGdyYWRlIGNhY2hlIGRhdGFiYXNlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGIuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHB1dChrZXk6IHN0cmluZywgZGF0YTogc3RyaW5nIHwgQXJyYXlCdWZmZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbih0aGlzLnN0b3JlTmFtZSwgXCJyZWFkd3JpdGVcIik7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gKCkgPT4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUodGhpcy5zdG9yZU5hbWUpLnB1dChkYXRhLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBzdHJpbmcgfCBBcnJheUJ1ZmZlcik6IFByb21pc2U8c3RyaW5nIHwgQXJyYXlCdWZmZXI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdE9yUmVzb2x2ZShtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAodGhpcy5kYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlamVjdE9yUmVzb2x2ZShcImRiIGlzIG5vdCBpbml0YWxpemVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0aGlzLmRiLnRyYW5zYWN0aW9uKHRoaXMuc3RvcmVOYW1lLCBcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuc3RvcmVOYW1lKS5nZXQoa2V5KTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCByZWFkIHZhbHVlIGZvciBrZXkgJ1wiICsga2V5ICsgXCInXCIpKTtcbiAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3RPclJlc29sdmUoXCJSZXN1bHQgaXMgZW1wdHkgZm9yIGtleSAnXCIgKyBrZXkgKyBcIicsIHJlc3VsdDogXCIgKyByZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZvckVhY2goZWFjaDogKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB2b2lkLCBvbmVuZDogKCkgPT4gdm9pZCkge1xuICAgICAgICBpZiAodGhpcy5kYiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgb25lbmQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gdGhpcy5kYi50cmFuc2FjdGlvbih0aGlzLnN0b3JlTmFtZSwgXCJyZWFkb25seVwiKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKHRoaXMuc3RvcmVOYW1lKS5vcGVuQ3Vyc29yKCk7XG4gICAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IG9uZW5kKCk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJzb3IgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkucmVzdWx0IGFzIElEQkN1cnNvcldpdGhWYWx1ZTtcbiAgICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgICAgICBlYWNoKGN1cnNvci5rZXkudG9TdHJpbmcoKSwgY3Vyc29yLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb25lbmQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCIvLyAjIERvc0J1bmRsZVxuLy8gSXMgYSBjb21wbGV0ZSBidW5kbGUgdGhhdCBjb250YWlucyBldmVyeXRoaW5nIG5lZWRlZCB0byBzdGFydCBkb3Nib3ggc2VydmVyXG5cbmltcG9ydCB7IERvc0NvbmZpZywgY3JlYXRlRG9zQ29uZmlnLCB0b0Rvc2JveENvbmYgfSBmcm9tIFwiLi9kb3MtY29uZlwiO1xuaW1wb3J0IExpYlppcCBmcm9tIFwiLi4vLi4vbGliemlwL2xpYnppcFwiO1xuXG5pbXBvcnQgeyBIVFRQUmVxdWVzdCB9IGZyb20gXCIuLi8uLi9odHRwXCI7XG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gXCIuLi8uLi9jYWNoZVwiO1xuXG5pbXBvcnQgeyBXYXNtTW9kdWxlIH0gZnJvbSBcIi4uLy4uL2ltcGwvbW9kdWxlc1wiO1xuXG4vLyAjIyMgRG9zQXJjaGl2ZVNvdXJjZVxuZXhwb3J0IGludGVyZmFjZSBEb3NBcmNoaXZlU291cmNlIHtcbiAgICAvLyBzb3VyY2UgKGFyY2hpdmUpIHRvIGRvd25sb2FkIGFuZCBleHRyYWN0IHZpYSBgZXh0cmFjdEFsbGBcblxuICAgIC8vICoqdXJsKiogd2hlcmUgYXJjaGl2ZSBpcyBsb2NhdGVkXG4gICAgdXJsOiBzdHJpbmc7XG5cbiAgICAvLyAqKnBhdGgqKlxuICAgIHBhdGg6IHN0cmluZztcblxuICAgIC8vICoqdHlwZSoqXG4gICAgdHlwZT86IFwiemlwXCI7XG4gICAgLy8gYXJjaGl2ZSB0eXBlLCBub3cgb25seSBaaXAgaXMgc3VwcG9ydGVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvc0J1bmRsZSB7XG4gICAgcHVibGljIGNvbmZpZzogRG9zQ29uZmlnO1xuICAgIHB1YmxpYyBzb3VyY2VzOiBEb3NBcmNoaXZlU291cmNlW107XG5cbiAgICBwcml2YXRlIGxpYnppcFdhc206IFdhc21Nb2R1bGU7XG4gICAgcHJpdmF0ZSBjYWNoZTogQ2FjaGU7XG5cbiAgICBjb25zdHJ1Y3RvcihsaWJ6aXBXYXNtOiBXYXNtTW9kdWxlLCBjYWNoZTogQ2FjaGUpIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjcmVhdGVEb3NDb25maWcoKTtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gW107XG4gICAgICAgIHRoaXMubGliemlwV2FzbSA9IGxpYnppcFdhc207XG4gICAgICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcbiAgICB9XG5cbiAgICBhdXRvZXhlYyguLi5saW5lczogc3RyaW5nW10pOiBEb3NCdW5kbGUge1xuICAgICAgICB0aGlzLmNvbmZpZy5hdXRvZXhlYy5vcHRpb25zLnNjcmlwdC52YWx1ZSA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGN5Y2xlcyhjeWNsZXM6IHN0cmluZyk6IERvc0J1bmRsZSB7XG4gICAgICAgIHRoaXMuY29uZmlnLmNwdS5vcHRpb25zLmN5Y2xlcy52YWx1ZSA9IGN5Y2xlcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gIyMjIGV4dHJhY3RcbiAgICBleHRyYWN0KHVybDogc3RyaW5nLCBwYXRoID0gXCIvXCIsIHR5cGU6IFwiemlwXCIgPSBcInppcFwiKTogRG9zQnVuZGxlIHtcbiAgICAgICAgLy8gc2ltcGxpZmllZCB2ZXJzaW9uIG9mIGV4dHJhY3RBbGwsIHdvcmtzIG9ubHkgZm9yIG9uZSBhcmNoaXZlLiBJdCBjYWxscyBleHRyYWN0QWxsIGluc2lkZS5cbiAgICAgICAgcmV0dXJuIHRoaXMuZXh0cmFjdEFsbChbeyB1cmwsIHBhdGgsIHR5cGUgfV0pO1xuICAgIH1cblxuICAgIC8vICMjIyBleHRyYWN0QWxsXG4gICAgZXh0cmFjdEFsbChzb3VyY2VzOiBEb3NBcmNoaXZlU291cmNlW10pOiBEb3NCdW5kbGUge1xuICAgICAgICAvLyBkb3dubG9hZCBnaXZlbiBbYHNvdXJjZXNgXShodHRwczovL2pzLWRvcy5jb20vNi4yMi9kb2NzL2FwaS9nZW5lcmF0ZS5odG1sP3BhZ2U9anNkb3MtYnVuZGxlI2Rvc2ZzLWRvc2FyY2hpdmVzb3VyY2UpXG4gICAgICAgIC8vIGFuZCBleHRyYWN0IHRoZW0gXG4gICAgICAgIHRoaXMuc291cmNlcy5wdXNoKC4uLnNvdXJjZXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhc3luYyB0b1VpbnQ4QXJyYXkob3ZlcndyaXRlQ29uZmlnID0gZmFsc2UpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICAgICAgY29uc3QgbW9kdWxlID0ge307XG4gICAgICAgIGF3YWl0IHRoaXMubGliemlwV2FzbS5pbnN0YW50aWF0ZShtb2R1bGUpO1xuICAgICAgICBjb25zdCBsaWJ6aXAgPSBuZXcgTGliWmlwKG1vZHVsZSwgXCIvaG9tZS93ZWJfdXNlclwiKTtcbiAgICAgICAgY29uc3QgY29uZiA9IGF3YWl0IHRvRG9zYm94Q29uZih0aGlzLmNvbmZpZyk7XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2Ugb2YgdGhpcy5zb3VyY2VzKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlLnR5cGUgIT09IFwiemlwXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IFppcCBpcyBzdXBwb3J0ZWRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc291cmNlID0gSFRUUFJlcXVlc3Qoc291cmNlLnVybCwge1xuICAgICAgICAgICAgICAgIGNhY2hlOiB0aGlzLmNhY2hlLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogXCJhcnJheWJ1ZmZlclwiLFxuICAgICAgICAgICAgfSkudGhlbigoYnVmZmVyOiBzdHJpbmcgfCBBcnJheUJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4QXJyYXkoYnVmZmVyIGFzIEFycmF5QnVmZmVyKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChyZXNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW92ZXJ3cml0ZUNvbmZpZykge1xuICAgICAgICAgICAgYXdhaXQgbGliemlwLndyaXRlRmlsZShcIi5qc2Rvcy9kb3Nib3guY29uZlwiLCBjb25mKTtcbiAgICAgICAgICAgIGF3YWl0IGxpYnppcC53cml0ZUZpbGUoXCIuanNkb3MvcmVhZG1lLnR4dFwiLCByZWFkbWVUeHQpO1xuICAgICAgICAgICAgYXdhaXQgbGliemlwLndyaXRlRmlsZShcIi5qc2Rvcy9qc2Rvcy5qc29uXCIsIEpTT04uc3RyaW5naWZ5KHRoaXMuY29uZmlnLCBudWxsLCAyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBsaWJ6aXAuemlwVG9GcyhyZXNvdXJjZS5kYXRhLCByZXNvdXJjZS5zb3VyY2UucGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3ZlcndyaXRlQ29uZmlnKSB7XG4gICAgICAgICAgICBhd2FpdCBsaWJ6aXAud3JpdGVGaWxlKFwiLmpzZG9zL2Rvc2JveC5jb25mXCIsIGNvbmYpO1xuICAgICAgICAgICAgYXdhaXQgbGliemlwLndyaXRlRmlsZShcIi5qc2Rvcy9yZWFkbWUudHh0XCIsIHJlYWRtZVR4dCk7XG4gICAgICAgICAgICBhd2FpdCBsaWJ6aXAud3JpdGVGaWxlKFwiLmpzZG9zL2pzZG9zLmpzb25cIiwgSlNPTi5zdHJpbmdpZnkodGhpcy5jb25maWcsIG51bGwsIDIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1bmRsZSA9IGF3YWl0IGxpYnppcC56aXBGcm9tRnMoKTtcbiAgICAgICAgbGliemlwLmRlc3Ryb3koKTtcblxuICAgICAgICByZXR1cm4gYnVuZGxlO1xuICAgIH1cblxufVxuXG5cblxuY29uc3QgcmVhZG1lVHh0ID0gYFxuUGxlYXNlIHZpc2l0IG91ciB3ZWJzaXRlOlxuXG4gICAgICAgIF8gICAgICAgICAgICAgICAgX19cbiAgICAgICAoXylfX19fICAgICAgX19fXy8gL19fXyAgX19fX18gX19fX19fX19fICBfX19fIF9fX1xuICAgICAgLyAvIF9fXy9fX19fXy8gX18gIC8gX18gXFxcXC8gX19fLy8gX19fLyBfXyBcXFxcLyBfXyBcXGBfXyBcXFxcXG4gICAgIC8gKF9fICApX19fX18vIC9fLyAvIC9fLyAoX18gICkvIC9fXy8gL18vIC8gLyAvIC8gLyAvXG4gIF9fLyAvX19fXy8gICAgICBcXFxcX18sXy9cXFxcX19fXy9fX19fKF8pX19fL1xcXFxfX19fL18vIC9fLyAvXy9cbiAvX19fL1xuYDtcbiIsIi8vICMganNkb3MgY29uZmlnXG4vLyBpcyBhIGJ1aWxkZXIgdGhhdCBjcmVhdGUgZG9zYm94LmNvbmYgZm9yIHlvdXJcblxuZXhwb3J0IHR5cGUgRG9zQ29uZmlnVmFsdWUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvc0NvbmZpZ09wdGlvbiB7XG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgdmFsdWU6IERvc0NvbmZpZ1ZhbHVlLFxuICAgIGFsbG93ZWRWYWx1ZXM6IERvc0NvbmZpZ1ZhbHVlW10sXG59XG5cbmV4cG9ydCB0eXBlIERvc0NhdGVnb3J5T3B0aW9ucyA9IHsgW25hbWU6IHN0cmluZ106IERvc0NvbmZpZ09wdGlvbiB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIERvc0NvbmZpZ0NhdGVnb3J5IHtcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBvcHRpb25zOiBEb3NDYXRlZ29yeU9wdGlvbnMsXG59XG5cbmV4cG9ydCBjbGFzcyBPdXRwdXRDYXRlZ29yeSBpbXBsZW1lbnRzIERvc0NvbmZpZ0NhdGVnb3J5IHtcbiAgICBuYW1lID0gXCJzZGxcIjtcbiAgICBkZXNjcmlwdGlvbiA9IFwiVGhpcyBzZWN0aW9uIGNvbnRhaW5zIGFsbCBvZiB0aGUgbG93IGxldmVsIHN5c3RlbSBzZXR0aW5ncyBmb3IgaG93IERPU0JveCBpbnRlcmFjdHMgd2l0aCB5b3VyIHJlYWwgaGFyZHdhcmUuIFlvdSBjYW4gZGVmaW5lIHdoYXQgcmVzb2x1dGlvbnMgYXJlIGVtdWxhdGVkLCBob3cgRE9TQm94IHNob3VsZCB0cmVhdCBlcnJvcnMgb3IgbGlzdGVuIHRvIHlvdXIga2V5Ym9hcmQgYW5kIG1vdXNlLiBZb3UgY2FuIG9mdGVuIGFjaGlldmUgYSBmYWlyIGxldmVsIG9mIG9wdGltaXphdGlvbiBieSB3b3JraW5nIHdpdGggdGhlc2Ugc2V0dGluZywgdGhvdWdoIGZvciB0aGUgbW9zdCBwYXJ0IGxlYXZpbmcgdGhlbSBhdCB0aGVpciBkZWZhdWx0IHNldHRpbmdzIHdpbGwgY3JlYXRlIHRoZSBiZXN0IGV4cGVyaWVuY2UuIFRoZXNlIHNldHRpbmdzIGFyZSBwYXNzZWQgb24gdG8gdGhlIFNETCBMaWJyYXJ5IHdoaWNoIGhhbmRsZXMgbG93IGxldmVsIHRoaW5ncyBsaWtlIGlucHV0IGFuZCB0aHJlYWQgcHJpb3JpdHkuXCI7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgYXV0b2xvY2s6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiYXV0b2xvY2tcIixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIk1vdXNlIHdpbGwgYXV0b21hdGljYWxseSBsb2NrLCBpZiB5b3UgY2xpY2sgb24gdGhlIHNjcmVlbi5cIixcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93ZWRWYWx1ZXM6IFt0cnVlLCBmYWxzZV0sXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgRG9zYm94Q2F0ZWdvcnkgaW1wbGVtZW50cyBEb3NDb25maWdDYXRlZ29yeSB7XG4gICAgbmFtZSA9IFwiZG9zYm94XCI7XG4gICAgZGVzY3JpcHRpb24gPSBcIlRoZSBbZG9zYm94XSBzZWN0aW9uIGNvbnRhaW5zIHZhcmlvdXMgc2V0dGluZ3MgdGhhdCBkbyBub3QgcGVydGFpbiB0byBhbnkgb3RoZXIgc2VjdGlvbiAoZS5nLiBzZXR0aW5nIHRoZSBsYW5ndWFnZSB1c2VkIGluIERPU0JveCBoZWxwIHRleHRzLCB3aGVyZSB0byBzdG9yZSBzY3JlZW4gY2FwdHVyZXMsIGV0Yy4pXCI7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbWFjaGluZToge1xuICAgICAgICAgICAgbmFtZTogXCJtYWNoaW5lXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUaGUgdHlwZSBvZiBtYWNoaW5lIHRyaWVzIHRvIGVtdWxhdGUuXCIsXG4gICAgICAgICAgICB2YWx1ZTogXCJzdmdhX3MzXCIsXG4gICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJoZXJjdWxlc1wiLCBcImNnYVwiLCBcInRhbmR5XCIsIFwicGNqclwiLCBcImVnYVwiLCBcInZnYW9ubHlcIiwgXCJzdmdhX3MzXCIsIFwic3ZnYV9ldDMwMDBcIiwgXCJzdmdhX2V0NDAwMFwiLCBcInN2Z2FfcGFyYWRpc2VcIiwgXCJ2ZXNhX25vbGZiXCIsIFwidmVzYV9vbGR2YmVcIl0sXG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgQ3B1Q2F0ZWdvcnkgaW1wbGVtZW50cyBEb3NDb25maWdDYXRlZ29yeSB7XG4gICAgbmFtZSA9IFwiY3B1XCI7XG4gICAgZGVzY3JpcHRpb24gPSBcIlRoZSBDUFUgc2VjdGlvbiBjb250cm9scyBob3cgRE9TQm94IHRyaWVzIHRvIGVtdWxhdGUgdGhlIENQVSwgaG93IGZhc3QgdGhlIGVtdWxhdGlvbiBzaG91bGQgYmUsIGFuZCB0byBhZGp1c3QgaXQuIERPU0JveCBvZmZlcnMgNCBkaWZmZXJlbnQgbWV0aG9kcyBvZiBDUFUgZW11bGF0aW9uLlwiO1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGNvcmU6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiY29yZVwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiQ1BVIENvcmUgdXNlZCBpbiBlbXVsYXRpb24uIGF1dG8gd2lsbCBzd2l0Y2ggdG8gZHluYW1pYyBpZiBhdmFpbGFibGUgYW5kIGFwcHJvcHJpYXRlLlwiLFxuICAgICAgICAgICAgdmFsdWU6IFwiYXV0b1wiLFxuICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiYXV0b1wiLCBcIm5vcm1hbFwiLCBcInNpbXBsZVwiXSxcbiAgICAgICAgfSxcbiAgICAgICAgY3B1dHlwZToge1xuICAgICAgICAgICAgbmFtZTogXCJjcHV0eXBlXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJDUFUgVHlwZSB1c2VkIGluIGVtdWxhdGlvbi4gYXV0byBpcyB0aGUgZmFzdGVzdCBjaG9pY2UuXCIsXG4gICAgICAgICAgICB2YWx1ZTogXCJhdXRvXCIsXG4gICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbXCJhdXRvXCIsIFwiMzg2XCIsIFwiMzg2X3Nsb3dcIiwgXCI0ODZfc2xvd1wiLCBcInBlbnRpdW1fc2xvd1wiLCBcIjM4Nl9wcmVmZXRjaFwiXVxuICAgICAgICB9LFxuICAgICAgICBjeWNsZXM6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiY3ljbGVzXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYEFtb3VudCBvZiBpbnN0cnVjdGlvbnMgRE9TQm94IHRyaWVzIHRvIGVtdWxhdGUgZWFjaCBtaWxsaXNlY29uZC4gU2V0dGluZyB0aGlzIHZhbHVlIHRvbyBoaWdoIHJlc3VsdHMgaW4gc291bmQgZHJvcG91dHMgYW5kIGxhZ3MuXG5DeWNsZXMgY2FuIGJlIHNldCBpbiAzIHdheXM6XG4nYXV0bycgICAgICAgICAgdHJpZXMgdG8gZ3Vlc3Mgd2hhdCBhIGdhbWUgbmVlZHMuXG4gICAgICAgICAgICAgICAgSXQgdXN1YWxseSB3b3JrcywgYnV0IGNhbiBmYWlsIGZvciBjZXJ0YWluIGdhbWVzLlxuJ2ZpeGVkICNudW1iZXInIHdpbGwgc2V0IGEgZml4ZWQgYW1vdW50IG9mIGN5Y2xlcy4gVGhpcyBpcyB3aGF0IHlvdSB1c3VhbGx5IG5lZWQgaWYgJ2F1dG8nIGZhaWxzLlxuICAgICAgICAgICAgICAgIChFeGFtcGxlOiBmaXhlZCA0MDAwKS5cbidtYXgnICAgICAgICAgICB3aWxsIGFsbG9jYXRlIGFzIG11Y2ggY3ljbGVzIGFzIHlvdXIgY29tcHV0ZXIgaXMgYWJsZSB0byBoYW5kbGUuXG5gLFxuICAgICAgICAgICAgdmFsdWU6IFwiYXV0b1wiLFxuICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW1wiYXV0b1wiLCBcImZpeGVkXCIsIFwibWF4XCJdLFxuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCBjbGFzcyBNaXhlckNhdGVnb3J5IGltcGxlbWVudHMgRG9zQ29uZmlnQ2F0ZWdvcnkge1xuICAgIG5hbWUgPSBcIm1peGVyXCI7XG4gICAgZGVzY3JpcHRpb24gPSBcIkhlcmUgeW91IGNhbiBkZWZpbmUgdGhlIHF1YWxpdHkgb2YgZW11bGF0ZWQgYXVkaW8uXCI7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgcmF0ZToge1xuICAgICAgICAgICAgbmFtZTogXCJyYXRlXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJGcmVxdWVuY3kgcmF0ZSBvZiBzb3VuZFwiLFxuICAgICAgICAgICAgdmFsdWU6IDQ0MTAwLFxuICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW10sXG4gICAgICAgIH0sXG4gICAgICAgIG5vc291bmQ6IHtcbiAgICAgICAgICAgIG5hbWU6IFwibm9zb3VuZFwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiRW5hYmxlIHNpbGVudCBtb2RlLCBzb3VuZCBpcyBzdGlsbCBlbXVsYXRlZCB0aG91Z2guXCIsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgICAgICBhbGxvd2VkVmFsdWVzOiBbdHJ1ZSwgZmFsc2VdLFxuICAgICAgICB9LFxuICAgIH07XG59XG5cbmV4cG9ydCBjbGFzcyBBdXRvZXhlY0NhdGVnb3J5IGltcGxlbWVudHMgRG9zQ29uZmlnQ2F0ZWdvcnkge1xuICAgIG5hbWUgPSBcImF1dG9leGVjXCI7XG4gICAgZGVzY3JpcHRpb24gPSBcIkxpbmVzIGluIHRoaXMgc2VjdGlvbiB3aWxsIGJlIHJ1biBhdCBzdGFydHVwXCI7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgc2NyaXB0OiB7XG4gICAgICAgICAgICBuYW1lOiBcImxpbmVzXCIsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJVc2UgXFxcXG4gdG8gc2VwYXJhdGUgbGluZXNcIixcbiAgICAgICAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogW10sXG4gICAgICAgIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb3NDb25maWcge1xuICAgIG91dHB1dDogT3V0cHV0Q2F0ZWdvcnksXG4gICAgZG9zYm94OiBEb3Nib3hDYXRlZ29yeSxcbiAgICBjcHU6IENwdUNhdGVnb3J5LFxuICAgIG1peGVyOiBNaXhlckNhdGVnb3J5LFxuICAgIGF1dG9leGVjOiBBdXRvZXhlY0NhdGVnb3J5LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRG9zQ29uZmlnKCk6IERvc0NvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0cHV0OiBuZXcgT3V0cHV0Q2F0ZWdvcnkoKSxcbiAgICAgICAgZG9zYm94OiBuZXcgRG9zYm94Q2F0ZWdvcnkoKSxcbiAgICAgICAgY3B1OiBuZXcgQ3B1Q2F0ZWdvcnkoKSxcbiAgICAgICAgbWl4ZXI6IG5ldyBNaXhlckNhdGVnb3J5KCksXG4gICAgICAgIGF1dG9leGVjOiBuZXcgQXV0b2V4ZWNDYXRlZ29yeSgpLFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2F0ZWdvcnkoY2F0ZWdvcnk6IERvc0NvbmZpZ0NhdGVnb3J5LCB2YWxpZDogRG9zQ29uZmlnQ2F0ZWdvcnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSB2YWxpZC5uYW1lID09PSBcInNkbFwiID8gXCJvdXRwdXRcIiA6IHZhbGlkLm5hbWU7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKCFjYXRlZ29yeSkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNhdGVnb3J5ICdcIiArIGNhdGVnb3J5TmFtZSArIFwiJyBpcyBtaXNzZWRcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhdGVnb3J5Lm5hbWUgIT09IHZhbGlkLm5hbWUpIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbmNvcnJlY3QgY2F0ZWdvcnkgbmFtZSAnXCIgKyBjYXRlZ29yeS5uYW1lICsgXCInIHNob3VsZCBiZSAnXCIgK1xuICAgICAgICAgICAgICAgIHZhbGlkLm5hbWUgKyBcIidcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoY2F0ZWdvcnkub3B0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjYXRlZ29yeS5vcHRpb25zW2tleV07XG4gICAgICAgICAgICBjb25zdCB2YWxpZE9wdGlvbiA9IHZhbGlkLm9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWxpZE9wdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIlVua25vd24gb3B0aW9uICdcIiArIChuZXh0Lm5hbWUgfHwga2V5KSArIFwiJyBpbiAnXCIgKyBjYXRlZ29yeS5uYW1lICsgXCInXCIpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWxpZE9wdGlvbi5hbGxvd2VkVmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5leHQudmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsb3dlZFZhbHVlID0gdmFsaWRPcHRpb24uYWxsb3dlZFZhbHVlcy5maW5kKCh2KSA9PiB2ID09PSB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnlOYW1lID09PSBcImNwdVwiICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQubmFtZSA9PT0gXCJjeWNsZXNcIiAmJlxuICAgICAgICAgICAgICAgICAgICAodmFsdWUgKyBcIlwiKS5zdGFydHNXaXRoKFwiZml4ZWQgXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG51bSA9IE51bWJlci5wYXJzZUludCgodmFsdWUgYXMgc3RyaW5nKS5zdWJzdHIoXCJmaXhlZCBcIi5sZW5ndGgpLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihudW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiRml4ZWQgdmFsdWUgc2hvdWxkIGNvbmF0YWluIG51bWJlclwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFsbG93ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJJbmNvcnJlY3QgdmFsdWUgJ1wiICsgdmFsdWUgKyBcIicgKFwiICsgKHR5cGVvZiB2YWx1ZSkgKyBcIikgZm9yICdcIiArIGNhdGVnb3J5Lm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIuXCIgKyAobmV4dC5uYW1lIHx8IGtleSkgKyBcIicgYWxsb3dlZCBpcyBcIiArIEpTT04uc3RyaW5naWZ5KHZhbGlkT3B0aW9uLmFsbG93ZWRWYWx1ZXMpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh2YWxpZC5vcHRpb25zKSkge1xuICAgICAgICAgICAgaWYgKCEoa2V5IGluIGNhdGVnb3J5Lm9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk9wdGlvbiAnXCIgKyBrZXkgKyBcIicgaXMgbWlzc2VkIGluICdcIiArIGNhdGVnb3J5TmFtZSArIFwiJ1wiKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUNvbmZpZyhjb25maWc6IERvc0NvbmZpZyk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgdmFsaWQgPSBjcmVhdGVEb3NDb25maWcoKTtcbiAgICBmb3IgKGNvbnN0IGNhdGVnb3J5IG9mIE9iamVjdC5rZXlzKHZhbGlkKSkge1xuICAgICAgICBhd2FpdCB2YWxpZGF0ZUNhdGVnb3J5KChjb25maWcgYXMgYW55KVtjYXRlZ29yeV0sICh2YWxpZCBhcyBhbnkpW2NhdGVnb3J5XSk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBub3JtYWxpemVDYXRlZ29yeShjYXRlZ29yeTogRG9zQ29uZmlnQ2F0ZWdvcnksIHZhbGlkOiBEb3NDb25maWdDYXRlZ29yeSkge1xuICAgIGlmIChjYXRlZ29yeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjYXRlZ29yeS5vcHRpb25zIHx8IHt9KSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBjYXRlZ29yeS5vcHRpb25zW2tleV07XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9uID09PSBcIm51bWJlclwiIHx8XG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KG9wdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkQ2F0ZWdvcnkgPSB2YWxpZC5vcHRpb25zW2tleV07XG4gICAgICAgICAgICBpZiAoIXZhbGlkQ2F0ZWdvcnkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdmFsdWU6IGFueSA9IG9wdGlvbjtcbiAgICAgICAgICAgIGNhdGVnb3J5Lm9wdGlvbnNba2V5XSA9IHsuLi52YWxpZENhdGVnb3J5fTtcbiAgICAgICAgICAgIGNhdGVnb3J5Lm9wdGlvbnNba2V5XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBub3JtYWxpemVDb25maWcoY29uZmlnOiBEb3NDb25maWcpIDogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCB2YWxpZCA9IGNyZWF0ZURvc0NvbmZpZygpO1xuICAgIGZvciAoY29uc3QgY2F0ZWdvcnkgb2YgT2JqZWN0LmtleXModmFsaWQpKSB7XG4gICAgICAgIGF3YWl0IG5vcm1hbGl6ZUNhdGVnb3J5KChjb25maWcgYXMgYW55KVtjYXRlZ29yeV0sICh2YWxpZCBhcyBhbnkpW2NhdGVnb3J5XSk7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9Eb3Nib3hDb25mKGNvbmZpZzogRG9zQ29uZmlnKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBhd2FpdCBub3JtYWxpemVDb25maWcoY29uZmlnKTtcbiAgICBhd2FpdCB2YWxpZGF0ZUNvbmZpZyhjb25maWcpO1xuXG4gICAgY29uc3QgY29udGVudCA9XG4gICAgICAgIHdyaXRlQ2F0ZWdvcnkoY29uZmlnLm91dHB1dCkgK1xuICAgICAgICB3cml0ZU91dHB1dERlZmF1bHRzKCkgK1xuICAgICAgICB3cml0ZUNhdGVnb3J5KGNvbmZpZy5kb3Nib3gpICtcbiAgICAgICAgd3JpdGVEb3Nib3hEZWZhdWx0cygpICtcbiAgICAgICAgd3JpdGVDYXRlZ29yeShjb25maWcuY3B1KSArXG4gICAgICAgIHdyaXRlQ3B1RGVmYXVsdHMoKSArXG4gICAgICAgIHdyaXRlQ2F0ZWdvcnkoY29uZmlnLm1peGVyKSArXG4gICAgICAgIHdyaXRlTWl4ZXJEZWZhdWx0cygpICtcbiAgICAgICAgd3JpdGVPdGhlckRlZmF1bHRzKCkgK1xuICAgICAgICB3cml0ZUF1dG9leGVjKGNvbmZpZy5hdXRvZXhlYyk7XG5cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29udGVudCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQ2F0ZWdvcnkoc2VjdGlvbjogRG9zQ29uZmlnQ2F0ZWdvcnkpOiBzdHJpbmcge1xuICAgIGxldCBib2R5ID0gXCJcIjtcblxuICAgIGJvZHkgKz0gYFske3NlY3Rpb24ubmFtZX1dXFxuYDtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzZWN0aW9uLm9wdGlvbnMpLnNvcnQoKSkge1xuICAgICAgICBjb25zdCBuZXh0ID0gc2VjdGlvbi5vcHRpb25zW2tleV07XG4gICAgICAgIGJvZHkgKz0gYCR7bmV4dC5uYW1lfT0ke25leHQudmFsdWV9XFxuYFxuICAgIH1cblxuICAgIHJldHVybiBib2R5O1xufVxuXG5mdW5jdGlvbiB3cml0ZUF1dG9leGVjKHNlY3Rpb246IEF1dG9leGVjQ2F0ZWdvcnkpOiBzdHJpbmcge1xuICAgIHJldHVybiBgW2F1dG9leGVjXVxuZWNobyBvZmZcbm1vdW50IGMgLlxuYzpcblxudHlwZSBqc2Rvc34xL3JlYWRtZS50eHRcbmVjaG8gb25cblxuJHtzZWN0aW9uLm9wdGlvbnMuc2NyaXB0LnZhbHVlfVxuXG4jIEdlbmVyYXRlZCB1c2luZyBodHRwczovL2pzLWRvcy5jb21cbiMg4paI4paA4paA4paA4paA4paA4paIIOKWiCAg4paE4paE4paE4paA4paA4paIIOKWiOKWgOKWgOKWgOKWgOKWgOKWiFxuIyDilogg4paI4paI4paIIOKWiCDilojilojiloQg4paIIOKWgCDiloQg4paIIOKWiOKWiOKWiCDilohcbiMg4paIIOKWgOKWgOKWgCDilogg4paE4paI4paIIOKWgCDiloDiloDilogg4paIIOKWgOKWgOKWgCDilohcbiMg4paA4paA4paA4paA4paA4paA4paAIOKWgCDilojiloTiloDiloTiloAg4paIIOKWgOKWgOKWgOKWgOKWgOKWgOKWgFxuIyDilojiloDiloTiloTilojiloDiloDiloTiloQg4paAIOKWgOKWiOKWhOKWhOKWhOKWhCDiloDiloTilojiloDilojiloBcbiMg4paI4paAIOKWgCDiloDiloDiloQg4paI4paAIOKWhCDiloTiloDiloDiloDiloQg4paI4paA4paI4paEXG4jIOKWhCDiloTiloQg4paI4paA4paA4paEIOKWhOKWgOKWhOKWgOKWgOKWiCAg4paA4paA4paE4paA4paA4paI4paAXG4jICAg4paE4paA4paA4paI4paA4paAIOKWiOKWgOKWiOKWgOKWiOKWgOKWgOKWhCDiloDilojilojiloDilojiloRcbiMg4paA4paA4paAIOKWgCDiloAg4paI4paE4paIIOKWgOKWiOKWhOKWhOKWiOKWgOKWgOKWgOKWiOKWgOKWgFxuIyDilojiloDiloDiloDiloDiloDilogg4paE4paE4paEIOKWhCDiloQg4paIIOKWgCDilojiloTiloTiloTiloRcbiMg4paIIOKWiOKWiOKWiCDilogg4paA4paI4paA4paA4paE4paA4paA4paE4paI4paI4paI4paI4paA4paA4paI4paE4paIXG4jIOKWiCDiloDiloDiloAg4paIIOKWhOKWgOKWgOKWiOKWgOKWiOKWgOKWhCDiloDiloDiloTiloTilojiloTilohcbiMg4paA4paA4paA4paA4paA4paA4paAIOKWgCAgIOKWgOKWgCDiloAgIOKWgCAgIOKWgOKWgOKWgFxuYDtcbn1cblxuZnVuY3Rpb24gd3JpdGVPdXRwdXREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gYFxuZnVsbHNjcmVlbj1mYWxzZVxuZnVsbGRvdWJsZT1mYWxzZVxuZnVsbHJlc29sdXRpb249b3JpZ2luYWxcbndpbmRvd3Jlc29sdXRpb249b3JpZ2luYWxcbm91dHB1dD1zdXJmYWNlXG5zZW5zaXRpdml0eT0xMDBcbndhaXRvbmVycm9yPXRydWVcbnByaW9yaXR5PWhpZ2hlcixub3JtYWxcbm1hcHBlcmZpbGU9bWFwcGVyLWpzZG9zLm1hcFxudXNlc2NhbmNvZGVzPXRydWVcbnZzeW5jPWZhbHNlXG5gO1xufVxuXG5mdW5jdGlvbiB3cml0ZURvc2JveERlZmF1bHRzKCkge1xuICAgIHJldHVybiBgXG5sYW5ndWFnZT1cbmNhcHR1cmVzPWNhcHR1cmVcbm1lbXNpemU9MTZcbmA7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQ3B1RGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGBcbmN5Y2xldXA9MTBcbmN5Y2xlZG93bj0yMFxuYDtcbn1cblxuZnVuY3Rpb24gd3JpdGVNaXhlckRlZmF1bHRzKCkge1xuICAgIHJldHVybiBgXG5ibG9ja3NpemU9MTAyNFxucHJlYnVmZmVyPTIwXG5gO1xufVxuXG5mdW5jdGlvbiB3cml0ZU90aGVyRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGBcbltyZW5kZXJdXG4jIGZyYW1lc2tpcDogSG93IG1hbnkgZnJhbWVzIERPU0JveCBza2lwcyBiZWZvcmUgZHJhd2luZyBvbmUuXG4jICAgIGFzcGVjdDogRG8gYXNwZWN0IGNvcnJlY3Rpb24sIGlmIHlvdXIgb3V0cHV0IG1ldGhvZCBkb2Vzbid0IHN1cHBvcnQgc2NhbGluZyB0aGlzIGNhbiBzbG93IHRoaW5ncyBkb3duIS5cbiMgICAgc2NhbGVyOiBTY2FsZXIgdXNlZCB0byBlbmxhcmdlL2VuaGFuY2UgbG93IHJlc29sdXRpb24gbW9kZXMuXG4jICAgICAgICAgICAgICBJZiAnZm9yY2VkJyBpcyBhcHBlbmRlZCwgdGhlbiB0aGUgc2NhbGVyIHdpbGwgYmUgdXNlZCBldmVuIGlmIHRoZSByZXN1bHQgbWlnaHQgbm90IGJlIGRlc2lyZWQuXG4jICAgICAgICAgICAgUG9zc2libGUgdmFsdWVzOiBub25lLCBub3JtYWwyeCwgbm9ybWFsM3gsIGFkdm1hbWUyeCwgYWR2bWFtZTN4LCBhZHZpbnRlcnAyeCwgYWR2aW50ZXJwM3gsIGhxMngsIGhxM3gsIDJ4c2FpLCBzdXBlcjJ4c2FpLCBzdXBlcmVhZ2xlLCB0djJ4LCB0djN4LCByZ2IyeCwgcmdiM3gsIHNjYW4yeCwgc2NhbjN4LlxuXG5mcmFtZXNraXA9MFxuYXNwZWN0PWZhbHNlXG5zY2FsZXI9bm9uZVxuXG5bbWlkaV1cbiMgICAgIG1wdTQwMTogVHlwZSBvZiBNUFUtNDAxIHRvIGVtdWxhdGUuXG4jICAgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogaW50ZWxsaWdlbnQsIHVhcnQsIG5vbmUuXG4jIG1pZGlkZXZpY2U6IERldmljZSB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgTUlESSBkYXRhIGZyb20gTVBVLTQwMS5cbiMgICAgICAgICAgICAgUG9zc2libGUgdmFsdWVzOiBkZWZhdWx0LCB3aW4zMiwgYWxzYSwgb3NzLCBjb3JlYXVkaW8sIGNvcmVtaWRpLCBub25lLlxuIyBtaWRpY29uZmlnOiBTcGVjaWFsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGRldmljZSBkcml2ZXIuIFRoaXMgaXMgdXN1YWxseSB0aGUgaWQgb2YgdGhlIGRldmljZSB5b3Ugd2FudCB0byB1c2UuXG4jICAgICAgICAgICAgICAgU2VlIHRoZSBSRUFETUUvTWFudWFsIGZvciBtb3JlIGRldGFpbHMuXG5cbm1wdTQwMT1pbnRlbGxpZ2VudFxubWlkaWRldmljZT1kZWZhdWx0XG5taWRpY29uZmlnPVxuXG5bc2JsYXN0ZXJdXG4jICBzYnR5cGU6IFR5cGUgb2YgU291bmRibGFzdGVyIHRvIGVtdWxhdGUuIGdiIGlzIEdhbWVibGFzdGVyLlxuIyAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IHNiMSwgc2IyLCBzYnBybzEsIHNicHJvMiwgc2IxNiwgZ2IsIG5vbmUuXG4jICBzYmJhc2U6IFRoZSBJTyBhZGRyZXNzIG9mIHRoZSBzb3VuZGJsYXN0ZXIuXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogMjIwLCAyNDAsIDI2MCwgMjgwLCAyYTAsIDJjMCwgMmUwLCAzMDAuXG4jICAgICBpcnE6IFRoZSBJUlEgbnVtYmVyIG9mIHRoZSBzb3VuZGJsYXN0ZXIuXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogNywgNSwgMywgOSwgMTAsIDExLCAxMi5cbiMgICAgIGRtYTogVGhlIERNQSBudW1iZXIgb2YgdGhlIHNvdW5kYmxhc3Rlci5cbiMgICAgICAgICAgUG9zc2libGUgdmFsdWVzOiAxLCA1LCAwLCAzLCA2LCA3LlxuIyAgICBoZG1hOiBUaGUgSGlnaCBETUEgbnVtYmVyIG9mIHRoZSBzb3VuZGJsYXN0ZXIuXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogMSwgNSwgMCwgMywgNiwgNy5cbiMgc2JtaXhlcjogQWxsb3cgdGhlIHNvdW5kYmxhc3RlciBtaXhlciB0byBtb2RpZnkgdGhlIERPU0JveCBtaXhlci5cbiMgb3BsbW9kZTogVHlwZSBvZiBPUEwgZW11bGF0aW9uLiBPbiAnYXV0bycgdGhlIG1vZGUgaXMgZGV0ZXJtaW5lZCBieSBzYmxhc3RlciB0eXBlLiBBbGwgT1BMIG1vZGVzIGFyZSBBZGxpYi1jb21wYXRpYmxlLCBleGNlcHQgZm9yICdjbXMnLlxuIyAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IGF1dG8sIGNtcywgb3BsMiwgZHVhbG9wbDIsIG9wbDMsIG5vbmUuXG4jICBvcGxlbXU6IFByb3ZpZGVyIGZvciB0aGUgT1BMIGVtdWxhdGlvbi4gY29tcGF0IG1pZ2h0IHByb3ZpZGUgYmV0dGVyIHF1YWxpdHkgKHNlZSBvcGxyYXRlIGFzIHdlbGwpLlxuIyAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IGRlZmF1bHQsIGNvbXBhdCwgZmFzdC5cbiMgb3BscmF0ZTogU2FtcGxlIHJhdGUgb2YgT1BMIG11c2ljIGVtdWxhdGlvbi4gVXNlIDQ5NzE2IGZvciBoaWdoZXN0IHF1YWxpdHkgKHNldCB0aGUgbWl4ZXIgcmF0ZSBhY2NvcmRpbmdseSkuXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogNDQxMDAsIDQ5NzE2LCA0ODAwMCwgMzIwMDAsIDIyMDUwLCAxNjAwMCwgMTEwMjUsIDgwMDAuXG5cbnNidHlwZT1zYjE2XG5zYmJhc2U9MjIwXG5pcnE9N1xuZG1hPTFcbmhkbWE9NVxuc2JtaXhlcj10cnVlXG5vcGxtb2RlPWF1dG9cbm9wbGVtdT1kZWZhdWx0XG5vcGxyYXRlPTQ0MTAwXG5cbltndXNdXG4jICAgICAgZ3VzOiBFbmFibGUgdGhlIEdyYXZpcyBVbHRyYXNvdW5kIGVtdWxhdGlvbi5cbiMgIGd1c3JhdGU6IFNhbXBsZSByYXRlIG9mIFVsdHJhc291bmQgZW11bGF0aW9uLlxuIyAgICAgICAgICAgUG9zc2libGUgdmFsdWVzOiA0NDEwMCwgNDgwMDAsIDMyMDAwLCAyMjA1MCwgMTYwMDAsIDExMDI1LCA4MDAwLCA0OTcxNi5cbiMgIGd1c2Jhc2U6IFRoZSBJTyBiYXNlIGFkZHJlc3Mgb2YgdGhlIEdyYXZpcyBVbHRyYXNvdW5kLlxuIyAgICAgICAgICAgUG9zc2libGUgdmFsdWVzOiAyNDAsIDIyMCwgMjYwLCAyODAsIDJhMCwgMmMwLCAyZTAsIDMwMC5cbiMgICBndXNpcnE6IFRoZSBJUlEgbnVtYmVyIG9mIHRoZSBHcmF2aXMgVWx0cmFzb3VuZC5cbiMgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogNSwgMywgNywgOSwgMTAsIDExLCAxMi5cbiMgICBndXNkbWE6IFRoZSBETUEgY2hhbm5lbCBvZiB0aGUgR3JhdmlzIFVsdHJhc291bmQuXG4jICAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IDMsIDAsIDEsIDUsIDYsIDcuXG4jIHVsdHJhZGlyOiBQYXRoIHRvIFVsdHJhc291bmQgZGlyZWN0b3J5LiBJbiB0aGlzIGRpcmVjdG9yeVxuIyAgICAgICAgICAgdGhlcmUgc2hvdWxkIGJlIGEgTUlESSBkaXJlY3RvcnkgdGhhdCBjb250YWluc1xuIyAgICAgICAgICAgdGhlIHBhdGNoIGZpbGVzIGZvciBHVVMgcGxheWJhY2suIFBhdGNoIHNldHMgdXNlZFxuIyAgICAgICAgICAgd2l0aCBUaW1pZGl0eSBzaG91bGQgd29yayBmaW5lLlxuXG5ndXM9ZmFsc2Vcbmd1c3JhdGU9NDQxMDBcbmd1c2Jhc2U9MjQwXG5ndXNpcnE9NVxuZ3VzZG1hPTNcbnVsdHJhZGlyPUM6XFxcXFVMVFJBU05EXG5cbltzcGVha2VyXVxuIyBwY3NwZWFrZXI6IEVuYWJsZSBQQy1TcGVha2VyIGVtdWxhdGlvbi5cbiMgICAgcGNyYXRlOiBTYW1wbGUgcmF0ZSBvZiB0aGUgUEMtU3BlYWtlciBzb3VuZCBnZW5lcmF0aW9uLlxuIyAgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogNDQxMDAsIDQ4MDAwLCAzMjAwMCwgMjIwNTAsIDE2MDAwLCAxMTAyNSwgODAwMCwgNDk3MTYuXG4jICAgICB0YW5keTogRW5hYmxlIFRhbmR5IFNvdW5kIFN5c3RlbSBlbXVsYXRpb24uIEZvciAnYXV0bycsIGVtdWxhdGlvbiBpcyBwcmVzZW50IG9ubHkgaWYgbWFjaGluZSBpcyBzZXQgdG8gJ3RhbmR5Jy5cbiMgICAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IGF1dG8sIG9uLCBvZmYuXG4jIHRhbmR5cmF0ZTogU2FtcGxlIHJhdGUgb2YgdGhlIFRhbmR5IDMtVm9pY2UgZ2VuZXJhdGlvbi5cbiMgICAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IDQ0MTAwLCA0ODAwMCwgMzIwMDAsIDIyMDUwLCAxNjAwMCwgMTEwMjUsIDgwMDAsIDQ5NzE2LlxuIyAgICBkaXNuZXk6IEVuYWJsZSBEaXNuZXkgU291bmQgU291cmNlIGVtdWxhdGlvbi4gKENvdm94IFZvaWNlIE1hc3RlciBhbmQgU3BlZWNoIFRoaW5nIGNvbXBhdGlibGUpLlxuXG5wY3NwZWFrZXI9dHJ1ZVxucGNyYXRlPTQ0MTAwXG50YW5keT1hdXRvXG50YW5keXJhdGU9NDQxMDBcbmRpc25leT10cnVlXG5cbltqb3lzdGlja11cbiMgam95c3RpY2t0eXBlOiBUeXBlIG9mIGpveXN0aWNrIHRvIGVtdWxhdGU6IGF1dG8gKGRlZmF1bHQpLCBub25lLFxuIyAgICAgICAgICAgICAgIDJheGlzIChzdXBwb3J0cyB0d28gam95c3RpY2tzKSxcbiMgICAgICAgICAgICAgICA0YXhpcyAoc3VwcG9ydHMgb25lIGpveXN0aWNrLCBmaXJzdCBqb3lzdGljayB1c2VkKSxcbiMgICAgICAgICAgICAgICA0YXhpc18yIChzdXBwb3J0cyBvbmUgam95c3RpY2ssIHNlY29uZCBqb3lzdGljayB1c2VkKSxcbiMgICAgICAgICAgICAgICBmY3MgKFRocnVzdG1hc3RlciksIGNoIChDSCBGbGlnaHRzdGljaykuXG4jICAgICAgICAgICAgICAgbm9uZSBkaXNhYmxlcyBqb3lzdGljayBlbXVsYXRpb24uXG4jICAgICAgICAgICAgICAgYXV0byBjaG9vc2VzIGVtdWxhdGlvbiBkZXBlbmRpbmcgb24gcmVhbCBqb3lzdGljayhzKS5cbiMgICAgICAgICAgICAgICAoUmVtZW1iZXIgdG8gcmVzZXQgZG9zYm94J3MgbWFwcGVyZmlsZSBpZiB5b3Ugc2F2ZWQgaXQgZWFybGllcilcbiMgICAgICAgICAgICAgICBQb3NzaWJsZSB2YWx1ZXM6IGF1dG8sIDJheGlzLCA0YXhpcywgNGF4aXNfMiwgZmNzLCBjaCwgbm9uZS5cbiMgICAgICAgIHRpbWVkOiBlbmFibGUgdGltZWQgaW50ZXJ2YWxzIGZvciBheGlzLiBFeHBlcmltZW50IHdpdGggdGhpcyBvcHRpb24sIGlmIHlvdXIgam95c3RpY2sgZHJpZnRzIChhd2F5KS5cbiMgICAgIGF1dG9maXJlOiBjb250aW51b3VzbHkgZmlyZXMgYXMgbG9uZyBhcyB5b3Uga2VlcCB0aGUgYnV0dG9uIHByZXNzZWQuXG4jICAgICAgIHN3YXAzNDogc3dhcCB0aGUgM3JkIGFuZCB0aGUgNHRoIGF4aXMuIGNhbiBiZSB1c2VmdWwgZm9yIGNlcnRhaW4gam95c3RpY2tzLlxuIyAgIGJ1dHRvbndyYXA6IGVuYWJsZSBidXR0b24gd3JhcHBpbmcgYXQgdGhlIG51bWJlciBvZiBlbXVsYXRlZCBidXR0b25zLlxuXG5qb3lzdGlja3R5cGU9YXV0b1xudGltZWQ9dHJ1ZVxuYXV0b2ZpcmU9ZmFsc2VcbnN3YXAzND1mYWxzZVxuYnV0dG9ud3JhcD1mYWxzZVxuXG5bc2VyaWFsXVxuIyBzZXJpYWwxOiBzZXQgdHlwZSBvZiBkZXZpY2UgY29ubmVjdGVkIHRvIGNvbSBwb3J0LlxuIyAgICAgICAgICBDYW4gYmUgZGlzYWJsZWQsIGR1bW15LCBtb2RlbSwgbnVsbG1vZGVtLCBkaXJlY3RzZXJpYWwuXG4jICAgICAgICAgIEFkZGl0aW9uYWwgcGFyYW1ldGVycyBtdXN0IGJlIGluIHRoZSBzYW1lIGxpbmUgaW4gdGhlIGZvcm0gb2ZcbiMgICAgICAgICAgcGFyYW1ldGVyOnZhbHVlLiBQYXJhbWV0ZXIgZm9yIGFsbCB0eXBlcyBpcyBpcnEgKG9wdGlvbmFsKS5cbiMgICAgICAgICAgZm9yIGRpcmVjdHNlcmlhbDogcmVhbHBvcnQgKHJlcXVpcmVkKSwgcnhkZWxheSAob3B0aW9uYWwpLlxuIyAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWFscG9ydDpDT00xIHJlYWxwb3J0OnR0eVMwKS5cbiMgICAgICAgICAgZm9yIG1vZGVtOiBsaXN0ZW5wb3J0IChvcHRpb25hbCkuXG4jICAgICAgICAgIGZvciBudWxsbW9kZW06IHNlcnZlciwgcnhkZWxheSwgdHhkZWxheSwgdGVsbmV0LCB1c2VkdHIsXG4jICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50LCBwb3J0LCBpbmhzb2NrZXQgKGFsbCBvcHRpb25hbCkuXG4jICAgICAgICAgIEV4YW1wbGU6IHNlcmlhbDE9bW9kZW0gbGlzdGVucG9ydDo1MDAwXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogZHVtbXksIGRpc2FibGVkLCBtb2RlbSwgbnVsbG1vZGVtLCBkaXJlY3RzZXJpYWwuXG4jIHNlcmlhbDI6IHNlZSBzZXJpYWwxXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogZHVtbXksIGRpc2FibGVkLCBtb2RlbSwgbnVsbG1vZGVtLCBkaXJlY3RzZXJpYWwuXG4jIHNlcmlhbDM6IHNlZSBzZXJpYWwxXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogZHVtbXksIGRpc2FibGVkLCBtb2RlbSwgbnVsbG1vZGVtLCBkaXJlY3RzZXJpYWwuXG4jIHNlcmlhbDQ6IHNlZSBzZXJpYWwxXG4jICAgICAgICAgIFBvc3NpYmxlIHZhbHVlczogZHVtbXksIGRpc2FibGVkLCBtb2RlbSwgbnVsbG1vZGVtLCBkaXJlY3RzZXJpYWwuXG5cbnNlcmlhbDE9ZHVtbXlcbnNlcmlhbDI9ZHVtbXlcbnNlcmlhbDM9ZGlzYWJsZWRcbnNlcmlhbDQ9ZGlzYWJsZWRcblxuW2Rvc11cbiMgICAgICAgICAgICB4bXM6IEVuYWJsZSBYTVMgc3VwcG9ydC5cbiMgICAgICAgICAgICBlbXM6IEVuYWJsZSBFTVMgc3VwcG9ydC5cbiMgICAgICAgICAgICB1bWI6IEVuYWJsZSBVTUIgc3VwcG9ydC5cbiMga2V5Ym9hcmRsYXlvdXQ6IExhbmd1YWdlIGNvZGUgb2YgdGhlIGtleWJvYXJkIGxheW91dCAob3Igbm9uZSkuXG5cbnhtcz10cnVlXG5lbXM9dHJ1ZVxudW1iPXRydWVcbmtleWJvYXJkbGF5b3V0PWF1dG9cblxuW2lweF1cbiMgaXB4OiBFbmFibGUgaXB4IG92ZXIgVURQL0lQIGVtdWxhdGlvbi5cblxuaXB4PWZhbHNlXG5gO1xufVxuIiwiaW1wb3J0IHsgV2FzbU1vZHVsZSB9IGZyb20gXCIuLi8uLi8uLi9pbXBsL21vZHVsZXNcIjtcbmltcG9ydCB7IFRyYW5zcG9ydExheWVyLCBNZXNzYWdlSGFuZGxlciwgQ2xpZW50TWVzc2FnZSwgU2VydmVyTWVzc2FnZSB9IGZyb20gXCIuLi8uLi8uLi9wcm90b2NvbC9wcm90b2NvbFwiO1xuaW1wb3J0IHsgTWVzc2FnZXNRdWV1ZSB9IGZyb20gXCIuLi8uLi8uLi9wcm90b2NvbC9tZXNzYWdlcy1xdWV1ZVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZG9zRGlyZWN0KHdhc21Nb2R1bGU6IFdhc21Nb2R1bGUsIHNlc3Npb25JZDogc3RyaW5nKTogUHJvbWlzZTxUcmFuc3BvcnRMYXllcj4ge1xuICAgIGNvbnN0IG1lc3NhZ2VzUXVldWUgPSBuZXcgTWVzc2FnZXNRdWV1ZSgpO1xuICAgIGxldCBoYW5kbGVyOiBNZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2VzUXVldWUuaGFuZGxlci5iaW5kKG1lc3NhZ2VzUXVldWUpO1xuXG4gICAgY29uc3QgbW9kdWxlOiBhbnkgPSB7fTtcblxuICAgIG1vZHVsZS5wb3N0TWVzc2FnZSA9IChuYW1lOiBTZXJ2ZXJNZXNzYWdlLCBwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pID0+IHtcbiAgICAgICAgaGFuZGxlcihuYW1lLCBwcm9wcyk7XG4gICAgfTtcblxuICAgIGNvbnN0IHNsZWVwSGFuZGxlciA9IChlOiBNZXNzYWdlRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGUuZGF0YTtcbiAgICAgICAgaWYgKGRhdGE/Lm5hbWUgPT09IFwid3Mtc3luYy1zbGVlcFwiICYmIGRhdGEucHJvcHMuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgbmFtZTogXCJ3Yy1zeW5jLXNsZWVwXCIsIHByb3BzOiBkYXRhLnByb3BzIH0sIFwiKlwiKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCB0cmFuc3BvcnRMYXllcjogVHJhbnNwb3J0TGF5ZXIgPSB7XG4gICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgc2VuZE1lc3NhZ2VUb1NlcnZlcjogKG5hbWU6IENsaWVudE1lc3NhZ2UsIHByb3BzPzoge1trZXk6IHN0cmluZ106IGFueX0pID0+IHtcbiAgICAgICAgICAgIG1vZHVsZS5tZXNzYWdlSGFuZGxlcih7IGRhdGE6IHsgbmFtZSwgcHJvcHMgfSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5pdE1lc3NhZ2VIYW5kbGVyOiAobmV3SGFuZGxlcjogTWVzc2FnZUhhbmRsZXIpID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBuZXdIYW5kbGVyO1xuICAgICAgICAgICAgbWVzc2FnZXNRdWV1ZS5zZW5kVG8oaGFuZGxlcik7XG4gICAgICAgIH0sXG4gICAgICAgIGV4aXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHNsZWVwSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcblxuICAgICh0cmFuc3BvcnRMYXllciBhcyBhbnkpLm1vZHVsZSA9IG1vZHVsZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBzbGVlcEhhbmRsZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBhd2FpdCB3YXNtTW9kdWxlLmluc3RhbnRpYXRlKG1vZHVsZSk7XG4gICAgbW9kdWxlLmNhbGxNYWluKFtzZXNzaW9uSWRdKTtcblxuICAgIHJldHVybiB0cmFuc3BvcnRMYXllcjtcbn1cbiIsImltcG9ydCB7IFdhc21Nb2R1bGUgfSBmcm9tIFwiLi4vLi4vLi4vaW1wbC9tb2R1bGVzXCI7XG5pbXBvcnQgeyBUcmFuc3BvcnRMYXllciwgTWVzc2FnZUhhbmRsZXIsIENsaWVudE1lc3NhZ2UgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG9jb2wvcHJvdG9jb2xcIjtcbmltcG9ydCB7IE1lc3NhZ2VzUXVldWUgfSBmcm9tIFwiLi4vLi4vLi4vcHJvdG9jb2wvbWVzc2FnZXMtcXVldWVcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRvc1dvcmtlcih3b3JrZXJVcmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhc21Nb2R1bGU6IFdhc21Nb2R1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHN0cmluZyk6IFByb21pc2U8VHJhbnNwb3J0TGF5ZXI+IHtcbiAgICBjb25zdCBtZXNzYWdlc1F1ZXVlID0gbmV3IE1lc3NhZ2VzUXVldWUoKTtcbiAgICBsZXQgaGFuZGxlcjogTWVzc2FnZUhhbmRsZXIgPSBtZXNzYWdlc1F1ZXVlLmhhbmRsZXIuYmluZChtZXNzYWdlc1F1ZXVlKTtcblxuICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyVXJsKTtcbiAgICB3b3JrZXIub25lcnJvciA9IChlKSA9PiB7XG4gICAgICAgIGhhbmRsZXIoXCJ3cy1lcnJcIiwgeyB0eXBlOiBlLnR5cGUsIGZpbGVuYW1lOiBlLmZpbGVuYW1lLCBtZXNzYWdlOiBlLm1lc3NhZ2UgfSk7XG4gICAgfTtcbiAgICB3b3JrZXIub25tZXNzYWdlID0gKGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGUuZGF0YTtcbiAgICAgICAgaWYgKGRhdGE/Lm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaGFuZGxlcihkYXRhLm5hbWUsIGRhdGEucHJvcHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgd2FzbU1vZHVsZS5pbnN0YW50aWF0ZSh7fSk7XG5cbiAgICBjb25zdCB0cmFuc3BvcnRMYXllcjogVHJhbnNwb3J0TGF5ZXIgPSB7XG4gICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgc2VuZE1lc3NhZ2VUb1NlcnZlcjogKG5hbWU6IENsaWVudE1lc3NhZ2UsIHByb3BzPzoge1trZXk6IHN0cmluZ106IGFueX0pID0+IHtcbiAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7IG5hbWUsIHByb3BzIH0pO1xuICAgICAgICB9LFxuICAgICAgICBpbml0TWVzc2FnZUhhbmRsZXI6IChuZXdIYW5kbGVyOiBNZXNzYWdlSGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgaGFuZGxlciA9IG5ld0hhbmRsZXI7XG4gICAgICAgICAgICBtZXNzYWdlc1F1ZXVlLnNlbmRUbyhoYW5kbGVyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXhpdDogKCkgPT4ge1xuICAgICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICB9LFxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgICB0cmFuc3BvcnRMYXllci5zZW5kTWVzc2FnZVRvU2VydmVyKFwid2MtaW5zdGFsbFwiLCB7XG4gICAgICAgICAgICBtb2R1bGU6ICh3YXNtTW9kdWxlIGFzIGFueSkud2FzbU1vZHVsZSxcbiAgICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cmFuc3BvcnRMYXllci5zZW5kTWVzc2FnZVRvU2VydmVyKFwid2MtaW5zdGFsbFwiLCB7IHNlc3Npb25JZCB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNwb3J0TGF5ZXI7XG59XG4iLCJpbXBvcnQgRG9zQnVuZGxlIGZyb20gXCIuL2Rvcy9idW5kbGUvZG9zLWJ1bmRsZVwiO1xuaW1wb3J0IGVtdWxhdG9yc0ltcGwgZnJvbSBcIi4vaW1wbC9lbXVsYXRvcnMtaW1wbFwiO1xuXG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gXCIuL2NhY2hlXCI7XG5pbXBvcnQgeyBEb3NDb25maWcgfSBmcm9tIFwiLi9kb3MvYnVuZGxlL2Rvcy1jb25mXCI7XG5pbXBvcnQgeyBUcmFuc3BvcnRMYXllciB9IGZyb20gXCIuL3Byb3RvY29sL3Byb3RvY29sXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW11bGF0b3JzIHtcbiAgICAvLyAqIHBhdGhQcmVmaXggLSBieSBkZWZhdWx0IGVtdWxhdG9ycyB3aWxsIGxvYWQgd2FzbSBtb2R1bGVzIHJlbGF0aXZlbHkgZnJvbSBjdXJyZW50IHBhdGgsXG4gICAgLy8geW91IHNob3VsZCBzcGVjaWZ5IHBhdGggcHJlZml4IGlmIHlvdSB3YW50IHRvIGxvYWQgdGhlbSBmcm9tIGRpZmZlcmVudCBwbGFjZVxuICAgIHBhdGhQcmVmaXg6IHN0cmluZztcblxuICAgIC8vICogY2FjaGVTZWVkXG4gICAgY2FjaGVTZWVkOiBzdHJpbmc7XG5cbiAgICAvLyAqIGNhY2hlIC0gYnkgZGVmYXVsdCBjYWNoZSB0aGF0IHN0b3JlIHdhc20gYmluYXJpZXMsIHRoaXMgY2FjaGUgaXMgd2lwZWQgb24gYW55IGpzLWRvcyB2ZXJzaW9uIGNoYW5nZVxuICAgIGNhY2hlOiAoY2FjaGVOYW1lPzogc3RyaW5nKSA9PiBQcm9taXNlPENhY2hlPjtcblxuICAgIGRvc0J1bmRsZTogKCkgPT4gUHJvbWlzZTxEb3NCdW5kbGU+O1xuXG4gICAgLy8gKiBkb3Nib3hOb2RlIC0gY3JlYXRlRE9TQk9YIE5vZGUgZW11bGF0b3IgYmFja2VuZFxuICAgIGRvc2JveE5vZGU6IChidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10pID0+IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT47XG5cbiAgICAvLyAqIGRvc2JveERpcmVjdCAtIGNyZWF0ZSBET1NCT1ggRGlyZWN0IGVtdWxhdG9yIGJhY2tlbmRcbiAgICBkb3Nib3hEaXJlY3Q6IChidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10pID0+IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT47XG5cbiAgICAvLyAqIGRvc2JveFdvcmtlciAtIGNyZWF0ZSBET1NCT1ggV29ya2VyIGVtdWxhdG9yIGJhY2tlbmRcbiAgICBkb3Nib3hXb3JrZXI6IChidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10pID0+IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT47XG5cbiAgICAvLyAqIGphbnVzIC0gY3JlYXRlIGphbnVzIGJhY2tlbmQgZm9yIGdpdmVuIHVybFxuICAgIGphbnVzOiAocmVzdFVybDogc3RyaW5nKSA9PiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+O1xuXG4gICAgLy8gKiBiYWNrZW5kIC0gY3JlYXRlIGFic3RyYWN0IGVtdWxhdGlvbiBiYWNrZW5kIGJ5IGdpdmVuIFRyYW5zcG9ydExheWVyXG4gICAgYmFja2VuZDogKGJ1bmRsZTogVWludDhBcnJheSB8IFVpbnQ4QXJyYXlbXSwgdHJhbnNwb3J0TGF5ZXI6IFRyYW5zcG9ydExheWVyKSA9PiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1hbmRJbnRlcmZhY2Uge1xuICAgIC8vICogZ2V0IGJ1bmRsZSBjb25maWdcbiAgICBjb25maWc6ICgpID0+IFByb21pc2U8RG9zQ29uZmlnPjtcblxuICAgIC8vICogY3VycmVudCByZW5kZXIgYnVmZmVyIHdpZHRoXG4gICAgaGVpZ2h0OiAoKSA9PiBudW1iZXI7XG5cbiAgICAvLyAqIGN1cnJlbnQgcmVuZGVyIGJ1ZmZlciBoZWlnaHRcbiAgICB3aWR0aDogKCkgPT4gbnVtYmVyO1xuXG4gICAgLy8gKiBzb3VuZCBmcmVxdWVuY3lcbiAgICBzb3VuZEZyZXF1ZW5jeTogKCkgPT4gbnVtYmVyO1xuXG4gICAgLy8gKiBgc2NyZWVuc2hvdCgpYCAtIGdldCBzY3JlbnNob3Qgb2YgY2FudmFzIGFzIEltYWdlRGF0YVxuICAgIHNjcmVlbnNob3Q6ICgpID0+IFByb21pc2U8SW1hZ2VEYXRhPjtcblxuICAgIC8vICogYHBhdXNlKClgIC0gcGF1c2UgZW11bGF0aW9uIChhbHNvIG11dGUgYWxsIHNvdW5kcylcbiAgICBwYXVzZTogKCkgPT4gdm9pZDtcblxuICAgIC8vICogYHJlc3VtZSgpYCAtIHJlc3VtZSBlbXVsYXRpb24gKGFsc28gdW5tdXRlIGFsbCBzb3VuZHMpXG4gICAgcmVzdW1lOiAoKSA9PiB2b2lkO1xuXG4gICAgLy8gKiBgbXV0ZSgpYCAtIG11dGUgYWxsIHNvdW5kc1xuICAgIG11dGU6ICgpID0+IHZvaWQ7XG5cbiAgICAvLyAqIGB1bm11dGUoKWAgLSB1bm11dGUgYWxsIHNvdW5kc1xuICAgIHVubXV0ZTogKCkgPT4gdm9pZDtcblxuICAgIC8vICogYGV4aXQoKWAgLSBleGl0IGZyb20gcnVudGltZVxuICAgIGV4aXQ6ICgpID0+IFByb21pc2U8dm9pZD47XG5cbiAgICAvLyAqIGBzaW11bGF0ZUtleVByZXNzKC4uLmtleUNvZGVzKWAgLSBhbGxvd3MgdG8gc2ltdWxhdGUga2V5IHByZXNzICoqQU5EKiogcmVsZWFzZSBldmVudCBmb3Iga2V5IGNvZGVcbiAgICAvLyBzZWUgYHNlbmRLZXlQcmVzc2AgdG8gZmluZCBtZWFuaW5nIG9mIGtleUNvZGUuIEtleSBjb21iaW5hdGlvbiBpcyBzdXBwb3J0ZWQgd2hlbiBtb3JlIHRoYW4gMSBrZXlDb2RlIGlzIHNldC5cbiAgICBzaW11bGF0ZUtleVByZXNzOiAoLi4ua2V5Q29kZXM6IG51bWJlcltdKSA9PiB2b2lkO1xuXG4gICAgLy8gKiBgc2VuZEtleUV2ZW50KGtleUNvZGUsIHByZXNzZWQpYCAtIHNlbmRzIHNpbmdsZSBrZXkgKHByZXNzIG9yIHJlbGVhc2UpIGV2ZW50IHRvIGJhY2tlbmRcbiAgICBzZW5kS2V5RXZlbnQ6IChrZXlDb2RlOiBudW1iZXIsIHByZXNzZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbiAgICAvLyAqIGBzZW5kTW91c2VNb3Rpb25gIC0gc2VuZHMgbW91c2UgbW90aW9uIGV2ZW50IHRvIGJhY2tlbmQsIHBvc2l0aW9uIGlzIGluIHJhbmdlIFswLCAxXVxuICAgIHNlbmRNb3VzZU1vdGlvbjogKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB2b2lkO1xuXG4gICAgLy8gKiBgc2VuZFJlbGF0aXZlTW90aW9uYCAtIHNlbmRzIG1vdXNlIG1vdGlvbiBldmVudCB0byBiYWNrZW5kLCBwb3NpdGlvbiBpcyBhYnNvbHV0ZSBkaWZmIG9mIHBvc2l0aW9uXG4gICAgc2VuZE1vdXNlUmVsYXRpdmVNb3Rpb246ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4gdm9pZDtcblxuICAgIC8vICogYHNpbXVsYXRlTW91c2VCdXR0b25gIC0gc2VuZHMgbW91c2UgYnV0dG9uIGV2ZW50IChwcmVzcyBvciByZWxlYXNlKSB0byBiYWNrZW5kXG4gICAgc2VuZE1vdXNlQnV0dG9uOiAoYnV0dG9uOiBudW1iZXIsIHByZXNzZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG5cbiAgICAvLyAqIGBzZW5kTW91c2VTeW5jYCAtIHNlbmRzIG1vdXNlIHN5bmMgZXZlbnQgXG4gICAgc2VuZE1vdXNlU3luYzogKCkgPT4gdm9pZDtcblxuICAgIC8vIGR1bXAgKipjaGFuZ2VkKiogRlMgYXMgVWludDhBcnJheSA8emlwIGFyY2hpdmU+XG4gICAgcGVyc2lzdCgpOiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuXG4gICAgLy8gZXZlbnRzXG4gICAgZXZlbnRzKCk6IENvbW1hbmRJbnRlcmZhY2VFdmVudHM7XG59XG5cbmV4cG9ydCB0eXBlIE1lc3NhZ2VUeXBlID0gXCJsb2dcIiB8IFwid2FyblwiIHwgXCJlcnJvclwiIHwgc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbW1hbmRJbnRlcmZhY2VFdmVudHMge1xuICAgIG9uU3Rkb3V0OiAoY29uc3VtZXI6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQpID0+IHZvaWQ7XG4gICAgb25GcmFtZVNpemU6IChjb25zdW1lcjogKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgIG9uRnJhbWU6IChjb25zdW1lcjogKHJnYjogVWludDhBcnJheSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgICBvblNvdW5kUHVzaDogKGNvbnN1bWVyOiAoc2FtcGxlczogRmxvYXQzMkFycmF5KSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgIG9uRXhpdDogKGNvbnN1bWVyOiAoKSA9PiB2b2lkKSA9PiB2b2lkO1xuXG4gICAgb25NZXNzYWdlOiAoY29uc3VtZXI6IChtc2dUeXBlOiBNZXNzYWdlVHlwZSwgLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHZvaWQ7XG59XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgKHdpbmRvdyBhcyBhbnkpLmVtdWxhdG9ycyA9IGVtdWxhdG9yc0ltcGw7XG59IGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgKGdsb2JhbCBhcyBhbnkpLmVtdWxhdG9ycyA9IGVtdWxhdG9yc0ltcGw7XG59XG4iLCJpbXBvcnQgeyBDYWNoZSwgQ2FjaGVOb29wIH0gZnJvbSBcIi4vY2FjaGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBYaHJPcHRpb25zIHtcbiAgICBjYWNoZTogQ2FjaGU7XG4gICAgbWV0aG9kPzogc3RyaW5nO1xuICAgIHByb2dyZXNzPzogKHRvdGFsOiBudW1iZXIsIGxvYWRlZDogbnVtYmVyKSA9PiB2b2lkO1xuICAgIGRhdGE/OiBzdHJpbmc7XG4gICAgcmVzcG9uc2VUeXBlPzogWE1MSHR0cFJlcXVlc3RSZXNwb25zZVR5cGU7XG59XG5cbmV4cG9ydCBjb25zdCBIVFRQUmVxdWVzdCA9IFhoclJlcXVlc3Q7XG5cbi8vICMgWGhyUmVxdWVzdFxuLy8gYFhoclJlcXVlc3RgIGlzIHNtYWxsIHdyYXBwZXIgb3ZlciBYTUxIdHRwUmVxdWVzdCwgdGhhdCBwcm92aWRlcyBzb21lXG4vLyBoYW5keSBtZXRob2RzXG5mdW5jdGlvbiBYaHJSZXF1ZXN0KHVybDogc3RyaW5nLCBvcHRpb25zOiBYaHJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmcgfCBBcnJheUJ1ZmZlcj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmcgfCBBcnJheUJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBuZXcgWGhyKHVybCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHJlc29sdmUsXG4gICAgICAgICAgICBmYWlsOiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vLyBwcml2YXRlIGltcGxlbWVudGF0aW9uXG5pbnRlcmZhY2UgWGhyT3B0aW9uc0ludGVybmFsIGV4dGVuZHMgWGhyT3B0aW9ucyB7XG4gICAgc3VjY2Vzcz86IChyZXNwb25zZTogYW55KSA9PiB2b2lkO1xuICAgIGZhaWw/OiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuLy8gKiBgc3VjY2Vzc2AgLSBjYWxsYmFjayB3aGVuIHJlc291cmNlIGlzIGRvd25sb2FkZWRcbi8vICogYGZhaWxgIC0gZmFpbCBjYWxsYmFja1xuXG5cbi8vIENsYXNzIFhociBkb2VzIG5vdCBoYXZlIGFueSBwdWJsaWMgbWV0aG9kc1xuY2xhc3MgWGhyIHtcbiAgICBwcml2YXRlIGNhY2hlOiBDYWNoZTtcbiAgICBwcml2YXRlIHJlc291cmNlOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBvcHRpb25zOiBYaHJPcHRpb25zSW50ZXJuYWw7XG4gICAgcHJpdmF0ZSB4aHI6IFhNTEh0dHBSZXF1ZXN0IHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSB0b3RhbCA9IDA7XG4gICAgcHJpdmF0ZSBsb2FkZWQgPSAwO1xuXG4gICAgY29uc3RydWN0b3IodXJsOiBzdHJpbmcsIG9wdGlvbnM6IFhock9wdGlvbnNJbnRlcm5hbCkge1xuICAgICAgICB0aGlzLnJlc291cmNlID0gdXJsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIjtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG9wdGlvbnMuY2FjaGUgfHwgbmV3IENhY2hlTm9vcCgpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubWV0aG9kICA9PT0gXCJHRVRcIikge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5nZXQodGhpcy5yZXNvdXJjZSlcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YTogc3RyaW5nIHwgQXJyYXlCdWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWNjZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zdWNjZXNzKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ha2VIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlSHR0cFJlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMueGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHRoaXMueGhyLm9wZW4odGhpcy5vcHRpb25zLm1ldGhvZCB8fCBcIkdFVFwiLCB0aGlzLnJlc291cmNlLCB0cnVlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgICAgICAgICB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xuXG4gICAgICAgIGxldCBwcm9ncmVzc0xpc3RuZXI7XG4gICAgICAgIGlmICh0eXBlb2YgKHByb2dyZXNzTGlzdG5lciA9IHRoaXMueGhyKS5hZGRFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHByb2dyZXNzTGlzdG5lci5hZGRFdmVudExpc3RlbmVyKFwicHJvZ3Jlc3NcIiwgKGV2dCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudG90YWwgPSBldnQudG90YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkZWQgPSBldnQubG9hZGVkO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wcm9ncmVzcyhldnQudG90YWwsIGV2dC5sb2FkZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVycm9yTGlzdGVuZXI7XG4gICAgICAgIGlmICh0eXBlb2YgKGVycm9yTGlzdGVuZXIgPSB0aGlzLnhocikuYWRkRXZlbnRMaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBlcnJvckxpc3RlbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5mYWlsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5mYWlsKFwiVW5hbGJlIHRvIGRvd25sb2FkICdcIiArIHRoaXMucmVzb3VyY2UgKyBcIicsIGNvZGU6IFwiICsgKHRoaXMueGhyIGFzIFhNTEh0dHBSZXF1ZXN0KS5zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMub3B0aW9ucy5mYWlsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uUmVhZHlTdGF0ZUNoYW5nZSgpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgdGhpcy54aHIucmVzcG9uc2VUeXBlID0gdGhpcy5vcHRpb25zLnJlc3BvbnNlVHlwZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnhoci5zZW5kKHRoaXMub3B0aW9ucy5kYXRhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUmVhZHlTdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgeGhyID0gKHRoaXMueGhyIGFzIFhNTEh0dHBSZXF1ZXN0KTtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gTWF0aC5tYXgodGhpcy50b3RhbCwgdGhpcy5sb2FkZWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnByb2dyZXNzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcm9ncmVzcyh0b3RhbCwgdG90YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tZXRob2QgPT09IFwiR0VUXCIgJiYgdGhpcy5yZXNvdXJjZS5pbmRleE9mKFwiP1wiKSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUucHV0KHRoaXMucmVzb3VyY2UsIHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnN1Y2Nlc3MoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5mYWlsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmZhaWwoXCJVbmFibGUgdG8gZG93bmxvYWQgJ1wiICsgdGhpcy5yZXNvdXJjZSArIFwiJywgY29kZTogXCIgKyB4aHIuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlIHRoaXMub3B0aW9ucy5mYWlsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59XG5cbiIsImltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2VFdmVudHMsIE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4uL2VtdWxhdG9yc1wiO1xuXG5leHBvcnQgY2xhc3MgQ29tbWFuZEludGVyZmFjZUV2ZW50c0ltcGwgaW1wbGVtZW50cyBDb21tYW5kSW50ZXJmYWNlRXZlbnRzIHtcblxuICAgIHByaXZhdGUgZGVsYXllZFN0ZG91dDogc3RyaW5nW10gPSBbXTtcbiAgICBwcml2YXRlIG9uU3Rkb3V0Q29uc3VtZXJzOiAoKG1lc3NhZ2U6IHN0cmluZykgPT4gdm9pZClbXSA9IFtdO1xuICAgIHByaXZhdGUgb25GcmFtZVNpemVDb25zdW1lcnM6ICgod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQpW10gPSBbXTtcbiAgICBwcml2YXRlIG9uRnJhbWVDb25zdW1lcnM6ICgocmdiOiBVaW50OEFycmF5KSA9PiB2b2lkKVtdID0gW107XG4gICAgcHJpdmF0ZSBvblNvdW5kUHVzaENvbnN1bWVyczogKChzYW1wbGVzOiBGbG9hdDMyQXJyYXkpID0+IHZvaWQpW10gPSBbXTtcbiAgICBwcml2YXRlIG9uRXhpdENvbnN1bWVyczogKCgpID0+IHZvaWQpW10gPSBbXTtcblxuICAgIHByaXZhdGUgb25NZXNzYWdlQ29uc3VtZXJzOiAoKG1zZ1R5cGU6IE1lc3NhZ2VUeXBlLCAuLi5hcmdzOiBhbnlbXSkgPT4gdm9pZClbXSA9IFtdO1xuXG4gICAgb25TdGRvdXQgPSAoY29uc3VtZXI6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQpID0+IHtcbiAgICAgICAgdGhpcy5vblN0ZG91dENvbnN1bWVycy5wdXNoKGNvbnN1bWVyKTtcblxuICAgICAgICBpZiAodGhpcy5vblN0ZG91dENvbnN1bWVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiB0aGlzLmRlbGF5ZWRTdGRvdXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVTdGRvdXQobmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRTdGRvdXQgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRnJhbWVTaXplID0gKGNvbnN1bWVyOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQpID0+IHtcbiAgICAgICAgdGhpcy5vbkZyYW1lU2l6ZUNvbnN1bWVycy5wdXNoKGNvbnN1bWVyKTtcbiAgICB9XG5cbiAgICBvbkZyYW1lID0gKGNvbnN1bWVyOiAocmdiOiBVaW50OEFycmF5KSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIHRoaXMub25GcmFtZUNvbnN1bWVycy5wdXNoKGNvbnN1bWVyKTtcbiAgICB9XG5cbiAgICBvblNvdW5kUHVzaCA9IChjb25zdW1lcjogKHNhbXBsZXM6IEZsb2F0MzJBcnJheSkgPT4gdm9pZCkgPT4ge1xuICAgICAgICB0aGlzLm9uU291bmRQdXNoQ29uc3VtZXJzLnB1c2goY29uc3VtZXIpO1xuICAgIH1cblxuICAgIG9uRXhpdCA9IChjb25zdW1lcjogKCkgPT4gdm9pZCkgPT4ge1xuICAgICAgICB0aGlzLm9uRXhpdENvbnN1bWVycy5wdXNoKGNvbnN1bWVyKTtcbiAgICB9XG5cbiAgICBvbk1lc3NhZ2UgPSAoY29uc3VtZXI6IChtc2dUeXBlOiBNZXNzYWdlVHlwZSwgLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHtcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VDb25zdW1lcnMucHVzaChjb25zdW1lcik7XG4gICAgfVxuXG4gICAgZmlyZVN0ZG91dCA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHRoaXMub25TdGRvdXRDb25zdW1lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRTdGRvdXQucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbmV4dCBvZiB0aGlzLm9uU3Rkb3V0Q29uc3VtZXJzKSB7XG4gICAgICAgICAgICBuZXh0KG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyZUZyYW1lU2l6ZSA9ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdGhpcy5vbkZyYW1lU2l6ZUNvbnN1bWVycykge1xuICAgICAgICAgICAgbmV4dCh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpcmVGcmFtZSA9IChmcmFtZTogVWludDhBcnJheSkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG5leHQgb2YgdGhpcy5vbkZyYW1lQ29uc3VtZXJzKSB7XG4gICAgICAgICAgIG5leHQoZnJhbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyZVNvdW5kUHVzaCA9IChzYW1wbGVzOiBGbG9hdDMyQXJyYXkpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMub25Tb3VuZFB1c2hDb25zdW1lcnMpIHtcbiAgICAgICAgICAgIG5leHQoc2FtcGxlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaXJlRXhpdCA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMub25FeGl0Q29uc3VtZXJzKSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uU3Rkb3V0Q29uc3VtZXJzID0gW107XG4gICAgICAgIHRoaXMub25GcmFtZVNpemVDb25zdW1lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5vbkZyYW1lQ29uc3VtZXJzID0gW107XG4gICAgICAgIHRoaXMub25Tb3VuZFB1c2hDb25zdW1lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5vbkV4aXRDb25zdW1lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5vbk1lc3NhZ2VDb25zdW1lcnMgPSBbXTtcbiAgICB9XG5cbiAgICBmaXJlTWVzc2FnZSA9IChtc2dUeXBlOiBNZXNzYWdlVHlwZSwgLi4uYXJnczogYW55W10pID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMub25NZXNzYWdlQ29uc3VtZXJzKSB7XG4gICAgICAgICAgICBuZXh0KG1zZ1R5cGUsIC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBCdWlsZCB9IGZyb20gXCIuLi9idWlsZFwiO1xuaW1wb3J0IHsgRW11bGF0b3JzLCBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcIi4uL2VtdWxhdG9yc1wiO1xuaW1wb3J0IHsgQ2FjaGUsIENhY2hlRGIgfSBmcm9tIFwiLi4vY2FjaGVcIjtcblxuaW1wb3J0IHsgSVdhc21Nb2R1bGVzLCBXYXNtTW9kdWxlc0ltcGwgfSBmcm9tIFwiLi9tb2R1bGVzXCI7XG5cbmltcG9ydCBEb3NCdW5kbGUgZnJvbSBcIi4uL2Rvcy9idW5kbGUvZG9zLWJ1bmRsZVwiO1xuaW1wb3J0IHsgZG9zRGlyZWN0IH0gZnJvbSBcIi4uL2Rvcy9kb3Nib3gvdHMvZGlyZWN0XCI7XG5pbXBvcnQgeyBkb3NXb3JrZXIgfSBmcm9tIFwiLi4vZG9zL2Rvc2JveC90cy93b3JrZXJcIjtcbmltcG9ydCBKYW51cyBmcm9tIFwiLi4vamFudXMvamFudXMtaW1wbFwiO1xuXG5pbXBvcnQgeyBUcmFuc3BvcnRMYXllciwgQ29tbWFuZEludGVyZmFjZU92ZXJUcmFuc3BvcnRMYXllciB9IGZyb20gXCIuLi9wcm90b2NvbC9wcm90b2NvbFwiO1xuXG5jbGFzcyBFbXVsYXRvcnNJbXBsIGltcGxlbWVudHMgRW11bGF0b3JzIHtcbiAgICBwYXRoUHJlZml4ID0gXCJcIjtcbiAgICBjYWNoZVNlZWQgPSBcIlwiO1xuXG4gICAgcHJpdmF0ZSBjYWNoZVByb21pc2VzOiB7W2NhY2hlTmFtZTogc3RyaW5nXTogUHJvbWlzZTxDYWNoZT59ID0ge307XG4gICAgcHJpdmF0ZSB3YXNtTW9kdWxlc1Byb21pc2U/OiBQcm9taXNlPElXYXNtTW9kdWxlcz47XG5cbiAgICBjYWNoZShjYWNoZU5hbWU/OiBzdHJpbmcpOiBQcm9taXNlPENhY2hlPiB7XG4gICAgICAgIGlmIChjYWNoZU5hbWUgPT09IHVuZGVmaW5lZCB8fCBjYWNoZU5hbWUgPT09IG51bGwgfHwgY2FjaGVOYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2FjaGVOYW1lID0gQnVpbGQudmVyc2lvbiArIFwiIFwiICsgdGhpcy5jYWNoZVNlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYWNoZVByb21pc2UgPSB0aGlzLmNhY2hlUHJvbWlzZXNbY2FjaGVOYW1lXTtcblxuICAgICAgICBpZiAoY2FjaGVQcm9taXNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBDYWNoZURiKGNhY2hlTmFtZSwge1xuICAgICAgICAgICAgICAgIG9uRXJyOiBjb25zb2xlLmVycm9yLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuY2FjaGVQcm9taXNlc1tjYWNoZU5hbWVdID0gcHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUHJvbWlzZXNbY2FjaGVOYW1lXTtcbiAgICB9XG5cbiAgICBhc3luYyBkb3NCdW5kbGUoKTogUHJvbWlzZTxEb3NCdW5kbGU+IHtcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGF3YWl0IHRoaXMud2FzbU1vZHVsZXMoKTtcbiAgICAgICAgY29uc3QgbGliemlwV2FzbSA9IGF3YWl0IG1vZHVsZXMubGliemlwKCk7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgdGhpcy5jYWNoZSgpO1xuICAgICAgICByZXR1cm4gbmV3IERvc0J1bmRsZShsaWJ6aXBXYXNtLCBjYWNoZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZG9zYm94Tm9kZShidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10pOiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9zYm94RGlyZWN0KGJ1bmRsZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZG9zYm94RGlyZWN0KGJ1bmRsZTogVWludDhBcnJheSB8IFVpbnQ4QXJyYXlbXSk6IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT4ge1xuICAgICAgICBjb25zdCBtb2R1bGVzID0gYXdhaXQgdGhpcy53YXNtTW9kdWxlcygpO1xuICAgICAgICBjb25zdCBkb3Nib3hXYXNtID0gYXdhaXQgbW9kdWxlcy5kb3Nib3goKTtcbiAgICAgICAgY29uc3QgdHJhbnNwb3J0TGF5ZXIgPSBhd2FpdCBkb3NEaXJlY3QoZG9zYm94V2FzbSwgXCJzZXNzaW9uLVwiICsgRGF0ZS5ub3coKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmJhY2tlbmQoYnVuZGxlLCB0cmFuc3BvcnRMYXllcik7XG4gICAgfVxuXG4gICAgYXN5bmMgZG9zYm94V29ya2VyKGJ1bmRsZTogVWludDhBcnJheSB8IFVpbnQ4QXJyYXlbXSk6IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT4ge1xuICAgICAgICBjb25zdCBtb2R1bGVzID0gYXdhaXQgdGhpcy53YXNtTW9kdWxlcygpO1xuICAgICAgICBjb25zdCBkb3Nib3hXYXNtID0gYXdhaXQgbW9kdWxlcy5kb3Nib3goKTtcbiAgICAgICAgY29uc3QgdHJhbnNwb3J0TGF5ZXIgPSBhd2FpdCBkb3NXb3JrZXIodGhpcy5wYXRoUHJlZml4ICsgXCJ3ZG9zYm94LmpzXCIsIGRvc2JveFdhc20sIFwic2Vzc2lvbi1cIiArIERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5iYWNrZW5kKGJ1bmRsZSwgdHJhbnNwb3J0TGF5ZXIpO1xuICAgIH1cblxuICAgIGFzeW5jIGphbnVzKHJlc3RVcmw6IHN0cmluZyk6IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT4ge1xuICAgICAgICByZXR1cm4gSmFudXMocmVzdFVybCk7XG4gICAgfVxuXG4gICAgYXN5bmMgYmFja2VuZChidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10sIHRyYW5zcG9ydExheWVyOiBUcmFuc3BvcnRMYXllcik6IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Q29tbWFuZEludGVyZmFjZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2kgPSBuZXcgQ29tbWFuZEludGVyZmFjZU92ZXJUcmFuc3BvcnRMYXllcihcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGJ1bmRsZSkgPyBidW5kbGUgOiBbYnVuZGxlXSxcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnRMYXllcixcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FuIGJlIGNhbGxlZCBmcm9tIGN0b3IsIHdpdGhvdXQgdGltZW91dCBjYW4gYmUgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc29sdmUoY2kpLCA0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgd2FzbU1vZHVsZXMoKTogUHJvbWlzZTxJV2FzbU1vZHVsZXM+IHtcbiAgICAgICAgaWYgKHRoaXMud2FzbU1vZHVsZXNQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndhc21Nb2R1bGVzUHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ha2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IHRoaXMuY2FjaGUoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgV2FzbU1vZHVsZXNJbXBsKHRoaXMucGF0aFByZWZpeCwgY2FjaGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy53YXNtTW9kdWxlc1Byb21pc2UgPSBtYWtlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLndhc21Nb2R1bGVzUHJvbWlzZTtcbiAgICB9XG5cbiAgICBhc3luYyBkb3NEaXJlY3QoYnVuZGxlOiBVaW50OEFycmF5IHwgVWludDhBcnJheVtdKTogUHJvbWlzZTxDb21tYW5kSW50ZXJmYWNlPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvc2JveERpcmVjdChidW5kbGUpO1xuICAgIH1cblxuICAgIGFzeW5jIGRvc1dvcmtlcihidW5kbGU6IFVpbnQ4QXJyYXkgfCBVaW50OEFycmF5W10pOiBQcm9taXNlPENvbW1hbmRJbnRlcmZhY2U+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9zYm94V29ya2VyKGJ1bmRsZSk7XG4gICAgfVxuXG59XG5cbmNvbnN0IGVtdWxhdG9ycyA9IG5ldyBFbXVsYXRvcnNJbXBsKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGVtdWxhdG9ycztcbiIsIi8qIGVzbGludCBuby1zZWxmLWFzc2lnbjogMCAqL1xuLyogZXNsaW50IEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXM6IDAgKi9cblxuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tIFwiLi4vY2FjaGVcIjtcbmltcG9ydCB7IEhUVFBSZXF1ZXN0IH0gZnJvbSBcIi4uL2h0dHBcIjtcblxuZXhwb3J0IGludGVyZmFjZSBXYXNtTW9kdWxlIHtcbiAgICBpbnN0YW50aWF0ZTogKG1vZHVsZT86IGFueSkgPT4gUHJvbWlzZTxhbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElXYXNtTW9kdWxlcyB7XG4gICAgbGliemlwOiAoKSA9PiBQcm9taXNlPFdhc21Nb2R1bGU+O1xuICAgIGRvc2JveDogKCkgPT4gUHJvbWlzZTxXYXNtTW9kdWxlPjtcbn1cblxuaW50ZXJmYWNlIEdsb2JhbHMge1xuICAgIGV4cG9ydHM6IHtbbW9kdWxlTmFtZTogc3RyaW5nXTogYW55fSxcbiAgICBjb21waWxlZDoge1ttb2R1bGVOYW1lOiBzdHJpbmddOiBQcm9taXNlPFdhc21Nb2R1bGU+fSxcbn1cblxuY2xhc3MgSG9zdCB7XG4gICAgcHVibGljIHdhc21TdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICBwdWJsaWMgZ2xvYmFsczogR2xvYmFscztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxzID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IHt9IDogd2luZG93IGFzIGFueTtcbiAgICAgICAgaWYgKCF0aGlzLmdsb2JhbHMuZXhwb3J0cykge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmV4cG9ydHMgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZ2xvYmFscy5jb21waWxlZCkge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxzLmNvbXBpbGVkID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyAjIyMgV2ViQXNzZW1ibHlcbiAgICAgICAgLy8gSG9zdCBhYmxlIHRvIGRldGVjdCBpcyBXZWJBc3NlbWJseSBzdXBwb3J0ZWQgb3Igbm90LFxuICAgICAgICAvLyB0aGlzIGluZm9ybWF0aW9uIGlzIHN0b3JlZCBpbiBgSG9zdC53YXNtU3VwcG9ydGVkYCB2YXJpYWJsZVxuICAgICAgICBpZiAodHlwZW9mIFdlYkFzc2VtYmx5ID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgdHlwZW9mIFdlYkFzc2VtYmx5LmNvbXBpbGUgPT09IFwiZnVuY3Rpb25cIikge1xuXG4gICAgICAgICAgICBjb25zdCB3bW9kdWxlID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShVaW50OEFycmF5Lm9mKDB4MCwgMHg2MSwgMHg3MywgMHg2ZCwgMHgwMSwgMHgwMCwgMHgwMCwgMHgwMCkpO1xuICAgICAgICAgICAgaWYgKHdtb2R1bGUgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5Nb2R1bGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhc21TdXBwb3J0ZWQgPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2Uod21vZHVsZSkgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBvbHlmaWxsIGZvciBvbGQgY29udGFpbnMgaW1wbGVtZW50YXRpb25zIGZvcjpcbiAgICAgICAgLy8gYE1hdGguaW11bGAsIGBNYXRoLmZyb3VuZGAsIGBNYXRoLmNsejMyYCwgYE1hdGgudHJ1bmNgXG4gICAgICAgIChmdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIGlmICghTWF0aC5pbXVsIHx8IE1hdGguaW11bCgweGZmZmZmZmZmLCA1KSAhPT0gLTUpIHtcbiAgICAgICAgICAgICAgICBNYXRoLmltdWwgPSBmdW5jdGlvbiBpbXVsKGE6IGFueSwgYjogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFoID0gYSA+Pj4gMTY7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsID0gYSAmIDB4ZmZmZjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmggPSBiID4+PiAxNjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmwgPSBiICYgMHhmZmZmO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFsICogYmwgKyAoKGFoICogYmwgKyBhbCAqIGJoKSA8PCAxNikpIHwgMDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWF0aC5pbXVsID0gTWF0aC5pbXVsO1xuXG4gICAgICAgICAgICBpZiAoIU1hdGguZnJvdW5kKSB7XG4gICAgICAgICAgICAgICAgTWF0aC5mcm91bmQgPSBmdW5jdGlvbih4KSB7IHJldHVybiB4OyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTWF0aC5mcm91bmQgPSBNYXRoLmZyb3VuZDtcblxuICAgICAgICAgICAgaWYgKCFNYXRoLmNsejMyKSB7XG4gICAgICAgICAgICAgICAgTWF0aC5jbHozMiA9IGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHggPj4+IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHggJiAoMSA8PCAoMzEgLSBpKSkpIHsgcmV0dXJuIGk7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMzI7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE1hdGguY2x6MzIgPSBNYXRoLmNsejMyO1xuXG4gICAgICAgICAgICBpZiAoIU1hdGgudHJ1bmMpIHtcbiAgICAgICAgICAgICAgICBNYXRoLnRydW5jID0gZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geCA8IDAgPyBNYXRoLmNlaWwoeCkgOiBNYXRoLmZsb29yKHgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBNYXRoLnRydW5jID0gTWF0aC50cnVuYztcbiAgICAgICAgfSkoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBob3N0ID0gbmV3IEhvc3QoKTtcblxuZXhwb3J0IGNsYXNzIFdhc21Nb2R1bGVzSW1wbCBpbXBsZW1lbnRzIElXYXNtTW9kdWxlcyB7XG4gICAgcHJpdmF0ZSBwYXRoUHJlZml4OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjYWNoZTogQ2FjaGU7XG5cbiAgICBwcml2YXRlIGxpYnppcFByb21pc2U/OiBQcm9taXNlPFdhc21Nb2R1bGU+O1xuICAgIHByaXZhdGUgZG9zYm94UHJvbWlzZT86IFByb21pc2U8V2FzbU1vZHVsZT47XG5cbiAgICBwdWJsaWMgd2FzbVN1cHBvcnRlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocGF0aFByZWZpeDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIGNhY2hlOiBDYWNoZSkge1xuICAgICAgICBpZiAocGF0aFByZWZpeC5sZW5ndGggPiAwICYmIHBhdGhQcmVmaXhbcGF0aFByZWZpeC5sZW5ndGggLSAxXSAhPT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHBhdGhQcmVmaXggKz0gXCIvXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhdGhQcmVmaXggPSBwYXRoUHJlZml4O1xuICAgICAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG4gICAgfVxuXG4gICAgbGliemlwKCkge1xuICAgICAgICBpZiAodGhpcy5saWJ6aXBQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpYnppcFByb21pc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpYnppcFByb21pc2UgPSB0aGlzLmxvYWRNb2R1bGUodGhpcy5wYXRoUHJlZml4ICsgXCJ3bGliemlwLmpzXCIsIFwiV0xJQlpJUFwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGliemlwUHJvbWlzZTtcbiAgICB9XG5cbiAgICBkb3Nib3goKSB7XG4gICAgICAgIGlmICh0aGlzLmRvc2JveFByb21pc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9zYm94UHJvbWlzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZG9zYm94UHJvbWlzZSA9IHRoaXMubG9hZE1vZHVsZSh0aGlzLnBhdGhQcmVmaXggKyBcIndkb3Nib3guanNcIiwgXCJXRE9TQk9YXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kb3Nib3hQcm9taXNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZE1vZHVsZSh1cmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogc3RyaW5nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICByZXR1cm4gbG9hZFdhc21Nb2R1bGUodXJsLCBtb2R1bGVOYW1lLCB0aGlzLmNhY2hlLCAoKSA9PiB7fSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFdhc21Nb2R1bGUodXJsOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiBDYWNoZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnByb2dyZXNzOiAoc3RhZ2U6IHN0cmluZywgdG90YWw6IG51bWJlciwgbG9hZGVkOiBudW1iZXIpID0+IHZvaWQpOiBQcm9taXNlPFdhc21Nb2R1bGU+IHtcbiAgICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBsb2FkV2FzbU1vZHVsZU5vZGUodXJsLCBtb2R1bGVOYW1lLCBjYWNoZSwgb25wcm9ncmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxvYWRXYXNtTW9kdWxlQnJvd3Nlcih1cmwsIG1vZHVsZU5hbWUsIGNhY2hlLCBvbnByb2dyZXNzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRXYXNtTW9kdWxlTm9kZSh1cmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGVOYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IENhY2hlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ucHJvZ3Jlc3M6IChzdGFnZTogc3RyaW5nLCB0b3RhbDogbnVtYmVyLCBsb2FkZWQ6IG51bWJlcikgPT4gdm9pZCkge1xuICAgIGlmIChob3N0Lmdsb2JhbHMuY29tcGlsZWRbbW9kdWxlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaG9zdC5nbG9iYWxzLmNvbXBpbGVkW21vZHVsZU5hbWVdO1xuICAgIH1cblxuICAgIGNvbnN0IGVtTW9kdWxlID0gcmVxdWlyZSh1cmwpO1xuICAgIGNvbnN0IGNvbXBpbGVkTW9kdWxlUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShuZXcgQ29tcGlsZWROb2RlTW9kdWxlKGVtTW9kdWxlKSk7XG4gICAgaWYgKG1vZHVsZU5hbWUpIHtcbiAgICAgICAgaG9zdC5nbG9iYWxzLmNvbXBpbGVkW21vZHVsZU5hbWVdID0gY29tcGlsZWRNb2R1bGVQcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiBjb21waWxlZE1vZHVsZVByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGxvYWRXYXNtTW9kdWxlQnJvd3Nlcih1cmw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kdWxlTmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogQ2FjaGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9ucHJvZ3Jlc3M6IChzdGFnZTogc3RyaW5nLCB0b3RhbDogbnVtYmVyLCBsb2FkZWQ6IG51bWJlcikgPT4gdm9pZCkge1xuICAgIGlmIChob3N0Lmdsb2JhbHMuY29tcGlsZWRbbW9kdWxlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaG9zdC5nbG9iYWxzLmNvbXBpbGVkW21vZHVsZU5hbWVdO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IHVybC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgICAgIGNvbnN0IHdJbmRleCA9IHVybC5pbmRleE9mKFwid1wiLCBmcm9tSW5kZXgpO1xuICAgICAgICBjb25zdCBpc1dhc21VcmwgPSB3SW5kZXggPT09IGZyb21JbmRleCArIDEgJiYgd0luZGV4ID49IDA7XG5cbiAgICAgICAgaWYgKCFob3N0Lndhc21TdXBwb3J0ZWQgfHwgIWlzV2FzbVVybCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RhcnRpbmcgZnJvbSBqcy1kb3MgNi4yMi42MCBqcyBlbnZpcm9ubWVudCBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd2FzbVVybCA9IHVybC5yZXBsYWNlKFwiLmpzXCIsIFwiLndhc21cIik7XG4gICAgICAgIGNvbnN0IGJpbmFyeVByb21pc2UgPSBIVFRQUmVxdWVzdCh3YXNtVXJsLCB7XG4gICAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogXCJhcnJheWJ1ZmZlclwiLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6ICh0b3RhbCwgbG9hZGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgb25wcm9ncmVzcyhcIlJlc29sdmluZyBEb3NCb3ggKFwiICsgdXJsICsgXCIpXCIsIHRvdGFsLCBsb2FkZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNjcmlwdFByb21pc2UgPSBIVFRQUmVxdWVzdCh1cmwsIHtcbiAgICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgICAgcHJvZ3Jlc3M6ICh0b3RhbCwgbG9hZGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgb25wcm9ncmVzcyhcIlJlc29sdmluZyBEb3NCb3hcIiwgdG90YWwsIGxvYWRlZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBbYmluYXJ5LCBzY3JpcHRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2JpbmFyeVByb21pc2UsIHNjcmlwdFByb21pc2VdKTtcbiAgICAgICAgY29uc3Qgd2FzbU1vZHVsZSA9IGF3YWl0IFdlYkFzc2VtYmx5LmNvbXBpbGUoYmluYXJ5IGFzIEFycmF5QnVmZmVyKTtcbiAgICAgICAgY29uc3QgaW5zdGFudGlhdGVXYXNtID0gKGluZm86IGFueSwgcmVjZWl2ZUluc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGluZm8uZW52ID0gaW5mby5lbnYgfHwge307XG4gICAgICAgICAgICBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZSh3YXNtTW9kdWxlLCBpbmZvKVxuICAgICAgICAgICAgICAgIC50aGVuKChpbnN0YW5jZSkgPT4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlLCB3YXNtTW9kdWxlKSk7XG4gICAgICAgICAgICByZXR1cm47IC8vIG5vLXJldHVyblxuICAgICAgICB9O1xuXG4gICAgICAgIGV2YWwuY2FsbCh3aW5kb3csIHNjcmlwdCBhcyBzdHJpbmcpO1xuXG4gICAgICAgIHJldHVybiBuZXcgQ29tcGlsZWRCcm93c2VyTW9kdWxlKHdhc21Nb2R1bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3QuZ2xvYmFscy5leHBvcnRzW21vZHVsZU5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZVdhc20pO1xuICAgIH1cblxuICAgIGNvbnN0IHByb21pc2UgPSBsb2FkKCk7XG5cbiAgICBpZiAobW9kdWxlTmFtZSkge1xuICAgICAgICBob3N0Lmdsb2JhbHMuY29tcGlsZWRbbW9kdWxlTmFtZV0gPSBwcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5jbGFzcyBDb21waWxlZE5vZGVNb2R1bGUgaW1wbGVtZW50cyBXYXNtTW9kdWxlIHtcbiAgICBwcml2YXRlIGVtTW9kdWxlOiBhbnk7XG4gICAgY29uc3RydWN0b3IoZW1Nb2R1bGU6IGFueSkge1xuICAgICAgICB0aGlzLmVtTW9kdWxlID0gZW1Nb2R1bGU7XG4gICAgfVxuXG4gICAgaW5zdGFudGlhdGUoaW5pdGlhbE1vZHVsZTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgaW5pdGlhbE1vZHVsZS5vblJ1bnRpbWVJbml0aWFsaXplZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBuZXcgdGhpcy5lbU1vZHVsZShpbml0aWFsTW9kdWxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBDb21waWxlZEJyb3dzZXJNb2R1bGUgaW1wbGVtZW50cyBXYXNtTW9kdWxlIHtcbiAgICBwdWJsaWMgd2FzbU1vZHVsZTogV2ViQXNzZW1ibHkuTW9kdWxlO1xuICAgIHByaXZhdGUgbW9kdWxlOiBhbnk7XG4gICAgcHJpdmF0ZSBpbnN0YW50aWF0ZVdhc206IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHdhc21Nb2R1bGU6IFdlYkFzc2VtYmx5Lk1vZHVsZSwgbW9kdWxlOiBhbnksIGluc3RhbnRpYXRlV2FzbTogYW55KSB7XG4gICAgICAgIHRoaXMud2FzbU1vZHVsZSA9IHdhc21Nb2R1bGU7XG4gICAgICAgIHRoaXMubW9kdWxlID0gbW9kdWxlO1xuICAgICAgICB0aGlzLmluc3RhbnRpYXRlV2FzbSA9IGluc3RhbnRpYXRlV2FzbTtcbiAgICB9XG5cbiAgICBpbnN0YW50aWF0ZShpbml0aWFsTW9kdWxlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpbml0aWFsTW9kdWxlLmluc3RhbnRpYXRlV2FzbSA9IHRoaXMuaW5zdGFudGlhdGVXYXNtO1xuICAgICAgICAgICAgaW5pdGlhbE1vZHVsZS5vblJ1bnRpbWVJbml0aWFsaXplZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbmV3IHRoaXMubW9kdWxlKGluaXRpYWxNb2R1bGUpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21tYW5kSW50ZXJmYWNlIH0gZnJvbSBcIi4uL2VtdWxhdG9yc1wiO1xuaW1wb3J0IHsgQ29tbWFuZEludGVyZmFjZUV2ZW50c0ltcGwgfSBmcm9tIFwiLi4vaW1wbC9jaS1pbXBsXCI7XG5cbmltcG9ydCB7IEphbnVzSlMgfSBmcm9tIFwiLi9qYW51c1wiO1xuaW1wb3J0IHsgRG9zQ29uZmlnIH0gZnJvbSBcIi4uL2Rvcy9idW5kbGUvZG9zLWNvbmZcIjtcblxuZXhwb3J0IHR5cGUgSmFudXNNZXNzYWdlVHlwZSA9IFwiZXJyb3JcIiB8IFwiYXR0YWNoZWRcIiB8IFwic3RhcnRlZFwiIHxcbiAgICBcIm9ucmVtb3Rlc3RyZWFtXCIgfCBcImRlc3Ryb3llZFwiO1xuXG5mdW5jdGlvbiBkYXRhQXNzZW1ibGVyKG9uTWVzc2FnZTogKGRhdGE6IHN0cmluZykgPT4gdm9pZCxcbiAgICBvbkVycm9yOiAobWVzc2FnZTogYW55KSA9PiB2b2lkKSB7XG4gICAgbGV0IGFjYyA9IFwiXCI7XG5cbiAgICBjb25zdCBhc3NlbWJsZSA9IChkYXRhOiBzdHJpbmcpID0+IHtcbiAgICAgICAgY29uc3Qgc3BsaXRJbmRleCA9IGRhdGEuaW5kZXhPZihcIlxcblwiKTtcbiAgICAgICAgaWYgKHNwbGl0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBhY2MgKz0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhY2MgKyBkYXRhLnN1YnN0cigwLCBzcGxpdEluZGV4KTtcbiAgICAgICAgICAgIGFjYyA9IFwiXCI7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb25NZXNzYWdlKHV0ZjhEZWNvZGUocGF5bG9hZCkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFzc2VtYmxlKGRhdGEuc3Vic3RyKHNwbGl0SW5kZXggKyAxKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGFzc2VtYmxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEphbnVzQ29tbWFuZEludGVyZmFjZSBleHRlbmRzIENvbW1hbmRJbnRlcmZhY2Uge1xuICAgIGxvZ1Zpc3VhbDogKHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50KSA9PiB2b2lkO1xufVxuXG50eXBlIExvZ0NvbG9yID0gXCJ3aGl0ZVwiIHwgXCJyZWRcIiB8IFwieWVsbG93XCIgfCBcIm5vdCBzZXRcIjtcblxuY2xhc3MgSmFudXNCYWNrZW5kSW1wbCBpbXBsZW1lbnRzIEphbnVzQ29tbWFuZEludGVyZmFjZSB7XG4gICAgcHJpdmF0ZSBsaXZlID0gdHJ1ZTtcbiAgICBwcml2YXRlIHN0YXJ0ZWRBdCA9IERhdGUubm93KCk7XG5cbiAgICBwcml2YXRlIGphbnVzOiBKYW51c0pTLkphbnVzO1xuICAgIHByaXZhdGUgZXZlbnRzSW1wbDogQ29tbWFuZEludGVyZmFjZUV2ZW50c0ltcGw7XG5cbiAgICBwcml2YXRlIGV4aXRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAgIHByaXZhdGUgZXhpdFJlc29sdmVGbjogKCkgPT4gdm9pZCA9ICgpID0+IHsvKiovIH07XG5cbiAgICBwcml2YXRlIGNvbmZpZ1Byb21pc2U6IFByb21pc2U8RG9zQ29uZmlnPjtcbiAgICBwcml2YXRlIGNvbmZpZ1Jlc29sdmVGbjogKGRvc0NvbmZpZzogRG9zQ29uZmlnKSA9PiB2b2lkID0gKCkgPT4gey8qKi8gfTtcblxuICAgIHByaXZhdGUgb3BhcXVlSWQ6IHN0cmluZztcbiAgICBwcml2YXRlIGhhbmRsZT86IEphbnVzSlMuUGx1Z2luSGFuZGxlO1xuICAgIHByaXZhdGUgaGFuZGxlUHJvbWlzZTogUHJvbWlzZTxKYW51c0pTLlBsdWdpbkhhbmRsZT47XG4gICAgcHJpdmF0ZSBoYW5kbGVSZXNvbHZlRm46IChoYW5kbGU6IEphbnVzSlMuUGx1Z2luSGFuZGxlKSA9PiB2b2lkID0gKCkgPT4gey8qKi8gfTtcblxuICAgIHByaXZhdGUga2V5TWF0cml4OiB7IFtrZXlDb2RlOiBudW1iZXJdOiBib29sZWFuIH0gPSB7fTtcblxuICAgIHByaXZhdGUgZnJhbWVXaWR0aCA9IDA7XG4gICAgcHJpdmF0ZSBmcmFtZUhlaWdodCA9IDA7XG5cbiAgICBwcml2YXRlIGV2ZW50UXVldWUgPSBcIlwiO1xuICAgIHByaXZhdGUgZXZlbnRJbnRlcnZhbElkID0gLTE7XG4gICAgcHJpdmF0ZSBydHRJbnRlcnZhbElkID0gLTE7XG5cbiAgICBwcml2YXRlIGxvZ0ludGVydmFsSWQgPSAtMTtcbiAgICBwcml2YXRlIGxvZ0NvbG9yOiBMb2dDb2xvciA9IFwibm90IHNldFwiO1xuICAgIHByaXZhdGUgbG9nV2hpdGVNcyA9IDA7XG4gICAgcHJpdmF0ZSBsb2dSZWRNcyA9IDA7XG4gICAgcHJpdmF0ZSBsb2dZZWxsb3dNcyA9IDA7XG5cbiAgICBjb25zdHJ1Y3RvcihqYW51czogSmFudXNKUy5KYW51cywgb3BhcXVlSWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmV2ZW50c0ltcGwgPSBuZXcgQ29tbWFuZEludGVyZmFjZUV2ZW50c0ltcGwoKTtcbiAgICAgICAgdGhpcy5qYW51cyA9IGphbnVzO1xuICAgICAgICB0aGlzLm9wYXF1ZUlkID0gb3BhcXVlSWQ7XG5cbiAgICAgICAgdGhpcy5leGl0UHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV4aXRSZXNvbHZlRm4gPSByZXNvbHZlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbmZpZ1Byb21pc2UgPSBuZXcgUHJvbWlzZTxEb3NDb25maWc+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1Jlc29sdmVGbiA9IHJlc29sdmU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlUHJvbWlzZSA9IG5ldyBQcm9taXNlPEphbnVzSlMuUGx1Z2luSGFuZGxlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc29sdmVGbiA9IChoYW5kbGU6IEphbnVzSlMuUGx1Z2luSGFuZGxlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGUgPSBoYW5kbGU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiZXhpdCgpIHdhcyBjYWxsZWRcIikpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gd29ya2Fyb3VuZCBmb3Igc2VuZGluZyBpbW1lZGlhdGVseSBhZnRlciBpbml0XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5saXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuZGF0YSh7IHRleHQ6IFwicGlwZSBcIiArIHRoaXMub3BhcXVlSWQgKyBcIiBjb25maWdcIiB9KTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5saXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBzdGFydCBldmVudHMgZXhjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudEludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRFdmVudHNEYXRhKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDgpIGFzIGFueTtcblxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0IHJ0dCBjaGVja1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ0dEludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRQaXBlTWVzc2FnZShcInJ0dFwiLCBEYXRlLm5vdygpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCkgYXMgYW55O1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShoYW5kbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hdHRhY2goKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpcmVNZXNzYWdlKHR5cGU6IEphbnVzTWVzc2FnZVR5cGUsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzSW1wbC5maXJlTWVzc2FnZSh0eXBlLCAuLi5hcmdzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGF0dGFjaCgpIHtcbiAgICAgICAgbGV0IGhhbmRsZVJlZjogSmFudXNKUy5QbHVnaW5IYW5kbGU7XG4gICAgICAgIHRoaXMuamFudXMuYXR0YWNoKHtcbiAgICAgICAgICAgIHBsdWdpbjogXCJqYW51cy5wbHVnaW4uc3RyZWFtaW5nXCIsXG4gICAgICAgICAgICBvcGFxdWVJZDogdGhpcy5vcGFxdWVJZCxcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLm9uRXJyb3IsXG4gICAgICAgICAgICBzdWNjZXNzOiAoaGFuZGxlKSA9PiB7XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVmID0gaGFuZGxlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZU1lc3NhZ2UoXCJhdHRhY2hlZFwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2VuZCh7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IFwid2F0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9ubWVzc2FnZTogKG1lc3NhZ2U6IEphbnVzSlMuTWVzc2FnZSwganNlcD86IEphbnVzSlMuSlNFUCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25KYW51c01lc3NhZ2UoaGFuZGxlUmVmLCBtZXNzYWdlLCBqc2VwKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbnJlbW90ZXN0cmVhbTogKHN0cmVhbTogTWVkaWFTdHJlYW0pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVNZXNzYWdlKFwib25yZW1vdGVzdHJlYW1cIiwgc3RyZWFtKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbmRhdGFvcGVuOiAoKSA9PiB0aGlzLmhhbmRsZVJlc29sdmVGbihoYW5kbGVSZWYpLFxuICAgICAgICAgICAgb25kYXRhOiBkYXRhQXNzZW1ibGVyKHRoaXMub25EYXRhTWVzc2FnZSwgdGhpcy5vbkVycm9yKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRhdGFNZXNzYWdlID0gKGRhdGE6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoZGF0YS5zdGFydHNXaXRoKFwiY29uZmlnPVwiKSkge1xuICAgICAgICAgICAgdGhpcy5jb25maWdSZXNvbHZlRm4oSlNPTi5wYXJzZShkYXRhLnN1YnN0cihcImNvbmZpZz1cIi5sZW5ndGgpKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGFydHNXaXRoKFwiZnJhbWU9XCIpKSB7XG4gICAgICAgICAgICBjb25zdCBbd2lkdGgsIGhlaWdodF0gPSBkYXRhLnN1YnN0cihcImZyYW1lPVwiLmxlbmd0aCkuc3BsaXQoXCJ4XCIpO1xuICAgICAgICAgICAgdGhpcy5mcmFtZVdpZHRoID0gTnVtYmVyLnBhcnNlSW50KHdpZHRoLCAxMCkgfHwgMDtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVIZWlnaHQgPSBOdW1iZXIucGFyc2VJbnQoaGVpZ2h0LCAxMCkgfHwgMDtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YXJ0c1dpdGgoXCJydHQ9XCIpKSB7XG4gICAgICAgICAgICBjb25zdCBbb3BhcXVlSWQsIHNlbnRBdFN0ciwgcmVjZWl2ZWRBdFN0cl0gPSBkYXRhLnN1YnN0cihcInJ0dD1cIi5sZW5ndGgpLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbnRBdCA9IE51bWJlci5wYXJzZUludChzZW50QXRTdHIsIDEwKTtcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpdmVkQXQgPSBOdW1iZXIucGFyc2VJbnQocmVjZWl2ZWRBdFN0ciwgMTApO1xuICAgICAgICAgICAgY29uc3QgcmV0dXJuZWRBdCA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjb25zdCBiaXRyYXRlU3RyID0gdGhpcy5oYW5kbGU/LmdldEJpdHJhdGUoKSBhcyBhbnkgfHwgXCIwIGtiaXRzL3NlY1wiO1xuICAgICAgICAgICAgY29uc3QgYml0cmF0ZSA9IE51bWJlci5wYXJzZUludChiaXRyYXRlU3RyLnNwbGl0KFwiIFwiKVswXSwgMTApO1xuICAgICAgICAgICAgdGhpcy5zZW5kUGlwZU1lc3NhZ2UoXCJydHQtZGF0YVwiLCBEYXRlLm5vdygpLCBzZW50QXQsIHJlY2VpdmVkQXQsIHJldHVybmVkQXQsIGJpdHJhdGUpO1xuICAgICAgICAgICAgaWYgKG9wYXF1ZUlkID09PSB0aGlzLm9wYXF1ZUlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudHNJbXBsLmZpcmVTdGRvdXQoXCJydHQtZGF0YT1cIiArIChyZXR1cm5lZEF0IC0gc2VudEF0KSArIFwiIFwiICsgYml0cmF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5zdGFydHNXaXRoKFwibG9nLXZpc3VhbC1cIikpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsb2ctdmlzdWFsLXdoaXRlXCI6IHRoaXMuZXZlbnRzSW1wbC5maXJlU3Rkb3V0KFwieWVsbG93LWZyYW1lOlwiICsgKERhdGUubm93KCkgLSB0aGlzLmxvZ1llbGxvd01zKSk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJsb2ctdmlzdWFsLXJlZFwiOiB0aGlzLmV2ZW50c0ltcGwuZmlyZVN0ZG91dChcIndoaXRlLWZyYW1lOlwiICsgKERhdGUubm93KCkgLSB0aGlzLmxvZ1doaXRlTXMpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxvZy12aXN1YWwteWVsbG93XCI6IHRoaXMuZXZlbnRzSW1wbC5maXJlU3Rkb3V0KFwicmVkLWZyYW1lOlwiICsgKERhdGUubm93KCkgLSB0aGlzLmxvZ1JlZE1zKSk7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuc3RhcnRzV2l0aChcImxvZy1jb21tYW5kLVwiKSkge1xuICAgICAgICAgICAgc3dpdGNoIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxvZy1jb21tYW5kLXdoaXRlXCI6IHRoaXMuZXZlbnRzSW1wbC5maXJlU3Rkb3V0KFwieWVsbG93LXBpcGU6XCIgKyAoRGF0ZS5ub3coKSAtIHRoaXMubG9nWWVsbG93TXMpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxvZy1jb21tYW5kLXJlZFwiOiB0aGlzLmV2ZW50c0ltcGwuZmlyZVN0ZG91dChcIndoaXRlLXBpcGU6XCIgKyAoRGF0ZS5ub3coKSAtIHRoaXMubG9nV2hpdGVNcykpOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibG9nLWNvbW1hbmQteWVsbG93XCI6IHRoaXMuZXZlbnRzSW1wbC5maXJlU3Rkb3V0KFwicmVkLXBpcGU6XCIgKyAoRGF0ZS5ub3coKSAtIHRoaXMubG9nUmVkTXMpKTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c0ltcGwuZmlyZVN0ZG91dChkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgb25KYW51c01lc3NhZ2UgPSAoaGFuZGxlOiBKYW51c0pTLlBsdWdpbkhhbmRsZSwgbWVzc2FnZTogSmFudXNKUy5NZXNzYWdlLCBqc2VwPzogSmFudXNKUy5KU0VQKSA9PiB7XG4gICAgICAgIGlmIChqc2VwICE9PSB1bmRlZmluZWQgJiYganNlcCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGFuZGxlLmNyZWF0ZUFuc3dlcih7XG4gICAgICAgICAgICAgICAganNlcCxcbiAgICAgICAgICAgICAgICBtZWRpYToge1xuICAgICAgICAgICAgICAgICAgICBhdWRpb1NlbmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2aWRlb1NlbmQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKGpzZXA6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVNZXNzYWdlKFwic3RhcnRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLnNlbmQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IFwic3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBqc2VwLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLm9uRXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRXJyb3IgPSAoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICB0aGlzLmZpcmVNZXNzYWdlKFwiZXJyb3JcIiwgZXJyb3IpO1xuICAgIH1cblxuICAgIG9uRGVzdHJveWVkKCkge1xuICAgICAgICB0aGlzLmZpcmVNZXNzYWdlKFwiZGVzdHJveWVkXCIpO1xuICAgICAgICB0aGlzLmV4aXRSZXNvbHZlRm4oKTtcbiAgICB9XG5cbiAgICBhc3luYyBjb25maWcoKTogUHJvbWlzZTxEb3NDb25maWc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnUHJvbWlzZTtcbiAgICB9XG5cbiAgICB3aWR0aCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZVdpZHRoO1xuICAgIH1cblxuICAgIGhlaWdodCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZUhlaWdodDtcbiAgICB9XG5cbiAgICBzb3VuZEZyZXF1ZW5jeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gNDQxMDA7XG4gICAgfVxuXG4gICAgc2NyZWVuc2hvdCgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vdCBzdXBwb3J0ZWRcIikpO1xuICAgIH1cblxuICAgIHNpbXVsYXRlS2V5UHJlc3MoLi4ua2V5Q29kZXM6IG51bWJlcltdKSB7XG4gICAgICAgIGNvbnN0IHRpbWVNcyA9IERhdGUubm93KCkgLSB0aGlzLnN0YXJ0ZWRBdDtcbiAgICAgICAga2V5Q29kZXMuZm9yRWFjaChrZXlDb2RlID0+IHRoaXMuYWRkS2V5KGtleUNvZGUsIHRydWUsIHRpbWVNcykpO1xuICAgICAgICBrZXlDb2Rlcy5mb3JFYWNoKGtleUNvZGUgPT4gdGhpcy5hZGRLZXkoa2V5Q29kZSwgZmFsc2UsIHRpbWVNcyArIDE2KSk7XG4gICAgfVxuXG4gICAgc2VuZEtleUV2ZW50KGtleUNvZGU6IG51bWJlciwgcHJlc3NlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmFkZEtleShrZXlDb2RlLCBwcmVzc2VkLCBEYXRlLm5vdygpIC0gdGhpcy5zdGFydGVkQXQpO1xuICAgIH1cblxuICAgIGFkZEtleShrZXlDb2RlOiBudW1iZXIsIHByZXNzZWQ6IGJvb2xlYW4sIHRpbWVNczogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGtleVByZXNzZWQgPSB0aGlzLmtleU1hdHJpeFtrZXlDb2RlXSA9PT0gdHJ1ZTtcbiAgICAgICAgaWYgKGtleVByZXNzZWQgPT09IHByZXNzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleU1hdHJpeFtrZXlDb2RlXSA9IHByZXNzZWQ7XG4gICAgICAgIHRoaXMuc2VuZFBpcGVNZXNzYWdlKFwia1wiICsgKHByZXNzZWQgPyBcImRvd25cIiA6IFwidXBcIiksIGtleUNvZGUsIHRpbWVNcyk7XG5cbiAgICAgICAgaWYgKHRoaXMubG9nSW50ZXJ2YWxJZCAhPT0gLTEgJiYgcHJlc3NlZCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxvZ0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIndoaXRlXCI6IHRoaXMubG9nV2hpdGVNcyA9IERhdGUubm93KCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJyZWRcIjogdGhpcy5sb2dSZWRNcyA9IERhdGUubm93KCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ5ZWxsb3dcIjogdGhpcy5sb2dZZWxsb3dNcyA9IERhdGUubm93KCk7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VuZE1vdXNlTW90aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuc2VuZFBpcGVNZXNzYWdlKFwibW1vdmVcIiwgeCwgeSwgRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRlZEF0KTtcbiAgICB9XG5cbiAgICBzZW5kTW91c2VSZWxhdGl2ZU1vdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuXG4gICAgc2VuZE1vdXNlQnV0dG9uKGJ1dHRvbjogbnVtYmVyLCBwcmVzc2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2VuZFBpcGVNZXNzYWdlKFwibVwiICsgKHByZXNzZWQgPyBcImRvd25cIiA6IFwidXBcIiksIGJ1dHRvbiwgRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRlZEF0KTtcbiAgICB9XG5cbiAgICBzZW5kTW91c2VTeW5jKCkge1xuICAgICAgICB0aGlzLnNlbmRQaXBlTWVzc2FnZShcIm1zeW5jXCIsIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0ZWRBdCk7XG4gICAgfVxuXG4gICAgbG9nVmlzdWFsKHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50KSB7XG4gICAgICAgIHRoaXMuc2VuZFBpcGVNZXNzYWdlKFwibG9nLXZpc3VhbC1vblwiKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IDE7XG5cbiAgICAgICAgdGhpcy5sb2dJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGN0eD8uZHJhd0ltYWdlKHZpZGVvLCAwLCAwLCAxLCAxLCAwLCAwLCAxLCAxKTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eD8uZ2V0SW1hZ2VEYXRhKDAsIDAsIDEsIDEpPy5kYXRhIGFzIFVpbnQ4Q2xhbXBlZEFycmF5O1xuICAgICAgICAgICAgY29uc3QgY2FwdHVyZVRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRlZEF0O1xuXG4gICAgICAgICAgICBsZXQgbmV3Q29sb3I6IExvZ0NvbG9yID0gXCJub3Qgc2V0XCI7XG4gICAgICAgICAgICBpZiAoaW1hZ2VEYXRhWzBdID4gMjAwICYmIGltYWdlRGF0YVsxXSA+IDIwMCAmJiBpbWFnZURhdGFbMl0gPiAyMDApIHtcbiAgICAgICAgICAgICAgICBuZXdDb2xvciA9IFwid2hpdGVcIjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW1hZ2VEYXRhWzBdID4gMjAwICYmIGltYWdlRGF0YVsxXSA8IDIwMCAmJiBpbWFnZURhdGFbMl0gPCAyMDApIHtcbiAgICAgICAgICAgICAgICBuZXdDb2xvciA9IFwicmVkXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGltYWdlRGF0YVswXSA+IDIwMCAmJiBpbWFnZURhdGFbMV0gPiAyMDAgJiYgaW1hZ2VEYXRhWzJdIDwgMjAwKSB7XG4gICAgICAgICAgICAgICAgbmV3Q29sb3IgPSBcInllbGxvd1wiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobmV3Q29sb3IgIT09IHRoaXMubG9nQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5ld0NvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3aGl0ZVwiOiB0aGlzLmV2ZW50c0ltcGwuZmlyZVN0ZG91dChcInllbGxvdy1zdHJlYW06XCIgKyAoRGF0ZS5ub3coKSAtIHRoaXMubG9nWWVsbG93TXMgLSBjYXB0dXJlVGltZSkpOyBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlZFwiOiB0aGlzLmV2ZW50c0ltcGwuZmlyZVN0ZG91dChcIndoaXRlLXN0cmVhbTpcIiArIChEYXRlLm5vdygpIC0gdGhpcy5sb2dXaGl0ZU1zIC0gY2FwdHVyZVRpbWUpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ5ZWxsb3dcIjogdGhpcy5ldmVudHNJbXBsLmZpcmVTdGRvdXQoXCJyZWQtc3RyZWFtOlwiICsgKERhdGUubm93KCkgLSB0aGlzLmxvZ1JlZE1zIC0gY2FwdHVyZVRpbWUpKTsgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubG9nQ29sb3IgPSBuZXdDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTYpIGFzIGFueTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlbmRQaXBlTWVzc2FnZSguLi5wYXJ0czogYW55W10pIHtcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlICs9IFwicGlwZSBcIiArIHRoaXMub3BhcXVlSWQ7XG4gICAgICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgICAgICAgdGhpcy5ldmVudFF1ZXVlICs9IFwiIFwiICsgcGFydDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50UXVldWUgKz0gXCJcXG5cIjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNlbmRFdmVudHNEYXRhKGhhbmRsZTogSmFudXNKUy5QbHVnaW5IYW5kbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGUuZGF0YSh7IHRleHQ6IHRoaXMuZXZlbnRRdWV1ZSB9KTtcbiAgICAgICAgdGhpcy5ldmVudFF1ZXVlID0gXCJcIjtcbiAgICB9XG5cbiAgICBwZXJzaXN0KCk6IFByb21pc2U8VWludDhBcnJheT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm90IHN1cHBvcnRlZFwiKSk7XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zb2xlLndhcm4oXCJwYXVzZS9yZXN1bWUgaXMgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cblxuICAgIHJlc3VtZSgpIHtcbiAgICAgICAgLy9cbiAgICB9XG5cbiAgICBtdXRlKCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc29sZS53YXJuKFwibXV0ZS91bm11dGUgaXMgbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cblxuICAgIHVubXV0ZSgpIHtcbiAgICAgICAgLy9cbiAgICB9XG5cbiAgICBleGl0KCkge1xuICAgICAgICB0aGlzLmxpdmUgPSBmYWxzZTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmxvZ0ludGVydmFsSWQpO1xuICAgICAgICB0aGlzLmxvZ0ludGVydmFsSWQgPSAtMTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmV2ZW50SW50ZXJ2YWxJZCk7XG4gICAgICAgIHRoaXMuZXZlbnRJbnRlcnZhbElkID0gLTE7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5ydHRJbnRlcnZhbElkKTtcbiAgICAgICAgdGhpcy5ydHRJbnRlcnZhbElkID0gLTE7XG4gICAgICAgIHRoaXMuamFudXMuZGVzdHJveSgpXG4gICAgICAgIHJldHVybiB0aGlzLmV4aXRQcm9taXNlO1xuICAgIH1cblxuICAgIGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzSW1wbDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEphbnVzQmFja2VuZChyZXN0VXJsOiBzdHJpbmcsIGphbnVzPzogYW55KTogUHJvbWlzZTxDb21tYW5kSW50ZXJmYWNlPiB7XG4gICAgY29uc3QgSmFudXMgPSBqYW51cyB8fCAod2luZG93IGFzIGFueSkuSmFudXM7XG4gICAgaWYgKEphbnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkphbnVzIGlzIG5vdCBkZWZpbmVkLCB5b3Ugc2hvdWxkIGxvYWQgamFudXMuanMgYmVmb3JlIHRoaXNcIikpO1xuICAgIH1cblxuICAgIGlmICghSmFudXMuaXNXZWJydGNTdXBwb3J0ZWQoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiV2ViUlRDIG5vdCBzdXBwb3J0ZWRcIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxDb21tYW5kSW50ZXJmYWNlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGxldCBiYWNrZW5kOiBKYW51c0JhY2tlbmRJbXBsIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgZXJyb3I6IChlcnJvcjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJhY2tlbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZW5kLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXN0cm95ZWQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYmFja2VuZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZW5kLm9uRGVzdHJveWVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IEphbnVzSlMuQ29uc3RydWN0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgc2VydmVyOiByZXN0VXJsLFxuICAgICAgICAgICAgc3VjY2VzczogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGJhY2tlbmQgPSBuZXcgSmFudXNCYWNrZW5kSW1wbChqYW51c0ltcGwsIFwianMtZG9zLVwiICsgSmFudXMucmFuZG9tU3RyaW5nKDEyKSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShiYWNrZW5kKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogaGFuZGxlcnMuZXJyb3IsXG4gICAgICAgICAgICBkZXN0cm95ZWQ6IGhhbmRsZXJzLmRlc3Ryb3llZCxcbiAgICAgICAgICAgIGRlc3Ryb3lPblVubG9hZDogdHJ1ZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBqYW51c0ltcGwgPSBuZXcgSmFudXMob3B0aW9ucykgYXMgSmFudXNKUy5KYW51cztcbiAgICB9KTtcblxufVxuXG5mdW5jdGlvbiB1dGY4RGVjb2RlKGJhc2U2NFRleHQ6IHN0cmluZykge1xuICAgIGNvbnN0IGJpbmFyeSA9IGF0b2IoYmFzZTY0VGV4dCk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShiaW5hcnkubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJ5dGVzW2ldID0gYmluYXJ5LmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnl0ZXMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExpYlppcCB7XG4gICAgcHVibGljIG1vZHVsZTogYW55O1xuICAgIHByaXZhdGUgaG9tZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IobW9kdWxlOiBhbnksIGhvbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLm1vZHVsZSA9IG1vZHVsZTtcbiAgICAgICAgdGhpcy5ob21lID0gaG9tZTtcbiAgICAgICAgdGhpcy5tb2R1bGUuY2FsbE1haW4oW10pO1xuICAgICAgICB0aGlzLmNoZGlyVG9Ib21lKCk7XG4gICAgfVxuXG4gICAgemlwRnJvbUZzKGNoYW5nZWRBZnRlck1zID0gLTEpOiBQcm9taXNlPFVpbnQ4QXJyYXk+IHtcbiAgICAgICAgdGhpcy5jaGRpclRvSG9tZSgpO1xuXG4gICAgICAgIGNvbnN0IHB0ciA9IHRoaXMubW9kdWxlLl96aXBfZnJvbV9mcyhjaGFuZ2VkQWZ0ZXJNcyk7XG4gICAgICAgIGlmIChwdHIgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJDYW4ndCBjcmVhdGUgemlwLCBzZWUgbW9yZSBpbmZvIGluIGxvZ3NcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5tb2R1bGUuSEVBUFUzMltwdHIgLyA0XTtcbiAgICAgICAgY29uc3QgbWVtb3J5OiBVaW50OEFycmF5ID0gdGhpcy5tb2R1bGUuSEVBUFU4O1xuICAgICAgICBjb25zdCBhcmNoaXZlID0gbWVtb3J5LnNsaWNlKHB0ciArIDQsIHB0ciArIDQgKyBsZW5ndGgpO1xuICAgICAgICB0aGlzLm1vZHVsZS5fZnJlZShwdHIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFyY2hpdmUpO1xuICAgIH1cblxuICAgIHppcFRvRnMoemlwQXJjaGl2ZTogVWludDhBcnJheSwgcGF0aCA9IFwiL1wiKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHBhdGggPSB0aGlzLm5vcm1hbGl6ZUZpbGVuYW1lKHBhdGgpO1xuICAgICAgICBjb25zdCBwYXRoUGFydHMgPSB0aGlzLm5vcm1hbGl6ZUZpbGVuYW1lKHBhdGgpLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgdGhpcy5jcmVhdGVQYXRoKHBhdGhQYXJ0cywgMCwgcGF0aFBhcnRzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuY2hkaXIocGF0aCk7XG5cbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh6aXBBcmNoaXZlKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5tb2R1bGUuX21hbGxvYyhieXRlcy5sZW5ndGgpO1xuICAgICAgICB0aGlzLm1vZHVsZS5IRUFQVTguc2V0KGJ5dGVzLCBidWZmZXIpO1xuICAgICAgICBjb25zdCByZXRjb2RlID0gdGhpcy5tb2R1bGUuX3ppcF90b19mcyhidWZmZXIsIGJ5dGVzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMubW9kdWxlLl9mcmVlKGJ1ZmZlcik7XG5cbiAgICAgICAgdGhpcy5jaGRpclRvSG9tZSgpO1xuXG4gICAgICAgIGlmIChyZXRjb2RlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ2FuJ3QgZXh0cmFjdCB6aXAsIHJldGNvZGUgXCIgK1xuICAgICAgICAgICAgICAgIHJldGNvZGUgKyBcIiwgc2VlIG1vcmUgaW5mbyBpbiBsb2dzXCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vICMjIyB3cml0ZUZpbGVcbiAgICB3cml0ZUZpbGUoZmlsZTogc3RyaW5nLCBib2R5OiBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXkgfCBzdHJpbmcpIHtcbiAgICAgICAgLy8gQWxsb3cgdG8gY3JlYXRlIGZpbGUgaW4gRlMsIGl0IHdpbGwgYmUgY3JlYXRlZCByZWxhdGl2ZWx5IGN3ZFxuICAgICAgICAvLyBBbGwgZGlyZWN0b3JpZXMgd2lsbCBiZSBjcmVhdGVkXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHdpbmRvd3Mgc3R5bGUgcGF0aCBhcmUgYWxzbyB2YWxpZCwgYnV0ICoqZHJpdmUgbGV0dGVyIGlzIGlnbm9yZWQqKlxuICAgICAgICAvLyBpZiB5b3UgcGFzcyBvbmx5IGZpbGVuYW1lLCB0aGVuIGZpbGUgd2lsbCBiZSB3cml0ZWQgaW4gY3dkXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJvZHkgY2FuIGJlIHN0cmluZyBvciBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5XG4gICAgICAgIGZpbGUgPSB0aGlzLm5vcm1hbGl6ZUZpbGVuYW1lKGZpbGUpO1xuXG4gICAgICAgIGlmIChib2R5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICAgIGJvZHkgPSBuZXcgVWludDhBcnJheShib2R5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcnRzID0gZmlsZS5zcGxpdChcIi9cIik7XG5cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgY3JlYXRlIGZpbGUgJ1wiICsgZmlsZSArIFwiJywgYmVjYXVzZSBpdCdzIG5vdCB2YWxpZCBmaWxlIHBhdGhcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdLnRyaW0oKTtcblxuICAgICAgICBpZiAoZmlsZW5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBjcmVhdGUgZmlsZSAnXCIgKyBmaWxlICsgXCInLCBiZWNhdXNlIGZpbGUgbmFtZSBpcyBlbXB0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGkgPCBwYXJ0cy5sZW5ndGggLSAxLCBiZWNhdXNlIGxhc3QgcGFydCBpcyBmaWxlIG5hbWUgKi9cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuY3JlYXRlUGF0aChwYXJ0cywgMCwgcGFydHMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMubW9kdWxlLkZTLndyaXRlRmlsZShwYXRoICsgXCIvXCIgKyBmaWxlbmFtZSwgYm9keSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVhZEZpbGUoZmlsZTogc3RyaW5nLCBlbmNvZGluZzogXCJiaW5hcnlcIiB8IFwidXRmOFwiID0gXCJ1dGY4XCIpOiBQcm9taXNlPHN0cmluZ3xVaW50OEFycmF5PiB7XG4gICAgICAgIGZpbGUgPSB0aGlzLm5vcm1hbGl6ZUZpbGVuYW1lKGZpbGUpO1xuICAgICAgICByZXR1cm4gdGhpcy5tb2R1bGUuRlMucmVhZEZpbGUoZmlsZSwgeyBlbmNvZGluZyB9KTtcbiAgICB9XG5cblxuICAgIGV4aXN0cyhmaWxlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgZmlsZSA9IHRoaXMubm9ybWFsaXplRmlsZW5hbWUoZmlsZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLm1vZHVsZS5GUy5sb29rdXBQYXRoKGZpbGUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZGVzdHJveSgpOiBhbnkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5tb2R1bGUuX2xpYnppcF9kZXN0cm95KCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBub3JtYWxpemVGaWxlbmFtZShmaWxlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBmaWxlID0gZmlsZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeW2EtekEtel0rOlwiKSwgXCJcIikucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXFxcXFxcIiwgXCJnXCIpLCBcIi9cIik7XG4gICAgICAgIHdoaWxlIChmaWxlWzBdID09PSBcIi9cIikge1xuICAgICAgICAgICAgZmlsZSA9IGZpbGUuc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlUGF0aChwYXJ0czogc3RyaW5nW10sIGJlZ2luOiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBwYXRoID0gXCIuXCI7XG4gICAgICAgIGZvciAobGV0IGkgPSBiZWdpbjsgaSA8IGVuZDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbaV0udHJpbSgpO1xuICAgICAgICAgICAgaWYgKHBhcnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubW9kdWxlLkZTLmNyZWF0ZVBhdGgocGF0aCwgcGFydCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBwYXRoID0gcGF0aCArIFwiL1wiICsgcGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2hkaXJUb0hvbWUoKSB7XG4gICAgICAgIHRoaXMubW9kdWxlLkZTLmNoZGlyKHRoaXMuaG9tZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjaGRpcihwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5tb2R1bGUuRlMuY2hkaXIodGhpcy5ob21lICsgXCIvXCIgKyBwYXRoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IFNlcnZlck1lc3NhZ2UsIE1lc3NhZ2VIYW5kbGVyIH0gZnJvbSBcIi4vcHJvdG9jb2xcIjtcblxuaW50ZXJmYWNlIERlbGF5ZWRNZXNzYWdlIHtcbiAgICBuYW1lOiBTZXJ2ZXJNZXNzYWdlLFxuICAgIHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55fSxcbn1cblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzUXVldWUge1xuICAgIHByaXZhdGUgbWVzc2FnZXM6IERlbGF5ZWRNZXNzYWdlW10gPSBbXTtcbiAgICBwdWJsaWMgaGFuZGxlcihuYW1lOiBTZXJ2ZXJNZXNzYWdlLCBwcm9wczoge1trZXk6IHN0cmluZ106IGFueX0pIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5wdXNoKHsgbmFtZSwgcHJvcHMgfSk7XG4gICAgfVxuICAgIHB1YmxpYyBzZW5kVG8oaGFuZGxlcjogTWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHRoaXMubWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGhhbmRsZXIobmV4dC5uYW1lLCBuZXh0LnByb3BzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBEb3NDb25maWcgfSBmcm9tIFwiLi4vZG9zL2J1bmRsZS9kb3MtY29uZlwiO1xuaW1wb3J0IHsgQ29tbWFuZEludGVyZmFjZSB9IGZyb20gXCIuLi9lbXVsYXRvcnNcIjtcbmltcG9ydCB7IENvbW1hbmRJbnRlcmZhY2VFdmVudHNJbXBsIH0gZnJvbSBcIi4uL2ltcGwvY2ktaW1wbFwiO1xuXG5leHBvcnQgdHlwZSBDbGllbnRNZXNzYWdlID1cbiAgICBcIndjLWluc3RhbGxcIiB8XG4gICAgXCJ3Yy1ydW5cIiB8XG4gICAgXCJ3Yy1wYWNrLWZzLXRvLWJ1bmRsZVwiIHxcbiAgICBcIndjLWFkZC1rZXlcIiB8XG4gICAgXCJ3Yy1tb3VzZS1tb3ZlXCIgfFxuICAgIFwid2MtbW91c2UtYnV0dG9uXCIgfFxuICAgIFwid2MtbW91c2Utc3luY1wiIHxcbiAgICBcIndjLWV4aXRcIiB8XG4gICAgXCJ3Yy1zeW5jLXNsZWVwXCIgfFxuICAgIFwid2MtcGF1c2VcIiB8XG4gICAgXCJ3Yy1yZXN1bWVcIiB8XG4gICAgXCJ3Yy1tdXRlXCIgfFxuICAgIFwid2MtdW5tdXRlXCI7XG5cbmV4cG9ydCB0eXBlIFNlcnZlck1lc3NhZ2UgPVxuICAgIFwid3MtcmVhZHlcIiB8XG4gICAgXCJ3cy1zZXJ2ZXItcmVhZHlcIiB8XG4gICAgXCJ3cy1mcmFtZS1zZXQtc2l6ZVwiIHxcbiAgICBcIndzLXVwZGF0ZS1saW5lc1wiIHxcbiAgICBcIndzLWxvZ1wiIHxcbiAgICBcIndzLXdhcm5cIiB8XG4gICAgXCJ3cy1lcnJcIiB8XG4gICAgXCJ3cy1zdGRvdXRcIiB8XG4gICAgXCJ3cy1leGl0XCIgfFxuICAgIFwid3MtcGVyc2lzdFwiIHxcbiAgICBcIndzLXNvdW5kLWluaXRcIiB8XG4gICAgXCJ3cy1zb3VuZC1wdXNoXCIgfFxuICAgIFwid3MtY29uZmlnXCIgfFxuICAgIFwid3Mtc3luYy1zbGVlcFwiO1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlSGFuZGxlciA9ICAobmFtZTogU2VydmVyTWVzc2FnZSwgcHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9KSA9PiB2b2lkO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zcG9ydExheWVyIHtcbiAgICBzZXNzaW9uSWQ6IHN0cmluZztcbiAgICBzZW5kTWVzc2FnZVRvU2VydmVyKG5hbWU6IENsaWVudE1lc3NhZ2UsIHByb3BzPzoge1trZXk6IHN0cmluZ106IGFueX0pOiB2b2lkO1xuICAgIGluaXRNZXNzYWdlSGFuZGxlcihoYW5kbGVyOiBNZXNzYWdlSGFuZGxlcik6IHZvaWQ7XG4gICAgZXhpdD86ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnJhbWVMaW5lIHtcbiAgICBzdGFydDogbnVtYmVyO1xuICAgIGhlYXB1ODogVWludDhBcnJheTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbW1hbmRJbnRlcmZhY2VPdmVyVHJhbnNwb3J0TGF5ZXIgaW1wbGVtZW50cyBDb21tYW5kSW50ZXJmYWNlIHtcbiAgICBwcml2YXRlIHN0YXJ0ZWRBdCA9IERhdGUubm93KCk7XG4gICAgcHJpdmF0ZSBmcmFtZVdpZHRoID0gMDtcbiAgICBwcml2YXRlIGZyYW1lSGVpZ2h0ID0gMDtcbiAgICBwcml2YXRlIHJnYjogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KCk7XG4gICAgcHJpdmF0ZSBmcmVxID0gMDtcblxuICAgIHByaXZhdGUgYnVuZGxlcz86IFVpbnQ4QXJyYXlbXTtcbiAgICBwcml2YXRlIHRyYW5zcG9ydDogVHJhbnNwb3J0TGF5ZXI7XG4gICAgcHJpdmF0ZSByZWFkeTogKGVycjogRXJyb3IgfCBudWxsKSA9PiB2b2lkO1xuXG4gICAgcHJpdmF0ZSBwZXJzaXN0UHJvbWlzZT86IFByb21pc2U8VWludDhBcnJheT47XG4gICAgcHJpdmF0ZSBwZXJzaXN0UmVzb2x2ZT86IChidW5kbGU6IFVpbnQ4QXJyYXkpID0+IHZvaWQ7XG5cbiAgICBwcml2YXRlIGV4aXRQcm9taXNlPzogUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIGV4aXRSZXNvbHZlPzogKCkgPT4gdm9pZDtcblxuICAgIHByaXZhdGUgZXZlbnRzSW1wbCA9IG5ldyBDb21tYW5kSW50ZXJmYWNlRXZlbnRzSW1wbCgpO1xuXG4gICAgcHJpdmF0ZSBrZXlNYXRyaXg6IHtba2V5Q29kZTogbnVtYmVyXTogYm9vbGVhbn0gPSB7fTtcblxuICAgIHByaXZhdGUgY29uZmlnUHJvbWlzZTogUHJvbWlzZTxEb3NDb25maWc+O1xuICAgIHByaXZhdGUgY29uZmlnUmVzb2x2ZTogKGNvbmZpZzogRG9zQ29uZmlnKSA9PiB2b2lkID0gKCkgPT4gey8qKi99O1xuICAgIHByaXZhdGUgcGFuaWNNZXNzYWdlczogc3RyaW5nW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKGJ1bmRsZXM6IFVpbnQ4QXJyYXlbXSxcbiAgICAgICAgICAgICAgICB0cmFuc3BvcnQ6IFRyYW5zcG9ydExheWVyLFxuICAgICAgICAgICAgICAgIHJlYWR5OiAoZXJyOiBFcnJvciB8IG51bGwpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5idW5kbGVzID0gYnVuZGxlcztcbiAgICAgICAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICAgIHRoaXMucmVhZHkgPSByZWFkeTtcbiAgICAgICAgdGhpcy5jb25maWdQcm9taXNlID0gbmV3IFByb21pc2U8RG9zQ29uZmlnPigocmVzb2x2ZSkgPT4gdGhpcy5jb25maWdSZXNvbHZlID0gcmVzb2x2ZSk7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0LmluaXRNZXNzYWdlSGFuZGxlcih0aGlzLm9uU2VydmVyTWVzc2FnZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlbmRDbGllbnRNZXNzYWdlKG5hbWU6IENsaWVudE1lc3NhZ2UsIHByb3BzPzoge1trZXk6IHN0cmluZ106IGFueX0pIHtcbiAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICAgICAgcHJvcHMuc2Vzc2lvbklkID0gcHJvcHMuc2Vzc2lvbklkIHx8IHRoaXMudHJhbnNwb3J0LnNlc3Npb25JZDtcbiAgICAgICAgdGhpcy50cmFuc3BvcnQuc2VuZE1lc3NhZ2VUb1NlcnZlcihuYW1lLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNlcnZlck1lc3NhZ2UobmFtZTogU2VydmVyTWVzc2FnZSwgcHJvcHM6IHtba2V5OiBzdHJpbmddOiBhbnl9KSB7XG4gICAgICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQgfHwgbmFtZS5sZW5ndGggPCAzIHx8XG4gICAgICAgICAgICBuYW1lWzBdICE9PSBcIndcIiB8fCBuYW1lWzFdICE9PSBcInNcIiB8fCBuYW1lWzJdICE9PSBcIi1cIikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzID09PSB1bmRlZmluZWQgfHwgcHJvcHMuc2Vzc2lvbklkICE9PSB0aGlzLnRyYW5zcG9ydC5zZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcIndzLXJlYWR5XCI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDbGllbnRNZXNzYWdlKFwid2MtcnVuXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYnVuZGxlczogdGhpcy5idW5kbGVzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJ1bmRsZXM7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLXNlcnZlci1yZWFkeVwiOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFuaWNNZXNzYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydC5leGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LmV4aXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWR5KG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh0aGlzLnBhbmljTWVzc2FnZXMpKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkeShudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVsZXRlICh0aGlzIGFzIGFueSkucmVhZHk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLWZyYW1lLXNldC1zaXplXCI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRnJhbWVTaXplKHByb3BzLndpZHRoLCBwcm9wcy5oZWlnaHQpO1xuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ3cy11cGRhdGUtbGluZXNcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMub25GcmFtZUxpbmVzKHByb3BzLmxpbmVzKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwid3MtZXhpdFwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkV4aXQoKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwid3MtbG9nXCI6IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICB0aGlzLm9uTG9nKHByb3BzLnRhZywgcHJvcHMubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLXdhcm5cIjoge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIHRoaXMub25XYXJuKHByb3BzLnRhZywgcHJvcHMubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLWVyclwiOiB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgdGhpcy5vbkVycihwcm9wcy50YWcsIHByb3BzLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ3cy1zdGRvdXRcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdGRvdXQocHJvcHMubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLXBlcnNpc3RcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMub25QZXJzaXN0KHByb3BzLmJ1bmRsZSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLXNvdW5kLWluaXRcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMub25Tb3VuZEluaXQocHJvcHMuZnJlcSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLXNvdW5kLXB1c2hcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMub25Tb3VuZFB1c2gocHJvcHMuc2FtcGxlcyk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIndzLWNvbmZpZ1wiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNvbmZpZyhKU09OLnBhcnNlKHByb3BzLmNvbnRlbnQpKTtcbiAgICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwid3Mtc3luYy1zbGVlcFwiOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQ2xpZW50TWVzc2FnZShcIndjLXN5bmMtc2xlZXBcIiwgcHJvcHMpO1xuICAgICAgICAgICAgfSBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVua25vd24gc2VydmVyIG1lc3NhZ2UgKHdzKTpcIiwgbmFtZSk7XG4gICAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNvbmZpZyhjb25maWc6IERvc0NvbmZpZykge1xuICAgICAgICB0aGlzLmNvbmZpZ1Jlc29sdmUoY29uZmlnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRnJhbWVTaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmZyYW1lV2lkdGggPT09IHdpZHRoICYmIHRoaXMuZnJhbWVIZWlnaHQgPT09IGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mcmFtZVdpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuZnJhbWVIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMucmdiID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQgKiAzKTtcbiAgICAgICAgdGhpcy5ldmVudHNJbXBsLmZpcmVGcmFtZVNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkZyYW1lTGluZXMobGluZXM6IEZyYW1lTGluZVtdKSB7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgdGhpcy5yZ2Iuc2V0KGxpbmUuaGVhcHU4LCBsaW5lLnN0YXJ0ICogdGhpcy5mcmFtZVdpZHRoICogMyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudHNJbXBsLmZpcmVGcmFtZSh0aGlzLnJnYik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNvdW5kSW5pdChmcmVxOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5mcmVxID0gZnJlcTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU291bmRQdXNoKHNhbXBsZXM6IEZsb2F0MzJBcnJheSkge1xuICAgICAgICB0aGlzLmV2ZW50c0ltcGwuZmlyZVNvdW5kUHVzaChzYW1wbGVzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uTG9nKHRhZzogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5ldmVudHNJbXBsLmZpcmVNZXNzYWdlKFwibG9nXCIsIFwiW1wiICsgdGFnICsgXCJdXCIgKyBtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uV2Fybih0YWc6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzSW1wbC5maXJlTWVzc2FnZShcIndhcm5cIiwgXCJbXCIgKyB0YWcgKyBcIl1cIiArIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25FcnIodGFnOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgICAgICBpZiAodGFnID09PSBcInBhbmljXCIpIHtcbiAgICAgICAgICAgIHRoaXMucGFuaWNNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuXHRcdFx0Y29uc29sZS5lcnJvcihcIltcIiArIHRhZyArIFwiXVwiICsgbWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZyhcIltcIiArIHRhZyArIFwiXVwiICsgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ldmVudHNJbXBsLmZpcmVNZXNzYWdlKFwiZXJyb3JcIiwgXCJbXCIgKyB0YWcgKyBcIl1cIiArIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25TdGRvdXQobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzSW1wbC5maXJlU3Rkb3V0KG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb25maWcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ1Byb21pc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mcmFtZVdpZHRoO1xuICAgIH1cblxuICAgIHB1YmxpYyBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyYW1lSGVpZ2h0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzb3VuZEZyZXF1ZW5jeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJlcTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2NyZWVuc2hvdCgpOiBQcm9taXNlPEltYWdlRGF0YT4ge1xuICAgICAgICBjb25zdCByZ2JhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMucmdiLmxlbmd0aCAvIDMgKiA0KTtcblxuICAgICAgICBsZXQgcmdiT2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IHJnYmFPZmZzZXQgPSAwXG5cbiAgICAgICAgd2hpbGUgKHJnYmFPZmZzZXQgPCByZ2JhLmxlbmd0aCkge1xuICAgICAgICAgICAgcmdiYVtyZ2JhT2Zmc2V0KytdID0gdGhpcy5yZ2JbcmdiT2Zmc2V0KytdO1xuICAgICAgICAgICAgcmdiYVtyZ2JhT2Zmc2V0KytdID0gdGhpcy5yZ2JbcmdiT2Zmc2V0KytdO1xuICAgICAgICAgICAgcmdiYVtyZ2JhT2Zmc2V0KytdID0gdGhpcy5yZ2JbcmdiT2Zmc2V0KytdO1xuICAgICAgICAgICAgcmdiYVtyZ2JhT2Zmc2V0KytdID0gMjU1O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgSW1hZ2VEYXRhKHJnYmEsIHRoaXMuZnJhbWVXaWR0aCwgdGhpcy5mcmFtZUhlaWdodCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaW11bGF0ZUtleVByZXNzKC4uLmtleUNvZGVzOiBudW1iZXJbXSkge1xuICAgICAgICBjb25zdCB0aW1lTXMgPSBEYXRlLm5vdygpIC0gdGhpcy5zdGFydGVkQXQ7XG4gICAgICAgIGtleUNvZGVzLmZvckVhY2goa2V5Q29kZSA9PiB0aGlzLmFkZEtleShrZXlDb2RlLCB0cnVlLCB0aW1lTXMpKTtcbiAgICAgICAga2V5Q29kZXMuZm9yRWFjaChrZXlDb2RlID0+IHRoaXMuYWRkS2V5KGtleUNvZGUsIGZhbHNlLCB0aW1lTXMgKyAxNikpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZW5kS2V5RXZlbnQoa2V5Q29kZTogbnVtYmVyLCBwcmVzc2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuYWRkS2V5KGtleUNvZGUsIHByZXNzZWQsIERhdGUubm93KCkgLSB0aGlzLnN0YXJ0ZWRBdCk7XG4gICAgfVxuXG4gICAgLy8gcHVibGljIGZvciB0ZXN0XG4gICAgcHVibGljIGFkZEtleShrZXlDb2RlOiBudW1iZXIsIHByZXNzZWQ6IGJvb2xlYW4sIHRpbWVNczogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGtleVByZXNzZWQgPSB0aGlzLmtleU1hdHJpeFtrZXlDb2RlXSA9PT0gdHJ1ZTtcbiAgICAgICAgaWYgKGtleVByZXNzZWQgPT09IHByZXNzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleU1hdHJpeFtrZXlDb2RlXSA9IHByZXNzZWQ7XG4gICAgICAgIHRoaXMuc2VuZENsaWVudE1lc3NhZ2UoXCJ3Yy1hZGQta2V5XCIsIHsga2V5OiBrZXlDb2RlLCBwcmVzc2VkLCB0aW1lTXMgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNlbmRNb3VzZU1vdGlvbih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnNlbmRDbGllbnRNZXNzYWdlKFwid2MtbW91c2UtbW92ZVwiLCB7IHgsIHksIHJlbGF0aXZlOiBmYWxzZSwgdGltZU1zOiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydGVkQXQgfSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VuZE1vdXNlUmVsYXRpdmVNb3Rpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zZW5kQ2xpZW50TWVzc2FnZShcIndjLW1vdXNlLW1vdmVcIiwgeyB4LCB5LCByZWxhdGl2ZTogdHJ1ZSwgdGltZU1zOiBEYXRlLm5vdygpIC0gdGhpcy5zdGFydGVkQXQgfSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VuZE1vdXNlQnV0dG9uKGJ1dHRvbjogbnVtYmVyLCBwcmVzc2VkOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2VuZENsaWVudE1lc3NhZ2UoXCJ3Yy1tb3VzZS1idXR0b25cIiwgeyBidXR0b24sIHByZXNzZWQsIHRpbWVNczogRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRlZEF0IH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZW5kTW91c2VTeW5jKCkge1xuICAgICAgICB0aGlzLnNlbmRDbGllbnRNZXNzYWdlKFwid2MtbW91c2Utc3luY1wiLCB7IHRpbWVNczogRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRlZEF0IH0pO1xuICAgIH1cblxuXG4gICAgcHVibGljIHBlcnNpc3QoKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgICAgIGlmICh0aGlzLnBlcnNpc3RQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBlcnNpc3RQcm9taXNlO1xuICAgICAgICB9XG5cblxuICAgICAgICBjb25zdCBwZXJzaXN0UHJvbWlzZSA9IG5ldyBQcm9taXNlPFVpbnQ4QXJyYXk+KChyZXNvbHZlKSA9PiB0aGlzLnBlcnNpc3RSZXNvbHZlID0gcmVzb2x2ZSk7XG4gICAgICAgIHRoaXMucGVyc2lzdFByb21pc2UgPSBwZXJzaXN0UHJvbWlzZTtcblxuICAgICAgICB0aGlzLnNlbmRDbGllbnRNZXNzYWdlKFwid2MtcGFjay1mcy10by1idW5kbGVcIik7XG5cbiAgICAgICAgcmV0dXJuIHBlcnNpc3RQcm9taXNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgb25QZXJzaXN0KGJ1bmRsZTogVWludDhBcnJheSkge1xuICAgICAgICBpZiAodGhpcy5wZXJzaXN0UmVzb2x2ZSkge1xuICAgICAgICAgICAgdGhpcy5wZXJzaXN0UmVzb2x2ZShidW5kbGUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucGVyc2lzdFByb21pc2U7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5wZXJzaXN0UmVzb2x2ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgdGhpcy5zZW5kQ2xpZW50TWVzc2FnZShcIndjLXBhdXNlXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgICAgIHRoaXMuc2VuZENsaWVudE1lc3NhZ2UoXCJ3Yy1yZXN1bWVcIik7XG4gICAgfVxuXG4gICAgcHVibGljIG11dGUoKSB7XG4gICAgICAgIHRoaXMuc2VuZENsaWVudE1lc3NhZ2UoXCJ3Yy1tdXRlXCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1bm11dGUoKSB7XG4gICAgICAgIHRoaXMuc2VuZENsaWVudE1lc3NhZ2UoXCJ3Yy11bm11dGVcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGV4aXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLmV4aXRQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmV4aXRQcm9taXNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZXhpdFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4gdGhpcy5leGl0UmVzb2x2ZSA9IHJlc29sdmUpO1xuICAgICAgICB0aGlzLmV4aXRQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMoKS5maXJlRXhpdCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlc3VtZSgpO1xuICAgICAgICB0aGlzLnNlbmRDbGllbnRNZXNzYWdlKFwid2MtZXhpdFwiKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5leGl0UHJvbWlzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uRXhpdCgpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNwb3J0LmV4aXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BvcnQuZXhpdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4aXRSZXNvbHZlKSB7XG4gICAgICAgICAgICB0aGlzLmV4aXRSZXNvbHZlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5leGl0UHJvbWlzZTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmV4aXRSZXNvbHZlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzSW1wbDtcbiAgICB9XG5cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoTywgaXRlcmF0b3JNZXRob2QpO1xuICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgIHJlc3VsdCA9IG5ldyBDKCk7XG4gICAgZm9yICg7IShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGZvckVhY2gsIG1hcCwgZmlsdGVyLCBzb21lLCBldmVyeSwgZmluZCwgZmluZEluZGV4LCBmaWx0ZXJSZWplY3QgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgSVNfRklMVEVSX1JFSkVDVCA9IFRZUEUgPT0gNztcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQsIHNwZWNpZmljQ3JlYXRlKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNyZWF0ZSA9IHNwZWNpZmljQ3JlYXRlIHx8IGFycmF5U3BlY2llc0NyZWF0ZTtcbiAgICB2YXIgdGFyZ2V0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSIHx8IElTX0ZJTFRFUl9SRUpFQ1QgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2Ugc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSA0OiByZXR1cm4gZmFsc2U7ICAgICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICAgICAgY2FzZSA3OiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclJlamVjdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiB0YXJnZXQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuICBmb3JFYWNoOiBjcmVhdGVNZXRob2QoMCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuICBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5zb21lYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29tZVxuICBzb21lOiBjcmVhdGVNZXRob2QoMyksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4gIGZpbmQ6IGNyZWF0ZU1ldGhvZCg1KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhcbiAgZmluZEluZGV4OiBjcmVhdGVNZXRob2QoNiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyUmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtYXJyYXktZmlsdGVyaW5nXG4gIGZpbHRlclJlamVjdDogY3JlYXRlTWV0aG9kKDcpXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICAvLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbiAgLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3N1xuICByZXR1cm4gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IGFycmF5LmNvbnN0cnVjdG9yID0ge307XG4gICAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBmb286IDEgfTtcbiAgICB9O1xuICAgIHJldHVybiBhcnJheVtNRVRIT0RfTkFNRV0oQm9vbGVhbikuZm9vICE9PSAxO1xuICB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwidmFyIGFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxuLy8gYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKGFycmF5U3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXkpKShsZW5ndGggPT09IDAgPyAwIDogbGVuZ3RoKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSwgbm8tdGhyb3ctbGl0ZXJhbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBJdGVyYXRvcnNDb3JlLkJVR0dZX1NBRkFSSV9JVEVSQVRPUlM7XG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcbnZhciBFTlRSSUVTID0gJ2VudHJpZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuXG4gIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkge1xuICAgIGlmIChLSU5EID09PSBERUZBVUxUICYmIGRlZmF1bHRJdGVyYXRvcikgcmV0dXJuIGRlZmF1bHRJdGVyYXRvcjtcbiAgICBpZiAoIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgS0lORCBpbiBJdGVyYWJsZVByb3RvdHlwZSkgcmV0dXJuIEl0ZXJhYmxlUHJvdG90eXBlW0tJTkRdO1xuICAgIHN3aXRjaCAoS0lORCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzKTsgfTtcbiAgfTtcblxuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IGZhbHNlO1xuICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXVxuICAgIHx8IEl0ZXJhYmxlUHJvdG90eXBlWydAQGl0ZXJhdG9yJ11cbiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdO1xuICB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpO1xuICB2YXIgYW55TmF0aXZlSXRlcmF0b3IgPSBOQU1FID09ICdBcnJheScgPyBJdGVyYWJsZVByb3RvdHlwZS5lbnRyaWVzIHx8IG5hdGl2ZUl0ZXJhdG9yIDogbmF0aXZlSXRlcmF0b3I7XG4gIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTtcblxuICAvLyBmaXggbmF0aXZlXG4gIGlmIChhbnlOYXRpdmVJdGVyYXRvcikge1xuICAgIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGFueU5hdGl2ZUl0ZXJhdG9yLmNhbGwobmV3IEl0ZXJhYmxlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIHRydWUsIHRydWUpO1xuICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gICAgfVxuICB9XG5cbiAgLy8gZml4IEFycmF5LnByb3RvdHlwZS57IHZhbHVlcywgQEBpdGVyYXRvciB9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTtcbiAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOyB9O1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvcik7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIC8vIGV4cG9ydCBhZGRpdGlvbmFsIG1ldGhvZHNcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBnZXRJdGVyYXRpb25NZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKVxuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkge1xuICAgICAgICByZWRlZmluZShJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgdmFyIFN5bWJvbCA9IHBhdGguU3ltYm9sIHx8IChwYXRoLlN5bWJvbCA9IHt9KTtcbiAgaWYgKCFoYXMoU3ltYm9sLCBOQU1FKSkgZGVmaW5lUHJvcGVydHkoU3ltYm9sLCBOQU1FLCB7XG4gICAgdmFsdWU6IHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZihOQU1FKVxuICB9KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdIDwgNCA/IDEgOiBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoaXQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICB9IHJldHVybiBhbk9iamVjdChpdGVyYXRvck1ldGhvZC5jYWxsKGl0KSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbCh0b09iamVjdChpdCksIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWllZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkge1xuICB2YXIgc3RvcmUgPSBzaGFyZWQuc3RhdGUgfHwgKHNoYXJlZC5zdGF0ZSA9IG5ldyBXZWFrTWFwKCkpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKHdtaGFzLmNhbGwoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChvYmplY3RIYXMoaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1pc2FycmF5IC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmIE9iamVjdChpdCkgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGtpbmQsIHZhbHVlKSB7XG4gIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjtcbiAgYW5PYmplY3QoaXRlcmF0b3IpO1xuICB0cnkge1xuICAgIGlubmVyUmVzdWx0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChpbm5lclJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gaW5uZXJSZXN1bHQuY2FsbChpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgLy8gRkY0NC0gbGVnYWN5IGl0ZXJhdG9ycyBjYXNlXG4gIHJldHVybiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbCh0ZXN0KSAhPT0gdGVzdDtcbn0pO1xuXG5pZiAoTkVXX0lURVJBVE9SX1BST1RPVFlQRSkgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvclxuaWYgKCghSVNfUFVSRSB8fCBORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xuXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJ1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi9cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IHt9LnRvU3RyaW5nIDogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIH1cbiAgICBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgICBpZiAoIXN0YXRlLnNvdXJjZSkge1xuICAgICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICAgIH1cbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjE3LjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjEgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBzaXplID0gUy5sZW5ndGg7XG4gICAgdmFyIGZpcnN0LCBzZWNvbmQ7XG4gICAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKSByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORyA/IFMuY2hhckF0KHBvc2l0aW9uKSA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkcgPyBTLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpIDogKGZpcnN0IC0gMHhEODAwIDw8IDEwKSArIChzZWNvbmQgLSAweERDMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBpbnB1dFtUT19QUklNSVRJVkVdO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG4gIH1cbiAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdudW1iZXInO1xuICByZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgcHJlZik7XG59O1xuIiwidmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG4vLyBgVG9Qcm9wZXJ0eUtleWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ3N0cmluZycpO1xuICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IFN0cmluZyhrZXkpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNTeW1ib2woYXJndW1lbnQpKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSB8fCAhKE5BVElWRV9TWU1CT0wgfHwgdHlwZW9mIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9PSAnc3RyaW5nJykpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gICAgfVxuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmFibGUpO1xufSk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbmlmIChERVNDUklQVE9SUyAmJiB0eXBlb2YgTmF0aXZlU3ltYm9sID09ICdmdW5jdGlvbicgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBOYXRpdmVTeW1ib2wucHJvdG90eXBlKSB8fFxuICAvLyBTYWZhcmkgMTIgYnVnXG4gIE5hdGl2ZVN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbikpIHtcbiAgdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9O1xuICAvLyB3cmFwIFN5bWJvbCBjb25zdHJ1Y3RvciBmb3IgY29ycmVjdCB3b3JrIHdpdGggdW5kZWZpbmVkIGRlc2NyaXB0aW9uXG4gIHZhciBTeW1ib2xXcmFwcGVyID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMgaW5zdGFuY2VvZiBTeW1ib2xXcmFwcGVyXG4gICAgICA/IG5ldyBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pXG4gICAgICAvLyBpbiBFZGdlIDEzLCBTdHJpbmcoU3ltYm9sKHVuZGVmaW5lZCkpID09PSAnU3ltYm9sKHVuZGVmaW5lZCknXG4gICAgICA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgdmFyIHN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcbiAgc3ltYm9sUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ltYm9sV3JhcHBlcjtcblxuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBuYXRpdmVTeW1ib2wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgZGVmaW5lUHJvcGVydHkoc3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gaXNPYmplY3QodGhpcykgPyB0aGlzLnZhbHVlT2YoKSA6IHRoaXM7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sVG9TdHJpbmcuY2FsbChzeW1ib2wpO1xuICAgICAgaWYgKGhhcyhFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gbmF0aXZlU3ltYm9sID8gc3RyaW5nLnNsaWNlKDcsIC0xKSA6IHN0cmluZy5yZXBsYWNlKHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1lNQk9MKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBVU0VfU0VUVEVSID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzY3JpcHRvciA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoTywgUCwgQXR0cmlidXRlcykge1xuICB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApO1xuICBpZiAoT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcikgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yICYmIE8gIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KE9iamVjdFByb3RvdHlwZSwgUCwgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvcik7XG4gIH1cbn0gOiBuYXRpdmVEZWZpbmVQcm9wZXJ0eTtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnLCBkZXNjcmlwdGlvbikge1xuICB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHNldEludGVybmFsU3RhdGUoc3ltYm9sLCB7XG4gICAgdHlwZTogU1lNQk9MLFxuICAgIHRhZzogdGFnLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbiAgaWYgKCFERVNDUklQVE9SUykgc3ltYm9sLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gIHJldHVybiBzeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKSAkZGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCwgQXR0cmlidXRlcyk7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodGhpcywgUCk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUgJiYgaGFzKEFsbFN5bWJvbHMsIFApICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywgUCkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGVudW1lcmFibGUgfHwgIWhhcyh0aGlzLCBQKSB8fCAhaGFzKEFsbFN5bWJvbHMsIFApIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtQXSA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhoaWRkZW5LZXlzLCBrZXkpKSByZXN1bHQucHVzaChrZXkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pIHtcbiAgdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoSVNfT0JKRUNUX1BST1RPVFlQRSA/IE9iamVjdFByb3RvdHlwZVN5bWJvbHMgOiB0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gYFN5bWJvbGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLWNvbnN0cnVjdG9yXG5pZiAoIU5BVElWRV9TWU1CT0wpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBzZXR0ZXIuY2FsbChPYmplY3RQcm90b3R5cGVTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2NyaXB0b3IodGhpcywgdGFnLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBVU0VfU0VUVEVSKSBzZXRTeW1ib2xEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiBzZXR0ZXIgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7XG4gIH07XG5cbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7XG4gIH0pO1xuXG4gIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSAkdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgICB2YXIgaW5kZXggPSAxO1xuICAgICAgdmFyICRyZXBsYWNlcjtcbiAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaW5kZXgpIGFyZ3MucHVzaChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgICAgJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuICRzdHJpbmdpZnkuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBFbXVsYXRvcnNVaSB9IGZyb20gXCJlbXVsYXRvcnMtdWlcIjtcblxuZGVjbGFyZSBjb25zdCBlbXVsYXRvcnNVaTogRW11bGF0b3JzVWk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXYoY2xhc3NOYW1lOiBzdHJpbmcgfCBzdHJpbmdbXSwgaW5uZXJIdG1sPzogc3RyaW5nKTogSFRNTERpdkVsZW1lbnQge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChuZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5uZXJIdG1sICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gaW5uZXJIdG1sO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGljayhlbDogSFRNTEVsZW1lbnQsIGNhbGxiYWNrRm46IChlbDogSFRNTEVsZW1lbnQpID0+IHZvaWQpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IG5leHQgb2YgZW11bGF0b3JzVWkuZG9tLnBvaW50ZXJzLmJpbmQuZW5kZXJzKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIobmV4dCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJqc2Rvcy1wbGF5ZXItYnV0dG9uLWRpc2FibGVkXCIpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGbihlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEb3NJbnN0YW5jZSB9IGZyb20gXCJlbXVsYXRvcnMtdWkvZGlzdC90eXBlcy9qcy1kb3NcIjtcbmltcG9ydCB7IGNsaWNrLCBjcmVhdGVEaXYgfSBmcm9tIFwiLi9kb21cIjtcbmltcG9ydCB7IERvc1BsYXllck9wdGlvbnMgfSBmcm9tIFwiLi9qcy1kb3MtcGxheWVyXCI7XG5cbmNvbnN0IGdvbmVDbGFzcyA9IFwianNkb3MtcGxheWVyLWdvbmVcIjtcbmNvbnN0IGRpc2FibGVkQ2xhc3MgPSBcImpzZG9zLXBsYXllci1idXR0b24tZGlzYWJsZWRcIjtcbmNvbnN0IHByaW1hcnlDbGFzcyA9XCJqc2Rvcy1wbGF5ZXItYnV0dG9uLXByaW1hcnlcIjtcblxuZXhwb3J0IGNsYXNzIE5hdmJhciB7XG5cblx0cm9vdDogSFRNTERpdkVsZW1lbnQ7XG5cdGRvczogRG9zSW5zdGFuY2U7XG5cblx0Y29uc3RydWN0b3Iocm9vdDogSFRNTERpdkVsZW1lbnQsIGRvczogRG9zSW5zdGFuY2UsIG9wdGlvbnM6IERvc1BsYXllck9wdGlvbnMpIHtcblx0XHR0aGlzLnJvb3QgPSByb290O1xuXHRcdHRoaXMuZG9zID0gZG9zO1xuXHRcdGNvbnN0IHRpdGxlID0gb3B0aW9ucy50aXRsZSB8fCBcIkpTLURPU1wiO1xuXG5cdFx0Y29uc3QgbG9nb0RpdiA9IGNyZWF0ZURpdihcImpzZG9zLXBsYXllci1sb2dvXCIpO1xuXHRcdGNvbnN0IHRpdGxlRGl2ID0gdGhpcy5jcmVhdGVUaXRsZSh0aXRsZSk7XG5cdFx0Y29uc3Qgc3ByaW5nRGl2ID0gY3JlYXRlRGl2KFwianNkb3MtcGxheWVyLXNwcmluZ1wiKTtcblx0XHRjb25zdCBmdWxsc2NyZWVuQnV0dG9uRGl2ID0gdGhpcy5jcmVhdGVGdWxsU2NyZWVuQnV0dG9uKCk7XG5cdFx0Y29uc3Qgc2F2ZUJ1dHRvbkRpdiA9IHRoaXMuY3JlYXRlU2F2ZUJ1dHRvbigpO1xuXHRcdGNvbnN0IGtleWJvYXJkQnV0dG9uRGl2ID0gdGhpcy5jcmVhdGVLZXlib2FyZEJ1dHRvbigpO1xuXHRcdGNvbnN0IG11dGVCdXR0b25EaXYgPSB0aGlzLmNyZWF0ZU11dGVCdXR0b24oKTtcblx0XHRjb25zdCB1bm11dGVCdXR0b25EaXYgPSB0aGlzLmNyZWF0ZVVubXV0ZUJ1dHRvbigpO1xuXHRcdGNvbnN0IHN0b3BCdXR0b25EaXYgPSB0aGlzLmNyZWF0ZVN0b3BCdXR0b24oKTtcblx0XHRjb25zdCBwbGF5QnV0dG9uRGl2ID0gdGhpcy5jcmVhdGVQbGF5QnV0dG9uKCk7XG5cdFx0Y29uc3QgbW9iaWxlQnV0dG9uRGl2ID0gdGhpcy5jcmVhdGVNb2JpbGVCdXR0b24oKTtcblx0XHRjb25zdCBkaXZpZGVyRGl2ID0gY3JlYXRlRGl2KFwianNkb3MtcGxheWVyLWRpdmlkZXJcIik7XG5cblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQobG9nb0Rpdik7XG5cdFx0dGhpcy5yb290LmFwcGVuZENoaWxkKHRpdGxlRGl2KTtcblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoc3ByaW5nRGl2KTtcblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoZGl2aWRlckRpdik7XG5cdFx0dGhpcy5yb290LmFwcGVuZENoaWxkKG1vYmlsZUJ1dHRvbkRpdik7XG5cdFx0dGhpcy5yb290LmFwcGVuZENoaWxkKHBsYXlCdXR0b25EaXYpO1xuXHRcdHRoaXMucm9vdC5hcHBlbmRDaGlsZChzdG9wQnV0dG9uRGl2KTtcblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodW5tdXRlQnV0dG9uRGl2KTtcblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQobXV0ZUJ1dHRvbkRpdik7XG5cdFx0dGhpcy5yb290LmFwcGVuZENoaWxkKGtleWJvYXJkQnV0dG9uRGl2KTtcblx0XHR0aGlzLnJvb3QuYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbkRpdik7XG5cdFx0dGhpcy5yb290LmFwcGVuZENoaWxkKGZ1bGxzY3JlZW5CdXR0b25EaXYpO1xuXG5cdFx0Y2xpY2soZnVsbHNjcmVlbkJ1dHRvbkRpdiwgdGhpcy5vbkZ1bGxzY3JlZW4pO1xuXHRcdGNsaWNrKHNhdmVCdXR0b25EaXYsIHRoaXMub25TYXZlKTtcblx0XHRjbGljayhrZXlib2FyZEJ1dHRvbkRpdiwgdGhpcy5vbktleWJvYXJkKTtcblx0XHRjbGljayhtdXRlQnV0dG9uRGl2LCAoZWwpID0+IHRoaXMub25NdXRlKGVsLCB1bm11dGVCdXR0b25EaXYpKTtcblx0XHRjbGljayh1bm11dGVCdXR0b25EaXYsIChlbCkgPT4gdGhpcy5vblVubXV0ZShlbCwgbXV0ZUJ1dHRvbkRpdikpO1xuXHRcdGNsaWNrKHN0b3BCdXR0b25EaXYsIChlbCkgPT4gdGhpcy5vblN0b3AoZWwsIHBsYXlCdXR0b25EaXYpKTtcblx0XHRjbGljayhwbGF5QnV0dG9uRGl2LCAoZWwpID0+IHRoaXMub25QbGF5KGVsLCBzdG9wQnV0dG9uRGl2KSk7XG5cdFx0Y2xpY2sobW9iaWxlQnV0dG9uRGl2LCB0aGlzLm9uTW9iaWxlQ29udHJvbHMpO1xuXG5cdFx0dGhpcy5kb3MubGF5ZXJzLnNldE9uU2F2ZVN0YXJ0ZWQoKCkgPT4ge1xuXHRcdFx0c2F2ZUJ1dHRvbkRpdi5jbGFzc0xpc3QuYWRkKGRpc2FibGVkQ2xhc3MpO1xuXHRcdFx0dGl0bGVEaXYuaW5uZXJUZXh0ID0gXCJTYXZpbmcuLi5cIjtcblx0XHR9KTtcblxuXHRcdHRoaXMuZG9zLmxheWVycy5zZXRPblNhdmVFbmRlZCgoKSA9PiB7XG5cdFx0XHRzYXZlQnV0dG9uRGl2LmNsYXNzTGlzdC5yZW1vdmUoZGlzYWJsZWRDbGFzcyk7XG5cdFx0XHR0aXRsZURpdi5pbm5lclRleHQgPSB0aXRsZTtcblx0XHR9KTtcblxuXHRcdHRoaXMuZG9zLmxheWVycy5zZXRPbktleWJvYXJkVmlzaWJpbGl0eSgodmlzaWJsZSkgPT4ge1xuXHRcdFx0aWYgKHZpc2libGUpIHtcblx0XHRcdFx0a2V5Ym9hcmRCdXR0b25EaXYuY2xhc3NMaXN0LmFkZChwcmltYXJ5Q2xhc3MpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5Ym9hcmRCdXR0b25EaXYuY2xhc3NMaXN0LnJlbW92ZShwcmltYXJ5Q2xhc3MpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5kb3MubGF5ZXJzLnNldE9uRnVsbHNjcmVlbigoZnVsbHNjcmVlbikgPT4ge1xuXHRcdFx0aWYgKGZ1bGxzY3JlZW4pIHtcblx0XHRcdFx0dGhpcy5yb290LmNsYXNzTGlzdC5hZGQoZ29uZUNsYXNzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGdvbmVDbGFzcyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjb25zdCBvbk1vYmlsZUNvbnRyb2xzQ2hhbmdlZCA9ICh2aXNpYmxlOiBib29sZWFuKSA9PiB7XG5cdFx0XHRpZiAodmlzaWJsZSkge1xuXHRcdFx0XHRtb2JpbGVCdXR0b25EaXYuY2xhc3NMaXN0LmFkZChwcmltYXJ5Q2xhc3MpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bW9iaWxlQnV0dG9uRGl2LmNsYXNzTGlzdC5yZW1vdmUocHJpbWFyeUNsYXNzKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHRoaXMuZG9zLnNldE9uTW9iaWxlQ29udHJvbHNDaGFuZ2VkKG9uTW9iaWxlQ29udHJvbHNDaGFuZ2VkKTtcblx0XHRvbk1vYmlsZUNvbnRyb2xzQ2hhbmdlZCh0aGlzLmRvcy5tb2JpbGVDb250cm9scyk7XG5cdH1cblxuXHRvbkZ1bGxzY3JlZW4gPSAoKTogdm9pZCA9PiB7XG5cdFx0dGhpcy5kb3MubGF5ZXJzLnRvZ2dsZUZ1bGxzY3JlZW4oKTtcblx0fTtcblxuXHRvblNhdmUgPSAoKTogdm9pZCA9PiB7XG5cdFx0dGhpcy5kb3MubGF5ZXJzLnNhdmUoKTtcblx0fTtcblxuXHRvbktleWJvYXJkID0gKCk6IHZvaWQgPT4ge1xuXHRcdHRoaXMuZG9zLmxheWVycy50b2dnbGVLZXlib2FyZCgpO1xuXHR9XG5cblx0b25NdXRlID0gKGVsOiBIVE1MRWxlbWVudCwgdW5tdXRlOiBIVE1MRWxlbWVudCk6IHZvaWQgPT4ge1xuXHRcdHRoaXMuZG9zLmNpUHJvbWlzZT8udGhlbigoY2kpID0+IHtcblx0XHRcdGVsLmNsYXNzTGlzdC5hZGQoZ29uZUNsYXNzKTtcblx0XHRcdHVubXV0ZS5jbGFzc0xpc3QucmVtb3ZlKGdvbmVDbGFzcyk7XG5cdFx0XHRjaS5tdXRlKCk7XG5cdFx0fSk7XG5cdH1cblxuXHRvblVubXV0ZSA9IChlbDogSFRNTEVsZW1lbnQsIG11dGU6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XG5cdFx0dGhpcy5kb3MuY2lQcm9taXNlPy50aGVuKChjaSkgPT4ge1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChnb25lQ2xhc3MpO1xuXHRcdFx0bXV0ZS5jbGFzc0xpc3QucmVtb3ZlKGdvbmVDbGFzcyk7XG5cdFx0XHRjaS51bm11dGUoKTtcblx0XHR9KTtcblx0fVxuXG5cdG9uUGxheSA9IChlbDogSFRNTEVsZW1lbnQsIHN0b3A6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XG5cdFx0dGhpcy5kb3MuY2lQcm9taXNlPy50aGVuKChjaSkgPT4ge1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChnb25lQ2xhc3MpO1xuXHRcdFx0c3RvcC5jbGFzc0xpc3QucmVtb3ZlKGdvbmVDbGFzcyk7XG5cdFx0XHRjaS5yZXN1bWUoKTtcblx0XHR9KTtcblx0fVxuXG5cdG9uU3RvcCA9IChlbDogSFRNTEVsZW1lbnQsIHBsYXk6IEhUTUxFbGVtZW50KTogdm9pZCA9PiB7XG5cdFx0dGhpcy5kb3MuY2lQcm9taXNlPy50aGVuKChjaSkgPT4ge1xuXHRcdFx0ZWwuY2xhc3NMaXN0LmFkZChnb25lQ2xhc3MpO1xuXHRcdFx0cGxheS5jbGFzc0xpc3QucmVtb3ZlKGdvbmVDbGFzcyk7XG5cdFx0XHRjaS5wYXVzZSgpO1xuXHRcdH0pO1xuXHR9XG5cblx0b25Nb2JpbGVDb250cm9scyA9ICgpOiB2b2lkID0+IHtcblx0XHRpZiAodGhpcy5kb3MubW9iaWxlQ29udHJvbHMpIHtcblx0XHRcdHRoaXMuZG9zLmRpc2FibGVNb2JpbGVDb250cm9scygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmRvcy5lbmFibGVNb2JpbGVDb250cm9scygpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlVGl0bGUodGl0bGU6IHN0cmluZyk6IEhUTUxEaXZFbGVtZW50IHtcblx0XHRyZXR1cm4gY3JlYXRlRGl2KFwianNkb3MtcGxheWVyLXRpdGxlXCIsIHRpdGxlKTtcblx0fVxuXHRcblx0cHJpdmF0ZSBjcmVhdGVGdWxsU2NyZWVuQnV0dG9uKCk6IEhUTUxEaXZFbGVtZW50IHtcblx0XHRyZXR1cm4gY3JlYXRlRGl2KFwianNkb3MtcGxheWVyLWJ1dHRvblwiLCBgXG5cdFx0XHQ8c3BhbiBpY29uPVwibWF4aW1pemVcIiBjbGFzcz1cImpzZG9zLXBsYXllci1pY29uIGpzZG9zLXBsYXllci1pY29uLW1heGltaXplXCI+XG5cdFx0XHRcdDxzdmcgZGF0YS1pY29uPVwibWF4aW1pemVcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XG5cdFx0XHRcdFx0PGRlc2M+bWF4aW1pemU8L2Rlc2M+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk01Ljk5IDguOTljLS4yOCAwLS41My4xMS0uNzEuMjlsLTMuMjkgMy4yOXYtMS41OWMwLS41NS0uNDUtMS0xLTFzLTEgLjQ1LTEgMXY0YzAgLjU1LjQ1IDEgMSAxaDRjLjU1IDAgMS0uNDUgMS0xcy0uNDUtMS0xLTFIMy40MUw2LjcgMTAuN2ExLjAwMyAxLjAwMyAwIDAwLS43MS0xLjcxem05LTloLTRjLS41NSAwLTEgLjQ1LTEgMXMuNDUgMSAxIDFoMS41OWwtMy4zIDMuM2EuOTkuOTkgMCAwMC0uMjkuNyAxLjAwMyAxLjAwMyAwIDAwMS43MS43MWwzLjI5LTMuMjlWNWMwIC41NS40NSAxIDEgMXMxLS40NSAxLTFWMWMwLS41Ni0uNDUtMS4wMS0xLTEuMDF6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuXHRcdFx0XHRcdDwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0YClcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlU2F2ZUJ1dHRvbigpOiBIVE1MRGl2RWxlbWVudCB7XG5cdFx0cmV0dXJuIGNyZWF0ZURpdihcImpzZG9zLXBsYXllci1idXR0b25cIiwgYFxuXHRcdFx0PHNwYW4gaWNvbj1cInNhdmVcIiBjbGFzcz1cImpzZG9zLXBsYXllci1pY29uIGpzZG9zLXBsYXllci1pY29uLXNhdmVcIj5cblx0XHRcdFx0PHN2ZyBkYXRhLWljb249XCJzYXZlXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuXHRcdFx0XHRcdDxkZXNjPnNhdmU8L2Rlc2M+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0xNS43MSAyLjI5bC0yLTJBLjk5Ny45OTcgMCAwMDEzIDBoLTF2Nkg0VjBIMUMuNDUgMCAwIC40NSAwIDF2MTRjMCAuNTUuNDUgMSAxIDFoMTRjLjU1IDAgMS0uNDUgMS0xVjNjMC0uMjgtLjExLS41My0uMjktLjcxek0xNCAxNUgyVjljMC0uNTUuNDUtMSAxLTFoMTBjLjU1IDAgMSAuNDUgMSAxdjZ6TTExIDFIOXY0aDJWMXpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG5cdFx0XHRcdFx0PC9wYXRoPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdDwvc3Bhbj5cblx0XHRgKVxuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVLZXlib2FyZEJ1dHRvbigpOiBIVE1MRGl2RWxlbWVudCB7XG5cdFx0cmV0dXJuIGNyZWF0ZURpdihcImpzZG9zLXBsYXllci1idXR0b25cIiwgYFxuXHRcdFx0PHNwYW4gaWNvbj1cImtleWJvYXJkXCIgY2xhc3M9XCJqc2Rvcy1wbGF5ZXItaWNvbiBqc2Rvcy1wbGF5ZXItaWNvbi1rZXlib2FyZFwiPlxuXHRcdFx0XHQ8c3ZnIGRhdGEtaWNvbj1cImtleWJvYXJkXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuXHRcdFx0XHRcdDxkZXNjPmtleWJvYXJkPC9kZXNjPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMSA4aDMuNzZsMi0ySDFjLS41NSAwLTEgLjQ1LTEgMXMuNDUgMSAxIDF6bTE0LjQ5LTQuMDFjLjMxLS4zMi41MS0uNzYuNTEtMS4yNEMxNiAxLjc4IDE1LjIyIDEgMTQuMjUgMWMtLjQ4IDAtLjkyLjItMS4yNC41MWwtMS40NCAxLjQ0IDIuNDcgMi40NyAxLjQ1LTEuNDN6TTEgNGg3Ljc2bDItMkgxYy0uNTUgMC0xIC40NS0xIDFzLjQ1IDEgMSAxem0wIDZjLS41NSAwLTEgLjQ1LTEgMSAwIC40OC4zNS44Ni44Ljk2TDIuNzYgMTBIMXptOS45NS02LjQzbC02LjY5IDYuNjkgMi40NyAyLjQ3IDYuNjktNi42OS0yLjQ3LTIuNDd6bTQuMjUgMi40N0wxMy4yNCA4SDE1Yy41NSAwIDEtLjQ1IDEtMSAwLS40OC0uMzUtLjg2LS44LS45NnpNMiAxNWwzLjg2LTEuMzktMi40Ni0yLjQ0TDIgMTV6bTEzLTVoLTMuNzZsLTIgMkgxNWMuNTUgMCAxLS40NSAxLTFzLS40NS0xLTEtMXpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG5cdFx0XHRcdFx0PC9wYXRoPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdDwvc3Bhbj5cblx0XHRgKVxuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVNdXRlQnV0dG9uKCk6IEhUTUxEaXZFbGVtZW50IHtcblx0XHRyZXR1cm4gY3JlYXRlRGl2KFwianNkb3MtcGxheWVyLWJ1dHRvblwiLCBgXG5cdFx0XHQ8c3BhbiBpY29uPVwibXV0ZVwiIGNsYXNzPVwianNkb3MtcGxheWVyLWljb24ganNkb3MtcGxheWVyLWljb24tbXV0ZVwiPlxuXHRcdFx0XHQ8c3ZnIGRhdGEtaWNvbj1cIm11dGVcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XG5cdFx0XHRcdFx0PGRlc2M+bXV0ZTwvZGVzYz5cblx0XHRcdFx0XHQ8cGF0aCBkPVwiTTcgMS44NmMtLjI4IDAtLjUzLjExLS43MS4yOWwtMi43IDIuNzFIMWMtLjU1IDAtMSAuNDUtMSAxdjRjMCAuNTUuNDUgMSAxIDFoMi41OWwyLjcxIDIuNzFhMS4wMDMgMS4wMDMgMCAwMDEuNzEtLjcxdi0xMGMtLjAxLS41NS0uNDYtMS0xLjAxLTF6bTYuNzQtLjk5bC0xLjU4IDEuMjJBOS45ODUgOS45ODUgMCAwMTE0IDcuODZjMCAyLjE2LS42OSA0LjE1LTEuODUgNS43OGwxLjU4IDEuMjJjMS40Mi0xLjk3IDIuMjYtNC4zOCAyLjI2LTcgLjAxLTIuNjEtLjg0LTUuMDItMi4yNS02Ljk5ek04Ljk4IDQuNTJDOS42MiA1LjQ4IDEwIDYuNjMgMTAgNy44NnMtLjM4IDIuMzktMS4wMiAzLjM0bDEuNTkgMS4yMmMuOS0xLjI5IDEuNDMtMi44NiAxLjQzLTQuNTYgMC0xLjctLjUzLTMuMjctMS40My00LjU2TDguOTggNC41MnpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG5cdFx0XHRcdFx0PC9wYXRoPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdDwvc3Bhbj5cblx0XHRgKVxuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVVbm11dGVCdXR0b24oKTogSFRNTERpdkVsZW1lbnQge1xuXHRcdHJldHVybiBjcmVhdGVEaXYoW1wianNkb3MtcGxheWVyLWJ1dHRvblwiLCBnb25lQ2xhc3NdLCBgXG5cdFx0XHQ8c3BhbiBpY29uPVwidW5tdXRlXCIgY2xhc3M9XCJqc2Rvcy1wbGF5ZXItaWNvbiBqc2Rvcy1wbGF5ZXItaWNvbi11bm11dGVcIj5cblx0XHRcdFx0PHN2ZyBkYXRhLWljb249XCJ1bm11dGVcIiB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCI+XG5cdFx0XHRcdFx0PGRlc2M+dW5tdXRlPC9kZXNjPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTEgMmMtLjI4IDAtLjUzLjExLS43MS4yOUw3LjU5IDVINWMtLjU1IDAtMSAuNDUtMSAxdjRjMCAuNTUuNDUgMSAxIDFoMi41OWwyLjcxIDIuNzFjLjE3LjE4LjQyLjI5LjcuMjkuNTUgMCAxLS40NSAxLTFWM2MwLS41NS0uNDUtMS0xLTF6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuXHRcdFx0XHRcdDwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0YClcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlU3RvcEJ1dHRvbigpOiBIVE1MRGl2RWxlbWVudCB7XG5cdFx0cmV0dXJuIGNyZWF0ZURpdihcImpzZG9zLXBsYXllci1idXR0b25cIiwgYFxuXHRcdFx0PHNwYW4gaWNvbj1cInN0b3BcIiBjbGFzcz1cImpzZG9zLXBsYXllci1pY29uIGpzZG9zLXBsYXllci1pY29uLXN0b3BcIj5cblx0XHRcdFx0PHN2ZyBkYXRhLWljb249XCJzdG9wXCIgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuXHRcdFx0XHRcdDxkZXNjPnN0b3A8L2Rlc2M+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk02IDNINGMtLjU1IDAtMSAuNDUtMSAxdjhjMCAuNTUuNDUgMSAxIDFoMmMuNTUgMCAxLS40NSAxLTFWNGMwLS41NS0uNDUtMS0xLTF6bTYgMGgtMmMtLjU1IDAtMSAuNDUtMSAxdjhjMCAuNTUuNDUgMSAxIDFoMmMuNTUgMCAxLS40NSAxLTFWNGMwLS41NS0uNDUtMS0xLTF6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuXHRcdFx0XHRcdDwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0YClcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlUGxheUJ1dHRvbigpOiBIVE1MRGl2RWxlbWVudCB7XG5cdFx0cmV0dXJuIGNyZWF0ZURpdihbXCJqc2Rvcy1wbGF5ZXItYnV0dG9uXCIsIGdvbmVDbGFzc10sIGBcblx0XHRcdDxzcGFuIGljb249XCJwbGF5XCIgY2xhc3M9XCJqc2Rvcy1wbGF5ZXItaWNvbiBqc2Rvcy1wbGF5ZXItaWNvbi1wbGF5XCI+XG5cdFx0XHRcdDxzdmcgZGF0YS1pY29uPVwicGxheVwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cblx0XHRcdFx0XHQ8ZGVzYz5wbGF5PC9kZXNjPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTIgOGMwLS4zNS0uMTktLjY0LS40Ni0uODJsLjAxLS4wMi02LTQtLjAxLjAyQS45NjkuOTY5IDAgMDA1IDNjLS41NSAwLTEgLjQ1LTEgMXY4YzAgLjU1LjQ1IDEgMSAxIC4yMSAwIC4zOS0uMDguNTQtLjE4bC4wMS4wMiA2LTQtLjAxLS4wMmMuMjctLjE4LjQ2LS40Ny40Ni0uODJ6XCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPlxuXHRcdFx0XHRcdDwvcGF0aD5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0YClcblx0fVxuXG5cblx0cHJpdmF0ZSBjcmVhdGVNb2JpbGVCdXR0b24oKTogSFRNTERpdkVsZW1lbnQge1xuXHRcdHJldHVybiBjcmVhdGVEaXYoXCJqc2Rvcy1wbGF5ZXItYnV0dG9uXCIsIGBcblx0XHRcdDxzcGFuIGljb249XCJtb2JpbGVcIiBjbGFzcz1cImpzZG9zLXBsYXllci1pY29uIGpzZG9zLXBsYXllci1pY29uLW1vYmlsZVwiPlxuXHRcdFx0XHQ8c3ZnIGRhdGEtaWNvbj1cIm1vYmlsZVwiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cblx0XHRcdFx0XHQ8ZGVzYz5tb2JpbGU8L2Rlc2M+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0xMiAwSDRjLS41NSAwLTEgLjQ1LTEgMXYxNGMwIC41NS40NSAxIDEgMWg4Yy41NSAwIDEtLjQ1IDEtMVYxYzAtLjU1LS40NS0xLTEtMXpNOCAxNWMtLjU1IDAtMS0uNDUtMS0xcy40NS0xIDEtMSAxIC40NSAxIDEtLjQ1IDEtMSAxem0zLTNINVYzaDZ2OXpcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCI+XG5cdFx0XHRcdFx0PC9wYXRoPlxuXHRcdFx0XHQ8L3N2Zz5cblx0XHRcdDwvc3Bhbj5cblx0XHRgKVxuXHR9XG5cbn0iLCJpbXBvcnQgeyBEb3NJbnN0YW5jZSwgRG9zRmFjdG9yeVR5cGUsIERvc09wdGlvbnMgfSBmcm9tIFwiZW11bGF0b3JzLXVpL2Rpc3QvdHlwZXMvanMtZG9zXCI7XG5pbXBvcnQgeyBOYXZiYXIgfSBmcm9tIFwiLi9qcy1kb3MtbmF2YmFyXCI7XG5pbXBvcnQgeyBjcmVhdGVEaXYgfSBmcm9tIFwiLi9kb21cIjtcblxuZGVjbGFyZSBjb25zdCBEb3M6IERvc0ZhY3RvcnlUeXBlO1xuXG5jb25zdCBkb3NJbXBsID0gRG9zO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvc1BsYXllck9wdGlvbnMgZXh0ZW5kcyBEb3NPcHRpb25zIHtcblx0dGl0bGU/OiBzdHJpbmc7XG5cdHN0eWxlPzogXCJkZWZhdWx0XCIgfCBcImRhcmtcIiB8IFwibm9uZVwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvc1BsYXllciBleHRlbmRzIERvc0luc3RhbmNlIHtcblx0bmF2YmFyOiBOYXZiYXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBEb3NQbGF5ZXIocm9vdDogSFRNTERpdkVsZW1lbnQsIG9wdGlvbnM/OiBEb3NQbGF5ZXJPcHRpb25zKTogRG9zUGxheWVyIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdGlmIChvcHRpb25zLnN0eWxlID09PSBcIm5vbmVcIikge1xuXHRcdGNvbnNvbGUud2FybihcIklmIHlvdSBkb24ndCBuZWVkIHRoZSBqc2RvcyB0b3BiYXIsIHBsZWFzZSB1c2UgZW11bGF0cm9zICsgZW11bGF0b3JzLXVpIGluc3RlYWRcIik7XG5cdFx0cmV0dXJuIGRvc0ltcGwocm9vdCwgb3B0aW9ucyB8fCB7fSkgYXMgRG9zUGxheWVyO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMuc3R5bGUgPT09IFwiZGFya1wiKSB7XG5cdFx0cm9vdC5jbGFzc0xpc3QuYWRkKFwianNkb3MtcGxheWVyLWRhcmtcIik7XG5cdH1cblxuXHRyb290LmNsYXNzTGlzdC5hZGQoXCJqc2Rvcy1wbGF5ZXItcm9vdFwiKTtcblxuXHRjb25zdCBuYXZiYXIgPSBjcmVhdGVEaXYoXCJqc2Rvcy1wbGF5ZXItbmF2YmFyXCIpO1xuXHRjb25zdCB3aW5kb3cgPSBjcmVhdGVEaXYoXCJqc2Rvcy1wbGF5ZXItd2luZG93XCIpO1xuXHRjb25zdCBrZXlib2FyZCA9IGNyZWF0ZURpdihcImpzZG9zLXBsYXllci1rZXlib2FyZFwiKTtcblxuXHRyb290LmFwcGVuZENoaWxkKG5hdmJhcik7XG5cdHJvb3QuYXBwZW5kQ2hpbGQod2luZG93KTtcblx0cm9vdC5hcHBlbmRDaGlsZChrZXlib2FyZCk7XG5cblx0b3B0aW9ucy5sYXllcnNPcHRpb25zID0gb3B0aW9ucy5sYXllcnNPcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmxheWVyc09wdGlvbnMua2V5Ym9hcmREaXYgPSBrZXlib2FyZDtcblx0b3B0aW9ucy5sYXllcnNPcHRpb25zLmZ1bGxzY3JlZW5FbGVtZW50ID0gcm9vdDtcblxuXHRjb25zdCBwbGF5ZXIgPSBkb3NJbXBsKHdpbmRvdywgb3B0aW9ucyB8fCB7fSkgYXMgRG9zUGxheWVyO1xuXHRwbGF5ZXIubmF2YmFyID0gbmV3IE5hdmJhcihuYXZiYXIsIHBsYXllciwgb3B0aW9ucyk7XG5cblx0cmV0dXJuIHBsYXllcjtcbn1cblxuKHdpbmRvdyBhcyBhbnkpLkRvcyA9IERvc1BsYXllcjsiXX0=
