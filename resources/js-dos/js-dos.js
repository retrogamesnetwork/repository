!function i(s,a,c){function u(t,e){if(!a[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var o=new Error("Cannot find module '"+t+"'");throw o.code="MODULE_NOT_FOUND",o}var r=a[t]={exports:{}};s[t][0].call(r.exports,function(e){return u(s[t][1][e]||e)},r,r.exports,i,s,a,c)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)u(c[e]);return u}({1:[function(e,t,n){"use strict";var u=e("./utils");function l(){var o={},n=0,r=0,i=0;return{add:function(e,t){t||(t=e,e=0),r<e?r=e:e<i&&(i=e),o[e]||(o[e]=[]),o[e].push(t),n++},process:function(){for(var e=i;e<=r;e++)for(var t=o[e],n=0;n<t.length;n++){(0,t[n])()}},size:function(){return n}}}t.exports=function(e){var t=(e=e||{}).reporter,n=u.getOption(e,"async",!0),o=u.getOption(e,"auto",!0);o&&!n&&(t&&t.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true."),n=!0);var r,i=l(),s=!1;function a(){for(s=!0;i.size();){var e=i;i=l(),e.process()}s=!1}function c(){r=setTimeout(a,0)}return{add:function(e,t){!s&&o&&n&&0===i.size()&&c(),i.add(e,t)},force:function(e){s||(void 0===e&&(e=n),r&&(clearTimeout(r),r=null),(e?c:a)())}}}},{"./utils":2}],2:[function(e,t,n){"use strict";(t.exports={}).getOption=function(e,t,n){var o=e[t];return null!=o||void 0===n?o:n}},{}],3:[function(e,t,n){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],4:[function(e,t,n){var o=e("./_wks")("unscopables"),r=Array.prototype;null==r[o]&&e("./_hide")(r,o,{}),t.exports=function(e){r[o][e]=!0}},{"./_hide":32,"./_wks":95}],5:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);t.exports=function(e,t,n){return t+(n?o(e,t).length:1)}},{"./_string-at":77}],6:[function(e,t,n){t.exports=function(e,t,n,o){if(!(e instanceof t)||void 0!==o&&o in e)throw TypeError(n+": incorrect invocation!");return e}},{}],7:[function(e,t,n){var o=e("./_is-object");t.exports=function(e){if(!o(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":40}],8:[function(e,t,n){"use strict";var l=e("./_to-object"),d=e("./_to-absolute-index"),f=e("./_to-length");t.exports=[].copyWithin||function(e,t,n){var o=l(this),r=f(o.length),i=d(e,r),s=d(t,r),a=2<arguments.length?n:void 0,c=Math.min((void 0===a?r:d(a,r))-s,r-i),u=1;for(s<i&&i<s+c&&(u=-1,s+=c-1,i+=c-1);0<c--;)s in o?o[i]=o[s]:delete o[i],i+=u,s+=u;return o}},{"./_to-absolute-index":81,"./_to-length":85,"./_to-object":86}],9:[function(e,t,n){"use strict";var u=e("./_to-object"),l=e("./_to-absolute-index"),d=e("./_to-length");t.exports=function(e,t,n){for(var o=u(this),r=d(o.length),i=arguments.length,s=l(1<i?t:void 0,r),a=2<i?n:void 0,c=void 0===a?r:l(a,r);s<c;)o[s++]=e;return o}},{"./_to-absolute-index":81,"./_to-length":85,"./_to-object":86}],10:[function(e,t,n){var c=e("./_to-iobject"),u=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,n){var o,r=c(e),i=u(r.length),s=l(n,i);if(a&&t!=t){for(;s<i;)if((o=r[s++])!=o)return!0}else for(;s<i;s++)if((a||s in r)&&r[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":81,"./_to-iobject":84,"./_to-length":85}],11:[function(e,t,n){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),x=e("./_to-length"),o=e("./_array-species-create");t.exports=function(d,e){var f=1==d,p=2==d,h=3==d,y=4==d,v=6==d,m=5==d||v,g=e||o;return function(e,t,n){for(var o,r,i=w(e),s=b(i),a=_(t,n,3),c=x(s.length),u=0,l=f?g(e,c):p?g(e,0):void 0;u<c;u++)if((m||u in s)&&(r=a(o=s[u],u,i),d))if(f)l[u]=r;else if(r)switch(d){case 3:return!0;case 5:return o;case 6:return u;case 2:l.push(o)}else if(y)return!1;return v?-1:h||y?y:l}}},{"./_array-species-create":13,"./_ctx":18,"./_iobject":37,"./_to-length":85,"./_to-object":86}],12:[function(e,t,n){var o=e("./_is-object"),r=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return r(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!r(t.prototype)||(t=void 0),o(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":39,"./_is-object":40,"./_wks":95}],13:[function(e,t,n){var o=e("./_array-species-constructor");t.exports=function(e,t){return new(o(e))(t)}},{"./_array-species-constructor":12}],14:[function(e,t,n){var r=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==r(function(){return arguments}());t.exports=function(e){var t,n,o;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:s?r(t):"Object"==(o=r(t))&&"function"==typeof t.callee?"Arguments":o}},{"./_cof":15,"./_wks":95}],15:[function(e,t,n){var o={}.toString;t.exports=function(e){return o.call(e).slice(8,-1)}},{}],16:[function(e,t,n){var o=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=o)},{}],17:[function(e,t,n){"use strict";var o=e("./_object-dp"),r=e("./_property-desc");t.exports=function(e,t,n){t in e?o.f(e,t,r(0,n)):e[t]=n}},{"./_object-dp":52,"./_property-desc":66}],18:[function(e,t,n){var i=e("./_a-function");t.exports=function(o,r,e){if(i(o),void 0===r)return o;switch(e){case 1:return function(e){return o.call(r,e)};case 2:return function(e,t){return o.call(r,e,t)};case 3:return function(e,t,n){return o.call(r,e,t,n)}}return function(){return o.apply(r,arguments)}}},{"./_a-function":3}],19:[function(e,t,n){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],20:[function(e,t,n){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":25}],21:[function(e,t,n){var o=e("./_is-object"),r=e("./_global").document,i=o(r)&&o(r.createElement);t.exports=function(e){return i?r.createElement(e):{}}},{"./_global":30,"./_is-object":40}],22:[function(e,t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],23:[function(e,t,n){var a=e("./_object-keys"),c=e("./_object-gops"),u=e("./_object-pie");t.exports=function(e){var t=a(e),n=c.f;if(n)for(var o,r=n(e),i=u.f,s=0;r.length>s;)i.call(e,o=r[s++])&&t.push(o);return t}},{"./_object-gops":57,"./_object-keys":60,"./_object-pie":61}],24:[function(e,t,n){var y=e("./_global"),v=e("./_core"),m=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,n){var o,r,i,s,a=e&w.F,c=e&w.G,u=e&w.S,l=e&w.P,d=e&w.B,f=c?y:u?y[t]||(y[t]={}):(y[t]||{})[b],p=c?v:v[t]||(v[t]={}),h=p[b]||(p[b]={});for(o in c&&(n=t),n)i=((r=!a&&f&&void 0!==f[o])?f:n)[o],s=d&&r?_(i,y):l&&"function"==typeof i?_(Function.call,i):i,f&&g(f,o,i,e&w.U),p[o]!=i&&m(p,o,s),l&&h[o]!=i&&(h[o]=i)};y.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":16,"./_ctx":18,"./_global":30,"./_hide":32,"./_redefine":68}],25:[function(e,t,n){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],26:[function(e,t,n){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),d=e("./_hide"),f=e("./_fails"),p=e("./_defined"),h=e("./_wks"),y=e("./_regexp-exec"),v=h("species"),m=!f(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(n,e,t){var o=h(n),i=!f(function(){var e={};return e[o]=function(){return 7},7!=""[n](e)}),r=i?!f(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===n&&(t.constructor={},t.constructor[v]=function(){return t}),t[o](""),!e}):void 0;if(!i||!r||"replace"===n&&!m||"split"===n&&!g){var s=/./[o],a=t(p,o,""[n],function(e,t,n,o,r){return t.exec===y?i&&!r?{done:!0,value:s.call(t,n,o)}:{done:!0,value:e.call(n,t,o)}:{done:!1}}),c=a[0],u=a[1];l(String.prototype,n,c),d(RegExp.prototype,o,2==e?function(e,t){return u.call(e,this,t)}:function(e){return u.call(e,this)})}}},{"./_defined":19,"./_fails":25,"./_hide":32,"./_redefine":68,"./_regexp-exec":70,"./_wks":95,"./es6.regexp.exec":106}],27:[function(e,t,n){"use strict";var o=e("./_an-object");t.exports=function(){var e=o(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":7}],28:[function(e,t,n){var f=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),y=e("./_an-object"),v=e("./_to-length"),m=e("./core.get-iterator-method"),g={},_={};(n=t.exports=function(e,t,n,o,r){var i,s,a,c,u=r?function(){return e}:m(e),l=f(n,o,t?2:1),d=0;if("function"!=typeof u)throw TypeError(e+" is not iterable!");if(h(u)){for(i=v(e.length);d<i;d++)if((c=t?l(y(s=e[d])[0],s[1]):l(e[d]))===g||c===_)return c}else for(a=u.call(e);!(s=a.next()).done;)if((c=p(a,l,s.value,t))===g||c===_)return c}).BREAK=g,n.RETURN=_},{"./_an-object":7,"./_ctx":18,"./_is-array-iter":38,"./_iter-call":41,"./_to-length":85,"./core.get-iterator-method":96}],29:[function(e,t,n){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":75}],30:[function(e,t,n){var o=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=o)},{}],31:[function(e,t,n){var o={}.hasOwnProperty;t.exports=function(e,t){return o.call(e,t)}},{}],32:[function(e,t,n){var o=e("./_object-dp"),r=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,n){return o.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},{"./_descriptors":20,"./_object-dp":52,"./_property-desc":66}],33:[function(e,t,n){var o=e("./_global").document;t.exports=o&&o.documentElement},{"./_global":30}],34:[function(e,t,n){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":20,"./_dom-create":21,"./_fails":25}],35:[function(e,t,n){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,n){var o,r=t.constructor;return r!==n&&"function"==typeof r&&(o=r.prototype)!==n.prototype&&i(o)&&s&&s(e,o),e}},{"./_is-object":40,"./_set-proto":71}],36:[function(e,t,n){t.exports=function(e,t,n){var o=void 0===n;switch(t.length){case 0:return o?e():e.call(n);case 1:return o?e(t[0]):e.call(n,t[0]);case 2:return o?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return o?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return o?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},{}],37:[function(e,t,n){var o=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==o(e)?e.split(""):Object(e)}},{"./_cof":15}],38:[function(e,t,n){var o=e("./_iterators"),r=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(o.Array===e||i[r]===e)}},{"./_iterators":46,"./_wks":95}],39:[function(e,t,n){var o=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==o(e)}},{"./_cof":15}],40:[function(e,t,n){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],41:[function(e,t,n){var i=e("./_an-object");t.exports=function(t,e,n,o){try{return o?e(i(n)[0],n[1]):e(n)}catch(e){var r=t.return;throw void 0!==r&&i(r.call(t)),e}}},{"./_an-object":7}],42:[function(e,t,n){"use strict";var o=e("./_object-create"),r=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,n){e.prototype=o(s,{next:r(1,n)}),i(e,t+" Iterator")}},{"./_hide":32,"./_object-create":51,"./_property-desc":66,"./_set-to-string-tag":73,"./_wks":95}],43:[function(e,t,n){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),x=e("./_redefine"),D=e("./_hide"),k=e("./_iterators"),E=e("./_iter-create"),j=e("./_set-to-string-tag"),B=e("./_object-gpo"),K=e("./_wks")("iterator"),C=!([].keys&&"next"in[].keys()),O="values";t.exports=function(e,t,n,o,r,i,s){E(n,t,o);function a(e){if(!C&&e in h)return h[e];switch(e){case"keys":case O:return function(){return new n(this,e)}}return function(){return new n(this,e)}}var c,u,l,d=t+" Iterator",f=r==O,p=!1,h=e.prototype,y=h[K]||h["@@iterator"]||r&&h[r],v=y||a(r),m=r?f?a("entries"):v:void 0,g="Array"==t&&h.entries||y;if(g&&(l=B(g.call(new e)))!==Object.prototype&&l.next&&(j(l,d,!0),b||"function"==typeof l[K]||D(l,K,_)),f&&y&&y.name!==O&&(p=!0,v=function(){return y.call(this)}),b&&!s||!C&&!p&&h[K]||D(h,K,v),k[t]=v,k[d]=_,r)if(c={values:f?v:a(O),keys:i?v:a("keys"),entries:m},s)for(u in c)u in h||x(h,u,c[u]);else w(w.P+w.F*(C||p),t,c);return c}},{"./_export":24,"./_hide":32,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":58,"./_redefine":68,"./_set-to-string-tag":73,"./_wks":95}],44:[function(e,t,n){var i=e("./_wks")("iterator"),s=!1;try{var o=[7][i]();o.return=function(){s=!0},Array.from(o,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var n=!1;try{var o=[7],r=o[i]();r.next=function(){return{done:n=!0}},o[i]=function(){return r},e(o)}catch(e){}return n}},{"./_wks":95}],45:[function(e,t,n){t.exports=function(e,t){return{value:t,done:!!e}}},{}],46:[function(e,t,n){t.exports={}},{}],47:[function(e,t,n){t.exports=!1},{}],48:[function(e,t,n){function o(e){a(e,r,{value:{i:"O"+ ++c,w:{}}})}var r=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,c=0,u=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),d=t.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,r)){if(!u(e))return"F";if(!t)return"E";o(e)}return e[r].i},getWeak:function(e,t){if(!s(e,r)){if(!u(e))return!0;if(!t)return!1;o(e)}return e[r].w},onFreeze:function(e){return l&&d.NEED&&u(e)&&!s(e,r)&&o(e),e}}},{"./_fails":25,"./_has":31,"./_is-object":40,"./_object-dp":52,"./_uid":91}],49:[function(e,t,n){var a=e("./_global"),c=e("./_task").set,u=a.MutationObserver||a.WebKitMutationObserver,l=a.process,d=a.Promise,f="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(f&&(e=l.domain)&&e.exit();n;){t=n.fn,n=n.next;try{t()}catch(e){throw n?r():o=void 0,e}}o=void 0,e&&e.enter()}var n,o,r;if(f)r=function(){l.nextTick(e)};else if(!u||a.navigator&&a.navigator.standalone)if(d&&d.resolve){var t=d.resolve(void 0);r=function(){t.then(e)}}else r=function(){c.call(a,e)};else{var i=!0,s=document.createTextNode("");new u(e).observe(s,{characterData:!0}),r=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};o&&(o.next=t),n||(n=t,r()),o=t}}},{"./_cof":15,"./_global":30,"./_task":80}],50:[function(e,t,n){"use strict";var r=e("./_a-function");function o(e){var n,o;this.promise=new e(function(e,t){if(void 0!==n||void 0!==o)throw TypeError("Bad Promise constructor");n=e,o=t}),this.resolve=r(n),this.reject=r(o)}t.exports.f=function(e){return new o(e)}},{"./_a-function":3}],51:[function(o,e,t){function r(){}var i=o("./_an-object"),s=o("./_object-dps"),a=o("./_enum-bug-keys"),c=o("./_shared-key")("IE_PROTO"),u="prototype",l=function(){var e,t=o("./_dom-create")("iframe"),n=a.length;for(t.style.display="none",o("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;n--;)delete l[u][a[n]];return l()};e.exports=Object.create||function(e,t){var n;return null!==e?(r[u]=i(e),n=new r,r[u]=null,n[c]=e):n=l(),void 0===t?n:s(n,t)}},{"./_an-object":7,"./_dom-create":21,"./_enum-bug-keys":22,"./_html":33,"./_object-dps":53,"./_shared-key":74}],52:[function(e,t,n){var o=e("./_an-object"),r=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;n.f=e("./_descriptors")?Object.defineProperty:function(e,t,n){if(o(e),t=i(t,!0),o(n),r)try{return s(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},{"./_an-object":7,"./_descriptors":20,"./_ie8-dom-define":34,"./_to-primitive":87}],53:[function(e,t,n){var s=e("./_object-dp"),a=e("./_an-object"),c=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var n,o=c(t),r=o.length,i=0;i<r;)s.f(e,n=o[i++],t[n]);return e}},{"./_an-object":7,"./_descriptors":20,"./_object-dp":52,"./_object-keys":60}],54:[function(e,t,n){var o=e("./_object-pie"),r=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),c=e("./_ie8-dom-define"),u=Object.getOwnPropertyDescriptor;n.f=e("./_descriptors")?u:function(e,t){if(e=i(e),t=s(t,!0),c)try{return u(e,t)}catch(e){}if(a(e,t))return r(!o.f.call(e,t),e[t])}},{"./_descriptors":20,"./_has":31,"./_ie8-dom-define":34,"./_object-pie":61,"./_property-desc":66,"./_to-iobject":84,"./_to-primitive":87}],55:[function(e,t,n){var o=e("./_to-iobject"),r=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return r(e)}catch(e){return s.slice()}}(e):r(o(e))}},{"./_object-gopn":56,"./_to-iobject":84}],56:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys").concat("length","prototype");n.f=Object.getOwnPropertyNames||function(e){return o(e,r)}},{"./_enum-bug-keys":22,"./_object-keys-internal":59}],57:[function(e,t,n){n.f=Object.getOwnPropertySymbols},{}],58:[function(e,t,n){var o=e("./_has"),r=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=r(e),o(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":31,"./_shared-key":74,"./_to-object":86}],59:[function(e,t,n){var s=e("./_has"),a=e("./_to-iobject"),c=e("./_array-includes")(!1),u=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var n,o=a(e),r=0,i=[];for(n in o)n!=u&&s(o,n)&&i.push(n);for(;t.length>r;)s(o,n=t[r++])&&(~c(i,n)||i.push(n));return i}},{"./_array-includes":10,"./_has":31,"./_shared-key":74,"./_to-iobject":84}],60:[function(e,t,n){var o=e("./_object-keys-internal"),r=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return o(e,r)}},{"./_enum-bug-keys":22,"./_object-keys-internal":59}],61:[function(e,t,n){n.f={}.propertyIsEnumerable},{}],62:[function(e,t,n){var r=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],o={};o[e]=t(n),r(r.S+r.F*s(function(){n(1)}),"Object",o)}},{"./_core":16,"./_export":24,"./_fails":25}],63:[function(e,t,n){var o=e("./_global").parseInt,r=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==o(i+"08")||22!==o(i+"0x16")?function(e,t){var n=r(String(e),3);return o(n,t>>>0||(s.test(n)?16:10))}:o},{"./_global":30,"./_string-trim":78,"./_string-ws":79}],64:[function(e,t,n){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],65:[function(e,t,n){var o=e("./_an-object"),r=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(o(e),r(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},{"./_an-object":7,"./_is-object":40,"./_new-promise-capability":50}],66:[function(e,t,n){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,n){var r=e("./_redefine");t.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},{"./_redefine":68}],68:[function(e,t,n){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),c=e("./_uid")("src"),o=e("./_function-to-string"),r="toString",u=(""+o).split(r);e("./_core").inspectSource=function(e){return o.call(e)},(t.exports=function(e,t,n,o){var r="function"==typeof n;r&&(a(n,"name")||s(n,"name",t)),e[t]!==n&&(r&&(a(n,c)||s(n,c,e[t]?""+e[t]:u.join(String(t)))),e===i?e[t]=n:o?e[t]?e[t]=n:s(e,t,n):(delete e[t],s(e,t,n)))})(Function.prototype,r,function(){return"function"==typeof this&&this[c]||o.call(this)})},{"./_core":16,"./_function-to-string":29,"./_global":30,"./_has":31,"./_hide":32,"./_uid":91}],69:[function(e,t,n){"use strict";var r=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":14}],70:[function(e,t,n){"use strict";var o,r,s=e("./_flags"),a=RegExp.prototype.exec,c=String.prototype.replace,i=a,u="lastIndex",l=(o=/a/,r=/b*/g,a.call(o,"a"),a.call(r,"a"),0!==o[u]||0!==r[u]),d=void 0!==/()??/.exec("")[1];(l||d)&&(i=function(e){var t,n,o,r,i=this;return d&&(n=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[u]),o=a.call(i,e),l&&o&&(i[u]=i.global?o.index+o[0].length:t),d&&o&&1<o.length&&c.call(o[0],n,function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(o[r]=void 0)}),o}),t.exports=i},{"./_flags":27}],71:[function(t,e,n){function r(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var o=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,n,o){try{(o=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),n=!(e instanceof Array)}catch(e){n=!0}return function(e,t){return r(e,t),n?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:r}},{"./_an-object":7,"./_ctx":18,"./_is-object":40,"./_object-gopd":54}],72:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=o[e];i&&t&&!t[s]&&r.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":20,"./_global":30,"./_object-dp":52,"./_wks":95}],73:[function(e,t,n){var o=e("./_object-dp").f,r=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,i)&&o(e,i,{configurable:!0,value:t})}},{"./_has":31,"./_object-dp":52,"./_wks":95}],74:[function(e,t,n){var o=e("./_shared")("keys"),r=e("./_uid");t.exports=function(e){return o[e]||(o[e]=r(e))}},{"./_shared":75,"./_uid":91}],75:[function(e,t,n){var o=e("./_core"),r=e("./_global"),i="__core-js_shared__",s=r[i]||(r[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:o.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":16,"./_global":30,"./_library":47}],76:[function(e,t,n){var r=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var n,o=r(e).constructor;return void 0===o||null==(n=r(o)[s])?t:i(n)}},{"./_a-function":3,"./_an-object":7,"./_wks":95}],77:[function(e,t,n){var c=e("./_to-integer"),u=e("./_defined");t.exports=function(a){return function(e,t){var n,o,r=String(u(e)),i=c(t),s=r.length;return i<0||s<=i?a?"":void 0:(n=r.charCodeAt(i))<55296||56319<n||i+1===s||(o=r.charCodeAt(i+1))<56320||57343<o?a?r.charAt(i):n:a?r.slice(i,i+2):o-56320+(n-55296<<10)+65536}}},{"./_defined":19,"./_to-integer":83}],78:[function(e,t,n){function o(e,t,n){var o={},r=a(function(){return!!c[e]()||"​"!="​"[e]()}),i=o[e]=r?t(d):c[e];n&&(o[n]=i),s(s.P+s.F*r,"String",o)}var s=e("./_export"),r=e("./_defined"),a=e("./_fails"),c=e("./_string-ws"),i="["+c+"]",u=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),d=o.trim=function(e,t){return e=String(r(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(l,"")),e};t.exports=o},{"./_defined":19,"./_export":24,"./_fails":25,"./_string-ws":79}],79:[function(e,t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],80:[function(e,t,n){function o(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function r(e){o.call(e.data)}var i,s,a,c=e("./_ctx"),u=e("./_invoke"),l=e("./_html"),d=e("./_dom-create"),f=e("./_global"),p=f.process,h=f.setImmediate,y=f.clearImmediate,v=f.MessageChannel,m=f.Dispatch,g=0,_={},b="onreadystatechange";h&&y||(h=function(e){for(var t=[],n=1;n<arguments.length;)t.push(arguments[n++]);return _[++g]=function(){u("function"==typeof e?e:Function(e),t)},i(g),g},y=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(c(o,e,1))}:m&&m.now?i=function(e){m.now(c(o,e,1))}:v?(a=(s=new v).port2,s.port1.onmessage=r,i=c(a.postMessage,a,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(i=function(e){f.postMessage(e+"","*")},f.addEventListener("message",r,!1)):i=b in d("script")?function(e){l.appendChild(d("script"))[b]=function(){l.removeChild(this),o.call(e)}}:function(e){setTimeout(c(o,e,1),0)}),t.exports={set:h,clear:y}},{"./_cof":15,"./_ctx":18,"./_dom-create":21,"./_global":30,"./_html":33,"./_invoke":36}],81:[function(e,t,n){var o=e("./_to-integer"),r=Math.max,i=Math.min;t.exports=function(e,t){return(e=o(e))<0?r(e+t,0):i(e,t)}},{"./_to-integer":83}],82:[function(e,t,n){var o=e("./_to-integer"),r=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=o(e),n=r(t);if(t!==n)throw RangeError("Wrong length!");return n}},{"./_to-integer":83,"./_to-length":85}],83:[function(e,t,n){var o=Math.ceil,r=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?r:o)(e)}},{}],84:[function(e,t,n){var o=e("./_iobject"),r=e("./_defined");t.exports=function(e){return o(r(e))}},{"./_defined":19,"./_iobject":37}],85:[function(e,t,n){var o=e("./_to-integer"),r=Math.min;t.exports=function(e){return 0<e?r(o(e),9007199254740991):0}},{"./_to-integer":83}],86:[function(e,t,n){var o=e("./_defined");t.exports=function(e){return Object(o(e))}},{"./_defined":19}],87:[function(e,t,n){var r=e("./_is-object");t.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":40}],88:[function(e,t,n){"use strict";if(e("./_descriptors")){var m=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),o=e("./_typed-buffer"),h=e("./_ctx"),x=e("./_an-instance"),r=e("./_property-desc"),D=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),k=e("./_to-length"),E=e("./_to-index"),a=e("./_to-absolute-index"),c=e("./_to-primitive"),u=e("./_has"),j=e("./_classof"),B=e("./_is-object"),y=e("./_to-object"),v=e("./_is-array-iter"),K=e("./_object-create"),C=e("./_object-gpo"),O=e("./_object-gopn").f,S=e("./core.get-iterator-method"),l=e("./_uid"),d=e("./_wks"),f=e("./_array-methods"),p=e("./_array-includes"),P=e("./_species-constructor"),T=e("./es6.array.iterator"),M=e("./_iterators"),L=e("./_iter-detect"),A=e("./_set-species"),I=e("./_array-fill"),N=e("./_array-copy-within"),F=e("./_object-dp"),R=e("./_object-gopd"),U=F.f,z=R.f,H=g.RangeError,G=g.TypeError,V=g.Uint8Array,W="ArrayBuffer",Y="Shared"+W,X="BYTES_PER_ELEMENT",q="prototype",J=Array[q],$=o.ArrayBuffer,Q=o.DataView,Z=f(0),ee=f(2),te=f(3),ne=f(4),oe=f(5),re=f(6),ie=p(!0),se=p(!1),ae=T.values,ce=T.keys,ue=T.entries,le=J.lastIndexOf,de=J.reduce,fe=J.reduceRight,pe=J.join,he=J.sort,ye=J.slice,ve=J.toString,me=J.toLocaleString,ge=d("iterator"),_e=d("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),xe=w.CONSTR,De=w.TYPED,ke=w.VIEW,Ee="Wrong length!",je=f(1,function(e,t){return Se(P(e,e[we]),t)}),Be=_(function(){return 1===new V(new Uint16Array([1]).buffer)[0]}),Ke=!!V&&!!V[q].set&&_(function(){new V(1).set({})}),Ce=function(e,t){var n=s(e);if(n<0||n%t)throw H("Wrong offset!");return n},Oe=function(e){if(B(e)&&De in e)return e;throw G(e+" is not a typed array!")},Se=function(e,t){if(!(B(e)&&be in e))throw G("It is not a typed array constructor!");return new e(t)},Pe=function(e,t){return Te(P(e,e[we]),t)},Te=function(e,t){for(var n=0,o=t.length,r=Se(e,o);n<o;)r[n]=t[n++];return r},Me=function(e,t,n){U(e,t,{get:function(){return this._d[n]}})},Le=function(e,t,n){var o,r,i,s,a,c,u=y(e),l=arguments.length,d=1<l?t:void 0,f=void 0!==d,p=S(u);if(null!=p&&!v(p)){for(c=p.call(u),i=[],o=0;!(a=c.next()).done;o++)i.push(a.value);u=i}for(f&&2<l&&(d=h(d,n,2)),o=0,r=k(u.length),s=Se(this,r);o<r;o++)s[o]=f?d(u[o],o):u[o];return s},Ae=function(){for(var e=0,t=arguments.length,n=Se(this,t);e<t;)n[e]=arguments[e++];return n},Ie=!!V&&_(function(){me.call(new V(1))}),Ne=function(){return me.apply(Ie?ye.call(Oe(this)):Oe(this),arguments)},Fe={copyWithin:function(e,t,n){return N.call(Oe(this),e,t,2<arguments.length?n:void 0)},every:function(e,t){return ne(Oe(this),e,1<arguments.length?t:void 0)},fill:function(e){return I.apply(Oe(this),arguments)},filter:function(e,t){return Pe(this,ee(Oe(this),e,1<arguments.length?t:void 0))},find:function(e,t){return oe(Oe(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return re(Oe(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Oe(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Oe(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Oe(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Oe(this),arguments)},lastIndexOf:function(e){return le.apply(Oe(this),arguments)},map:function(e,t){return je(Oe(this),e,1<arguments.length?t:void 0)},reduce:function(e){return de.apply(Oe(this),arguments)},reduceRight:function(e){return fe.apply(Oe(this),arguments)},reverse:function(){for(var e,t=this,n=Oe(t).length,o=Math.floor(n/2),r=0;r<o;)e=t[r],t[r++]=t[--n],t[n]=e;return t},some:function(e,t){return te(Oe(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Oe(this),e)},subarray:function(e,t){var n=Oe(this),o=n.length,r=a(e,o);return new(P(n,n[we]))(n.buffer,n.byteOffset+r*n.BYTES_PER_ELEMENT,k((void 0===t?o:a(t,o))-r))}},Re=function(e,t){return Pe(this,ye.call(Oe(this),e,t))},Ue=function(e,t){Oe(this);var n=Ce(t,1),o=this.length,r=y(e),i=k(r.length),s=0;if(o<i+n)throw H(Ee);for(;s<i;)this[n+s]=r[s++]},ze={entries:function(){return ue.call(Oe(this))},keys:function(){return ce.call(Oe(this))},values:function(){return ae.call(Oe(this))}},He=function(e,t){return B(e)&&e[De]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ge=function(e,t){return He(e,t=c(t,!0))?r(2,e[t]):z(e,t)},Ve=function(e,t,n){return!(He(e,t=c(t,!0))&&B(n)&&u(n,"value"))||u(n,"get")||u(n,"set")||n.configurable||u(n,"writable")&&!n.writable||u(n,"enumerable")&&!n.enumerable?U(e,t,n):(e[t]=n.value,e)};xe||(R.f=Ge,F.f=Ve),b(b.S+b.F*!xe,"Object",{getOwnPropertyDescriptor:Ge,defineProperty:Ve}),_(function(){ve.call({})})&&(ve=me=function(){return pe.call(this)});var We=i({},Fe);i(We,ze),D(We,ge,ze.values),i(We,{slice:Re,set:Ue,constructor:function(){},toString:ve,toLocaleString:Ne}),Me(We,"buffer","b"),Me(We,"byteOffset","o"),Me(We,"byteLength","l"),Me(We,"length","e"),U(We,_e,{get:function(){return this[De]}}),t.exports=function(e,d,t,i){function f(e,r){U(e,r,{get:function(){return e=r,(t=this._d).v[n](e*d+t.o,Be);var e,t},set:function(e){return t=r,n=e,o=this._d,i&&(n=(n=Math.round(n))<0?0:255<n?255:255&n),void o.v[s](t*d+o.o,n,Be);var t,n,o},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",n="get"+e,s="set"+e,h=g[p],a=h||{},o=h&&C(h),r=!h||!w.ABV,c={},u=h&&h[q];r?(h=t(function(e,t,n,o){x(e,h,p,"_d");var r,i,s,a,c=0,u=0;if(B(t)){if(!(t instanceof $||(a=j(t))==W||a==Y))return De in t?Te(h,t):Le.call(h,t);r=t,u=Ce(n,d);var l=t.byteLength;if(void 0===o){if(l%d)throw H(Ee);if((i=l-u)<0)throw H(Ee)}else if(l<(i=k(o)*d)+u)throw H(Ee);s=i/d}else s=E(t),r=new $(i=s*d);for(D(e,"_d",{b:r,o:u,l:i,e:s,v:new Q(r)});c<s;)f(e,c++)}),u=h[q]=K(We),D(u,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&L(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,n,o){var r;return x(e,h,p),B(t)?t instanceof $||(r=j(t))==W||r==Y?void 0!==o?new a(t,Ce(n,d),o):void 0!==n?new a(t,Ce(n,d)):new a(t):De in t?Te(h,t):Le.call(h,t):new a(E(t))}),Z(o!==Function.prototype?O(a).concat(O(o)):O(a),function(e){e in h||D(h,e,a[e])}),h[q]=u,m||(u.constructor=h));var l=u[ge],y=!!l&&("values"==l.name||null==l.name),v=ze.values;D(h,be,!0),D(u,De,p),D(u,ke,!0),D(u,we,h),(i?new h(1)[_e]==p:_e in u)||U(u,_e,{get:function(){return p}}),c[p]=h,b(b.G+b.W+b.F*(h!=a),c),b(b.S,p,{BYTES_PER_ELEMENT:d}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Le,of:Ae}),X in u||D(u,X,d),b(b.P,p,Fe),A(p),b(b.P+b.F*Ke,p,{set:Ue}),b(b.P+b.F*!y,p,ze),m||u.toString==ve||(u.toString=ve),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:Re}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){u.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),M[p]=y?l:v,m||y||D(u,ge,v)}}else t.exports=function(){}},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":10,"./_array-methods":11,"./_classof":14,"./_ctx":18,"./_descriptors":20,"./_export":24,"./_fails":25,"./_global":30,"./_has":31,"./_hide":32,"./_is-array-iter":38,"./_is-object":40,"./_iter-detect":44,"./_iterators":46,"./_library":47,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_object-gpo":58,"./_property-desc":66,"./_redefine-all":67,"./_set-species":72,"./_species-constructor":76,"./_to-absolute-index":81,"./_to-index":82,"./_to-integer":83,"./_to-length":85,"./_to-object":86,"./_to-primitive":87,"./_typed":90,"./_typed-buffer":89,"./_uid":91,"./_wks":95,"./core.get-iterator-method":96,"./es6.array.iterator":99}],89:[function(e,t,n){"use strict";var o=e("./_global"),r=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),c=e("./_redefine-all"),u=e("./_fails"),l=e("./_an-instance"),d=e("./_to-integer"),f=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,y=e("./_object-dp").f,v=e("./_array-fill"),m=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",x=o[g],D=o[_],k=o.Math,E=o.RangeError,j=o.Infinity,B=x,K=k.abs,C=k.pow,O=k.floor,S=k.log,P=k.LN2,T="byteLength",M="byteOffset",L=r?"_b":"buffer",A=r?"_l":T,I=r?"_o":M;function N(e,t,n){var o,r,i,s=new Array(n),a=8*n-t-1,c=(1<<a)-1,u=c>>1,l=23===t?C(2,-24)-C(2,-77):0,d=0,f=e<0||0===e&&1/e<0?1:0;for((e=K(e))!=e||e===j?(r=e!=e?1:0,o=c):(o=O(S(e)/P),e*(i=C(2,-o))<1&&(o--,i*=2),2<=(e+=1<=o+u?l/i:l*C(2,1-u))*i&&(o++,i/=2),c<=o+u?(r=0,o=c):1<=o+u?(r=(e*i-1)*C(2,t),o+=u):(r=e*C(2,u-1)*C(2,t),o=0));8<=t;s[d++]=255&r,r/=256,t-=8);for(o=o<<t|r,a+=t;0<a;s[d++]=255&o,o/=256,a-=8);return s[--d]|=128*f,s}function F(e,t,n){var o,r=8*n-t-1,i=(1<<r)-1,s=i>>1,a=r-7,c=n-1,u=e[c--],l=127&u;for(u>>=7;0<a;l=256*l+e[c],c--,a-=8);for(o=l&(1<<-a)-1,l>>=-a,a+=t;0<a;o=256*o+e[c],c--,a-=8);if(0===l)l=1-s;else{if(l===i)return o?NaN:u?-j:j;o+=C(2,t),l-=s}return(u?-1:1)*o*C(2,l-t)}function R(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function z(e){return[255&e,e>>8&255]}function H(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function G(e){return N(e,52,8)}function V(e){return N(e,23,4)}function W(e,t,n){y(e[b],t,{get:function(){return this[n]}})}function Y(e,t,n,o){var r=p(+n);if(r+t>e[A])throw E(w);var i=e[L]._b,s=r+e[I],a=i.slice(s,s+t);return o?a:a.reverse()}function X(e,t,n,o,r,i){var s=p(+n);if(s+t>e[A])throw E(w);for(var a=e[L]._b,c=s+e[I],u=o(+r),l=0;l<t;l++)a[c+l]=u[i?l:t-l-1]}if(s.ABV){if(!u(function(){x(1)})||!u(function(){new x(-1)})||u(function(){return new x,new x(1.5),new x(NaN),x.name!=g})){for(var q,J=(x=function(e){return l(this,x),new B(p(e))})[b]=B[b],$=h(B),Q=0;$.length>Q;)(q=$[Q++])in x||a(x,q,B[q]);i||(J.constructor=x)}var Z=new D(new x(2)),ee=D[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||c(D[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else x=function(e){l(this,x,g);var t=p(e);this._b=v.call(new Array(t),0),this[A]=t},D=function(e,t,n){l(this,D,_),l(e,x,_);var o=e[A],r=d(t);if(r<0||o<r)throw E("Wrong offset!");if(o<r+(n=void 0===n?o-r:f(n)))throw E("Wrong length!");this[L]=e,this[I]=r,this[A]=n},r&&(W(x,T,"_l"),W(D,"buffer","_b"),W(D,T,"_l"),W(D,M,"_o")),c(D[b],{getInt8:function(e){return Y(this,1,e)[0]<<24>>24},getUint8:function(e){return Y(this,1,e)[0]},getInt16:function(e,t){var n=Y(this,2,e,t);return(n[1]<<8|n[0])<<16>>16},getUint16:function(e,t){var n=Y(this,2,e,t);return n[1]<<8|n[0]},getInt32:function(e,t){return R(Y(this,4,e,t))},getUint32:function(e,t){return R(Y(this,4,e,t))>>>0},getFloat32:function(e,t){return F(Y(this,4,e,t),23,4)},getFloat64:function(e,t){return F(Y(this,8,e,t),52,8)},setInt8:function(e,t){X(this,1,e,U,t)},setUint8:function(e,t){X(this,1,e,U,t)},setInt16:function(e,t,n){X(this,2,e,z,t,n)},setUint16:function(e,t,n){X(this,2,e,z,t,n)},setInt32:function(e,t,n){X(this,4,e,H,t,n)},setUint32:function(e,t,n){X(this,4,e,H,t,n)},setFloat32:function(e,t,n){X(this,4,e,V,t,n)},setFloat64:function(e,t,n){X(this,8,e,G,t,n)}});m(x,g),m(D,_),a(D[b],s.VIEW,!0),n[g]=x,n[_]=D},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":20,"./_fails":25,"./_global":30,"./_hide":32,"./_library":47,"./_object-dp":52,"./_object-gopn":56,"./_redefine-all":67,"./_set-to-string-tag":73,"./_to-index":82,"./_to-integer":83,"./_to-length":85,"./_typed":90}],90:[function(e,t,n){for(var o,r=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),c=s("view"),u=!(!r.ArrayBuffer||!r.DataView),l=u,d=0,f="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");d<9;)(o=r[f[d++]])?(i(o.prototype,a,!0),i(o.prototype,c,!0)):l=!1;t.exports={ABV:u,CONSTR:l,TYPED:a,VIEW:c}},{"./_global":30,"./_hide":32,"./_uid":91}],91:[function(e,t,n){var o=0,r=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++o+r).toString(36))}},{}],92:[function(e,t,n){var o=e("./_global").navigator;t.exports=o&&o.userAgent||""},{"./_global":30}],93:[function(e,t,n){var o=e("./_global"),r=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=r.Symbol||(r.Symbol=!i&&o.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":16,"./_global":30,"./_library":47,"./_object-dp":52,"./_wks-ext":94}],94:[function(e,t,n){n.f=e("./_wks")},{"./_wks":95}],95:[function(e,t,n){var o=e("./_shared")("wks"),r=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return o[e]||(o[e]=s&&i[e]||(s?i:r)("Symbol."+e))}).store=o},{"./_global":30,"./_shared":75,"./_uid":91}],96:[function(e,t,n){var o=e("./_classof"),r=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[r]||e["@@iterator"]||i[o(e)]}},{"./_classof":14,"./_core":16,"./_iterators":46,"./_wks":95}],97:[function(e,t,n){var o=e("./_export");o(o.P,"Array",{fill:e("./_array-fill")}),e("./_add-to-unscopables")("fill")},{"./_add-to-unscopables":4,"./_array-fill":9,"./_export":24}],98:[function(e,t,n){"use strict";var h=e("./_ctx"),o=e("./_export"),y=e("./_to-object"),v=e("./_iter-call"),m=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");o(o.S+o.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,n){var o,r,i,s,a=y(e),c="function"==typeof this?this:Array,u=arguments.length,l=1<u?t:void 0,d=void 0!==l,f=0,p=b(a);if(d&&(l=h(l,2<u?n:void 0,2)),null==p||c==Array&&m(p))for(r=new c(o=g(a.length));f<o;f++)_(r,f,d?l(a[f],f):a[f]);else for(s=p.call(a),r=new c;!(i=s.next()).done;f++)_(r,f,d?v(s,l,[i.value,f],!0):i.value);return r.length=f,r}})},{"./_create-property":17,"./_ctx":18,"./_export":24,"./_is-array-iter":38,"./_iter-call":41,"./_iter-detect":44,"./_to-length":85,"./_to-object":86,"./core.get-iterator-method":96}],99:[function(e,t,n){"use strict";var o=e("./_add-to-unscopables"),r=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"./_add-to-unscopables":4,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":84}],100:[function(e,t,n){var o=e("./_object-dp").f,r=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in r||e("./_descriptors")&&o(r,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":20,"./_object-dp":52}],101:[function(e,t,n){"use strict";function o(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var n,o,r,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:o=2,r=49;break;case 79:case 111:o=8,r=55;break;default:return+t}for(var s,a=t.slice(2),c=0,u=a.length;c<u;c++)if((s=a.charCodeAt(c))<48||r<s)return NaN;return parseInt(a,o)}}return+t}var r=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),c=e("./_fails"),u=e("./_object-gopn").f,d=e("./_object-gopd").f,f=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",y=r[h],v=y,m=y.prototype,g=s(e("./_object-create")(m))==h,_="trim"in String.prototype;if(!y(" 0o1")||!y("0b1")||y("+0x1")){y=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof y&&(g?c(function(){m.valueOf.call(n)}):s(n)!=h)?a(new v(o(t)),n,y):o(t)};for(var b,w=e("./_descriptors")?u(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),x=0;w.length>x;x++)i(v,b=w[x])&&!i(y,b)&&f(y,b,d(v,b));(y.prototype=m).constructor=y,e("./_redefine")(r,h,y)}},{"./_cof":15,"./_descriptors":20,"./_fails":25,"./_global":30,"./_has":31,"./_inherit-if-required":35,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_redefine":68,"./_string-trim":78,"./_to-primitive":87}],102:[function(e,t,n){var o=e("./_export"),r=e("./_parse-int");o(o.S+o.F*(Number.parseInt!=r),"Number",{parseInt:r})},{"./_export":24,"./_parse-int":63}],103:[function(e,t,n){var o=e("./_to-object"),r=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return r(o(e))}})},{"./_object-keys":60,"./_object-sap":62,"./_to-object":86}],104:[function(e,t,n){"use strict";var o=e("./_classof"),r={};r[e("./_wks")("toStringTag")]="z",r+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+o(this)+"]"},!0)},{"./_classof":14,"./_redefine":68,"./_wks":95}],105:[function(n,e,t){"use strict";function o(){}function d(e){var t;return!(!v(e)||"function"!=typeof(t=e.then))&&t}function r(l,n){if(!l._n){l._n=!0;var o=l._c;x(function(){for(var c=l._v,u=1==l._s,e=0,t=function(e){var t,n,o,r=u?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{r?(u||(2==l._h&&N(l),l._h=1),!0===r?t=c:(a&&a.enter(),t=r(c),a&&(a.exit(),o=!0)),t===e.promise?s(K("Promise-chain cycle")):(n=d(t))?n.call(t,i,s):i(t)):s(c)}catch(e){a&&!o&&a.exit(),s(e)}};o.length>e;)t(o[e++]);l._c=[],l._n=!1,n&&!l._h&&A(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),r(t,!0))}var s,a,c,u,l=n("./_library"),f=n("./_global"),p=n("./_ctx"),h=n("./_classof"),y=n("./_export"),v=n("./_is-object"),m=n("./_a-function"),g=n("./_an-instance"),_=n("./_for-of"),b=n("./_species-constructor"),w=n("./_task").set,x=n("./_microtask")(),D=n("./_new-promise-capability"),k=n("./_perform"),E=n("./_user-agent"),j=n("./_promise-resolve"),B="Promise",K=f.TypeError,C=f.process,O=C&&C.versions,S=O&&O.v8||"",P=f[B],T="process"==h(C),M=a=D.f,L=!!function(){try{var e=P.resolve(1),t=(e.constructor={})[n("./_wks")("species")]=function(e){e(o,o)};return(T||"function"==typeof PromiseRejectionEvent)&&e.then(o)instanceof t&&0!==S.indexOf("6.6")&&-1===E.indexOf("Chrome/66")}catch(e){}}(),A=function(i){w.call(f,function(){var e,t,n,o=i._v,r=I(i);if(r&&(e=k(function(){T?C.emit("unhandledRejection",o,i):(t=f.onunhandledrejection)?t({promise:i,reason:o}):(n=f.console)&&n.error&&n.error("Unhandled promise rejection",o)}),i._h=T||I(i)?2:1),i._a=void 0,r&&e.e)throw e.v})},I=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(f,function(){var e;T?C.emit("rejectionHandled",t):(e=f.onrejectionhandled)&&e({promise:t,reason:t._v})})},F=function(e){var n,o=this;if(!o._d){o._d=!0,o=o._w||o;try{if(o===e)throw K("Promise can't be resolved itself");(n=d(e))?x(function(){var t={_w:o,_d:!1};try{n.call(e,p(F,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(o._v=e,o._s=1,r(o,!1))}catch(e){i.call({_w:o,_d:!1},e)}}};L||(P=function(e){g(this,P,B,"_h"),m(e),s.call(this);try{e(p(F,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n("./_redefine-all")(P.prototype,{then:function(e,t){var n=M(b(this,P));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=T?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&r(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),c=function(){var e=new s;this.promise=e,this.resolve=p(F,e,1),this.reject=p(i,e,1)},D.f=M=function(e){return e===P||e===u?new c:a(e)}),y(y.G+y.W+y.F*!L,{Promise:P}),n("./_set-to-string-tag")(P,B),n("./_set-species")(B),u=n("./_core")[B],y(y.S+y.F*!L,B,{reject:function(e){var t=M(this);return(0,t.reject)(e),t.promise}}),y(y.S+y.F*(l||!L),B,{resolve:function(e){return j(l&&this===u?P:this,e)}}),y(y.S+y.F*!(L&&n("./_iter-detect")(function(e){P.all(e).catch(o)})),B,{all:function(e){var s=this,t=M(s),a=t.resolve,c=t.reject,n=k(function(){var o=[],r=0,i=1;_(e,!1,function(e){var t=r++,n=!1;o.push(void 0),i++,s.resolve(e).then(function(e){n||(n=!0,o[t]=e,--i||a(o))},c)}),--i||a(o)});return n.e&&c(n.v),t.promise},race:function(e){var t=this,n=M(t),o=n.reject,r=k(function(){_(e,!1,function(e){t.resolve(e).then(n.resolve,o)})});return r.e&&o(r.v),n.promise}})},{"./_a-function":3,"./_an-instance":6,"./_classof":14,"./_core":16,"./_ctx":18,"./_export":24,"./_for-of":28,"./_global":30,"./_is-object":40,"./_iter-detect":44,"./_library":47,"./_microtask":49,"./_new-promise-capability":50,"./_perform":64,"./_promise-resolve":65,"./_redefine-all":67,"./_set-species":72,"./_set-to-string-tag":73,"./_species-constructor":76,"./_task":80,"./_user-agent":92,"./_wks":95}],106:[function(e,t,n){"use strict";var o=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:o!==/./.exec},{exec:o})},{"./_export":24,"./_regexp-exec":70}],107:[function(e,t,n){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":20,"./_flags":27,"./_object-dp":52}],108:[function(e,t,n){"use strict";var d=e("./_an-object"),f=e("./_to-length"),p=e("./_advance-string-index"),h=e("./_regexp-exec-abstract");e("./_fix-re-wks")("match",1,function(o,r,u,l){return[function(e){var t=o(this),n=null==e?void 0:e[r];return void 0!==n?n.call(e,t):new RegExp(e)[r](String(t))},function(e){var t=l(u,e,this);if(t.done)return t.value;var n=d(e),o=String(this);if(!n.global)return h(n,o);for(var r,i=n.unicode,s=[],a=n.lastIndex=0;null!==(r=h(n,o));){var c=String(r[0]);""===(s[a]=c)&&(n.lastIndex=p(o,f(n.lastIndex),i)),a++}return 0===a?null:s}]})},{"./_advance-string-index":5,"./_an-object":7,"./_fix-re-wks":26,"./_regexp-exec-abstract":69,"./_to-length":85}],109:[function(t,e,n){"use strict";t("./es6.regexp.flags");function o(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var r=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",c=/./[a];t("./_fails")(function(){return"/a/b"!=c.call({source:"a",flags:"b"})})?o(function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):c.name!=a&&o(function(){return c.call(this)})},{"./_an-object":7,"./_descriptors":20,"./_fails":25,"./_flags":27,"./_redefine":68,"./es6.regexp.flags":107}],110:[function(e,t,n){"use strict";var o=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=o(t,n),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":43,"./_string-at":77}],111:[function(e,t,n){"use strict";function o(e){var t=Y[e]=O(F[z]);return t._k=e,t}function r(e,t){k(e);for(var n,o=x(t=B(t)),r=0,i=o.length;r<i;)te(e,n=o[r++],t[n]);return e}function i(e){var t=V.call(this,e=K(e,!0));return!(this===q&&l(Y,e)&&!l(X,e))&&(!(t||!l(this,e)||!l(Y,e)||l(this,H)&&this[H][e])||t)}function s(e,t){if(e=B(e),t=K(t,!0),e!==q||!l(Y,t)||l(X,t)){var n=A(e,t);return!n||!l(Y,t)||l(e,H)&&e[H][t]||(n.enumerable=!0),n}}function a(e){for(var t,n=N(B(e)),o=[],r=0;n.length>r;)l(Y,t=n[r++])||t==H||t==h||o.push(t);return o}function c(e){for(var t,n=e===q,o=N(n?X:B(e)),r=[],i=0;o.length>i;)!l(Y,t=o[i++])||n&&!l(q,t)||r.push(Y[t]);return r}var u=e("./_global"),l=e("./_has"),d=e("./_descriptors"),f=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,y=e("./_fails"),v=e("./_shared"),m=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),x=e("./_enum-keys"),D=e("./_is-array"),k=e("./_an-object"),E=e("./_is-object"),j=e("./_to-object"),B=e("./_to-iobject"),K=e("./_to-primitive"),C=e("./_property-desc"),O=e("./_object-create"),S=e("./_object-gopn-ext"),P=e("./_object-gopd"),T=e("./_object-gops"),M=e("./_object-dp"),L=e("./_object-keys"),A=P.f,I=M.f,N=S.f,F=u.Symbol,R=u.JSON,U=R&&R.stringify,z="prototype",H=_("_hidden"),G=_("toPrimitive"),V={}.propertyIsEnumerable,W=v("symbol-registry"),Y=v("symbols"),X=v("op-symbols"),q=Object[z],J="function"==typeof F&&!!T.f,$=u.QObject,Q=!$||!$[z]||!$[z].findChild,Z=d&&y(function(){return 7!=O(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(e,t,n){var o=A(q,t);o&&delete q[t],I(e,t,n),o&&e!==q&&I(q,t,o)}:I,ee=J&&"symbol"==typeof F.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof F},te=function(e,t,n){return e===q&&te(X,t,n),k(e),t=K(t,!0),k(n),l(Y,t)?(n.enumerable?(l(e,H)&&e[H][t]&&(e[H][t]=!1),n=O(n,{enumerable:C(0,!1)})):(l(e,H)||I(e,H,C(1,{})),e[H][t]=!0),Z(e,t,n)):I(e,t,n)};J||(p((F=function(e){if(this instanceof F)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),n=function(e){this===q&&n.call(X,e),l(this,H)&&l(this[H],t)&&(this[H][t]=!1),Z(this,t,C(1,e))};return d&&Q&&Z(q,t,{configurable:!0,set:n}),o(t)})[z],"toString",function(){return this._k}),P.f=s,M.f=te,e("./_object-gopn").f=S.f=a,e("./_object-pie").f=i,T.f=c,d&&!e("./_library")&&p(q,"propertyIsEnumerable",i,!0),b.f=function(e){return o(_(e))}),f(f.G+f.W+f.F*!J,{Symbol:F});for(var ne="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),oe=0;ne.length>oe;)_(ne[oe++]);for(var re=L(_.store),ie=0;re.length>ie;)w(re[ie++]);f(f.S+f.F*!J,"Symbol",{for:function(e){return l(W,e+="")?W[e]:W[e]=F(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in W)if(W[t]===e)return t},useSetter:function(){Q=!0},useSimple:function(){Q=!1}}),f(f.S+f.F*!J,"Object",{create:function(e,t){return void 0===t?O(e):r(O(e),t)},defineProperty:te,defineProperties:r,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:c});var se=y(function(){T.f(1)});f(f.S+f.F*se,"Object",{getOwnPropertySymbols:function(e){return T.f(j(e))}}),R&&f(f.S+f.F*(!J||y(function(){var e=F();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,n,o=[e],r=1;r<arguments.length;)o.push(arguments[r++]);if(n=t=o[1],(E(t)||void 0!==e)&&!ee(e))return D(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!ee(t))return t}),o[1]=t,U.apply(R,o)}}),F[z][G]||e("./_hide")(F[z],G,F[z].valueOf),m(F,"Symbol"),m(Math,"Math",!0),m(u.JSON,"JSON",!0)},{"./_an-object":7,"./_descriptors":20,"./_enum-keys":23,"./_export":24,"./_fails":25,"./_global":30,"./_has":31,"./_hide":32,"./_is-array":39,"./_is-object":40,"./_library":47,"./_meta":48,"./_object-create":51,"./_object-dp":52,"./_object-gopd":54,"./_object-gopn":56,"./_object-gopn-ext":55,"./_object-gops":57,"./_object-keys":60,"./_object-pie":61,"./_property-desc":66,"./_redefine":68,"./_set-to-string-tag":73,"./_shared":75,"./_to-iobject":84,"./_to-object":86,"./_to-primitive":87,"./_uid":91,"./_wks":95,"./_wks-define":93,"./_wks-ext":94}],112:[function(e,t,n){e("./_typed-array")("Float32",4,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":88}],113:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}})},{"./_typed-array":88}],114:[function(e,t,n){e("./_typed-array")("Uint8",1,function(o){return function(e,t,n){return o(this,e,t,n)}},!0)},{"./_typed-array":88}],115:[function(e,t,n){e("./_wks-define")("asyncIterator")},{"./_wks-define":93}],116:[function(e,t,n){for(var o=e("./es6.array.iterator"),r=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),c=e("./_iterators"),u=e("./_wks"),l=u("iterator"),d=u("toStringTag"),f=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=r(p),y=0;y<h.length;y++){var v,m=h[y],g=p[m],_=s[m],b=_&&_.prototype;if(b&&(b[l]||a(b,l,f),b[d]||a(b,d,m),c[m]=f,g))for(v in o)b[v]||i(b,v,o[v],!0)}},{"./_global":30,"./_hide":32,"./_iterators":46,"./_object-keys":60,"./_redefine":68,"./_wks":95,"./es6.array.iterator":99}],117:[function(e,t,n){"use strict";var o=t.exports={};o.isIE=function(e){return(-1!==(t=navigator.userAgent.toLowerCase()).indexOf("msie")||-1!==t.indexOf("trident")||-1!==t.indexOf(" edge/"))&&(!e||e===function(){for(var e=3,t=document.createElement("div"),n=t.getElementsByTagName("i");t.innerHTML="\x3c!--[if gt IE "+ ++e+"]><i></i><![endif]--\x3e",n[0];);return 4<e?e:void 0}());var t},o.isLegacyOpera=function(){return!!window.opera}},{}],118:[function(e,t,n){"use strict";(t.exports={}).forEach=function(e,t){for(var n=0;n<e.length;n++){var o=t(e[n]);if(o)return o}}},{}],119:[function(e,t,n){"use strict";var m=e("../browser-detector");t.exports=function(p){var h=(p=p||{}).reporter,y=p.batchProcessor,v=p.stateHandler.getState;if(!h)throw new Error("Missing required dependency: reporter.");function r(e){return v(e).object}return{makeDetectable:function(i,e,t){var n,o,r,s,a,c,u,l,d;function f(){function e(){if("static"===u.position){n.style.setProperty("position","relative",i.important?"important":"");var e=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style.setProperty(o,"0",i.important?"important":""))};e(h,n,u,"top"),e(h,n,u,"right"),e(h,n,u,"bottom"),e(h,n,u,"left")}}""!==u.position&&(e(),c=!0);var t=document.createElement("object");t.style.cssText=a,t.tabIndex=-1,t.type="text/html",t.setAttribute("aria-hidden","true"),t.onload=function(){c||e(),function e(t,n){if(!t.contentDocument){var o=v(t);return o.checkForObjectDocumentTimeoutId&&window.clearTimeout(o.checkForObjectDocumentTimeoutId),void(o.checkForObjectDocumentTimeoutId=setTimeout(function(){o.checkForObjectDocumentTimeoutId=0,e(t,n)},100))}n(t.contentDocument)}(this,function(){o(n)})},m.isIE()||(t.data="about:blank"),v(n)&&(n.appendChild(t),v(n).object=t,m.isIE()&&(t.data="about:blank"))}t||(t=e,e=i,i=null),i=i||{},m.isIE(8)?t(e):(n=e,o=t,r=["display: block","position: absolute","top: 0","left: 0","width: 100%","height: 100%","border: none","padding: 0","margin: 0","opacity: 0","z-index: -1000","pointer-events: none"],s=p.important?" !important; ":"; ",a=(r.join(s)+s).trim(),c=!1,u=window.getComputedStyle(n),l=n.offsetWidth,d=n.offsetHeight,v(n).startSize={width:l,height:d},y?y.add(f):f())},addListener:function(e,t){function n(){t(e)}if(m.isIE(8))v(e).object={proxy:n},e.attachEvent("onresize",n);else{var o=r(e);if(!o)throw new Error("Element is not detectable by this strategy.");o.contentDocument.defaultView.addEventListener("resize",n)}},uninstall:function(e){if(v(e)){var t=r(e);t&&(m.isIE(8)?e.detachEvent("onresize",t.proxy):e.removeChild(t),v(e).checkForObjectDocumentTimeoutId&&window.clearTimeout(v(e).checkForObjectDocumentTimeoutId),delete v(e).object)}}}}},{"../browser-detector":117}],120:[function(e,t,n){"use strict";var S=e("../collection-utils").forEach;t.exports=function(n){var E=(n=n||{}).reporter,m=n.batchProcessor,j=n.stateHandler.getState,g=(n.stateHandler.hasState,n.idHandler);if(!m)throw new Error("Missing required dependency: batchProcessor");if(!E)throw new Error("Missing required dependency: reporter.");var B=function(){var e=document.createElement("div");e.style.cssText=C(["position: absolute","width: 1000px","height: 1000px","visibility: hidden","margin: 0","padding: 0"]);var t=document.createElement("div");t.style.cssText=C(["position: absolute","width: 500px","height: 500px","overflow: scroll","visibility: none","top: -1500px","left: -1500px","visibility: hidden","margin: 0","padding: 0"]),t.appendChild(e),document.body.insertBefore(t,document.body.firstChild);var n=500-t.clientWidth,o=500-t.clientHeight;return document.body.removeChild(t),{width:n,height:o}}(),K="erd_scroll_detection_container";function e(e){!function(o,r,e){if(!o.getElementById(r)){var t=e+"_animation",n=e+"_animation_active",i="/* Created by the element-resize-detector library. */\n";i+="."+e+" > div::-webkit-scrollbar { "+C(["display: none"])+" }\n\n",i+="."+n+" { "+C(["-webkit-animation-duration: 0.1s","animation-duration: 0.1s","-webkit-animation-name: "+t,"animation-name: "+t])+" }\n",i+="@-webkit-keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n",function(e,t){t=t||function(e){o.head.appendChild(e)};var n=o.createElement("style");n.innerHTML=e,n.id=r,t(n)}(i+="@keyframes "+t+" { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }")}}(e,"erd_scroll_detection_scrollbar_style",K)}function C(e){var t=n.important?" !important; ":"; ";return(e.join(t)+t).trim()}function O(e,t,n){if(e.addEventListener)e.addEventListener(t,n);else{if(!e.attachEvent)return E.error("[scroll] Don't know how to add event listeners.");e.attachEvent("on"+t,n)}}function o(e,t,n){if(e.removeEventListener)e.removeEventListener(t,n);else{if(!e.detachEvent)return E.error("[scroll] Don't know how to remove event listeners.");e.detachEvent("on"+t,n)}}function _(e){return j(e).container.childNodes[0].childNodes[0].childNodes[0]}function b(e){return j(e).container.childNodes[0].childNodes[0].childNodes[1]}return e(window.document),{makeDetectable:function(w,x,e){function D(){if(w.debug){var e=Array.prototype.slice.call(arguments);if(e.unshift(g.get(x),"Scroll: "),E.log.apply)E.log.apply(null,e);else for(var t=0;t<e.length;t++)E.log(e[t])}}function r(e){var t=j(e).container.childNodes[0],n=window.getComputedStyle(t);return!n.width||-1===n.width.indexOf("px")}function t(){var e=window.getComputedStyle(x),t={};return t.position=e.position,t.width=x.offsetWidth,t.height=x.offsetHeight,t.top=e.top,t.right=e.right,t.bottom=e.bottom,t.left=e.left,t.widthCSS=e.width,t.heightCSS=e.height,t}function n(){if(D("storeStyle invoked."),j(x)){var e=t();j(x).style=e}else D("Aborting because element has been uninstalled")}function a(e,t,n){j(e).lastWidth=t,j(e).lastHeight=n}function u(){return 2*B.width+1}function l(){return 2*B.height+1}function d(e){return e+10+u()}function f(e){return e+10+l()}function c(e,t,n){var o=_(e),r=b(e),i=d(t),s=f(n),a=2*t+u(),c=2*n+l();o.scrollLeft=i,o.scrollTop=s,r.scrollLeft=a,r.scrollTop=c}function k(){var e=j(x).container;if(!e){(e=document.createElement("div")).className=K,e.style.cssText=C(["visibility: hidden","display: inline","width: 0px","height: 0px","z-index: -1","overflow: hidden","margin: 0","padding: 0"]),j(x).container=e,e.className+=" "+K+"_animation_active",x.appendChild(e);var t=function(){j(x).onRendered&&j(x).onRendered()};O(e,"animationstart",t),j(x).onAnimationStart=t}return e}function o(){if(D("Injecting elements"),j(x)){!function(){var e=j(x).style;if("static"===e.position){x.style.setProperty("position","relative",w.important?"important":"");var t=function(e,t,n,o){var r=n[o];"auto"!==r&&"0"!==r.replace(/[^-\d\.]/g,"")&&(e.warn("An element that is positioned static has style."+o+"="+r+" which is ignored due to the static positioning. The element will need to be positioned relative, so the style."+o+" will be set to 0. Element: ",t),t.style[o]=0)};t(E,x,e,"top"),t(E,x,e,"right"),t(E,x,e,"bottom"),t(E,x,e,"left")}}();var e=j(x).container;e=e||k();var t,n,o,r,i=B.width,s=B.height,a=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden","width: 100%","height: 100%","left: 0px","top: 0px"]),c=C(["position: absolute","flex: none","overflow: hidden","z-index: -1","visibility: hidden"].concat(["left: "+(t=(t=-(1+i))?t+"px":"0"),"top: "+(n=(n=-(1+s))?n+"px":"0"),"right: "+(r=(r=-i)?r+"px":"0"),"bottom: "+(o=(o=-s)?o+"px":"0")])),u=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),l=C(["position: absolute","flex: none","overflow: scroll","z-index: -1","visibility: hidden","width: 100%","height: 100%"]),d=C(["position: absolute","left: 0","top: 0"]),f=C(["position: absolute","width: 200%","height: 200%"]),p=document.createElement("div"),h=document.createElement("div"),y=document.createElement("div"),v=document.createElement("div"),m=document.createElement("div"),g=document.createElement("div");p.dir="ltr",p.style.cssText=a,p.className=K,h.className=K,h.style.cssText=c,y.style.cssText=u,v.style.cssText=d,m.style.cssText=l,g.style.cssText=f,y.appendChild(v),m.appendChild(g),h.appendChild(y),h.appendChild(m),p.appendChild(h),e.appendChild(p),O(y,"scroll",_),O(m,"scroll",b),j(x).onExpandScroll=_,j(x).onShrinkScroll=b}else D("Aborting because element has been uninstalled");function _(){j(x).onExpand&&j(x).onExpand()}function b(){j(x).onShrink&&j(x).onShrink()}}function i(){function i(e,t,n){var o=_(e).childNodes[0],r=d(t),i=f(n);o.style.setProperty("width",r+"px",w.important?"important":""),o.style.setProperty("height",i+"px",w.important?"important":"")}function n(e){var n=x.offsetWidth,o=x.offsetHeight,r=n!==j(x).lastWidth||o!==j(x).lastHeight;D("Storing current size",n,o),a(x,n,o),m.add(0,function(){if(r)if(j(x))if(s()){if(w.debug){var e=x.offsetWidth,t=x.offsetHeight;e===n&&t===o||E.warn(g.get(x),"Scroll: Size changed before updating detector elements.")}i(x,n,o)}else D("Aborting because element container has not been initialized");else D("Aborting because element has been uninstalled")}),m.add(1,function(){j(x)?s()?c(x,n,o):D("Aborting because element container has not been initialized"):D("Aborting because element has been uninstalled")}),r&&e&&m.add(2,function(){j(x)?s()?e():D("Aborting because element container has not been initialized"):D("Aborting because element has been uninstalled")})}function s(){return j(x).container}function o(){D("notifyListenersIfNeeded invoked");var e=j(x);return void 0===j(x).lastNotifiedWidth&&e.lastWidth===e.startSize.width&&e.lastHeight===e.startSize.height?D("Not notifying: Size is the same as the start size, and there has been no notification yet."):e.lastWidth===e.lastNotifiedWidth&&e.lastHeight===e.lastNotifiedHeight?D("Not notifying: Size already notified"):(D("Current size not notified, notifying..."),e.lastNotifiedWidth=e.lastWidth,e.lastNotifiedHeight=e.lastHeight,void S(j(x).listeners,function(e){e(x)}))}function e(){D("Scroll detected."),r(x)?D("Scroll event fired while unrendered. Ignoring..."):n(o)}if(D("registerListenersAndPositionElements invoked."),j(x)){j(x).onRendered=function(){if(D("startanimation triggered."),r(x))D("Ignoring since element is still unrendered...");else{D("Element rendered.");var e=_(x),t=b(x);0!==e.scrollLeft&&0!==e.scrollTop&&0!==t.scrollLeft&&0!==t.scrollTop||(D("Scrollbars out of sync. Updating detector elements..."),n(o))}},j(x).onExpand=e,j(x).onShrink=e;var t=j(x).style;i(x,t.width,t.height)}else D("Aborting because element has been uninstalled")}function s(){if(D("finalizeDomMutation invoked."),j(x)){var e=j(x).style;a(x,e.width,e.height),c(x,e.width,e.height)}else D("Aborting because element has been uninstalled")}function p(){e(x)}function h(){var e;D("Installing..."),j(x).listeners=[],e=t(),j(x).startSize={width:e.width,height:e.height},D("Element start size",j(x).startSize),m.add(0,n),m.add(1,o),m.add(2,i),m.add(3,s),m.add(4,p)}var y,v;e||(e=x,x=w,w=null),w=w||{},D("Making detectable..."),(v=y=x)!==v.ownerDocument.body&&!v.ownerDocument.body.contains(v)||null===window.getComputedStyle(y)?(D("Element is detached"),k(),D("Waiting until element is attached..."),j(x).onRendered=function(){D("Element is now attached"),h()}):h()},addListener:function(e,t){if(!j(e).listeners.push)throw new Error("Cannot add listener to an element that is not detectable.");j(e).listeners.push(t)},uninstall:function(e){var t=j(e);t&&(t.onExpandScroll&&o(_(e),"scroll",t.onExpandScroll),t.onShrinkScroll&&o(b(e),"scroll",t.onShrinkScroll),t.onAnimationStart&&o(t.container,"animationstart",t.onAnimationStart),t.container&&e.removeChild(t.container))},initDocument:e}}},{"../collection-utils":118}],121:[function(e,t,n){"use strict";var b=e("./collection-utils").forEach,a=e("./element-utils"),c=e("./listener-handler"),u=e("./id-generator"),l=e("./id-handler"),d=e("./reporter"),f=e("./browser-detector"),w=e("batch-processor"),x=e("./state-handler"),D=e("./detection-strategy/object.js"),k=e("./detection-strategy/scroll.js");function E(e){return Array.isArray(e)||void 0!==e.length}function j(e){if(Array.isArray(e))return e;var t=[];return b(e,function(e){t.push(e)}),t}function B(e){return e&&1===e.nodeType}function K(e,t,n){var o=e[t];return null==o&&void 0!==n?n:o}t.exports=function(t){var n;if((t=t||{}).idHandler)n={get:function(e){return t.idHandler.get(e,!0)},set:t.idHandler.set};else{var e=u(),o=l({idGenerator:e,stateHandler:x});n=o}var p=t.reporter;p=p||d(!1===p);var r=K(t,"batchProcessor",w({reporter:p})),h={};h.callOnAdd=!!K(t,"callOnAdd",!0),h.debug=!!K(t,"debug",!1);var y,v=c(n),m=a({stateHandler:x}),i=K(t,"strategy","object"),g=K(t,"important",!1),s={reporter:p,batchProcessor:r,stateHandler:x,idHandler:n,important:g};if("scroll"===i&&(f.isLegacyOpera()?(p.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy."),i="object"):f.isIE(9)&&(p.warn("Scroll strategy is not supported on IE9. Changing to object strategy."),i="object")),"scroll"===i)y=k(s);else{if("object"!==i)throw new Error("Invalid strategy name: "+i);y=D(s)}var _={};return{listenTo:function(e,i,s){function a(t){var e=v.get(t);b(e,function(e){e(t)})}function c(e,t,n){v.add(t,n),e&&n(t)}if(s||(s=i,i=e,e={}),!i)throw new Error("At least one element required.");if(!s)throw new Error("Listener required.");if(B(i))i=[i];else{if(!E(i))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");i=j(i)}var u=0,l=K(e,"callOnAdd",h.callOnAdd),d=K(e,"onReady",function(){}),f=K(e,"debug",h.debug);b(i,function(e){x.getState(e)||(x.initState(e),n.set(e));var r=n.get(e);if(f&&p.log("Attaching listener to element",r,e),!m.isDetectable(e))return f&&p.log(r,"Not detectable."),m.isBusy(e)?(f&&p.log(r,"System busy making it detectable"),c(l,e,s),_[r]=_[r]||[],void _[r].push(function(){++u===i.length&&d()})):(f&&p.log(r,"Making detectable..."),m.markBusy(e,!0),y.makeDetectable({debug:f,important:g},e,function(e){if(f&&p.log(r,"onElementDetectable"),x.getState(e)){m.markAsDetectable(e),m.markBusy(e,!1),y.addListener(e,a),c(l,e,s);var t=x.getState(e);if(t&&t.startSize){var n=e.offsetWidth,o=e.offsetHeight;t.startSize.width===n&&t.startSize.height===o||a(e)}_[r]&&b(_[r],function(e){e()})}else f&&p.log(r,"Element uninstalled before being detectable.");delete _[r],++u===i.length&&d()}));f&&p.log(r,"Already detecable, adding listener."),c(l,e,s),u++}),u===i.length&&d()},removeListener:v.removeListener,removeAllListeners:v.removeAllListeners,uninstall:function(e){if(!e)return p.error("At least one element is required.");if(B(e))e=[e];else{if(!E(e))return p.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");e=j(e)}b(e,function(e){v.removeAllListeners(e),y.uninstall(e),x.cleanState(e)})},initDocument:function(e){y.initDocument&&y.initDocument(e)}}}},{"./browser-detector":117,"./collection-utils":118,"./detection-strategy/object.js":119,"./detection-strategy/scroll.js":120,"./element-utils":122,"./id-generator":123,"./id-handler":124,"./listener-handler":125,"./reporter":126,"./state-handler":127,"batch-processor":1}],122:[function(e,t,n){"use strict";t.exports=function(e){var n=e.stateHandler.getState;return{isDetectable:function(e){var t=n(e);return t&&!!t.isDetectable},markAsDetectable:function(e){n(e).isDetectable=!0},isBusy:function(e){return!!n(e).busy},markBusy:function(e,t){n(e).busy=!!t}}}},{}],123:[function(e,t,n){"use strict";t.exports=function(){var e=1;return{generate:function(){return e++}}}},{}],124:[function(e,t,n){"use strict";t.exports=function(e){var o=e.idGenerator,r=e.stateHandler.getState;return{get:function(e){var t=r(e);return t&&void 0!==t.id?t.id:null},set:function(e){var t=r(e);if(!t)throw new Error("setId required the element to have a resize detection state.");var n=o.generate();return t.id=n}}}},{}],125:[function(e,t,n){"use strict";t.exports=function(o){var r={};function i(e){var t=o.get(e);return void 0!==t&&r[t]||[]}return{get:i,add:function(e,t){var n=o.get(e);r[n]||(r[n]=[]),r[n].push(t)},removeListener:function(e,t){for(var n=i(e),o=0,r=n.length;o<r;++o)if(n[o]===t){n.splice(o,1);break}},removeAllListeners:function(e){var t=i(e);t&&(t.length=0)}}}},{}],126:[function(e,t,n){"use strict";t.exports=function(e){function t(){}var n={log:t,warn:t,error:t};if(!e&&window.console){var o=function(e,n){e[n]=function(){var e=console[n];if(e.apply)e.apply(console,arguments);else for(var t=0;t<arguments.length;t++)e(arguments[t])}};o(n,"log"),o(n,"warn"),o(n,"error")}return n}},{}],127:[function(e,t,n){"use strict";var o="_erd";function r(e){return e[o]}t.exports={initState:function(e){return e[o]={},r(e)},getState:r,cleanState:function(e){delete e[o]}}},{}],128:[function(e,t,n){var o,r;o=window,r=function(){return o={},r.m=n=[function(e,t,n){"use strict";n.r(t);function S(e,t){var n=t.x-e.x,o=t.y-e.y;return Math.sqrt(n*n+o*o)}function P(e){return e*(Math.PI/180)}function r(e){f.has(e)&&clearTimeout(f.get(e)),f.set(e,setTimeout(e,100))}function i(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.addEventListener?e.addEventListener(o,n,!1):e.attachEvent&&e.attachEvent(o,n)}function o(e,t,n){for(var o,r=t.split(/[ ,]+/g),i=0;i<r.length;i+=1)o=r[i],e.removeEventListener?e.removeEventListener(o,n):e.detachEvent&&e.detachEvent(o,n)}function s(e){return e.preventDefault(),e.type.match(/^touch/)?e.changedTouches:e}function a(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}}function T(e,t){t.top||t.right||t.bottom||t.left?(e.style.top=t.top,e.style.right=t.right,e.style.bottom=t.bottom,e.style.left=t.left):(e.style.left=t.x+"px",e.style.top=t.y+"px")}function c(e,t,n){var o=p(e);for(var r in o)if(o.hasOwnProperty(r))if("string"==typeof t)o[r]=t+" "+n;else{for(var i="",s=0,a=t.length;s<a;s+=1)i+=t[s]+" "+n+", ";o[r]=i.slice(0,-2)}return o}function u(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function l(e,t){if(e.length)for(var n=0,o=e.length;n<o;n+=1)t(e[n]);else t(e)}var d,f=new Map,p=function(t){var n={};return n[t]="",["webkit","Moz","o"].forEach(function(e){n[e+t.charAt(0).toUpperCase()+t.slice(1)]=""}),n},h=!!("ontouchstart"in window),y=!!window.PointerEvent,v=!!window.MSPointerEvent,m={start:"mousedown",move:"mousemove",end:"mouseup"},g={};function _(){}y?d={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:v?d={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:h?(d={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},g=m):d=m,_.prototype.on=function(e,t){var n,o=e.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var r=0;r<o.length;r+=1)n=o[r],this._handlers_[n]=this._handlers_[n]||[],this._handlers_[n].push(t);return this},_.prototype.off=function(e,t){return this._handlers_=this._handlers_||{},void 0===e?this._handlers_={}:void 0===t?this._handlers_[e]=null:this._handlers_[e]&&0<=this._handlers_[e].indexOf(t)&&this._handlers_[e].splice(this._handlers_[e].indexOf(t),1),this},_.prototype.trigger=function(e,t){var n,o=this,r=e.split(/[ ,]+/g);o._handlers_=o._handlers_||{};for(var i=0;i<r.length;i+=1)n=r[i],o._handlers_[n]&&o._handlers_[n].length&&o._handlers_[n].forEach(function(e){e.call(o,{type:n,target:o},t)})},_.prototype.config=function(e){this.options=this.defaults||{},e&&(this.options=function(e,t){var n={};for(var o in e)e.hasOwnProperty(o)&&t.hasOwnProperty(o)?n[o]=t[o]:e.hasOwnProperty(o)&&(n[o]=e[o]);return n}(this.options,e))},_.prototype.bindEvt=function(e,t){var n=this;return n._domHandlers_=n._domHandlers_||{},n._domHandlers_[t]=function(){"function"==typeof n["on"+t]?n["on"+t].apply(n,arguments):console.warn('[WARNING] : Missing "on'+t+'" handler.')},i(e,d[t],n._domHandlers_[t]),g[t]&&i(e,g[t],n._domHandlers_[t]),n},_.prototype.unbindEvt=function(e,t){return this._domHandlers_=this._domHandlers_||{},o(e,d[t],this._domHandlers_[t]),g[t]&&o(e,g[t],this._domHandlers_[t]),delete this._domHandlers_[t],this};var b=_;function w(e,t){return this.identifier=t.identifier,this.position=t.position,this.frontPosition=t.frontPosition,this.collection=e,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1,shape:"circle"},this.config(t),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=w.id,w.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),setPosition:this.setPosition.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}w.prototype=new b,(w.constructor=w).id=0,w.prototype.buildEl=function(e){return this.ui={},this.options.dataOnly||(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front)),this},w.prototype.stylize=function(){if(this.options.dataOnly)return this;var e=this.options.fadeTime+"ms",t=function(){var e=p("borderRadius");for(var t in e)e.hasOwnProperty(t)&&(e[t]="50%");return e}(),n=c("transition","opacity",e),o={};return o.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},o.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},o.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5"},u(o.el,n),"circle"===this.options.shape&&u(o.back,t),u(o.front,t),this.applyStyles(o),this},w.prototype.applyStyles=function(e){for(var t in this.ui)if(this.ui.hasOwnProperty(t))for(var n in e[t])this.ui[t].style[n]=e[t][n];return this},w.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)||this.options.zone.appendChild(this.ui.el),this},w.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)||this.options.zone.removeChild(this.ui.el),this},w.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},w.prototype.show=function(e){var t=this;return t.options.dataOnly||(clearTimeout(t.removeTimeout),clearTimeout(t.showTimeout),clearTimeout(t.restTimeout),t.addToDom(),t.restCallback(),setTimeout(function(){t.ui.el.style.opacity=1},0),t.showTimeout=setTimeout(function(){t.trigger("shown",t.instance),"function"==typeof e&&e.call(this)},t.options.fadeTime)),t},w.prototype.hide=function(t){var n=this;return n.options.dataOnly||(n.ui.el.style.opacity=n.options.restOpacity,clearTimeout(n.removeTimeout),clearTimeout(n.showTimeout),clearTimeout(n.restTimeout),n.removeTimeout=setTimeout(function(){var e="dynamic"===n.options.mode?"none":"block";n.ui.el.style.display=e,"function"==typeof t&&t.call(n),n.trigger("hidden",n.instance)},n.options.fadeTime),n.options.restJoystick&&n.setPosition(t,{x:0,y:0})),n},w.prototype.setPosition=function(e,t){var n=this;n.frontPosition={x:t.x,y:t.y};var o=n.options.fadeTime+"ms",r={};r.front=c("transition",["top","left"],o);var i={front:{}};i.front={left:n.frontPosition.x+"px",top:n.frontPosition.y+"px"},n.applyStyles(r),n.applyStyles(i),n.restTimeout=setTimeout(function(){"function"==typeof e&&e.call(n),n.restCallback()},n.options.fadeTime)},w.prototype.restCallback=function(){var e={};e.front=c("transition","none",""),this.applyStyles(e),this.trigger("rested",this.instance)},w.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},w.prototype.computeDirection=function(e){var t,n,o,r=e.angle.radian,i=Math.PI/4,s=Math.PI/2;if(i<r&&r<3*i&&!e.lockX?t="up":-i<r&&r<=i&&!e.lockY?t="left":3*-i<r&&r<=-i&&!e.lockX?t="down":e.lockY||(t="right"),e.lockY||(n=-s<r&&r<s?"left":"right"),e.lockX||(o=0<r?"up":"down"),e.force>this.options.threshold){var a,c={};for(a in this.direction)this.direction.hasOwnProperty(a)&&(c[a]=this.direction[a]);var u={};for(a in this.direction={x:n,y:o,angle:t},e.direction=this.direction,c)c[a]===this.direction[a]&&(u[a]=!0);if(u.x&&u.y&&u.angle)return e;u.x&&u.y||this.trigger("plain",e),u.x||this.trigger("plain:"+n,e),u.y||this.trigger("plain:"+o,e),u.angle||this.trigger("dir dir:"+t,e)}else this.resetDirection();return e};var x=w;function D(e,t){return this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=e,this.id=D.id,D.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1,shape:"circle",dynamicPage:!1,follow:!1},this.config(t),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}D.prototype=new b,(D.constructor=D).id=0,D.prototype.prepareNipples=function(){var o=this.nipples;o.on=this.on.bind(this),o.off=this.off.bind(this),o.options=this.options,o.destroy=this.destroy.bind(this),o.ids=this.ids,o.id=this.id,o.processOnMove=this.processOnMove.bind(this),o.processOnEnd=this.processOnEnd.bind(this),o.get=function(e){if(void 0===e)return o[0];for(var t=0,n=o.length;t<n;t+=1)if(o[t].identifier===e)return o[t];return!1}},D.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},D.prototype.begin=function(){var e=this.options;if("static"===e.mode){var t=this.createNipple(e.position,this.manager.getIdentifier());t.add(),this.idles.push(t)}},D.prototype.createNipple=function(e,t){var n=this.manager.scroll,o={},r=this.options;if(e.x&&e.y)o={x:e.x-(n.x+this.box.left),y:e.y-(n.y+this.box.top)};else if(e.top||e.right||e.bottom||e.left){var i=document.createElement("DIV");i.style.display="hidden",i.style.top=e.top,i.style.right=e.right,i.style.bottom=e.bottom,i.style.left=e.left,i.style.position="absolute",r.zone.appendChild(i);var s=i.getBoundingClientRect();r.zone.removeChild(i),o=e,e={x:s.left+n.x,y:s.top+n.y}}var a=new x(this,{color:r.color,size:r.size,threshold:r.threshold,fadeTime:r.fadeTime,dataOnly:r.dataOnly,restJoystick:r.restJoystick,restOpacity:r.restOpacity,mode:r.mode,identifier:t,position:e,zone:r.zone,frontPosition:{x:0,y:0},shape:r.shape});return r.dataOnly||(T(a.ui.el,o),T(a.ui.front,a.frontPosition)),this.nipples.push(a),this.trigger("added "+a.identifier+":added",a),this.manager.trigger("added "+a.identifier+":added",a),this.bindNipple(a),a},D.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},D.prototype.bindNipple=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},D.prototype.pressureFn=function(t,n,e){var o=this,r=0;clearInterval(o.pressureIntervals[e]),o.pressureIntervals[e]=setInterval(function(){var e=t.force||t.pressure||t.webkitForce||0;e!==r&&(n.trigger("pressure",e),o.trigger("pressure "+n.identifier+":pressure",e),r=e)}.bind(o),100)},D.prototype.onstart=function(n){var o=this,t=o.options,r=n;return n=s(n),o.updateBox(),l(n,function(e){o.actives.length<t.maxNumberOfNipples?o.processOnStart(e):r.type.match(/^touch/)&&(Object.keys(o.manager.ids).forEach(function(t){if(Object.values(r.touches).findIndex(function(e){return e.identifier===t})<0){var e=[n[0]];e.identifier=t,o.processOnEnd(e)}}),o.actives.length<t.maxNumberOfNipples&&o.processOnStart(e))}),o.manager.bindDocument(),!1},D.prototype.processOnStart=function(t){var e,n=this,o=n.options,r=n.manager.getIdentifier(t),i=t.force||t.pressure||t.webkitForce||0,s={x:t.pageX,y:t.pageY},a=n.getOrCreate(r,s);a.identifier!==r&&n.manager.removeIdentifier(a.identifier),a.identifier=r;function c(e){e.trigger("start",e),n.trigger("start "+e.id+":start",e),e.show(),0<i&&n.pressureFn(t,e,e.identifier),n.processOnMove(t)}if(0<=(e=n.idles.indexOf(a))&&n.idles.splice(e,1),n.actives.push(a),n.ids.push(a.identifier),"semi"!==o.mode)c(a);else{if(!(S(s,a.position)<=o.catchDistance))return a.destroy(),void n.processOnStart(t);c(a)}return a},D.prototype.getOrCreate=function(e,t){var n,o=this.options;return/(semi|static)/.test(o.mode)?(n=this.idles[0])?(this.idles.splice(0,1),n):"semi"===o.mode?this.createNipple(t,e):(console.warn("Coudln't find the needed nipple."),!1):n=this.createNipple(t,e)},D.prototype.processOnMove=function(e){var t,n,o,r,i=this.options,s=this.manager.getIdentifier(e),a=this.nipples.get(s),c=this.manager.scroll;if(r=e,isNaN(r.buttons)?0!==r.pressure:0!==r.buttons){if(!a)return console.error("Found zombie joystick with ID "+s),void this.manager.removeIdentifier(s);if(i.dynamicPage){var u=a.el.getBoundingClientRect();a.position={x:c.x+u.left,y:c.y+u.top}}a.identifier=s;var l=a.options.size/2,d={x:e.pageX,y:e.pageY};i.lockX&&(d.y=a.position.y),i.lockY&&(d.x=a.position.x);var f,p,h,y,v,m,g,_,b,w=S(d,a.position),x=(p=(f=a.position).x-d.x,h=f.y-d.y,Math.atan2(h,p)*(180/Math.PI)),D=P(x),k=w/l,E={distance:w,position:d};if("circle"===a.options.shape?(y=Math.min(w,l),m=a.position,g=y,b={x:0,y:0},_=P(_=x),b.x=m.x-g*Math.cos(_),b.y=m.y-g*Math.sin(_),v=b):(t=d,n=a.position,o=l,v={x:Math.min(Math.max(t.x,n.x-o),n.x+o),y:Math.min(Math.max(t.y,n.y-o),n.y+o)},y=S(v,a.position)),i.follow){if(l<w){var j=d.x-v.x,B=d.y-v.y;a.position.x+=j,a.position.y+=B,a.el.style.top=a.position.y-(this.box.top+c.y)+"px",a.el.style.left=a.position.x-(this.box.left+c.x)+"px",w=S(d,a.position)}}else d=v,w=y;var K=d.x-a.position.x,C=d.y-a.position.y;a.frontPosition={x:K,y:C},i.dataOnly||T(a.ui.front,a.frontPosition);var O={identifier:a.identifier,position:d,force:k,pressure:e.force||e.pressure||e.webkitForce||0,distance:w,angle:{radian:D,degree:x},vector:{x:K/l,y:-C/l},raw:E,instance:a,lockX:i.lockX,lockY:i.lockY};(O=a.computeDirection(O)).angle={radian:P(180-x),degree:180-x},a.trigger("move",O),this.trigger("move "+a.id+":move",O)}else this.processOnEnd(e)},D.prototype.processOnEnd=function(e){var t=this,n=t.options,o=t.manager.getIdentifier(e),r=t.nipples.get(o),i=t.manager.removeIdentifier(r.identifier);r&&(n.dataOnly||r.hide(function(){"dynamic"===n.mode&&(r.trigger("removed",r),t.trigger("removed "+r.id+":removed",r),t.manager.trigger("removed "+r.id+":removed",r),r.destroy())}),clearInterval(t.pressureIntervals[r.identifier]),r.resetDirection(),r.trigger("end",r),t.trigger("end "+r.id+":end",r),0<=t.ids.indexOf(r.identifier)&&t.ids.splice(t.ids.indexOf(r.identifier),1),0<=t.actives.indexOf(r)&&t.actives.splice(t.actives.indexOf(r),1),/(semi|static)/.test(n.mode)?t.idles.push(r):0<=t.nipples.indexOf(r)&&t.nipples.splice(t.nipples.indexOf(r),1),t.manager.unbindDocument(),/(semi|static)/.test(n.mode)&&(t.manager.ids[i.id]=i.identifier))},D.prototype.onDestroyed=function(e,t){0<=this.nipples.indexOf(t)&&this.nipples.splice(this.nipples.indexOf(t),1),0<=this.actives.indexOf(t)&&this.actives.splice(this.actives.indexOf(t),1),0<=this.idles.indexOf(t)&&this.idles.splice(this.idles.indexOf(t),1),0<=this.ids.indexOf(t.identifier)&&this.ids.splice(this.ids.indexOf(t.identifier),1),this.manager.removeIdentifier(t.identifier),this.manager.unbindDocument()},D.prototype.destroy=function(){for(var e in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach(function(e){e.destroy()}),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(e)&&clearInterval(this.pressureIntervals[e]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var k=D;function E(e){var n=this;n.ids={},n.index=0,n.collections=[],n.scroll=a(),n.config(e),n.prepareCollections();function t(){var t;n.collections.forEach(function(e){e.forEach(function(e){t=e.el.getBoundingClientRect(),e.position={x:n.scroll.x+t.left,y:n.scroll.y+t.top}})})}i(window,"resize",function(){r(t)});function o(){n.scroll=a()}return i(window,"scroll",function(){r(o)}),n.collections}E.prototype=new b,(E.constructor=E).prototype.prepareCollections=function(){var e=this;e.collections.create=e.create.bind(e),e.collections.on=e.on.bind(e),e.collections.off=e.off.bind(e),e.collections.destroy=e.destroy.bind(e),e.collections.get=function(t){var n;return e.collections.every(function(e){return!(n=e.get(t))}),n}},E.prototype.create=function(e){return this.createCollection(e)},E.prototype.createCollection=function(e){var t=new k(this,e);return this.bindCollection(t),this.collections.push(t),t},E.prototype.bindCollection=function(e){function t(e,t){n=e.type+" "+t.id+":"+e.type,o.trigger(n,t)}var n,o=this;e.on("destroyed",o.onDestroyed.bind(o)),e.on("shown hidden rested dir plain",t),e.on("dir:up dir:right dir:down dir:left",t),e.on("plain:up plain:right plain:down plain:left",t)},E.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},E.prototype.unbindDocument=function(e){Object.keys(this.ids).length&&!0!==e||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},E.prototype.getIdentifier=function(e){var t;return e?void 0===(t=void 0===e.identifier?e.pointerId:e.identifier)&&(t=this.latest||0):t=this.index,void 0===this.ids[t]&&(this.ids[t]=this.index,this.index+=1),this.latest=t,this.ids[t]},E.prototype.removeIdentifier=function(e){var t={};for(var n in this.ids)if(this.ids[n]===e){t.id=n,t.identifier=this.ids[n],delete this.ids[n];break}return t},E.prototype.onmove=function(e){return this.onAny("move",e),!1},E.prototype.onend=function(e){return this.onAny("end",e),!1},E.prototype.oncancel=function(e){return this.onAny("end",e),!1},E.prototype.onAny=function(e,t){var n,o=this,r="processOn"+e.charAt(0).toUpperCase()+e.slice(1);return t=s(t),l(t,function(e){n=o.getIdentifier(e),l(o.collections,function(e,t,n){0<=n.ids.indexOf(t)&&(n[r](e),e._found_=!0)}.bind(null,e,n)),e._found_||o.removeIdentifier(n)}),!1},E.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach(function(e){e.destroy()}),this.off()},E.prototype.onDestroyed=function(e,t){if(this.collections.indexOf(t)<0)return!1;this.collections.splice(this.collections.indexOf(t),1)};var j=new E;t.default={create:function(e){return j.create(e)},factory:j}}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0).default;function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("nipplejs",[],r):"object"==typeof n?n.nipplejs=r():o.nipplejs=r()},{}],129:[function(e,t,v){"use strict";Object.defineProperty(v,"__esModule",{value:!0});var n,r=function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=(o.prototype.on=function(e,t){var n=this.listeners[e]||[];this.listeners[e]=n.concat([t])},o.prototype.triggerEvent=function(e,t){var n=this;(this.listeners[e]||[]).forEach(function(e){return e({target:n,event:t})})},o);function o(e){this.options=e,this.listeners={}}(n=v.NotyfArrayEvent||(v.NotyfArrayEvent={}))[n.Add=0]="Add",n[n.Remove=1]="Remove";var s,a=(c.prototype.push=function(e){this.notifications.push(e),this.updateFn(e,v.NotyfArrayEvent.Add,this.notifications)},c.prototype.splice=function(e,t){var n=this.notifications.splice(e,t)[0];return this.updateFn(n,v.NotyfArrayEvent.Remove,this.notifications),n},c.prototype.indexOf=function(e){return this.notifications.indexOf(e)},c.prototype.onUpdate=function(e){this.updateFn=e},c);function c(){this.notifications=[]}(s=v.NotyfEvent||(v.NotyfEvent={})).Dismiss="dismiss";var u={types:[{type:"success",className:"notyf__toast--success",backgroundColor:"#3dc763",icon:{className:"notyf__icon--success",tagName:"i"}},{type:"error",className:"notyf__toast--error",backgroundColor:"#ed3d3d",icon:{className:"notyf__icon--error",tagName:"i"}}],duration:2e3,ripple:!0,position:{x:"right",y:"bottom"},dismissible:!(s.Click="click")},l=(d.prototype.on=function(e,t){var n;this.events=r(r({},this.events),((n={})[e]=t,n))},d.prototype.update=function(e,t){t===v.NotyfArrayEvent.Add?this.addNotification(e):t===v.NotyfArrayEvent.Remove&&this.removeNotification(e)},d.prototype.removeNotification=function(e){var t,n,o=this,r=this._popRenderedNotification(e);r&&((t=r.node).classList.add("notyf__toast--disappear"),t.addEventListener(this.animationEndEventName,n=function(e){e.target===t&&(t.removeEventListener(o.animationEndEventName,n),o.container.removeChild(t))}))},d.prototype.addNotification=function(e){var t=this._renderNotification(e);this.notifications.push({notification:e,node:t}),this._announce(e.options.message||"Notification")},d.prototype._renderNotification=function(e){var t,n=this._buildNotificationCard(e),o=e.options.className;return o&&(t=n.classList).add.apply(t,o.split(" ")),this.container.appendChild(n),n},d.prototype._popRenderedNotification=function(e){for(var t=-1,n=0;n<this.notifications.length&&t<0;n++)this.notifications[n].notification===e&&(t=n);if(-1!==t)return this.notifications.splice(t,1)[0]},d.prototype.getXPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.x)||"right"},d.prototype.getYPosition=function(e){var t;return(null===(t=null==e?void 0:e.position)||void 0===t?void 0:t.y)||"bottom"},d.prototype.adjustContainerAlignment=function(e){var t=this.X_POSITION_FLEX_MAP[this.getXPosition(e)],n=this.Y_POSITION_FLEX_MAP[this.getYPosition(e)],o=this.container.style;o.setProperty("justify-content",n),o.setProperty("align-items",t)},d.prototype._buildNotificationCard=function(o){var e,r=this,t=o.options,n=t.icon;this.adjustContainerAlignment(t);var i=this._createHTLMElement({tagName:"div",className:"notyf__toast"}),s=this._createHTLMElement({tagName:"div",className:"notyf__ripple"}),a=this._createHTLMElement({tagName:"div",className:"notyf__wrapper"}),c=this._createHTLMElement({tagName:"div",className:"notyf__message"});c.innerHTML=t.message||"";var u=t.background||t.backgroundColor;if(n&&"object"==typeof n){var l=this._createHTLMElement({tagName:"div",className:"notyf__icon"}),d=this._createHTLMElement({tagName:n.tagName||"i",className:n.className,text:n.text}),f=null!==(e=n.color)&&void 0!==e?e:u;f&&(d.style.color=f),l.appendChild(d),a.appendChild(l)}if(a.appendChild(c),i.appendChild(a),u&&(t.ripple?(s.style.background=u,i.appendChild(s)):i.style.background=u),t.dismissible){var p=this._createHTLMElement({tagName:"div",className:"notyf__dismiss"}),h=this._createHTLMElement({tagName:"button",className:"notyf__dismiss-btn"});p.appendChild(h),a.appendChild(p),i.classList.add("notyf__toast--dismissible"),h.addEventListener("click",function(e){var t,n;null!==(n=(t=r.events)[v.NotyfEvent.Dismiss])&&void 0!==n&&n.call(t,{target:o,event:e}),e.stopPropagation()})}i.addEventListener("click",function(e){var t,n;return null===(n=(t=r.events)[v.NotyfEvent.Click])||void 0===n?void 0:n.call(t,{target:o,event:e})});var y="top"===this.getYPosition(t)?"upper":"lower";return i.classList.add("notyf__toast--"+y),i},d.prototype._createHTLMElement=function(e){var t=e.tagName,n=e.className,o=e.text,r=document.createElement(t);return n&&(r.className=n),r.textContent=o||null,r},d.prototype._createA11yContainer=function(){var e=this._createHTLMElement({tagName:"div",className:"notyf-announcer"});e.setAttribute("aria-atomic","true"),e.setAttribute("aria-live","polite"),e.style.border="0",e.style.clip="rect(0 0 0 0)",e.style.height="1px",e.style.margin="-1px",e.style.overflow="hidden",e.style.padding="0",e.style.position="absolute",e.style.width="1px",e.style.outline="0",document.body.appendChild(e),this.a11yContainer=e},d.prototype._announce=function(e){var t=this;this.a11yContainer.textContent="",setTimeout(function(){t.a11yContainer.textContent=e},100)},d.prototype._getAnimationEndEventName=function(){var e,t=document.createElement("_fake"),n={MozTransition:"animationend",OTransition:"oAnimationEnd",WebkitTransition:"webkitAnimationEnd",transition:"animationend"};for(e in n)if(void 0!==t.style[e])return n[e];return"animationend"},d);function d(){this.notifications=[],this.events={},this.X_POSITION_FLEX_MAP={left:"flex-start",center:"center",right:"flex-end"},this.Y_POSITION_FLEX_MAP={top:"flex-start",center:"center",bottom:"flex-end"};var e=document.createDocumentFragment(),t=this._createHTLMElement({tagName:"div",className:"notyf"});e.appendChild(t),document.body.appendChild(e),this.container=t,this.animationEndEventName=this._getAnimationEndEventName(),this._createA11yContainer()}var f=(p.prototype.error=function(e){var t=this.normalizeOptions("error",e);return this.open(t)},p.prototype.success=function(e){var t=this.normalizeOptions("success",e);return this.open(t)},p.prototype.open=function(t){var e=this.options.types.find(function(e){return e.type===t.type})||{},n=r(r({},e),t);this.assignProps(["ripple","position","dismissible"],n);var o=new i(n);return this._pushNotification(o),o},p.prototype.dismissAll=function(){for(;this.notifications.splice(0,1););},p.prototype.assignProps=function(e,t){var n=this;e.forEach(function(e){t[e]=null==t[e]?n.options[e]:t[e]})},p.prototype._pushNotification=function(e){var t=this;this.notifications.push(e);var n=void 0!==e.options.duration?e.options.duration:this.options.duration;n&&setTimeout(function(){return t._removeNotification(e)},n)},p.prototype._removeNotification=function(e){var t=this.notifications.indexOf(e);-1!==t&&this.notifications.splice(t,1)},p.prototype.normalizeOptions=function(e,t){var n={type:e};return"string"==typeof t?n.message=t:"object"==typeof t&&(n=r(r({},n),t)),n},p.prototype.registerTypes=function(e){var t=(e&&e.types||[]).slice();return u.types.map(function(n){var o=-1;t.forEach(function(e,t){e.type===n.type&&(o=t)});var e=-1!==o?t.splice(o,1)[0]:{};return r(r({},n),e)}).concat(t)},p);function p(e){var o=this;this.dismiss=this._removeNotification,this.notifications=new a,this.view=new l;var t=this.registerTypes(e);this.options=r(r({},u),e),this.options.types=t,this.notifications.onUpdate(function(e,t){return o.view.update(e,t)}),this.view.on(v.NotyfEvent.Dismiss,function(e){var t=e.target,n=e.event;o._removeNotification(t),t.triggerEvent(v.NotyfEvent.Dismiss,n)}),this.view.on(v.NotyfEvent.Click,function(e){var t=e.target,n=e.event;return t.triggerEvent(v.NotyfEvent.Click,n)})}v.DEFAULT_OPTIONS=u,v.Notyf=f,v.NotyfArray=a,v.NotyfNotification=i,v.NotyfView=l},{}],130:[function(e,t,n){var o=function(s){"use strict";var c,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},r=t.iterator||"@@iterator",n=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function a(e,t,n,o){var i,s,a,c,r=t&&t.prototype instanceof m?t:m,u=Object.create(r.prototype),l=new B(o||[]);return u._invoke=(i=e,s=n,a=l,c=f,function(e,t){if(c===h)throw new Error("Generator is already running");if(c===y){if("throw"===e)throw t;return C()}for(a.method=e,a.arg=t;;){var n=a.delegate;if(n){var o=k(n,a);if(o){if(o===v)continue;return o}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(c===f)throw c=y,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);c=h;var r=d(i,s,a);if("normal"===r.type){if(c=a.done?y:p,r.arg===v)continue;return{value:r.arg,done:a.done}}"throw"===r.type&&(c=y,a.method="throw",a.arg=r.arg)}}),u}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var f="suspendedStart",p="suspendedYield",h="executing",y="completed",v={};function m(){}function i(){}function u(){}var g={};g[r]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(K([])));b&&b!==e&&l.call(b,r)&&(g=b);var w=u.prototype=m.prototype=Object.create(g);function x(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function D(c,u){var t;this._invoke=function(n,o){function e(){return new u(function(e,t){!function t(e,n,o,r){var i=d(c[e],c,n);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?u.resolve(a.__await).then(function(e){t("next",e,o,r)},function(e){t("throw",e,o,r)}):u.resolve(a).then(function(e){s.value=e,o(s)},function(e){return t("throw",e,o,r)})}r(i.arg)}(n,o,e,t)})}return t=t?t.then(e,e):e()}}function k(e,t){var n=e.iterator[t.method];if(n===c){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=c,k(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=d(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var r=o.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=c),t.delegate=null,v):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function j(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function B(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function K(t){if(t){var e=t[r];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(l.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=c,e.done=!0,e};return o.next=o}}return{next:C}}function C(){return{value:c,done:!0}}return i.prototype=w.constructor=u,u.constructor=i,u[o]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,u):(e.__proto__=u,o in e||(e[o]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},x(D.prototype),D.prototype[n]=function(){return this},s.AsyncIterator=D,s.async=function(e,t,n,o,r){void 0===r&&(r=Promise);var i=new D(a(e,t,n,o),r);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(w),w[o]="Generator",w[r]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(n){var o=[];for(var e in n)o.push(e);return o.reverse(),function e(){for(;o.length;){var t=o.pop();if(t in n)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=K,B.prototype={constructor:B,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=c,this.done=!1,this.delegate=null,this.method="next",this.arg=c,this.tryEntries.forEach(j),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=c)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var o=this;function e(e,t){return i.type="throw",i.arg=n,o.next=e,t&&(o.method="next",o.arg=c),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t],i=r.completion;if("root"===r.tryLoc)return e("end");if(r.tryLoc<=this.prev){var s=l.call(r,"catchLoc"),a=l.call(r,"finallyLoc");if(s&&a){if(this.prev<r.catchLoc)return e(r.catchLoc,!0);if(this.prev<r.finallyLoc)return e(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return e(r.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return e(r.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;0<=n;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&l.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var r=o;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),j(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var r=o.arg;j(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:K(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=c),v}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=o}catch(e){Function("r","regeneratorRuntime = r")(o)}},{}],131:[function(e,t,n){var o,r;o=this,r=function(){return o={},r.m=n=[function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t);var r,i,s,u,l=(u=[{key:"bindMethods",value:function(e,t){var n,o=function(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e){if(e){if("string"==typeof e)return c(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?c(e,void 0):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){a=!0,i=e},f:function(){try{s||null==n.return||n.return()}finally{if(a)throw i}}}}(Object.getOwnPropertyNames(e.prototype));try{for(o.s();!(n=o.n()).done;){var r=n.value;"constructor"===r||"bindMethods"===r||(t[r]=t[r].bind(t))}}catch(e){o.e(e)}finally{o.f()}}}],o((s=d).prototype,[{key:"getButtonClass",value:function(e){var t=e.includes("{")&&e.includes("}")&&"{//}"!==e?"functionBtn":"standardBtn",n=e.replace("{","").replace("}",""),o="";return"standardBtn"!=t&&(o=" hg-button-".concat(n)),"hg-".concat(t).concat(o)}},{key:"getDefaultDiplay",value:function(){return{"{bksp}":"backspace","{backspace}":"backspace","{enter}":"< enter","{shift}":"shift","{shiftleft}":"shift","{shiftright}":"shift","{alt}":"alt","{s}":"shift","{tab}":"tab","{lock}":"caps","{capslock}":"caps","{accept}":"Submit","{space}":" ","{//}":" ","{esc}":"esc","{escape}":"esc","{f1}":"f1","{f2}":"f2","{f3}":"f3","{f4}":"f4","{f5}":"f5","{f6}":"f6","{f7}":"f7","{f8}":"f8","{f9}":"f9","{f10}":"f10","{f11}":"f11","{f12}":"f12","{numpaddivide}":"/","{numlock}":"lock","{arrowup}":"↑","{arrowleft}":"←","{arrowdown}":"↓","{arrowright}":"→","{prtscr}":"print","{scrolllock}":"scroll","{pause}":"pause","{insert}":"ins","{home}":"home","{pageup}":"up","{delete}":"del","{end}":"end","{pagedown}":"down","{numpadmultiply}":"*","{numpadsubtract}":"-","{numpadadd}":"+","{numpadenter}":"enter","{period}":".","{numpaddecimal}":".","{numpad0}":"0","{numpad1}":"1","{numpad2}":"2","{numpad3}":"3","{numpad4}":"4","{numpad5}":"5","{numpad6}":"6","{numpad7}":"7","{numpad8}":"8","{numpad9}":"9"}}},{key:"getButtonDisplayName",value:function(e,t,n){return(t=n?Object.assign({},this.getDefaultDiplay(),t):t||this.getDefaultDiplay())[e]||e}},{key:"getUpdatedInput",value:function(e,t,n){var o=3<arguments.length&&void 0!==arguments[3]?arguments[3]:n,r=4<arguments.length&&void 0!==arguments[4]&&arguments[4],i=this.getOptions(),s=[n,o,r],a=t;return("{bksp}"===e||"{backspace}"===e)&&0<a.length?a=this.removeAt.apply(this,[a].concat(s)):"{space}"===e?a=this.addStringAt.apply(this,[a," "].concat(s)):"{tab}"!==e||"boolean"==typeof i.tabCharOnTab&&!1===i.tabCharOnTab?"{enter}"!==e&&"{numpadenter}"!==e||!i.newLineOnEnter?e.includes("numpad")&&Number.isInteger(Number(e[e.length-2]))?a=this.addStringAt.apply(this,[a,e[e.length-2]].concat(s)):"{numpaddivide}"===e?a=this.addStringAt.apply(this,[a,"/"].concat(s)):"{numpadmultiply}"===e?a=this.addStringAt.apply(this,[a,"*"].concat(s)):"{numpadsubtract}"===e?a=this.addStringAt.apply(this,[a,"-"].concat(s)):"{numpadadd}"===e?a=this.addStringAt.apply(this,[a,"+"].concat(s)):"{numpaddecimal}"===e?a=this.addStringAt.apply(this,[a,"."].concat(s)):"{"!==e&&"}"!==e&&(e.includes("{")||e.includes("}"))||(a=this.addStringAt.apply(this,[a,e].concat(s))):a=this.addStringAt.apply(this,[a,"\n"].concat(s)):a=this.addStringAt.apply(this,[a,"\t"].concat(s)),a}},{key:"updateCaretPos",value:function(e,t){var n=this.updateCaretPosAction(e,t);this.dispatch(function(e){e.setCaretPosition(n)})}},{key:"updateCaretPosAction",value:function(e,t){var n=this.getOptions(),o=this.getCaretPosition();return t?0<o&&(o-=e):o+=e,n.debug&&console.log("Caret at:",o,"(".concat(this.keyboardDOMClass,")")),o}},{key:"addStringAt",value:function(e,t){var n,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:e.length,i=4<arguments.length&&void 0!==arguments[4]&&arguments[4];return o||0===o?(n=[e.slice(0,o),t,e.slice(r)].join(""),this.isMaxLengthReached()||i&&this.updateCaretPos(t.length)):n=e+t,n}},{key:"removeAt",value:function(e){var t,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:e.length,o=2<arguments.length&&void 0!==arguments[2]?arguments[2]:e.length,r=3<arguments.length&&void 0!==arguments[3]&&arguments[3];if(0===n&&0===o)return e;if(n===o){var i=/([\uD800-\uDBFF][\uDC00-\uDFFF])/g;n&&0<=n?e.substring(n-2,n).match(i)?(t=e.substr(0,n-2)+e.substr(n),r&&this.updateCaretPos(2,!0)):(t=e.substr(0,n-1)+e.substr(n),r&&this.updateCaretPos(1,!0)):e.slice(-2).match(i)?(t=e.slice(0,-2),r&&this.updateCaretPos(2,!0)):(t=e.slice(0,-1),r&&this.updateCaretPos(1,!0))}else t=e.slice(0,n)+e.slice(o),r&&this.dispatch(function(e){e.setCaretPosition(n)});return t}},{key:"handleMaxLength",value:function(e,t){var n=this.getOptions(),o=n.maxLength,r=e[n.inputName],i=t.length-1>=o;if(t.length<=r.length)return!1;if(Number.isInteger(o))return n.debug&&console.log("maxLength (num) reached:",i),this.maxLengthReached=i;if("object"===a(o)){var s=t.length-1>=o[n.inputName];return n.debug&&console.log("maxLength (obj) reached:",s),this.maxLengthReached=s}}},{key:"isMaxLengthReached",value:function(){return Boolean(this.maxLengthReached)}},{key:"isTouchDevice",value:function(){return"ontouchstart"in window||navigator.maxTouchPoints}},{key:"pointerEventsSupported",value:function(){return window.PointerEvent}},{key:"camelCase",value:function(e){return!!e&&e.toLowerCase().trim().split(/[.\-_\s]/g).reduce(function(e,t){return t.length?e+t[0].toUpperCase()+t.slice(1):e})}}]),o(s,u),d);function d(e){var t=e.getOptions,n=e.getCaretPosition,o=e.getCaretPositionEnd,r=e.dispatch;!function(e){if(!(e instanceof d))throw new TypeError("Cannot call a class as a function")}(this),this.getOptions=t,this.getCaretPosition=n,this.getCaretPositionEnd=o,this.dispatch=r,d.bindMethods(d,this)}i=function(){},"noop"in(r=l)?Object.defineProperty(r,"noop",{value:i,enumerable:!0,configurable:!0,writable:!0}):r.noop=i;var f=l;function p(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var h=(p(y.prototype,[{key:"handleHighlightKeyDown",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&(t.style.backgroundColor=n.physicalKeyboardHighlightBgColor||"#dadce4",t.style.color=n.physicalKeyboardHighlightTextColor||"black",n.physicalKeyboardHighlightPress&&(t.onpointerdown||t.onmousedown||t.ontouchstart||f.noop)())})}},{key:"handleHighlightKeyUp",value:function(e){var n=this.getOptions(),o=this.getSimpleKeyboardLayoutKey(e);this.dispatch(function(e){var t=e.getButtonElement(o)||e.getButtonElement("{".concat(o,"}"));t&&t.removeAttribute&&(t.removeAttribute("style"),n.physicalKeyboardHighlightPress&&(t.onpointerup||t.onmouseup||t.ontouchend||f.noop)())})}},{key:"getSimpleKeyboardLayoutKey",value:function(e){var t;return((t=e.code.includes("Numpad")||e.code.includes("Shift")||e.code.includes("Space")||e.code.includes("Backspace")||e.code.includes("Control")||e.code.includes("Alt")||e.code.includes("Meta")?e.code:e.key)!==t.toUpperCase()||"F"===e.code[0]&&Number.isInteger(Number(e.code[1]))&&e.code.length<=3)&&(t=t.toLowerCase()),t}}]),y);function y(e){var t=e.dispatch,n=e.getOptions;!function(e){if(!(e instanceof y))throw new TypeError("Cannot call a class as a function")}(this),this.dispatch=t,this.getOptions=n,f.bindMethods(y,this)}function _(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e){if(e){if("string"==typeof e)return v(e,void 0);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?v(e,void 0):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function m(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var b=(m(w.prototype,[{key:"setCaretPosition",value:function(e,t){this.caretPosition=e,this.caretPositionEnd=t||e}},{key:"handleButtonClicked",value:function(e){var t=this.options.debug;if("{//}"===e)return!1;"function"==typeof this.options.onKeyPress&&this.options.onKeyPress(e),this.input[this.options.inputName]||(this.input[this.options.inputName]="");var n=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd);if(this.input[this.options.inputName]!==n&&(!this.options.inputPattern||this.options.inputPattern&&this.inputPatternIsValid(n))){if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,n))return!1;this.input[this.options.inputName]=this.utilities.getUpdatedInput(e,this.input[this.options.inputName],this.caretPosition,this.caretPositionEnd,!0),t&&console.log("Input changed:",this.getAllInputs()),this.options.debug&&console.log("Caret at: ",this.getCaretPosition(),this.getCaretPositionEnd(),"(".concat(this.keyboardDOMClass,")")),this.options.syncInstanceInputs&&this.syncInstanceInputs(),"function"==typeof this.options.onChange&&this.options.onChange(this.getInput(this.options.inputName,!0)),"function"==typeof this.options.onChangeAll&&this.options.onChangeAll(this.getAllInputs())}t&&console.log("Key pressed:",e)}},{key:"handleButtonMouseDown",value:function(e,t){var n=this;this.options.preventMouseDownDefault&&t.preventDefault(),this.options.stopMouseDownPropagation&&t.stopPropagation(),t&&t.target.classList.add(this.activeButtonClass),this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdTimeout&&clearTimeout(this.holdTimeout),this.isMouseHold=!0,this.options.disableButtonHold||(this.holdTimeout=setTimeout(function(){(!n.isMouseHold||(e.includes("{")||e.includes("}"))&&"{delete}"!==e&&"{backspace}"!==e&&"{bksp}"!==e&&"{space}"!==e&&"{tab}"!==e)&&"{arrowright}"!==e&&"{arrowleft}"!==e&&"{arrowup}"!==e&&"{arrowdown}"!==e||(n.options.debug&&console.log("Button held:",e),n.handleButtonHold(e,t)),clearTimeout(n.holdTimeout)},500))}},{key:"handleButtonMouseUp",value:function(){var t=this,e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;n&&(this.options.preventMouseUpDefault&&n.preventDefault(),this.options.stopMouseUpPropagation&&n.stopPropagation()),this.recurseButtons(function(e){e.classList.remove(t.activeButtonClass)}),this.isMouseHold=!1,this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),e&&"function"==typeof this.options.onKeyReleased&&this.options.onKeyReleased(e)}},{key:"handleKeyboardContainerMouseDown",value:function(e){this.options.preventMouseDownDefault&&e.preventDefault()}},{key:"handleButtonHold",value:function(e){var t=this;this.holdInteractionTimeout&&clearTimeout(this.holdInteractionTimeout),this.holdInteractionTimeout=setTimeout(function(){t.isMouseHold?(t.handleButtonClicked(e),t.handleButtonHold(e)):clearTimeout(t.holdInteractionTimeout)},100)}},{key:"syncInstanceInputs",value:function(){var t=this;this.dispatch(function(e){e.replaceInput(t.input),e.setCaretPosition(t.caretPosition,t.caretPositionEnd)})}},{key:"clearInput",value:function(e){e=e||this.options.inputName,this.input[e]="",this.setCaretPosition(0),this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"getInput",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]&&arguments[1];return e=e||this.options.inputName,this.options.syncInstanceInputs&&!t&&this.syncInstanceInputs(),this.options.rtl?"‫"+this.input[e].replace("‫","").replace("‬","")+"‬":this.input[e]}},{key:"getAllInputs",value:function(){var t=this,n={};return Object.keys(this.input).forEach(function(e){n[e]=t.getInput(e,!0)}),n}},{key:"setInput",value:function(e,t){t=t||this.options.inputName,this.input[t]=e,this.options.syncInstanceInputs&&this.syncInstanceInputs()}},{key:"replaceInput",value:function(e){this.input=e}},{key:"setOptions",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t=this.changedOptions(e);this.options=Object.assign(this.options,e),t.length&&(this.options.debug&&console.log("changedOptions",t),this.onSetOptions(e),this.render())}},{key:"changedOptions",value:function(t){var n=this;return Object.keys(t).filter(function(e){return JSON.stringify(t[e])!==JSON.stringify(n.options[e])})}},{key:"onSetOptions",value:function(e){e.inputName&&(this.options.debug&&console.log("inputName changed. caretPosition reset."),this.setCaretPosition(null))}},{key:"clear",value:function(){this.keyboardDOM.innerHTML="",this.keyboardDOM.className=this.keyboardDOMClass,this.buttonElements={}}},{key:"dispatch",value:function(t){if(!window.SimpleKeyboardInstances)throw console.warn("SimpleKeyboardInstances is not defined. Dispatch cannot be called."),new Error("INSTANCES_VAR_ERROR");return Object.keys(window.SimpleKeyboardInstances).forEach(function(e){t(window.SimpleKeyboardInstances[e],e)})}},{key:"addButtonTheme",value:function(e,t){var i=this;if(!t||!e)return!1;e.split(" ").forEach(function(r){t.split(" ").forEach(function(n){i.options.buttonTheme||(i.options.buttonTheme=[]);var o=!1;i.options.buttonTheme.map(function(e){if(e.class.split(" ").includes(n)){o=!0;var t=e.buttons.split(" ");t.includes(r)||(o=!0,t.push(r),e.buttons=t.join(" "))}return e}),o||i.options.buttonTheme.push({class:n,buttons:e})})}),this.render()}},{key:"removeButtonTheme",value:function(e,r){var i=this;if(!e&&!r)return this.options.buttonTheme=[],this.render(),!1;e&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length&&(e.split(" ").forEach(function(o){i.options.buttonTheme.map(function(e,t){if(r&&r.includes(e.class)||!r){var n=e.buttons.split(" ").filter(function(e){return e!==o});n.length?e.buttons=n.join(" "):(i.options.buttonTheme.splice(t,1),e=null)}return e})}),this.render())}},{key:"getButtonElement",value:function(e){var t,n=this.buttonElements[e];return n&&(t=1<n.length?n:n[0]),t}},{key:"inputPatternIsValid",value:function(e){var t,n=this.options.inputPattern;if((t=n instanceof RegExp?n:n[this.options.inputName])&&e){var o=t.test(e);return this.options.debug&&console.log('inputPattern ("'.concat(t,'"): ').concat(o?"passed":"did not pass!")),o}return!0}},{key:"setEventListeners",value:function(){!this.isFirstKeyboardInstance&&this.allKeyboardInstances||(this.options.debug&&console.log("Caret handling started (".concat(this.keyboardDOMClass,")")),document.addEventListener("keyup",this.handleKeyUp),document.addEventListener("keydown",this.handleKeyDown),document.addEventListener("mouseup",this.handleMouseUp),document.addEventListener("touchend",this.handleTouchEnd))}},{key:"handleKeyUp",value:function(e){this.caretEventHandler(e),this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyUp(e)}},{key:"handleKeyDown",value:function(e){this.options.physicalKeyboardHighlight&&this.physicalKeyboard.handleHighlightKeyDown(e)}},{key:"handleMouseUp",value:function(e){this.caretEventHandler(e)}},{key:"handleTouchEnd",value:function(e){this.caretEventHandler(e)}},{key:"caretEventHandler",value:function(n){var o;n.target.tagName&&(o=n.target.tagName.toLowerCase()),this.dispatch(function(e){var t=n.target===e.keyboardDOM||n.target&&e.keyboardDOM.contains(n.target);e.isMouseHold&&(e.isMouseHold=!1),"textarea"!==o&&"input"!==o||e.options.disableCaretPositioning?!e.options.disableCaretPositioning&&t||e.setCaretPosition(null):(e.setCaretPosition(n.target.selectionStart,n.target.selectionEnd),e.options.debug&&console.log("Caret at: ",e.getCaretPosition(),e.getCaretPositionEnd(),n&&n.target.tagName.toLowerCase(),"(".concat(e.keyboardDOMClass,")")))})}},{key:"recurseButtons",value:function(t){var n=this;if(!t)return!1;Object.keys(this.buttonElements).forEach(function(e){return n.buttonElements[e].forEach(t)})}},{key:"destroy",value:function(){this.options.debug&&console.log("Destroying simple-keyboard instance: ".concat(this.currentInstanceName)),document.removeEventListener("keyup",this.handleKeyUp),document.removeEventListener("keydown",this.handleKeyDown),document.removeEventListener("mouseup",this.handleMouseUp),document.removeEventListener("touchend",this.handleTouchEnd),document.onpointerup=null,document.ontouchend=null,document.ontouchcancel=null,document.onmouseup=null;var e=function(e){e.onpointerdown=null,e.onpointerup=null,e.onpointercancel=null,e.ontouchstart=null,e.ontouchend=null,e.ontouchcancel=null,e.onclick=null,e.onmousedown=null,e.onmouseup=null,e.remove(),e=null};this.recurseButtons(e),e=this.recurseButtons=null,this.keyboardDOM.onpointerdown=null,this.keyboardDOM.ontouchstart=null,this.keyboardDOM.onmousedown=null,this.clear(),window.SimpleKeyboardInstances[this.currentInstanceName]=null,delete window.SimpleKeyboardInstances[this.currentInstanceName],this.initialized=!1}},{key:"getButtonThemeClasses",value:function(n){var e=this.options.buttonTheme,o=[];return Array.isArray(e)&&e.forEach(function(e){if(e.class&&"string"==typeof e.class&&e.buttons&&"string"==typeof e.buttons){var t=e.class.split(" ");e.buttons.split(" ").includes(n)&&(o=[].concat(_(o),_(t)))}else console.warn('Incorrect "buttonTheme". Please check the documentation.',e)}),o}},{key:"setDOMButtonAttributes",value:function(t,n){var e=this.options.buttonAttributes;Array.isArray(e)&&e.forEach(function(e){e.attribute&&"string"==typeof e.attribute&&e.value&&"string"==typeof e.value&&e.buttons&&"string"==typeof e.buttons?e.buttons.split(" ").includes(t)&&n(e.attribute,e.value):console.warn('Incorrect "buttonAttributes". Please check the documentation.',e)})}},{key:"onTouchDeviceDetected",value:function(){this.processAutoTouchEvents(),this.disableContextualWindow()}},{key:"disableContextualWindow",value:function(){window.oncontextmenu=function(e){if(e.target.classList.contains("hg-button"))return e.preventDefault(),e.stopPropagation(),!1}}},{key:"processAutoTouchEvents",value:function(){this.options.autoUseTouchEvents&&(this.options.useTouchEvents=!0,this.options.debug&&console.log("autoUseTouchEvents: Touch device detected, useTouchEvents enabled."))}},{key:"onInit",value:function(){this.options.debug&&console.log("".concat(this.keyboardDOMClass," Initialized")),this.setEventListeners(),"function"==typeof this.options.onInit&&this.options.onInit()}},{key:"beforeFirstRender",value:function(){this.utilities.isTouchDevice()&&this.onTouchDeviceDetected(),"function"==typeof this.options.beforeFirstRender&&this.options.beforeFirstRender(),this.isFirstKeyboardInstance&&this.utilities.pointerEventsSupported()&&!this.options.useTouchEvents&&!this.options.useMouseEvents&&this.options.debug&&console.log("Using PointerEvents as it is supported by this browser"),this.options.useTouchEvents&&this.options.debug&&console.log("useTouchEvents has been enabled. Only touch events will be used.")}},{key:"beforeRender",value:function(){"function"==typeof this.options.beforeRender&&this.options.beforeRender()}},{key:"onRender",value:function(){"function"==typeof this.options.onRender&&this.options.onRender()}},{key:"onModulesLoaded",value:function(){"function"==typeof this.options.onModulesLoaded&&this.options.onModulesLoaded(this)}},{key:"loadModules",value:function(){var t=this;Array.isArray(this.options.modules)&&(this.options.modules.forEach(function(e){(new e).init(t)}),this.keyboardPluginClasses="modules-loaded",this.render(),this.onModulesLoaded())}},{key:"getModuleProp",value:function(e,t){return!!this.modules[e]&&this.modules[e][t]}},{key:"getModulesList",value:function(){return Object.keys(this.modules)}},{key:"parseRowDOMContainers",value:function(c,u,e,l){var d=this,f=Array.from(c.children),p=0;return f.length&&e.forEach(function(e,t){var n=l[t];if(!(n&&e<n))return!1;var o=e-p,r=n-p,i=document.createElement("div");i.className+="hg-button-container";var s="".concat(d.options.layoutName,"-r").concat(u,"c").concat(t);i.setAttribute("data-skUID",s);var a=f.splice(o,r-o+1);p=r-o,a.forEach(function(e){return i.appendChild(e)}),f.splice(o,0,i),c.innerHTML="",f.forEach(function(e){return c.appendChild(e)}),d.options.debug&&console.log("rowDOMContainer",a,o,r,p+1)}),c}},{key:"render",value:function(){var y=this;this.clear(),this.initialized||this.beforeFirstRender(),this.beforeRender();var e="hg-layout-".concat(this.options.layoutName),t=this.options.layout||{default:["` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","{tab} q w e r t y u i o p [ ] \\","{lock} a s d f g h j k l ; ' {enter}","{shift} z x c v b n m , . / {shift}",".com @ {space}"],shift:["~ ! @ # $ % ^ & * ( ) _ + {bksp}","{tab} Q W E R T Y U I O P { } |",'{lock} A S D F G H J K L : " {enter}',"{shift} Z X C V B N M < > ? {shift}",".com @ {space}"]},v=this.options.useTouchEvents||!1,n=v?"hg-touch-events":"",m=this.options.useMouseEvents||!1,g=this.options.disableRowButtonContainers;this.keyboardDOM.className=this.getKeyboardClassString(this.options.theme,e,this.keyboardPluginClasses,n),t[this.options.layoutName].forEach(function(e,d){var t=e.split(" "),f=document.createElement("div");f.className+="hg-row";var p=[],h=[];t.forEach(function(t,e){var n,o=!g&&"string"==typeof t&&1<t.length&&0===t.indexOf("["),r=!g&&"string"==typeof t&&1<t.length&&t.indexOf("]")===t.length-1;o&&(p.push(e),t=t.replace(/\[/g,"")),r&&(h.push(e),t=t.replace(/\]/g,""));var i=y.utilities.getButtonClass(t),s=y.utilities.getButtonDisplayName(t,y.options.display,y.options.mergeDisplay),a=y.options.useButtonTag?"button":"div",c=document.createElement(a);c.className+="hg-button ".concat(i),(n=c.classList).add.apply(n,_(y.getButtonThemeClasses(t))),y.setDOMButtonAttributes(t,function(e,t){c.setAttribute(e,t)}),y.activeButtonClass="hg-activeButton",!y.utilities.pointerEventsSupported()||v||m?v?(c.ontouchstart=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.ontouchend=function(e){y.handleButtonMouseUp(t,e)},c.ontouchcancel=function(e){y.handleButtonMouseUp(t,e)}):(c.onclick=function(){y.isMouseHold=!1,y.handleButtonClicked(t)},c.onmousedown=function(e){y.handleButtonMouseDown(t,e)},c.onmouseup=function(e){y.handleButtonMouseUp(t,e)}):(c.onpointerdown=function(e){y.handleButtonClicked(t),y.handleButtonMouseDown(t,e)},c.onpointerup=function(e){y.handleButtonMouseUp(t,e)},c.onpointercancel=function(e){y.handleButtonMouseUp(t,e)}),c.setAttribute("data-skBtn",t);var u="".concat(y.options.layoutName,"-r").concat(d,"b").concat(e);c.setAttribute("data-skBtnUID",u);var l=document.createElement("span");l.innerHTML=s,c.appendChild(l),y.buttonElements[t]||(y.buttonElements[t]=[]),y.buttonElements[t].push(c),f.appendChild(c)}),f=y.parseRowDOMContainers(f,d,p,h),y.keyboardDOM.appendChild(f)}),this.onRender(),this.initialized||(this.initialized=!0,!this.utilities.pointerEventsSupported()||v||m?v?(document.ontouchend=function(){return y.handleButtonMouseUp()},document.ontouchcancel=function(){return y.handleButtonMouseUp()},this.keyboardDOM.ontouchstart=function(e){return y.handleKeyboardContainerMouseDown(e)}):v||(document.onmouseup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onmousedown=function(e){return y.handleKeyboardContainerMouseDown(e)}):(document.onpointerup=function(){return y.handleButtonMouseUp()},this.keyboardDOM.onpointerdown=function(e){return y.handleKeyboardContainerMouseDown(e)}),this.onInit())}}]),w);function w(){var o=this;(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,w),g(this,"handleParams",function(e){var t,n,o;if("string"==typeof e[0])t=e[0].split(".").join(""),n=document.querySelector(".".concat(t)),o=e[1];else if(e[0]instanceof HTMLDivElement){if(!e[0].className)throw console.warn("Any DOM element passed as parameter must have a class."),new Error("KEYBOARD_DOM_CLASS_ERROR");t=e[0].className.split(" ")[0],n=e[0],o=e[1]}else t="simple-keyboard",n=document.querySelector(".".concat(t)),o=e[0];return{keyboardDOMClass:t,keyboardDOM:n,options:o}}),g(this,"getOptions",function(){return o.options}),g(this,"getCaretPosition",function(){return o.caretPosition}),g(this,"getCaretPositionEnd",function(){return o.caretPositionEnd}),g(this,"registerModule",function(e,t){o.modules[e]||(o.modules[e]={}),t(o.modules[e])}),g(this,"getKeyboardClassString",function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return[o.keyboardDOMClass].concat(t).filter(function(e){return!!e}).join(" ")});for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=this.handleParams(t),i=r.keyboardDOMClass,s=r.keyboardDOM,a=r.options,c=void 0===a?{}:a;if(this.utilities=new f({getOptions:this.getOptions,getCaretPosition:this.getCaretPosition,getCaretPositionEnd:this.getCaretPositionEnd,dispatch:this.dispatch}),this.caretPosition=null,this.caretPositionEnd=null,this.keyboardDOM=s,this.options=c,this.options.layoutName=this.options.layoutName||"default",this.options.theme=this.options.theme||"hg-theme-default",this.options.inputName=this.options.inputName||"default",this.options.preventMouseDownDefault=this.options.preventMouseDownDefault||!1,this.keyboardPluginClasses="",f.bindMethods(w,this),this.input={},this.input[this.options.inputName]="",this.keyboardDOMClass=i,this.buttonElements={},window.SimpleKeyboardInstances||(window.SimpleKeyboardInstances={}),this.currentInstanceName=this.utilities.camelCase(this.keyboardDOMClass),(window.SimpleKeyboardInstances[this.currentInstanceName]=this).allKeyboardInstances=window.SimpleKeyboardInstances,this.keyboardInstanceNames=Object.keys(window.SimpleKeyboardInstances),this.isFirstKeyboardInstance=this.keyboardInstanceNames[0]===this.currentInstanceName,this.physicalKeyboard=new h({dispatch:this.dispatch,getOptions:this.getOptions}),!this.keyboardDOM)throw console.warn('".'.concat(i,'" was not found in the DOM.')),new Error("KEYBOARD_DOM_ERROR");this.render(),this.modules={},this.loadModules()}t.default=b}],r.c=o,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=0);function r(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}var n,o},"object"==typeof n&&"object"==typeof t?t.exports=r():"function"==typeof define&&define.amd?define("SimpleKeyboard",[],r):"object"==typeof n?n.SimpleKeyboard=r():o.SimpleKeyboard=r()},{}],132:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Build={short:"0.71.7",version:"0.71.7 (6e5a984743bbee490bb8611add5a5a3c)",buildSeed:1630921140124}},{}],133:[function(e,t,n){"use strict";function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0});var g=e("../dom/keys"),S=e("../dom/pointer"),o=function(){for(var e={},t=0,n=Object.keys(g.namedKeyCodes);t<n.length;t++){var o=n[t];e[g.namedKeyCodes[o]]=o.substr(4,2)}return e}();function _(e,t,n){var o=Math.round(.6*n),r=Math.round(.5*n),i=Math.max(1,Math.round(n/20)),s=T[e.toLowerCase()],a=void 0===s?e:"",c=P("emulator-button-touch-zone"),u=P("emulator-button"),l=P("emulator-button-text",void 0===s?void 0===a||0===a.length?"□":a.substr(0,1).toUpperCase():"");void 0!==s&&(u.style.backgroundImage='url("'+s+'")'),u.style.width=o+"px",u.style.height=o+"px",l.style.fontSize=r+"px",c.widthPx=n-2*i,c.heightPx=n-2*i,c.style.width=c.widthPx+"px",c.style.height=c.heightPx+"px",c.style.borderWidth=i+"px",c.appendChild(u),c.appendChild(l);function d(e){void 0!==t.onDown&&t.onDown(),void 0!==t.onClick&&t.onClick(),e.stopPropagation(),e.preventDefault()}function f(e){void 0!==t.onUp&&t.onUp(),e.stopPropagation(),e.preventDefault()}function p(e){e.stopPropagation(),e.preventDefault()}var h,y={capture:!0},v=O(S.pointer.starters);try{for(v.s();!(h=v.n()).done;){var m=h.value;c.addEventListener(m,d,y)}}catch(e){v.e(e)}finally{v.f()}var g,_=O(S.pointer.enders);try{for(_.s();!(g=_.n()).done;){var b=g.value;c.addEventListener(b,f,y)}}catch(e){_.e(e)}finally{_.f()}var w,x=O(S.pointer.changers);try{for(x.s();!(w=x.n()).done;){var D=w.value;c.addEventListener(D,p,y)}}catch(e){x.e(e)}finally{x.f()}var k,E=O(S.pointer.leavers);try{for(E.s();!(k=E.n()).done;){var j=k.value;c.addEventListener(j,p,y)}}catch(e){E.e(e)}finally{E.f()}var B,K=O(S.pointer.prevents);try{for(K.s();!(B=K.n()).done;){var C=B.value;c.addEventListener(C,p,y)}}catch(e){K.e(e)}finally{K.f()}return c}function P(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n}function b(e){return"number"==typeof e?o[e]:e}function w(e,t){return"click"===e.action?{onClick:function(){return t.fireKeyPress(e.mapTo)}}:{onDown:function(){return t.fireKeyDown(e.mapTo)},onUp:function(){return t.fireKeyUp(e.mapTo)}}}n.createButton=_,n.deprecatedButton=function(o,e,t,n){var r,i=Math.round(n/4),s=[],a=O(t);try{for(a.s();!(r=a.n()).done;){var c=r.value;if(c.mapTo!==g.KBD_NONE){var u=_((c.symbol||b(c.mapTo)).toUpperCase(),w(c,o),n);u.style.position="absolute";var l=c.style;if(l)for(var d=0,f=Object.keys(l);d<f.length;d++){var p=f[d];u.style[p]=l[p]}if(void 0!==c.position){var h=c.position.left,y=c.position.top,v=c.position.bottom,m=c.position.right;void 0!==h&&(u.style.left=i*h+n*(h-1)+"px"),void 0!==m&&(u.style.right=i*m+n*(m-1)+"px"),void 0!==y&&(u.style.top=i*y+n*(y-1)+"px"),void 0!==v&&(u.style.bottom=i*v+n*(v-1)+"px")}o.mouseOverlay.appendChild(u),s.push(u)}}}catch(e){a.e(e)}finally{a.f()}return function(){var e,t=O(s);try{for(t.s();!(e=t.n()).done;){var n=e.value;n.parentElement===o.mouseOverlay&&o.mouseOverlay.removeChild(n)}}catch(e){t.e(e)}finally{t.f()}}};var r="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19,12c-0.3,0-0.5,0.1-0.7,0.3L14,16.6V3c0-0.5-0.4-1-1-1s-1,0.5-1,1v13.6 l-4.3-4.3C7.5,12.1,7.3,12,7,12c-0.5,0-1,0.4-1,1c0,0.3,0.1,0.5,0.3,0.7l6,6c0.2,0.2,0.4,0.3,0.7,0.3s0.5-0.1,0.7-0.3l6-6 c0.2-0.2,0.3-0.4,0.3-0.7C20,12.4,19.5,12,19,12L19,12z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",i="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='left_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,9H4.41l4.29-4.29C8.89,4.53,9,4.28,9,4c0-0.55-0.45-1-1-1 C7.72,3,7.47,3.11,7.29,3.29l-6,6C1.11,9.47,1,9.72,1,10c0,0.28,0.11,0.53,0.29,0.71l6,6C7.47,16.89,7.72,17,8,17 c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,11H18c0.55,0,1-0.45,1-1C19,9.45,18.55,9,18,9z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",s="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='right_arrow_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18.71,9.29l-6-6C12.53,3.11,12.28,3,12,3c-0.55,0-1,0.45-1,1 c0,0.28,0.11,0.53,0.29,0.71L15.59,9H2c-0.55,0-1,0.45-1,1c0,0.55,0.45,1,1,1h13.59l-4.29,4.29C11.11,15.47,11,15.72,11,16 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l6-6C18.89,10.53,19,10.28,19,10C19,9.72,18.89,9.47,18.71,9.29z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",c="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' fill='%23fff' viewBox='0 0 20 20' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Cg id='key_enter_1_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M18,2c-0.55,0-1,0.45-1,1v5c0,2.21-1.79,4-4,4H4.41l2.29-2.29 C6.89,9.53,7,9.28,7,9c0-0.55-0.45-1-1-1C5.72,8,5.47,8.11,5.29,8.29l-4,4C1.11,12.47,1,12.72,1,13c0,0.28,0.11,0.53,0.29,0.71 l4,4C5.47,17.89,5.72,18,6,18c0.55,0,1-0.45,1-1c0-0.28-0.11-0.53-0.29-0.71L4.41,14H13c3.31,0,6-2.69,6-6V3C19,2.45,18.55,2,18,2 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",T={fullscreen:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='maximize_1_' fill='%23FFFFFF'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M5.99,8.99c-0.28,0-0.53,0.11-0.71,0.29l-3.29,3.29v-1.59c0-0.55-0.45-1-1-1 s-1,0.45-1,1v4c0,0.55,0.45,1,1,1h4c0.55,0,1-0.45,1-1s-0.45-1-1-1H3.41L6.7,10.7c0.18-0.18,0.29-0.43,0.29-0.71 C6.99,9.44,6.54,8.99,5.99,8.99z M14.99-0.01h-4c-0.55,0-1,0.45-1,1s0.45,1,1,1h1.59L9.28,5.29C9.1,5.47,8.99,5.72,8.99,5.99 c0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l3.29-3.29v1.59c0,0.55,0.45,1,1,1s1-0.45,1-1v-4C15.99,0.44,15.54-0.01,14.99-0.01 z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",save:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' fill='%23FFFFFF' xml:space='preserve'%3E%3Cg id='floppy_disk'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M15.71,2.29l-2-2C13.53,0.11,13.28,0,13,0h-1v6H4V0H1C0.45,0,0,0.45,0,1v14 c0,0.55,0.45,1,1,1h14c0.55,0,1-0.45,1-1V3C16,2.72,15.89,2.47,15.71,2.29z M14,15H2V9c0-0.55,0.45-1,1-1h10c0.55,0,1,0.45,1,1V15 z M11,1H9v4h2V1z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E%0A",options:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' enable-background='new 0 0 20 20' fill='%23FFF' xml:space='preserve'%3E%3Cg id='cog_2_'%3E%3Cg%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M19,8h-2.31c-0.14-0.46-0.33-0.89-0.56-1.3l1.7-1.7c0.39-0.39,0.39-1.02,0-1.41 l-1.41-1.41c-0.39-0.39-1.02-0.39-1.41,0l-1.7,1.7c-0.41-0.22-0.84-0.41-1.3-0.55V1c0-0.55-0.45-1-1-1H9C8.45,0,8,0.45,8,1v2.33 C7.52,3.47,7.06,3.67,6.63,3.91L5,2.28c-0.37-0.37-0.98-0.37-1.36,0L2.28,3.64C1.91,4.02,1.91,4.63,2.28,5l1.62,1.62 C3.66,7.06,3.46,7.51,3.31,8H1C0.45,8,0,8.45,0,9v2c0,0.55,0.45,1,1,1h2.31c0.14,0.46,0.33,0.89,0.56,1.3L2.17,15 c-0.39,0.39-0.39,1.02,0,1.41l1.41,1.41c0.39,0.39,1.02,0.39,1.41,0l1.7-1.7c0.41,0.22,0.84,0.41,1.3,0.55V19c0,0.55,0.45,1,1,1h2 c0.55,0,1-0.45,1-1v-2.33c0.48-0.14,0.94-0.35,1.37-0.59L15,17.72c0.37,0.37,0.98,0.37,1.36,0l1.36-1.36 c0.37-0.37,0.37-0.98,0-1.36l-1.62-1.62c0.24-0.43,0.45-0.89,0.6-1.38H19c0.55,0,1-0.45,1-1V9C20,8.45,19.55,8,19,8z M10,14 c-2.21,0-4-1.79-4-4c0-2.21,1.79-4,4-4s4,1.79,4,4C14,12.21,12.21,14,10,14z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",keyboard:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3Csvg version='1.1' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 16 16' enable-background='new 0 0 16 16' xml:space='preserve'%3E%3Cg id='manually_entered_data_2_'%3E%3Cg%3E%3Cpath fill='%23FFFFFF' fill-rule='evenodd' clip-rule='evenodd' d='M1,8h3.76l2-2H1C0.45,6,0,6.45,0,7C0,7.55,0.45,8,1,8z M15.49,3.99 C15.8,3.67,16,3.23,16,2.75C16,1.78,15.22,1,14.25,1c-0.48,0-0.92,0.2-1.24,0.51l-1.44,1.44l2.47,2.47L15.49,3.99z M1,4h7.76l2-2 H1C0.45,2,0,2.45,0,3C0,3.55,0.45,4,1,4z M1,10c-0.55,0-1,0.45-1,1c0,0.48,0.35,0.86,0.8,0.96L2.76,10H1z M10.95,3.57l-6.69,6.69 l2.47,2.47l6.69-6.69L10.95,3.57z M15.2,6.04L13.24,8H15c0.55,0,1-0.45,1-1C16,6.52,15.65,6.14,15.2,6.04z M2,15l3.86-1.39 l-2.46-2.44L2,15z M15,10h-3.76l-2,2H15c0.55,0,1-0.45,1-1C16,10.45,15.55,10,15,10z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",up:"data:image/svg+xml,%3C%3Fxml version='1.0' encoding='utf-8'%3F%3E%3C!-- Generator: Adobe Illustrator 17.1.0, SVG Export Plug-In . SVG Version: 6.00 Build 0) --%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg version='1.1' id='Layer_1' xmlns:sketch='http://www.bohemiancoding.com/sketch/ns' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' viewBox='0 0 20 20' fill='%23FFF' enable-background='new 0 0 20 20' xml:space='preserve'%3E%3Ctitle%3EShape%3C/title%3E%3Cdesc%3ECreated with Sketch.%3C/desc%3E%3Cg id='Page-1' sketch:type='MSPage'%3E%3Cg id='Artboard-1' transform='translate(-3.000000, -1.000000)' sketch:type='MSArtboardGroup'%3E%3Cpath id='Shape' sketch:type='MSShapeGroup' d='M19.7,8.3l-6-6C13.5,2.1,13.3,2,13,2s-0.5,0.1-0.7,0.3l-6,6C6.1,8.5,6,8.7,6,9 c0,0.6,0.5,1,1,1c0.3,0,0.5-0.1,0.7-0.3L12,5.4V19c0,0.5,0.4,1,1,1s1-0.5,1-1V5.4l4.3,4.3C18.5,9.9,18.7,10,19,10c0.5,0,1-0.4,1-1 C20,8.7,19.9,8.5,19.7,8.3L19.7,8.3z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E",down:r,do:r,dw:r,dwn:r,left:i,le:i,lft:i,right:s,ri:s,rght:s,rgh:s,enter:c,en:c,enr:c,ent:c,entr:c}},{"../dom/keys":144,"../dom/pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],134:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}Object.defineProperty(n,"__esModule",{value:!0}),n.getGrid=function(e){switch(e){case"square":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=0;h<n;++h)p.push({centerX:h<r?s+l*(h+.5):e-s-l*(n-h-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"square",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}());case"honeycomb":return new(function(){function e(){o(this,e),this.aspect=.625}return i(e,[{key:"getConfiguration",value:function(e,t){for(var n=this.getCols(),o=this.getRows(),r=Math.floor(n/2),i=Math.floor(o/2),s=5*e/100/2,a=s,c=(e-2*s)/n,u=(t-2*a)/o,l=Math.min(c,u),d=[],f=0;f<o;++f){for(var p=[],h=f%2==0?n:n-1,y=f%2==0?0:l/2,v=0;v<h;++v)p.push({centerX:v<r?y+s+l*(v+.5):y+e-s-l*(n-v-1+.5),centerY:f<i?a+l*(f+.5):t-a-l*(o-f-1+.5)});d.push(p)}return{gridType:"honeycomb",cells:d,columnWidth:l,rowHeight:l,columnsPadding:s,rowsPadding:a,width:e,height:t}}},{key:"getCols",value:function(){return 10}},{key:"getRows",value:function(){return Math.floor(this.getCols()*this.aspect)+1}}]),e}())}throw new Error("Unknown grid type "+e)}},{}],135:[function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),Object.defineProperty(n,"__esModule",{value:!0}),n.keyboard=function(e,t,n){var o=n||{};function r(e){return void 0!==o[e]?o[e]:e}return e.setOnKeyDown(function(e){t.sendKeyEvent(r(e),!0)}),e.setOnKeyUp(function(e){t.sendKeyEvent(r(e),!1)}),e.setOnKeyPress(function(e){t.simulateKeyPress(r(e))}),e.setOnKeysPress(function(e){t.simulateKeyPress.apply(t,i(e))}),function(){e.setOnKeyDown(function(e){}),e.setOnKeyUp(function(e){}),e.setOnKeyPress(function(e){}),e.setOnKeysPress(function(e){})}}},{"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],136:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.extractLayersConfig=function(e){return void 0!==e.layersConfig?e.layersConfig:void 0!==e.layers?e.layers:null}},{}],137:[function(e,t,n){"use strict";function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function O(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var m=e("./grid"),g=e("./button"),_=e("./keyboard"),b=e("./mouse"),v=e("./options"),S=e("../dom/pointer"),P=e("nipplejs");n.initLayersControl=function(e,t,n,o,r){var d,f,p,h,i,s,y,a=t.layers[0];if(void 0!==r){var c,u=O(t.layers);try{for(u.s();!(c=u.n()).done;){var l=c.value;if(l.title===r){a=l;break}}}catch(e){u.e(e)}finally{u.f()}}return d=a,f=e,p=n,h=o,i=_.keyboard(f,p),s=b.mouse(f,p),y=[],f.addOnResize(v),v(f.width,f.height),function(){f.removeOnResize(v),i(),s();var e,t=O(y);try{for(t.s();!(e=t.n()).done;)(0,e.value)()}catch(e){t.e(e)}finally{t.f()}};function v(e,t){var n,o=O(y);try{for(o.s();!(n=o.n()).done;){(0,n.value)()}}catch(e){o.e(e)}finally{o.f()}y.splice(0,y.length);var r,i=m.getGrid(d.grid).getConfiguration(e,t),s=new w,a=O(d.controls);try{for(a.s();!(r=a.n()).done;){var c=r.value,u=x[c.type];if(void 0!==u){var l=u(c,f,p,i,s,h);y.push(l)}else console.error("Factory for control '"+c.type+"' is not defined")}}catch(e){a.e(e)}finally{a.f()}}};var w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sensors={}}var t,n,o;return t=e,(n=[{key:"activate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.activate()}},{key:"deactivate",value:function(e,t){var n=this.sensors[t+"_"+e];void 0!==n&&n.deactivate()}},{key:"register",value:function(e,t,n){this.sensors[t+"_"+e]=n}}])&&r(t.prototype,n),o&&r(t,o),e}(),x={Key:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){return n.sendKeyEvent(e.mapTo,!0)},onUp:function(){return n.sendKeyEvent(e.mapTo,!1)}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:p.onUp}),t.mouseOverlay.appendChild(h),function(){return t.mouseOverlay.removeChild(h)}},Options:function(e,t,n,o,r,i){if(void 0!==t.options.optionControls&&1===t.options.optionControls.length&&"keyboard"===t.options.optionControls[0])return D(e,t,0,o);var s=o.cells,a=o.columnWidth,c=o.rowHeight,u=e.row,l=e.column,d=s[u][l],f=d.centerX,p=d.centerY-c/2,h=f-a/2,y=o.width-h-a;return v.options(t,["default"],function(){},a,p,y)},Keyboard:D,Switch:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=g.createButton(e.symbol,{onUp:function(){return i.setLayersConfig(i.getLayersConfig(),e.layerName)}},a);return p.style.position="absolute",p.style.left=d-p.widthPx/2+"px",p.style.top=f-p.heightPx/2+"px",t.mouseOverlay.appendChild(p),function(){t.mouseOverlay.removeChild(p)}},ScreenMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p=.5,h=.5;0<=e.direction.indexOf("up")&&(h=0);0<=e.direction.indexOf("down")&&(h=1);0<=e.direction.indexOf("left")&&(p=0);0<=e.direction.indexOf("right")&&(p=1);var y={onDown:function(){n.sendMouseMotion(p,h)},onUp:function(){n.sendMouseMotion(.5,.5)}},v=g.createButton(e.symbol,y,a);return v.style.position="absolute",v.style.left=d-v.widthPx/2+"px",v.style.top=f-v.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(v),function(){t.mouseOverlay.removeChild(v)}},PointerButton:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.click,d=s[c][u],f=d.centerX,p=d.centerY,h={onDown:function(){l?n.sendMouseButton(e.button,!0):t.pointerButton=e.button},onUp:function(){l?n.sendMouseButton(e.button,!1):t.pointerButton=0}},y=g.createButton(e.symbol,h,a);return y.style.position="absolute",y.style.left=f-y.widthPx/2+"px",y.style.top=p-y.heightPx/2+"px",r.register(c,u,{activate:h.onDown,deactivate:h.onUp}),t.mouseOverlay.appendChild(y),function(){t.mouseOverlay.removeChild(y)}},PointerMove:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=e.x,d=e.y,f=s[c][u],p=f.centerX,h=f.centerY,y={onDown:function(){n.sendMouseMotion(l,d)},onUp:function(){n.sendMouseMotion(l,d)}},v=g.createButton(e.symbol,y,a);return v.style.position="absolute",v.style.left=p-v.widthPx/2+"px",v.style.top=h-v.heightPx/2+"px",r.register(c,u,{activate:y.onDown,deactivate:y.onUp}),t.mouseOverlay.appendChild(v),function(){t.mouseOverlay.removeChild(v)}},PointerReset:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){n.sendMouseSync()}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},PointerToggle:function(e,t,n,o,r,i){var s=o.cells,a=o.columnWidth,c=e.row,u=e.column,l=s[c][u],d=l.centerX,f=l.centerY,p={onDown:function(){t.pointerDisabled=!t.pointerDisabled,t.pointerDisabled?h.classList.contains("emulator-button-highlight")||h.classList.add("emulator-button-highlight"):h.classList.remove("emulator-button-highlight")}},h=g.createButton(e.symbol,p,a);return h.style.position="absolute",h.style.left=d-h.widthPx/2+"px",h.style.top=f-h.heightPx/2+"px",r.register(c,u,{activate:p.onDown,deactivate:function(){}}),t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h)}},NippleActivator:function(e,o,t,n,s,r){var i=n.cells,a=n.columnWidth,c=n.rowHeight,u=n.width,l=n.height,d=e.row,f=e.column,p=i[d][f],h=p.centerX,y=p.centerY,v=document.createElement("div"),m=Math.max(0,h-1.5*a),g=Math.max(0,y-1.5*c),_=Math.max(0,u-h-1.5*a),b=Math.max(0,l-y-1.5*c);v.style.position="absolute",v.style.zIndex="999",v.style.left=m+"px",v.style.top=g+"px",v.style.right=_+"px",v.style.bottom=b+"px",o.mouseOverlay.appendChild(v);var w=P.create({zone:v,multitouch:!1,maxNumberOfNipples:1,mode:"static",follow:!1,dynamicPage:!0,size:1.5*Math.max(a,c),position:{left:(u-_-m)/2+"px",top:(l-b-g)/2+"px"}}),x=-1,D=-1;w.on("move",function(e,t){if(t.distance<10)return s.deactivate(D,x),void(D=x=-1);var n=-1,o=-1,r=22.5,i=t.angle.degree;o=r<i&&i<=67.5?(n=f+1,d-1):67.5<i&&i<=112.5?(n=f,d-1):112.5<i&&i<=157.5?(n=f-1,d-1):157.5<i&&i<=202.5?(n=f-1,d):202.5<i&&i<=247.5?(n=f-1,d+1):247.5<i&&i<=292.5?(n=f,d+1):292.5<i&&i<=337.5?(n=f+1,d+1):(n=f+1,d),x===n&&D===o||(s.deactivate(D,x),s.activate(o,n),x=n,D=o)});var k=!1;w.on("start",function(){k=!0}),w.on("end",function(){k=!1,s.deactivate(D,x),x=D=-1});var E={capture:!0};function j(e){k&&(k=!1,w.processOnEnd(e),e.stopPropagation())}var B,K=O(S.pointer.enders);try{for(K.s();!(B=K.n()).done;){var C=B.value;o.mouseOverlay.addEventListener(C,j,E)}}catch(e){K.e(e)}finally{K.f()}return function(){w.destroy(),o.mouseOverlay.removeChild(v);var e,t=O(S.pointer.enders);try{for(t.s();!(e=t.n()).done;){var n=e.value;o.mouseOverlay.removeEventListener(n,j,E)}}catch(e){t.e(e)}finally{t.f()}}}};function D(e,t,n,o,r,i){function s(e){e?h.children[0].classList.add("emulator-control-close-icon"):h.children[0].classList.remove("emulator-control-close-icon")}var a=o.cells,c=o.columnWidth,u=e.row,l=e.column,d=a[u][l],f=d.centerX,p=d.centerY,h=g.createButton("keyboard",{onUp:function(){return t.toggleKeyboard()}},c);return t.setOnKeyboardVisibility(s),h.style.position="absolute",h.style.left=f-h.widthPx/2+"px",h.style.top=p-h.heightPx/2+"px",t.mouseOverlay.appendChild(h),function(){t.mouseOverlay.removeChild(h),t.removeOnKeyboardVisibility(s)}}},{"../dom/pointer":147,"./button":133,"./grid":134,"./keyboard":135,"./mouse":139,"./options":142,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,nipplejs:128}],138:[function(e,t,n){"use strict";e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0});var a=e("./button"),c=e("./mouse"),u=e("./nipple"),l=e("./options"),d=e("./keyboard");n.initLegacyLayersControl=function(n,o,r){function e(e){i.keyboard(),i.mouse(),i.gestures(),i.buttons(),i.keyboard=function(){},i.mouse=function(){},i.gestures=function(){},i.buttons=function(){};var t=o[e];void 0!==t&&(i.keyboard=d.keyboard(n,r,t.mapper),void 0!==t.gestures&&0<t.gestures.length?i.gestures=u.nipple(n,r,t.gestures):i.mouse=c.mouse(n,r),void 0!==t.buttons&&t.buttons.length&&(i.buttons=a.deprecatedButton(n,r,t.buttons,54)))}var t=Object.keys(o),i={keyboard:function(){},mouse:function(){},gestures:function(){},buttons:function(){}},s=l.options(n,t,e,54,13.5,0);return e("default"),function(){i.gestures(),i.buttons(),i.mouse(),i.keyboard(),s()}}},{"./button":133,"./keyboard":135,"./mouse":139,"./nipple":140,"./options":142,"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/web.dom.iterable":116}],139:[function(e,t,n){"use strict";function C(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var O=e("../dom/pointer");n.mouse=function(p,h){var r=!1;O.pointer.canLock&&h.config().then(function(e){var t,n,o;return r=!0===(null===(t=e.output)||void 0===t||null===(n=t.options)||void 0===n||null===(o=n.autolock)||void 0===o?void 0:o.value)}).catch(console.error);var y=.01;function i(e,t){var n=h.width(),o=h.height(),r=p.width,i=p.height,s=n/o,a=r,c=r/s;i<c&&(a=(c=i)*s);var u=(i-c)/2,l=(r-a)/2,d=Math.max(0,Math.min(1,(e-l)/a)),f=Math.max(0,Math.min(1,(t-u)/c));return d<=y&&(d=0),1-y<=d&&(d=1),f<=y&&(f=0),1-y<=f&&(f=1),{x:d,y:f}}function s(){return document.pointerLockElement!==v}var v=p.mouseOverlay;function m(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);n=t.button||p.pointerButton,function(e,t,n){if(r&&s()&&(v.requestPointerLock||v.mozRequestPointerLock||v.webkitRequestPointerLock).call(v),s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!0)}(t.x,t.y,n),e.stopPropagation()}}function g(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);!function(e,t,n,o){if(s()){var r=i(e,t);h.sendMouseMotion(r.x,r.y)}else h.sendMouseRelativeMotion(n,o)}(t.x,t.y,t.mX,t.mY),e.stopPropagation()}}function _(e){if(p.pointerDisabled)e.stopPropagation();else{var t=O.getPointerState(e,v);!function(e,t,n){if(s()){var o=i(e,t);h.sendMouseMotion(o.x,o.y)}h.sendMouseButton(n,!1)}(t.x,t.y,n),e.stopPropagation()}}function b(e){if(e.target===v)if(p.pointerDisabled)e.stopPropagation();else{var t,n,o,r=O.getPointerState(e,v);t=r.x,n=r.y,o=i(t,n),h.sendMouseMotion(o.x,o.y),e.stopPropagation()}}function w(e){e.stopPropagation()}var e,n=0,x={capture:!1},t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var o=e.value;v.addEventListener(o,m,x)}}catch(e){t.e(e)}finally{t.f()}var a,c=C(O.pointer.changers);try{for(c.s();!(a=c.n()).done;){var u=a.value;v.addEventListener(u,g,x)}}catch(e){c.e(e)}finally{c.f()}var l,d=C(O.pointer.enders);try{for(d.s();!(l=d.n()).done;){var f=l.value;v.addEventListener(f,_,x)}}catch(e){d.e(e)}finally{d.f()}var D,k=C(O.pointer.prevents);try{for(k.s();!(D=k.n()).done;){var E=D.value;v.addEventListener(E,w,x)}}catch(e){k.e(e)}finally{k.f()}var j,B=C(O.pointer.leavers);try{for(B.s();!(j=B.n()).done;){var K=j.value;v.addEventListener(K,b,x)}}catch(e){B.e(e)}finally{B.f()}return function(){var e,t=C(O.pointer.starters);try{for(t.s();!(e=t.n()).done;){var n=e.value;v.removeEventListener(n,m,x)}}catch(e){t.e(e)}finally{t.f()}var o,r=C(O.pointer.changers);try{for(r.s();!(o=r.n()).done;){var i=o.value;v.removeEventListener(i,g,x)}}catch(e){r.e(e)}finally{r.f()}var s,a=C(O.pointer.enders);try{for(a.s();!(s=a.n()).done;){var c=s.value;v.removeEventListener(c,_,x)}}catch(e){a.e(e)}finally{a.f()}var u,l=C(O.pointer.prevents);try{for(l.s();!(u=l.n()).done;){var d=u.value;v.removeEventListener(d,w,x)}}catch(e){l.e(e)}finally{l.f()}var f,p=C(O.pointer.leavers);try{for(p.s();!(f=p.n()).done;){var h=f.value;v.removeEventListener(h,b,x)}}catch(e){p.e(e)}finally{p.f()}}}},{"../dom/pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],140:[function(e,t,n){"use strict";function p(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var h=e("nipplejs"),y=e("../dom/keys");n.nipple=function(n,e,t){function o(){-1!==s&&(n.fireKeyUp(s),s=-1)}var r,i=h.create({zone:n.mouseOverlay,multitouch:!0,maxNumberOfNipples:2}),s=-1,a={},c={},u={},l=p(t);try{var d=function(){var t=r.value;"end:release"===t.event?a[t.joystickId]=!0:t.mapTo!==y.KBD_NONE&&("tap"===t.event?c[t.joystickId]=t.mapTo:i.on(t.event,function(){var e;u[t.joystickId]=Date.now(),o(),e=t.mapTo,n.fireKeyDown(e),s=e}))};for(l.s();!(r=l.n()).done;)d()}catch(e){l.e(e)}finally{l.f()}var f={};return i.on("start",function(){var e=i.ids.length-1;f[e]=Date.now()}),i.on("end",function(){var e=i.ids.length-1,t=Date.now()-f[e];!0===a[e]&&o(),c[e]&&t<500&&u[e]<f[e]&&n.fireKeyPress(c[e])}),function(){return i.destroy()}}},{"../dom/keys":144,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,nipplejs:128}],141:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("./keyboard"),s=e("./mouse"),a=e("./options");n.initNullLayersControl=function(e,t){var n=i.keyboard(e,t),o=s.mouse(e,t),r=a.options(e,["default"],function(){},54,13.5,0);return function(){n(),o(),r()}}},{"./keyboard":135,"./mouse":139,"./options":142}],142:[function(e,t,n){"use strict";function w(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var x=e("./button"),D=e("../dom/helpers");n.options=function(e,t,n,o,r,i){function s(){var e,t=l?"flex":"none",n=w(f);try{for(n.s();!(e=n.n()).done;){var o=e.value;o!=p&&(o.style.display=t)}}catch(e){n.e(e)}finally{n.f()}}function a(){!(l=!l)&&d&&e.toggleKeyboard(),s()}function c(e){(d=e)?y.classList.add("emulator-control-close-icon"):y.classList.remove("emulator-control-close-icon")}var u=Math.round(o/4),l=!1,d=!1,f=[function(e,n){if(e.length<=1)return document.createElement("div");var t=document.createElement("select");t.classList.add("emulator-control-select");var o,r=w(e);try{for(r.s();!(o=r.n()).done;){var i=o.value,s=document.createElement("option");s.value=i,s.innerHTML=i,t.appendChild(s)}}catch(e){r.e(e)}finally{r.f()}return t.onchange=function(e){var t=e.target.value;n(t)},D.stopPropagation(t,!1),t}(t,n),x.createButton("keyboard",{onClick:function(){e.toggleKeyboard(),l&&!d&&(l=!1,s())}},o),x.createButton("save",{onClick:function(){e.save(),l&&a()}},o),x.createButton("fullscreen",{onClick:function(){e.toggleFullscreen(),l&&a()}},o),x.createButton("options",{onClick:a},o)],p=f[f.length-1],h=f[f.length-2].children[0],y=f[f.length-4].children[0];e.setOnKeyboardVisibility(c),c(e.keyboardVisible),e.setOnFullscreen(function(e){e?h.classList.contains("emulator-control-exit-fullscreen-icon")||h.classList.add("emulator-control-exit-fullscreen-icon"):h.classList.remove("emulator-control-exit-fullscreen-icon")}),e.fullscreen&&h.classList.add("emulator-control-exit-fullscreen-icon");for(var v=D.createDiv("emulator-options"),m=d?"flex":"none",g=0,_=f;g<_.length;g++){var b=_[g];b!==p&&b.classList.add("emulator-button-control"),b.style.marginRight=u+"px",b.style.marginBottom=u+"px",b!==p&&(b.style.display=m),v.appendChild(b)}return v.style.position="absolute",v.style.right=i+"px",v.style.top=r+"px",e.mouseOverlay.appendChild(v),function(){e.mouseOverlay.removeChild(v),e.setOnFullscreen(function(){}),e.removeOnKeyboardVisibility(c)}}},{"../dom/helpers":143,"./button":133,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],143:[function(e,t,n){"use strict";function h(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0});var y=e("./pointer");n.createDiv=function(e,t){var n=document.createElement("div");return n.className=e,void 0!==t&&(n.innerHTML=t),n},n.stopPropagation=function(e){function t(e){e.stopPropagation()}function n(e){e.stopPropagation(),r&&e.preventDefault()}var o,r=!(1<arguments.length&&void 0!==arguments[1])||arguments[1],i={capture:!1},s=h(y.pointer.starters);try{for(s.s();!(o=s.n()).done;){var a=o.value;e.addEventListener(a,t,i)}}catch(e){s.e(e)}finally{s.f()}var c,u=h(y.pointer.enders);try{for(u.s();!(c=u.n()).done;){var l=c.value;e.addEventListener(l,t,i)}}catch(e){u.e(e)}finally{u.f()}var d,f=h(y.pointer.prevents);try{for(f.s();!(d=f.n()).done;){var p=d.value;e.addEventListener(p,n,i)}}catch(e){f.e(e)}finally{f.f()}}},{"./pointer":147,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}],144:[function(e,t,n){"use strict";e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.object.keys"),Object.defineProperty(n,"__esModule",{value:!0}),n.KBD_NONE=0,n.KBD_0=48,n.KBD_1=49,n.KBD_2=50,n.KBD_3=51,n.KBD_4=52,n.KBD_5=53,n.KBD_6=54,n.KBD_7=55,n.KBD_8=56,n.KBD_9=57,n.KBD_a=65,n.KBD_b=66,n.KBD_c=67,n.KBD_d=68,n.KBD_e=69,n.KBD_f=70,n.KBD_g=71,n.KBD_h=72,n.KBD_i=73,n.KBD_j=74,n.KBD_k=75,n.KBD_l=76,n.KBD_m=77,n.KBD_n=78,n.KBD_o=79,n.KBD_p=80,n.KBD_q=81,n.KBD_r=82,n.KBD_s=83,n.KBD_t=84,n.KBD_u=85,n.KBD_v=86,n.KBD_w=87,n.KBD_x=88,n.KBD_y=89,n.KBD_z=90,n.KBD_f1=290,n.KBD_f2=291,n.KBD_f3=292,n.KBD_f4=293,n.KBD_f5=294,n.KBD_f6=295,n.KBD_f7=296,n.KBD_f8=297,n.KBD_f9=298,n.KBD_f10=299,n.KBD_f11=300,n.KBD_f12=301,n.KBD_kp0=320,n.KBD_kp1=321,n.KBD_kp2=322,n.KBD_kp3=323,n.KBD_kp4=324,n.KBD_kp5=325,n.KBD_kp6=326,n.KBD_kp7=327,n.KBD_kp8=328,n.KBD_kp9=329,n.KBD_kpperiod=330,n.KBD_kpdivide=331,n.KBD_kpmultiply=332,n.KBD_kpminus=333,n.KBD_kpplus=334,n.KBD_kpenter=335,n.KBD_esc=256,n.KBD_tab=258,n.KBD_backspace=259,n.KBD_enter=257,n.KBD_space=32,n.KBD_leftalt=342,n.KBD_rightalt=346,n.KBD_leftctrl=341,n.KBD_rightctrl=345,n.KBD_leftshift=340,n.KBD_rightshift=344,n.KBD_capslock=280,n.KBD_scrolllock=281,n.KBD_numlock=282,n.KBD_grave=96,n.KBD_minus=45,n.KBD_equals=61,n.KBD_backslash=92,n.KBD_leftbracket=91,n.KBD_rightbracket=93,n.KBD_semicolon=59,n.KBD_quote=39,n.KBD_period=46,n.KBD_comma=44,n.KBD_slash=47,n.KBD_printscreen=283,n.KBD_pause=284,n.KBD_insert=260,n.KBD_home=268,n.KBD_pageup=266,n.KBD_delete=261,n.KBD_end=269,n.KBD_pagedown=267,n.KBD_left=263,n.KBD_up=265,n.KBD_down=264,n.KBD_right=262,n.KBD_extra_lt_gt=348,n.domToKeyCodes={8:n.KBD_backspace,9:n.KBD_tab,13:n.KBD_enter,16:n.KBD_leftshift,17:n.KBD_leftctrl,18:n.KBD_leftalt,19:n.KBD_pause,27:n.KBD_esc,32:n.KBD_space,33:n.KBD_pageup,34:n.KBD_pagedown,35:n.KBD_end,36:n.KBD_home,37:n.KBD_left,38:n.KBD_up,39:n.KBD_right,40:n.KBD_down,45:n.KBD_insert,46:n.KBD_delete,48:n.KBD_0,49:n.KBD_1,50:n.KBD_2,51:n.KBD_3,52:n.KBD_4,53:n.KBD_5,54:n.KBD_6,55:n.KBD_7,56:n.KBD_8,57:n.KBD_9,59:n.KBD_semicolon,64:n.KBD_equals,65:n.KBD_a,66:n.KBD_b,67:n.KBD_c,68:n.KBD_d,69:n.KBD_e,70:n.KBD_f,71:n.KBD_g,72:n.KBD_h,73:n.KBD_i,74:n.KBD_j,75:n.KBD_k,76:n.KBD_l,77:n.KBD_m,78:n.KBD_n,79:n.KBD_o,80:n.KBD_p,81:n.KBD_q,82:n.KBD_r,83:n.KBD_s,84:n.KBD_t,85:n.KBD_u,86:n.KBD_v,87:n.KBD_w,88:n.KBD_x,89:n.KBD_y,90:n.KBD_z,91:n.KBD_leftbracket,93:n.KBD_rightbracket,96:n.KBD_kp0,97:n.KBD_kp1,98:n.KBD_kp2,99:n.KBD_kp3,100:n.KBD_kp4,101:n.KBD_kp5,102:n.KBD_kp6,103:n.KBD_kp7,104:n.KBD_kp8,105:n.KBD_kp9,111:n.KBD_kpdivide,112:n.KBD_f1,113:n.KBD_f2,114:n.KBD_f3,115:n.KBD_f4,116:n.KBD_f5,117:n.KBD_f6,118:n.KBD_f7,119:n.KBD_f8,120:n.KBD_f9,121:n.KBD_f10,122:n.KBD_f11,123:n.KBD_f12,144:n.KBD_numlock,145:n.KBD_scrolllock,173:n.KBD_minus,186:n.KBD_semicolon,187:n.KBD_equals,188:n.KBD_comma,189:n.KBD_minus,190:n.KBD_period,191:n.KBD_slash,219:n.KBD_leftbracket,220:n.KBD_backslash,221:n.KBD_rightbracket},n.namedKeyCodes={KBD_NONE:n.KBD_NONE,KBD_0:n.KBD_0,KBD_1:n.KBD_1,KBD_2:n.KBD_2,KBD_3:n.KBD_3,KBD_4:n.KBD_4,KBD_5:n.KBD_5,KBD_6:n.KBD_6,KBD_7:n.KBD_7,KBD_8:n.KBD_8,KBD_9:n.KBD_9,KBD_a:n.KBD_a,KBD_b:n.KBD_b,KBD_c:n.KBD_c,KBD_d:n.KBD_d,KBD_e:n.KBD_e,KBD_f:n.KBD_f,KBD_g:n.KBD_g,KBD_h:n.KBD_h,KBD_i:n.KBD_i,KBD_j:n.KBD_j,KBD_k:n.KBD_k,KBD_l:n.KBD_l,KBD_m:n.KBD_m,KBD_n:n.KBD_n,KBD_o:n.KBD_o,KBD_p:n.KBD_p,KBD_q:n.KBD_q,KBD_r:n.KBD_r,KBD_s:n.KBD_s,KBD_t:n.KBD_t,KBD_u:n.KBD_u,KBD_v:n.KBD_v,KBD_w:n.KBD_w,KBD_x:n.KBD_x,KBD_y:n.KBD_y,KBD_z:n.KBD_z,KBD_f1:n.KBD_f1,KBD_f2:n.KBD_f2,KBD_f3:n.KBD_f3,KBD_f4:n.KBD_f4,KBD_f5:n.KBD_f5,KBD_f6:n.KBD_f6,KBD_f7:n.KBD_f7,KBD_f8:n.KBD_f8,KBD_f9:n.KBD_f9,KBD_f10:n.KBD_f10,KBD_f11:n.KBD_f11,KBD_f12:n.KBD_f12,KBD_kp0:n.KBD_kp0,KBD_kp1:n.KBD_kp1,KBD_kp2:n.KBD_kp2,KBD_kp3:n.KBD_kp3,KBD_kp4:n.KBD_kp4,KBD_kp5:n.KBD_kp5,KBD_kp6:n.KBD_kp6,KBD_kp7:n.KBD_kp7,KBD_kp8:n.KBD_kp8,KBD_kp9:n.KBD_kp9,KBD_kpperiod:n.KBD_kpperiod,KBD_kpdivide:n.KBD_kpdivide,KBD_kpmultiply:n.KBD_kpmultiply,KBD_kpminus:n.KBD_kpminus,KBD_kpplus:n.KBD_kpplus,KBD_kpenter:n.KBD_kpenter,KBD_esc:n.KBD_esc,KBD_tab:n.KBD_tab,KBD_backspace:n.KBD_backspace,KBD_enter:n.KBD_enter,KBD_space:n.KBD_space,KBD_leftalt:n.KBD_leftalt,KBD_rightalt:n.KBD_rightalt,KBD_leftctrl:n.KBD_leftctrl,KBD_rightctrl:n.KBD_rightctrl,KBD_leftshift:n.KBD_leftshift,KBD_rightshift:n.KBD_rightshift,KBD_capslock:n.KBD_capslock,KBD_scrolllock:n.KBD_scrolllock,KBD_numlock:n.KBD_numlock,KBD_grave:n.KBD_grave,KBD_minus:n.KBD_minus,KBD_equals:n.KBD_equals,KBD_backslash:n.KBD_backslash,KBD_leftbracket:n.KBD_leftbracket,KBD_rightbracket:n.KBD_rightbracket,KBD_semicolon:n.KBD_semicolon,KBD_quote:n.KBD_quote,KBD_period:n.KBD_period,KBD_comma:n.KBD_comma,KBD_slash:n.KBD_slash,KBD_printscreen:n.KBD_printscreen,KBD_pause:n.KBD_pause,KBD_insert:n.KBD_insert,KBD_home:n.KBD_home,KBD_pageup:n.KBD_pageup,KBD_delete:n.KBD_delete,KBD_end:n.KBD_end,KBD_pagedown:n.KBD_pagedown,KBD_left:n.KBD_left,KBD_up:n.KBD_up,KBD_down:n.KBD_down,KBD_right:n.KBD_right,KBD_extra_lt_gt:n.KBD_extra_lt_gt},n.keyCodesToDom={};for(var o=0,r=Object.keys(n.domToKeyCodes);o<r.length;o++){var i=r[o],s=Number.parseInt(i,10);n.keyCodesToDom[n.domToKeyCodes[s]]=s}n.domToKeyCode=function(e){return n.domToKeyCodes[e]||0}},{"core-js/modules/es6.array.iterator":99,"core-js/modules/es6.number.constructor":101,"core-js/modules/es6.number.parse-int":102,"core-js/modules/es6.object.keys":103,"core-js/modules/es6.object.to-string":104,"core-js/modules/web.dom.iterable":116}],145:[function(e,t,n){"use strict";function c(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function r(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});var i=e("notyf"),u=o(e("simple-keyboard")),l=e("./helpers"),d=e("./keys"),s=e("element-resize-detector")({});n.layers=function(e,t){return new f(e,t||{})};var f=function(){function t(o,e){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this.fullscreen=!1,this.keyboardVisible=!1,this.pointerLock=!1,this.pointerDisabled=!1,this.pointerButton=0,this.notyf=new i.Notyf,this.toggleKeyboard=function(){return!1},this.onFullscreenChanged=[],this.onKeyboardChanged=[],this.options=e,this.root=o,this.root.classList.add("emulator-root"),this.fullscreenElement=e.fullscreenElement||this.root,this.canvas=document.createElement("canvas"),this.canvas.className="emulator-canvas",this.video=document.createElement("video"),this.video.setAttribute("autoplay",""),this.video.setAttribute("playsinline",""),this.video.className="emulator-video",this.loading=l.createDiv("emulator-loading","\n<div class='emulator-loading-inner'>\n<pre class='emulator-loading-pre-1'>\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n</pre>\n<pre class='emulator-loading-pre-2'>\n</pre>\n<div class='emulator-loader'>\n</div>\n</div>\n"),this.loaderText=this.loading.querySelector(".emulator-loading-pre-2"),this.mouseOverlay=l.createDiv("emulator-mouse-overlay",""),this.clickToStart=l.createDiv("emulator-click-to-start-overlay",'\n<div class="emulator-click-to-start-text">Press to start</div>\n<div class="emulator-click-to-start-icon"></div>\n'),this.clickToStart.onclick=function(){r.clickToStart.style.display="none",r.video.play()},this.root.appendChild(this.canvas),this.root.appendChild(this.video),this.root.appendChild(this.mouseOverlay),this.root.appendChild(this.clickToStart),this.root.appendChild(this.loading),this.width=o.offsetWidth,this.height=o.offsetHeight,this.onResize=[],this.onKeyDown=function(){},this.onKeyUp=function(){},this.onKeyPress=function(){},this.onKeysPress=function(){},this.onSave=function(){return Promise.reject(new Error("Not implemented"))},this.onSaveStarted=function(){},this.onSaveEnded=function(){},s.listenTo(this.root,function(e){if(e===o){r.width=e.offsetWidth,r.height=e.offsetHeight;var t,n=c(r.onResize);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r.width,r.height)}}catch(e){n.e(e)}finally{n.f()}}}),this.initKeyEvents(),this.initKeyboard(),this.preventContextMenu(),this.fullscreenElement.onfullscreenchange=function(){if(document.fullscreenElement!==r.fullscreenElement){r.fullscreen=!1;var e,t=c(r.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(r.fullscreen)}}catch(e){t.e(e)}finally{t.f()}}}}var e,n,o;return e=t,(n=[{key:"initKeyEvents",value:function(){var n=this;window.addEventListener("keydown",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyDown(t)}),window.addEventListener("keyup",function(e){var t=d.domToKeyCode(e.keyCode);n.onKeyUp(t)})}},{key:"preventContextMenu",value:function(){this.root.addEventListener("contextmenu",function(e){return e.stopPropagation(),e.preventDefault(),!1})}},{key:"addOnResize",value:function(e){this.onResize.push(e)}},{key:"removeOnResize",value:function(t){this.onResize=this.onResize.filter(function(e){return e!==t})}},{key:"setOnKeyDown",value:function(e){this.onKeyDown=e}},{key:"fireKeyDown",value:function(e){this.onKeyDown(e)}},{key:"setOnKeyUp",value:function(e){this.onKeyUp=e}},{key:"fireKeyUp",value:function(e){this.onKeyUp(e)}},{key:"setOnKeyPress",value:function(e){this.onKeyPress=e}},{key:"fireKeyPress",value:function(e){this.onKeyPress(e)}},{key:"setOnKeysPress",value:function(e){this.onKeysPress=e}},{key:"fireKeysPress",value:function(e){this.onKeysPress(e)}},{key:"toggleFullscreen",value:function(){if(this.fullscreen){this.fullscreen=!1,this.fullscreenElement.classList.contains("emulator-fullscreen-workaround")?this.fullscreenElement.classList.remove("emulator-fullscreen-workaround"):document.exitFullscreen?document.exitFullscreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.msExitFullscreen&&document.msExitFullscreen();var e,t=c(this.onFullscreenChanged);try{for(t.s();!(e=t.n()).done;){(0,e.value)(!1)}}catch(e){t.e(e)}finally{t.f()}}else{this.fullscreen=!0;var n=this.fullscreenElement;n.requestFullscreen?n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen():n.mozRequestFullScreen?n.mozRequestFullScreen():n.msRequestFullscreen?n.msRequestFullscreen():n.webkitEnterFullscreen?n.webkitEnterFullscreen():this.fullscreenElement.classList.add("emulator-fullscreen-workaround");var o,r=c(this.onFullscreenChanged);try{for(r.s();!(o=r.n()).done;){(0,o.value)(!0)}}catch(e){r.e(e)}finally{r.f()}}}},{key:"setOnFullscreen",value:function(e){this.onFullscreenChanged.push(e)}},{key:"removeOnFullscreen",value:function(t){this.onFullscreenChanged=this.onFullscreenChanged.filter(function(e){return e!==t})}},{key:"setOnKeyboardVisibility",value:function(e){this.onKeyboardChanged.push(e)}},{key:"removeOnKeyboardVisibility",value:function(t){this.onKeyboardChanged=this.onKeyboardChanged.filter(function(e){return e!==t})}},{key:"save",value:function(){var t=this;return this.onSaveStarted(),this.onSave().then(function(){t.notyf.success("Saved"),t.onSaveEnded()}).catch(function(e){t.notyf.error(e.message),t.onSaveEnded()})}},{key:"setOnSave",value:function(e){this.onSave=e}},{key:"getOnSave",value:function(){return this.onSave}},{key:"setOnSaveStarted",value:function(e){this.onSaveStarted=e}},{key:"setOnSaveEnded",value:function(e){this.onSaveEnded=e}},{key:"hideLoadingLayer",value:function(){this.loading.style.visibility="hidden"}},{key:"showLoadingLayer",value:function(){this.loading.style.visibility="visible"}},{key:"setLoadingMessage",value:function(e){this.loaderText.innerHTML=e}},{key:"switchToVideo",value:function(){this.video.style.display="block",this.canvas.style.display="none"}},{key:"showClickToStart",value:function(){this.clickToStart.style.display="flex"}},{key:"initKeyboard",value:function(){var o=this,r=!1,n=[{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space"},{"{esc}":"ESC","{bksp}":"Backspace","{enter}":"⏎","{space}":"Space",q:"й",w:"ц",e:"у",r:"к",t:"е",y:"н",u:"г",i:"ш",o:"щ",p:"з","{":"х","}":"ъ",a:"ф",s:"ы",d:"в",f:"а",g:"п",h:"р",j:"о",k:"л",l:"д",";":"ж","'":"э",z:"я",x:"ч",c:"с",v:"м",b:"и",n:"т",m:"ь",",":"б",".":"ю"}],i=0,s=this.options.keyboardDiv||l.createDiv("");s.classList.add("emulator-keyboard"),s.style.display="none",l.stopPropagation(s);var a=new u.default(s,{layout:{en:["{esc} ` 1 2 3 4 5 6 7 8 9 0 - = {bksp}","q w e r t y u i o p { } \\","a s d f g h j k l ; ' [ {enter}","⎘ z x c v b n m , . / ] {space}"]},layoutName:"en",display:n[i],onKeyPress:function(e){if("⎘"===e)return i=(i+1)%n.length,void a.setOptions({display:n[i]});var t=function(e){{if(1<e.length)return"{enter}"===e?[d.KBD_enter]:"{shift}"===e?[d.KBD_leftshift]:"{bksp}"===e?[d.KBD_backspace]:"{lock}"===e?[d.KBD_capslock]:"{tab}"===e?[d.KBD_tab]:"{space}"===e?[d.KBD_space]:"{esc}"===e?[d.KBD_esc]:"ctrl"===e?[d.KBD_leftctrl]:"{alt}"===e?[d.KBD_leftalt]:(console.warn("Unknown button",e),[]);if(","===e)return[d.KBD_comma];if("."===e)return[d.KBD_period];if("'"===e)return[d.KBD_quote];if(":"===e)return[d.KBD_semicolon];if("{"===e)return[d.KBD_leftshift,d.KBD_leftbracket];if("}"===e)return[d.KBD_leftshift,d.KBD_rightbracket]}var t=d.domToKeyCode(e.toUpperCase().charCodeAt(0));return 0!==t?[t]:[]}(e);1===t.length?o.fireKeyPress(t[0]):0<t.length&&o.fireKeysPress(t)},preventMouseDownDefault:!0,preventMouseUpDefault:!0,stopMouseDownPropagation:!0,stopMouseUpPropagation:!0,autoUseTouchEvents:!0,useMouseEvents:!0});this.toggleKeyboard=function(){var e=(r=!r)?"block":"none";s.style.display=e;var t,n=c(o.onKeyboardChanged);try{for(n.s();!(t=n.n()).done;){(0,t.value)(r)}}catch(e){n.e(e)}finally{n.f()}return o.keyboardVisible=r},this.options.keyboardDiv||this.mouseOverlay.appendChild(s)}}])&&r(e.prototype,n),o&&r(e,o),t}();n.Layers=f},{"./helpers":143,"./keys":144,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116,"element-resize-detector":121,notyf:129,"simple-keyboard":131}],146:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.lifecycle=function(e){var t="",n="";function o(){document[t]?e.pause():e.resume()}void 0!==document.hidden?(t="hidden",n="visibilitychange"):void 0!==document.mozHidden?(t="mozHidden",n="mozvisibilitychange"):void 0!==document.msHidden?(t="msHidden",n="msvisibilitychange"):void 0!==document.webkitHidden&&(t="webkitHidden",n="webkitvisibilitychange"),document.addEventListener(n,o),e.events().onExit(function(){document.removeEventListener(n,o)})}},{}],147:[function(e,t,n){"use strict";function o(e,t){if(e.type.match(/^touch/)){var n=e,o=t.getBoundingClientRect();return{x:n.targetTouches[0].clientX-o.x,y:n.targetTouches[0].clientY-o.y,mX:0,mY:0}}if(e.type.match(/^pointer/)){return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY}}return{x:e.offsetX,y:e.offsetY,mX:e.movementX,mY:e.movementY,button:0===e.button?0:1}}e("core-js/modules/es6.regexp.match"),Object.defineProperty(n,"__esModule",{value:!0}),n.pointer=function(){var e=/iPhone|iPad|iPod|Android/i.test(navigator.userAgent),t=e&&!!("ontouchstart"in window),n=e&&!!window.PointerEvent,o=e&&!!window.MSPointerEvent,r=!0,i=[],s=[],a=[],c=[],u=[];n?(i.push("pointerdown"),a.push("pointerup","pointercancel"),s.push("pointermove"),u.push("touchstart","touchmove","touchend")):o?(i.push("MSPointerDown"),s.push("MSPointerMove"),a.push("MSPointerUp")):t?(r=!1,i.push("touchstart","mousedown"),s.push("touchmove"),a.push("touchend","touchcancel","mouseup")):(i.push("mousedown"),s.push("mousemove"),a.push("mouseup"),c.push("mouseleave"));return{mobile:e,canLock:r,starters:i,changers:s,enders:a,prevents:u,leavers:c}}(),n.getPointerState=o,n.pointers={bind:n.pointer,getPointerState:o}},{"core-js/modules/es6.regexp.match":108}],148:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});function o(){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.dom={layers:r.layers,lifecycle:i.lifecycle,pointers:_.pointers},this.network={resolveBundle:s.resolveBundle},this.graphics={webGl:c.webGl,_2d:a._2d,video:u.video},this.sound={audioNode:y.audioNode},this.persist={save:m.save,load:m.load},this.controls={getGrid:g.getGrid,namedKeyCodes:h.namedKeyCodes,domToKeyCodes:h.domToKeyCodes,domToKeyCode:h.domToKeyCode,keyCodesToDom:h.keyCodesToDom,keyboard:l.keyboard,mouse:d.mouse,nipple:f.nipple,options:p.options},this.notifications={notyf:v.notyf},this.dos=function(e,t){return new b.DosInstance(e,n,t||{})}}var r=e("./dom/layers"),i=e("./dom/lifecycle"),s=e("./network/xhr"),a=e("./graphics/_2d"),c=e("./graphics/webgl"),u=e("./graphics/video"),l=e("./controls/keyboard"),d=e("./controls/mouse"),f=e("./controls/nipple"),p=e("./controls/options"),h=e("./dom/keys"),y=e("./sound/audio-node"),v=e("./notification/notyf"),m=e("./persist/save-load"),g=e("./controls/grid"),_=e("./dom/pointer"),b=e("./js-dos"),w=new(n.EmulatorsUi=o);window.emulatorsUi=w,window.Dos=w.dos},{"./controls/grid":134,"./controls/keyboard":135,"./controls/mouse":139,"./controls/nipple":140,"./controls/options":142,"./dom/keys":144,"./dom/layers":145,"./dom/lifecycle":146,"./dom/pointer":147,"./graphics/_2d":149,"./graphics/video":150,"./graphics/webgl":151,"./js-dos":152,"./network/xhr":153,"./notification/notyf":154,"./persist/save-load":155,"./sound/audio-node":156}],149:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.uint8-clamped-array"),Object.defineProperty(n,"__esModule",{value:!0}),n._2d=function(e,t){var o=e.canvas,r=o.getContext("2d");if(null===r)throw new Error("Unable to create 2d context on given canvas");function n(){var e=c/u,t=s,n=s/e;a<n&&(t=(n=a)*e),o.style.position="relative",o.style.top=(a-n)/2+"px",o.style.left=(s-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function i(e,t){s=e,a=t,n()}var s=e.width,a=e.height,c=0,u=0;function l(e,t){c=e,u=t,o.width=c,o.height=u,d=new Uint8ClampedArray(e*t*4),n()}e.addOnResize(i);var d=new Uint8ClampedArray(0);t.events().onFrameSize(l),t.events().onFrame(function(e){for(var t=0,n=0;n<d.length;)d[n++]=e[t++],d[n++]=e[t++],d[n++]=e[t++],d[n++]=255;r.putImageData(new ImageData(d,c,u),0,0)}),l(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(i)})}},{"core-js/modules/es6.typed.uint8-clamped-array":114}],150:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.video=function(n,e){n.switchToVideo(),e.events().onMessage(function(e,t){"onremotestream"===e&&window.Janus.attachMediaStream(n.video,t)})}},{}],151:[function(e,t,n){"use strict";e("core-js/modules/es6.typed.float32-array"),e("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(n,"__esModule",{value:!0});function m(e,t,n){var o=e.createShader(t);if(e.shaderSource(o,n),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS))return o;var r=e.getShaderInfoLog(o);throw e.deleteShader(o),new Error("An error occurred compiling the shaders: "+r)}n.webGl=function(e,t){var o=e.canvas,n=o.getContext("webgl");if(null===n)throw new Error("Unable to create webgl context on given canvas");var r=function(e,t,n){var o=m(e,e.VERTEX_SHADER,t),r=m(e,e.FRAGMENT_SHADER,n),i=e.createProgram();if(e.attachShader(i,o),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS))return i;throw new Error("Unable to initialize the shader program: "+e.getProgramInfoLog(i))}(n,"\nattribute vec4 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nvarying highp vec2 vTextureCoord;\n\nvoid main(void) {\n  gl_Position = aVertexPosition;\n  vTextureCoord = aTextureCoord;\n}\n","\nvarying highp vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\n\nvoid main(void) {\n  highp vec4 color = texture2D(uSampler, vTextureCoord);\n  gl_FragColor = vec4(color.r, color.g, color.b, 1.0);\n}\n"),i=n.getAttribLocation(r,"aVertexPosition"),s=n.getAttribLocation(r,"aTextureCoord"),a=n.getUniformLocation(r,"uSampler");!function(e,t,n){var o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,-1,0,1,1,0,-1,1,0]),e.STATIC_DRAW),e.vertexAttribPointer(t,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t);var r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,1,1,1,1,0,0,1,1,0,0,0]),e.STATIC_DRAW),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(n)}(n,i,s);var c=n.createTexture();n.bindTexture(n.TEXTURE_2D,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR);var u=new Uint8Array([0,0,0]);function l(){var e=h/y,t=f,n=f/e;p<n&&(t=(n=p)*e),o.style.position="relative",o.style.top=(p-n)/2+"px",o.style.left=(f-t)/2+"px",o.style.width=t+"px",o.style.height=n+"px"}function d(e,t){f=e,p=t,l()}n.texImage2D(n.TEXTURE_2D,0,n.RGB,1,1,0,n.RGB,n.UNSIGNED_BYTE,u),n.useProgram(r),n.activeTexture(n.TEXTURE0),n.uniform1i(a,0);var f=e.width,p=e.height,h=0,y=0;function v(e,t){h=e,y=t,o.width=h,o.height=y,n.viewport(0,0,h,y),l()}e.addOnResize(d),t.events().onFrameSize(v),t.events().onFrame(function(e){n.texImage2D(n.TEXTURE_2D,0,n.RGB,h,y,0,n.RGB,n.UNSIGNED_BYTE,e),n.drawArrays(n.TRIANGLES,0,6)}),v(t.width(),t.height()),t.events().onExit(function(){e.removeOnResize(d)})}},{"core-js/modules/es6.typed.float32-array":112,"core-js/modules/es6.typed.uint8-array":113}],152:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function u(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),Object.defineProperty(n,"__esModule",{value:!0});var d=e("./build"),f=e("./controls/layers-config"),p=e("./controls/legacy-layers-control"),h=e("./controls/null-layers-control"),y=e("./controls/layers-control"),v=e("./dom/pointer"),o=function(){function o(e,t,n){if(!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.layersConfig=null,this.unbindControls=function(){},this.storedLayersConfig=null,o.initialRun&&(emulators.cacheSeed+=" ui ("+d.Build.short+")",o.initialRun=!1),this.options=n,this.emulatorsUi=t,this.emulatorFunction=n.emulatorFunction||"dosboxWorker",this.clickToStart=n.clickToStart||!1,this.layers=this.emulatorsUi.dom.layers(e,n.layersOptions),this.layers.showLoadingLayer(),this.createTransportLayer=n.createTransportLayer,this.mobileControls=v.pointers.bind.mobile,this.onMobileControlsChanged=function(){},"backend"===this.emulatorFunction&&void 0===this.createTransportLayer)throw new Error("Emulator function set to 'backend' but 'createTransportLayer' is not a function")}var e,t,n,r,i,s,a;return e=o,(t=[{key:"run",value:(a=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.stop();case 2:return this.layers.setLoadingMessage("Starting..."),r=null!=o&&0<o.length?o:t+".changes",e.prev=4,e.next=7,this.runBundle(t,n,r);case 7:i=e.sent,e.next=16;break;case 10:throw e.prev=10,e.t0=e.catch(4),this.layers.setLoadingMessage("Unexpected error occured..."),this.layers.notyf.error({message:"Can't start emulator look browser logs for more info"}),console.error(e.t0),e.t0;case 16:if(s=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=21;break}s.graphics.video(this.layers,i),e.next=33;break;case 21:if(s.persist.save(r,this.layers,i,emulators),e.prev=22,!0===this.options.noWebGL)throw new Error("WebGL is disabled by options");e.next=25;break;case 25:s.graphics.webGl(this.layers,i),e.next=32;break;case 28:e.prev=28,e.t1=e.catch(22),console.error("Unable to create webgl canvas, fallback to 2d rendering"),s.graphics._2d(this.layers,i);case 32:s.sound.audioNode(i);case 33:return s.dom.lifecycle(i),e.next=36,i.config();case 36:return a=e.sent,e.next=39,this.setLayersConfig(f.extractLayersConfig(a));case 39:return this.mobileControls||this.disableMobileControls(),this.layers.setLoadingMessage("Ready"),this.layers.hideLoadingLayer(),this.clickToStart&&this.layers.showClickToStart(),e.abrupt("return",i);case 44:case"end":return e.stop()}},e,this,[[4,10],[22,28]])})),function(e,t,n){return a.apply(this,arguments)})},{key:"stop",value:(s=u(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(this.layers.showLoadingLayer(),void 0===this.ciPromise)return e.abrupt("return");e.next=3;break;case 3:return e.next=5,this.ciPromise;case 5:return t=e.sent,delete this.ciPromise,e.next=9,t.exit();case 9:return e.abrupt("return");case 10:case"end":return e.stop()}},e,this)})),function(){return s.apply(this,arguments)})},{key:"setLayersConfig",value:(i=u(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===this.ciPromise)return e.abrupt("return");e.next=2;break;case 2:return e.next=4,this.ciPromise;case 4:o=e.sent,this.layersConfig=t,this.unbindControls(),null===t?this.unbindControls=h.initNullLayersControl(this.layers,o):void 0===t.version?this.unbindControls=p.initLegacyLayersControl(this.layers,t,o):this.unbindControls=y.initLayersControl(this.layers,t,o,this,n);case 8:case"end":return e.stop()}},e,this)})),function(e,t){return i.apply(this,arguments)})},{key:"getLayersConfig",value:function(){return this.layersConfig}},{key:"enableMobileControls",value:function(){this.mobileControls=!0,this.setLayersConfig(this.storedLayersConfig),this.storedLayersConfig=null,this.onMobileControlsChanged(!0)}},{key:"disableMobileControls",value:function(){this.mobileControls=!1,this.storedLayersConfig=this.layersConfig,this.setLayersConfig(null),this.onMobileControlsChanged(!1)}},{key:"setOnMobileControlsChanged",value:function(e){this.onMobileControlsChanged=e}},{key:"runBundle",value:(r=u(regeneratorRuntime.mark(function e(t,n,o){var r,i,s,a,c,u=this;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=this.emulatorsUi,"janus"!==this.emulatorFunction){e.next=6;break}this.layers.setLoadingMessage("Connecting..."),this.ciPromise=emulators.janus(t),e.next=30;break;case 6:if(this.layers.setLoadingMessage("Downloading bundle ..."),i=r.network.resolveBundle(t,{onprogress:function(e){return u.layers.setLoadingMessage("Downloading bundle "+e+"%")}}),e.prev=8,null!=n&&0<n.length)return e.next=12,r.network.resolveBundle(n,{httpCache:!1});e.next=15;break;case 12:s=e.sent,e.next=18;break;case 15:return e.next=17,r.persist.load(o,emulators);case 17:s=e.sent;case 18:return e.next=20,i;case 20:a=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([a,s],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([a,s]),e.next=30;break;case 24:return e.prev=24,e.t0=e.catch(8),e.next=28,i;case 28:c=e.sent,"backend"===this.emulatorFunction?this.ciPromise=emulators.backend([c],this.createTransportLayer()):this.ciPromise=emulators[this.emulatorFunction]([c]);case 30:return e.abrupt("return",this.ciPromise);case 31:case"end":return e.stop()}},e,this,[[8,24]])})),function(e,t,n){return r.apply(this,arguments)})}])&&l(e.prototype,t),n&&l(e,n),o}();(n.DosInstance=o).initialRun=!0},{"./build":132,"./controls/layers-config":136,"./controls/layers-control":137,"./controls/legacy-layers-control":138,"./controls/null-layers-control":141,"./dom/pointer":147,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"regenerator-runtime/runtime":130}],153:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function o(){var a;return a=regeneratorRuntime.mark(function e(o,t){var n,r,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=(null==t?void 0:t.cache)||null,r=null==t?void 0:t.onprogress,i=!(!1===(null==t?void 0:t.httpCache)),e.prev=3,null===n)throw new Error("no-cache");e.next=6;break;case 6:if(e.t0=n,e.t0){e.next=11;break}return e.next=10,emulators.cache();case 10:e.t0=e.sent;case 11:return s=e.t0,e.next=14,s.get(o);case 14:return a=e.sent,void 0!==r&&r(100),e.abrupt("return",new Uint8Array(a));case 19:return e.prev=19,e.t1=e.catch(3),e.abrupt("return",new Promise(function(e,t){var n=new XMLHttpRequest;n.open("GET",o,!0),n.overrideMimeType("text/plain; charset=x-user-defined"),n.addEventListener("error",function(){t(new Error("Network error, can't download "+o))}),n.addEventListener("abort",function(){t(new Error("Request canceled for url "+o))},!1),n.responseType="arraybuffer",n.onreadystatechange=function(){4===n.readyState&&(200===n.status?(void 0!==r&&r(100),e(new Uint8Array(n.response))):t(new Error("Network error, can't download "+o)))},void 0!==r&&(n.onprogress=function(e){if(e.total&&0<e.total){var t=Math.round(1e4*e.loaded/e.total)/100;r(t)}}),!1===i&&(n.setRequestHeader("Cache-Control","no-cache, no-store, max-age=0"),n.setRequestHeader("Expires","Tue, 01 Jan 1980 1:00:00 GMT"),n.setRequestHeader("Pragma","no-cache")),n.send()}));case 22:case"end":return e.stop()}},e,null,[[3,19]])}),(o=function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}).apply(this,arguments)}e("core-js/modules/es6.typed.uint8-array"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(n,"__esModule",{value:!0}),n.resolveBundle=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.typed.uint8-array":113,"regenerator-runtime/runtime":130}],154:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.notyf=function(e,t){var r=e.notyf;t.events().onMessage(function(e){if("error"===e){for(var t=arguments.length,n=new Array(1<t?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];r.error({message:JSON.stringify(n)})}})}},{}],155:[function(e,t,n){"use strict";function c(e,t,n,o,r,i,s){try{var a=e[i](s),c=a.value}catch(e){return void n(e)}a.done?t(c):Promise.resolve(c).then(o,r)}function s(a){return function(){var e=this,s=arguments;return new Promise(function(t,n){var o=a.apply(e,s);function r(e){c(o,t,n,r,i,"next",e)}function i(e){c(o,t,n,r,i,"throw",e)}r(void 0)})}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime"),Object.defineProperty(n,"__esModule",{value:!0});var a="emulators-ui-saves";function o(){return(o=s(regeneratorRuntime.mark(function e(t,n){var o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.cache(a);case 2:return o=e.sent,e.abrupt("return",o.get(t).then(function(e){return new Uint8Array(e)}));case 4:case"end":return e.stop()}},e)}))).apply(this,arguments)}n.save=function(o,e,r,i){e.setOnSave(s(regeneratorRuntime.mark(function e(){var t,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,i.cache(a);case 2:return t=e.sent,e.next=5,r.persist();case 5:return n=e.sent,e.abrupt("return",t.put(o,n.buffer));case 7:case"end":return e.stop()}},e)})))},n.load=function(e,t){return o.apply(this,arguments)}},{"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.promise":105,"core-js/modules/es6.typed.uint8-array":113,"regenerator-runtime/runtime":130}],156:[function(e,t,n){"use strict";function r(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,r,i=!0,s=!1;return{s:function(){o=e[Symbol.iterator]()},n:function(){var e=o.next();return i=e.done,e},e:function(e){s=!0,r=e},f:function(){try{i||null==o.return||o.return()}finally{if(s)throw r}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.array.fill"),Object.defineProperty(n,"__esModule",{value:!0});var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.samplesQueue=[]}var t,n,o;return t=e,(n=[{key:"push",value:function(e){this.samplesQueue.push(e)}},{key:"length",value:function(){var e,t=0,n=r(this.samplesQueue);try{for(n.s();!(e=n.n()).done;){t+=e.value.length}}catch(e){n.e(e)}finally{n.f()}return t}},{key:"writeTo",value:function(e,t){for(var n=0;0<this.samplesQueue.length;){var o=this.samplesQueue[0],r=Math.min(t-n,o.length);if(r===o.length?(e.set(o,n),this.samplesQueue.shift()):(e.set(o.slice(0,r),n),this.samplesQueue[0]=o.slice(r)),(n+=r)===t)break}n<t&&e.fill(0,n)}}])&&i(t.prototype,n),o&&i(t,o),e}();n.audioNode=function(e){var t=e.soundFrequency();if(0!==t){var n=null;if("undefined"!=typeof AudioContext?n=new AudioContext({sampleRate:t,latencyHint:"interactive"}):void 0!==window.webkitAudioContext&&(n=new window.webkitAudioContext({sampleRate:t,latencyHint:"interactive"})),null!=n){var s=new c;e.events().onSoundPush(function(e){s.length()<6144&&s.push(e)});var o=n.createScriptProcessor(2048,0,1),a=!1;o.onaudioprocess=function(e){var t=e.outputBuffer.length,n=e.outputBuffer.numberOfChannels,o=s.length();if(a=a||2048<=o)for(var r=0;r<n;r++){var i=e.outputBuffer.getChannelData(r);s.writeTo(i,t)}},o.connect(n.destination);var r=function(){null!==n&&"suspended"===n.state&&n.resume()};document.addEventListener("click",r,{once:!0}),document.addEventListener("touchstart",r,{once:!0}),document.addEventListener("keydown",r,{once:!0}),e.events().onExit(function(){null!==n&&(o.disconnect(),n.close()),document.removeEventListener("click",r),document.removeEventListener("touchstart",r),document.removeEventListener("keydown",r)})}}else console.warn("Can't create audio node with sampleRate === 0, ingnoring")}},{"core-js/modules/es6.array.fill":97,"core-js/modules/es6.array.from":98,"core-js/modules/es6.function.name":100,"core-js/modules/es6.object.to-string":104,"core-js/modules/es6.regexp.to-string":109,"core-js/modules/es6.string.iterator":110,"core-js/modules/es6.symbol":111,"core-js/modules/es7.symbol.async-iterator":115,"core-js/modules/web.dom.iterable":116}]},{},[148]);


!function i(s,a,u){function c(t,e){if(!a[t]){if(!s[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var o=a[t]={exports:{}};s[t][0].call(o.exports,function(e){return c(s[t][1][e]||e)},o,o.exports,i,s,a,u)}return a[t].exports}for(var l="function"==typeof require&&require,e=0;e<u.length;e++)c(u[e]);return c}({1:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],2:[function(e,t,r){var n=e("./_wks")("unscopables"),o=Array.prototype;null==o[n]&&e("./_hide")(o,n,{}),t.exports=function(e){o[n][e]=!0}},{"./_hide":31,"./_wks":99}],3:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);t.exports=function(e,t,r){return t+(r?n(e,t).length:1)}},{"./_string-at":80}],4:[function(e,t,r){t.exports=function(e,t,r,n){if(!(e instanceof t)||void 0!==n&&n in e)throw TypeError(r+": incorrect invocation!");return e}},{}],5:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":39}],6:[function(e,t,r){"use strict";var l=e("./_to-object"),f=e("./_to-absolute-index"),d=e("./_to-length");t.exports=[].copyWithin||function(e,t,r){var n=l(this),o=d(n.length),i=f(e,o),s=f(t,o),a=2<arguments.length?r:void 0,u=Math.min((void 0===a?o:f(a,o))-s,o-i),c=1;for(s<i&&i<s+u&&(c=-1,s+=u-1,i+=u-1);0<u--;)s in n?n[i]=n[s]:delete n[i],i+=c,s+=c;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],7:[function(e,t,r){"use strict";var c=e("./_to-object"),l=e("./_to-absolute-index"),f=e("./_to-length");t.exports=function(e,t,r){for(var n=c(this),o=f(n.length),i=arguments.length,s=l(1<i?t:void 0,o),a=2<i?r:void 0,u=void 0===a?o:l(a,o);s<u;)n[s++]=e;return n}},{"./_to-absolute-index":85,"./_to-length":89,"./_to-object":90}],8:[function(e,t,r){var u=e("./_to-iobject"),c=e("./_to-length"),l=e("./_to-absolute-index");t.exports=function(a){return function(e,t,r){var n,o=u(e),i=c(o.length),s=l(r,i);if(a&&t!=t){for(;s<i;)if((n=o[s++])!=n)return!0}else for(;s<i;s++)if((a||s in o)&&o[s]===t)return a||s||0;return!a&&-1}}},{"./_to-absolute-index":85,"./_to-iobject":88,"./_to-length":89}],9:[function(e,t,r){var _=e("./_ctx"),b=e("./_iobject"),w=e("./_to-object"),j=e("./_to-length"),n=e("./_array-species-create");t.exports=function(f,e){var d=1==f,p=2==f,h=3==f,m=4==f,v=6==f,y=5==f||v,g=e||n;return function(e,t,r){for(var n,o,i=w(e),s=b(i),a=_(t,r,3),u=j(s.length),c=0,l=d?g(e,u):p?g(e,0):void 0;c<u;c++)if((y||c in s)&&(o=a(n=s[c],c,i),f))if(d)l[c]=o;else if(o)switch(f){case 3:return!0;case 5:return n;case 6:return c;case 2:l.push(n)}else if(m)return!1;return v?-1:h||m?m:l}}},{"./_array-species-create":11,"./_ctx":16,"./_iobject":36,"./_to-length":89,"./_to-object":90}],10:[function(e,t,r){var n=e("./_is-object"),o=e("./_is-array"),i=e("./_wks")("species");t.exports=function(e){var t;return o(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!o(t.prototype)||(t=void 0),n(t)&&null===(t=t[i])&&(t=void 0)),void 0===t?Array:t}},{"./_is-array":38,"./_is-object":39,"./_wks":99}],11:[function(e,t,r){var n=e("./_array-species-constructor");t.exports=function(e,t){return new(n(e))(t)}},{"./_array-species-constructor":10}],12:[function(e,t,r){var o=e("./_cof"),i=e("./_wks")("toStringTag"),s="Arguments"==o(function(){return arguments}());t.exports=function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?r:s?o(t):"Object"==(n=o(t))&&"function"==typeof t.callee?"Arguments":n}},{"./_cof":13,"./_wks":99}],13:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],14:[function(e,t,r){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},{}],15:[function(e,t,r){"use strict";var n=e("./_object-dp"),o=e("./_property-desc");t.exports=function(e,t,r){t in e?n.f(e,t,o(0,r)):e[t]=r}},{"./_object-dp":54,"./_property-desc":69}],16:[function(e,t,r){var i=e("./_a-function");t.exports=function(n,o,e){if(i(n),void 0===o)return n;switch(e){case 1:return function(e){return n.call(o,e)};case 2:return function(e,t){return n.call(o,e,t)};case 3:return function(e,t,r){return n.call(o,e,t,r)}}return function(){return n.apply(o,arguments)}}},{"./_a-function":1}],17:[function(e,t,r){t.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},{}],18:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":24}],19:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":29,"./_is-object":39}],20:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],21:[function(e,t,r){var a=e("./_object-keys"),u=e("./_object-gops"),c=e("./_object-pie");t.exports=function(e){var t=a(e),r=u.f;if(r)for(var n,o=r(e),i=c.f,s=0;o.length>s;)i.call(e,n=o[s++])&&t.push(n);return t}},{"./_object-gops":59,"./_object-keys":62,"./_object-pie":63}],22:[function(e,t,r){var m=e("./_global"),v=e("./_core"),y=e("./_hide"),g=e("./_redefine"),_=e("./_ctx"),b="prototype",w=function(e,t,r){var n,o,i,s,a=e&w.F,u=e&w.G,c=e&w.S,l=e&w.P,f=e&w.B,d=u?m:c?m[t]||(m[t]={}):(m[t]||{})[b],p=u?v:v[t]||(v[t]={}),h=p[b]||(p[b]={});for(n in u&&(r=t),r)i=((o=!a&&d&&void 0!==d[n])?d:r)[n],s=f&&o?_(i,m):l&&"function"==typeof i?_(Function.call,i):i,d&&g(d,n,i,e&w.U),p[n]!=i&&y(p,n,s),l&&h[n]!=i&&(h[n]=i)};m.core=v,w.F=1,w.G=2,w.S=4,w.P=8,w.B=16,w.W=32,w.U=64,w.R=128,t.exports=w},{"./_core":14,"./_ctx":16,"./_global":29,"./_hide":31,"./_redefine":71}],23:[function(e,t,r){var n=e("./_wks")("match");t.exports=function(t){var r=/./;try{"/./"[t](r)}catch(e){try{return r[n]=!1,!"/./"[t](r)}catch(e){}}return!0}},{"./_wks":99}],24:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(e){return!0}}},{}],25:[function(e,t,r){"use strict";e("./es6.regexp.exec");var l=e("./_redefine"),f=e("./_hide"),d=e("./_fails"),p=e("./_defined"),h=e("./_wks"),m=e("./_regexp-exec"),v=h("species"),y=!d(function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}),g=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var r="ab".split(e);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(r,e,t){var n=h(r),i=!d(function(){var e={};return e[n]=function(){return 7},7!=""[r](e)}),o=i?!d(function(){var e=!1,t=/a/;return t.exec=function(){return e=!0,null},"split"===r&&(t.constructor={},t.constructor[v]=function(){return t}),t[n](""),!e}):void 0;if(!i||!o||"replace"===r&&!y||"split"===r&&!g){var s=/./[n],a=t(p,n,""[r],function(e,t,r,n,o){return t.exec===m?i&&!o?{done:!0,value:s.call(t,r,n)}:{done:!0,value:e.call(r,t,n)}:{done:!1}}),u=a[0],c=a[1];l(String.prototype,r,u),f(RegExp.prototype,n,2==e?function(e,t){return c.call(e,this,t)}:function(e){return c.call(e,this)})}}},{"./_defined":17,"./_fails":24,"./_hide":31,"./_redefine":71,"./_regexp-exec":73,"./_wks":99,"./es6.regexp.exec":115}],26:[function(e,t,r){"use strict";var n=e("./_an-object");t.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},{"./_an-object":5}],27:[function(e,t,r){var d=e("./_ctx"),p=e("./_iter-call"),h=e("./_is-array-iter"),m=e("./_an-object"),v=e("./_to-length"),y=e("./core.get-iterator-method"),g={},_={};(r=t.exports=function(e,t,r,n,o){var i,s,a,u,c=o?function(){return e}:y(e),l=d(r,n,t?2:1),f=0;if("function"!=typeof c)throw TypeError(e+" is not iterable!");if(h(c)){for(i=v(e.length);f<i;f++)if((u=t?l(m(s=e[f])[0],s[1]):l(e[f]))===g||u===_)return u}else for(a=c.call(e);!(s=a.next()).done;)if((u=p(a,l,s.value,t))===g||u===_)return u}).BREAK=g,r.RETURN=_},{"./_an-object":5,"./_ctx":16,"./_is-array-iter":37,"./_iter-call":41,"./_to-length":89,"./core.get-iterator-method":100}],28:[function(e,t,r){t.exports=e("./_shared")("native-function-to-string",Function.toString)},{"./_shared":78}],29:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],30:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],31:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":18,"./_object-dp":54,"./_property-desc":69}],32:[function(e,t,r){var n=e("./_global").document;t.exports=n&&n.documentElement},{"./_global":29}],33:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":18,"./_dom-create":19,"./_fails":24}],34:[function(e,t,r){var i=e("./_is-object"),s=e("./_set-proto").set;t.exports=function(e,t,r){var n,o=t.constructor;return o!==r&&"function"==typeof o&&(n=o.prototype)!==r.prototype&&i(n)&&s&&s(e,n),e}},{"./_is-object":39,"./_set-proto":74}],35:[function(e,t,r){t.exports=function(e,t,r){var n=void 0===r;switch(t.length){case 0:return n?e():e.call(r);case 1:return n?e(t[0]):e.call(r,t[0]);case 2:return n?e(t[0],t[1]):e.call(r,t[0],t[1]);case 3:return n?e(t[0],t[1],t[2]):e.call(r,t[0],t[1],t[2]);case 4:return n?e(t[0],t[1],t[2],t[3]):e.call(r,t[0],t[1],t[2],t[3])}return e.apply(r,t)}},{}],36:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":13}],37:[function(e,t,r){var n=e("./_iterators"),o=e("./_wks")("iterator"),i=Array.prototype;t.exports=function(e){return void 0!==e&&(n.Array===e||i[o]===e)}},{"./_iterators":46,"./_wks":99}],38:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":13}],39:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],40:[function(e,t,r){var n=e("./_is-object"),o=e("./_cof"),i=e("./_wks")("match");t.exports=function(e){var t;return n(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},{"./_cof":13,"./_is-object":39,"./_wks":99}],41:[function(e,t,r){var i=e("./_an-object");t.exports=function(t,e,r,n){try{return n?e(i(r)[0],r[1]):e(r)}catch(e){var o=t.return;throw void 0!==o&&i(o.call(t)),e}}},{"./_an-object":5}],42:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),s={};e("./_hide")(s,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(s,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":31,"./_object-create":53,"./_property-desc":69,"./_set-to-string-tag":76,"./_wks":99}],43:[function(e,t,r){"use strict";function _(){return this}var b=e("./_library"),w=e("./_export"),j=e("./_redefine"),x=e("./_hide"),k=e("./_iterators"),S=e("./_iter-create"),P=e("./_set-to-string-tag"),M=e("./_object-gpo"),E=e("./_wks")("iterator"),O=!([].keys&&"next"in[].keys()),I="values";t.exports=function(e,t,r,n,o,i,s){S(r,t,n);function a(e){if(!O&&e in h)return h[e];switch(e){case"keys":case I:return function(){return new r(this,e)}}return function(){return new r(this,e)}}var u,c,l,f=t+" Iterator",d=o==I,p=!1,h=e.prototype,m=h[E]||h["@@iterator"]||o&&h[o],v=m||a(o),y=o?d?a("entries"):v:void 0,g="Array"==t&&h.entries||m;if(g&&(l=M(g.call(new e)))!==Object.prototype&&l.next&&(P(l,f,!0),b||"function"==typeof l[E]||x(l,E,_)),d&&m&&m.name!==I&&(p=!0,v=function(){return m.call(this)}),b&&!s||!O&&!p&&h[E]||x(h,E,v),k[t]=v,k[f]=_,o)if(u={values:d?v:a(I),keys:i?v:a("keys"),entries:y},s)for(c in u)c in h||j(h,c,u[c]);else w(w.P+w.F*(O||p),t,u);return u}},{"./_export":22,"./_hide":31,"./_iter-create":42,"./_iterators":46,"./_library":47,"./_object-gpo":60,"./_redefine":71,"./_set-to-string-tag":76,"./_wks":99}],44:[function(e,t,r){var i=e("./_wks")("iterator"),s=!1;try{var n=[7][i]();n.return=function(){s=!0},Array.from(n,function(){throw 2})}catch(e){}t.exports=function(e,t){if(!t&&!s)return!1;var r=!1;try{var n=[7],o=n[i]();o.next=function(){return{done:r=!0}},n[i]=function(){return o},e(n)}catch(e){}return r}},{"./_wks":99}],45:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],46:[function(e,t,r){t.exports={}},{}],47:[function(e,t,r){t.exports=!1},{}],48:[function(e,t,r){var i=e("./_math-sign"),n=Math.pow,s=n(2,-52),a=n(2,-23),u=n(2,127)*(2-a),c=n(2,-126);t.exports=Math.fround||function(e){var t,r,n=Math.abs(e),o=i(e);return n<c?o*(n/c/a+1/s-1/s)*c*a:u<(r=(t=(1+a/s)*n)-(t-n))||r!=r?o*(1/0):o*r}},{"./_math-sign":49}],49:[function(e,t,r){t.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},{}],50:[function(e,t,r){function n(e){a(e,o,{value:{i:"O"+ ++u,w:{}}})}var o=e("./_uid")("meta"),i=e("./_is-object"),s=e("./_has"),a=e("./_object-dp").f,u=0,c=Object.isExtensible||function(){return!0},l=!e("./_fails")(function(){return c(Object.preventExtensions({}))}),f=t.exports={KEY:o,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!s(e,o)){if(!c(e))return"F";if(!t)return"E";n(e)}return e[o].i},getWeak:function(e,t){if(!s(e,o)){if(!c(e))return!0;if(!t)return!1;n(e)}return e[o].w},onFreeze:function(e){return l&&f.NEED&&c(e)&&!s(e,o)&&n(e),e}}},{"./_fails":24,"./_has":30,"./_is-object":39,"./_object-dp":54,"./_uid":95}],51:[function(e,t,r){var a=e("./_global"),u=e("./_task").set,c=a.MutationObserver||a.WebKitMutationObserver,l=a.process,f=a.Promise,d="process"==e("./_cof")(l);t.exports=function(){function e(){var e,t;for(d&&(e=l.domain)&&e.exit();r;){t=r.fn,r=r.next;try{t()}catch(e){throw r?o():n=void 0,e}}n=void 0,e&&e.enter()}var r,n,o;if(d)o=function(){l.nextTick(e)};else if(!c||a.navigator&&a.navigator.standalone)if(f&&f.resolve){var t=f.resolve(void 0);o=function(){t.then(e)}}else o=function(){u.call(a,e)};else{var i=!0,s=document.createTextNode("");new c(e).observe(s,{characterData:!0}),o=function(){s.data=i=!i}}return function(e){var t={fn:e,next:void 0};n&&(n.next=t),r||(r=t,o()),n=t}}},{"./_cof":13,"./_global":29,"./_task":84}],52:[function(e,t,r){"use strict";var o=e("./_a-function");function n(e){var r,n;this.promise=new e(function(e,t){if(void 0!==r||void 0!==n)throw TypeError("Bad Promise constructor");r=e,n=t}),this.resolve=o(r),this.reject=o(n)}t.exports.f=function(e){return new n(e)}},{"./_a-function":1}],53:[function(n,e,t){function o(){}var i=n("./_an-object"),s=n("./_object-dps"),a=n("./_enum-bug-keys"),u=n("./_shared-key")("IE_PROTO"),c="prototype",l=function(){var e,t=n("./_dom-create")("iframe"),r=a.length;for(t.style.display="none",n("./_html").appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),l=e.F;r--;)delete l[c][a[r]];return l()};e.exports=Object.create||function(e,t){var r;return null!==e?(o[c]=i(e),r=new o,o[c]=null,r[u]=e):r=l(),void 0===t?r:s(r,t)}},{"./_an-object":5,"./_dom-create":19,"./_enum-bug-keys":20,"./_html":32,"./_object-dps":55,"./_shared-key":77}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),s=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return s(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":5,"./_descriptors":18,"./_ie8-dom-define":33,"./_to-primitive":91}],55:[function(e,t,r){var s=e("./_object-dp"),a=e("./_an-object"),u=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){a(e);for(var r,n=u(t),o=n.length,i=0;i<o;)s.f(e,r=n[i++],t[r]);return e}},{"./_an-object":5,"./_descriptors":18,"./_object-dp":54,"./_object-keys":62}],56:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),s=e("./_to-primitive"),a=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=s(t,!0),u)try{return c(e,t)}catch(e){}if(a(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":18,"./_has":30,"./_ie8-dom-define":33,"./_object-pie":63,"./_property-desc":69,"./_to-iobject":88,"./_to-primitive":91}],57:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(e){return s&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return s.slice()}}(e):o(n(e))}},{"./_object-gopn":58,"./_to-iobject":88}],58:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],59:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],60:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?s:null}},{"./_has":30,"./_shared-key":77,"./_to-object":90}],61:[function(e,t,r){var s=e("./_has"),a=e("./_to-iobject"),u=e("./_array-includes")(!1),c=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,n=a(e),o=0,i=[];for(r in n)r!=c&&s(n,r)&&i.push(r);for(;t.length>o;)s(n,r=t[o++])&&(~u(i,r)||i.push(r));return i}},{"./_array-includes":8,"./_has":30,"./_shared-key":77,"./_to-iobject":88}],62:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":20,"./_object-keys-internal":61}],63:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],64:[function(e,t,r){var o=e("./_export"),i=e("./_core"),s=e("./_fails");t.exports=function(e,t){var r=(i.Object||{})[e]||Object[e],n={};n[e]=t(r),o(o.S+o.F*s(function(){r(1)}),"Object",n)}},{"./_core":14,"./_export":22,"./_fails":24}],65:[function(e,t,r){var n=e("./_object-gopn"),o=e("./_object-gops"),i=e("./_an-object"),s=e("./_global").Reflect;t.exports=s&&s.ownKeys||function(e){var t=n.f(i(e)),r=o.f;return r?t.concat(r(e)):t}},{"./_an-object":5,"./_global":29,"./_object-gopn":58,"./_object-gops":59}],66:[function(e,t,r){var n=e("./_global").parseInt,o=e("./_string-trim").trim,i=e("./_string-ws"),s=/^[-+]?0[xX]/;t.exports=8!==n(i+"08")||22!==n(i+"0x16")?function(e,t){var r=o(String(e),3);return n(r,t>>>0||(s.test(r)?16:10))}:n},{"./_global":29,"./_string-trim":82,"./_string-ws":83}],67:[function(e,t,r){t.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},{}],68:[function(e,t,r){var n=e("./_an-object"),o=e("./_is-object"),i=e("./_new-promise-capability");t.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},{"./_an-object":5,"./_is-object":39,"./_new-promise-capability":52}],69:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],70:[function(e,t,r){var o=e("./_redefine");t.exports=function(e,t,r){for(var n in t)o(e,n,t[n],r);return e}},{"./_redefine":71}],71:[function(e,t,r){var i=e("./_global"),s=e("./_hide"),a=e("./_has"),u=e("./_uid")("src"),n=e("./_function-to-string"),o="toString",c=(""+n).split(o);e("./_core").inspectSource=function(e){return n.call(e)},(t.exports=function(e,t,r,n){var o="function"==typeof r;o&&(a(r,"name")||s(r,"name",t)),e[t]!==r&&(o&&(a(r,u)||s(r,u,e[t]?""+e[t]:c.join(String(t)))),e===i?e[t]=r:n?e[t]?e[t]=r:s(e,t,r):(delete e[t],s(e,t,r)))})(Function.prototype,o,function(){return"function"==typeof this&&this[u]||n.call(this)})},{"./_core":14,"./_function-to-string":28,"./_global":29,"./_has":30,"./_hide":31,"./_uid":95}],72:[function(e,t,r){"use strict";var o=e("./_classof"),i=RegExp.prototype.exec;t.exports=function(e,t){var r=e.exec;if("function"==typeof r){var n=r.call(e,t);if("object"!=typeof n)throw new TypeError("RegExp exec method returned something other than an Object or null");return n}if("RegExp"!==o(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},{"./_classof":12}],73:[function(e,t,r){"use strict";var n,o,s=e("./_flags"),a=RegExp.prototype.exec,u=String.prototype.replace,i=a,c="lastIndex",l=(n=/a/,o=/b*/g,a.call(n,"a"),a.call(o,"a"),0!==n[c]||0!==o[c]),f=void 0!==/()??/.exec("")[1];(l||f)&&(i=function(e){var t,r,n,o,i=this;return f&&(r=new RegExp("^"+i.source+"$(?!\\s)",s.call(i))),l&&(t=i[c]),n=a.call(i,e),l&&n&&(i[c]=i.global?n.index+n[0].length:t),f&&n&&1<n.length&&u.call(n[0],r,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(n[o]=void 0)}),n}),t.exports=i},{"./_flags":26}],74:[function(t,e,r){function o(e,t){if(i(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")}var n=t("./_is-object"),i=t("./_an-object");e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,r,n){try{(n=t("./_ctx")(Function.call,t("./_object-gopd").f(Object.prototype,"__proto__").set,2))(e,[]),r=!(e instanceof Array)}catch(e){r=!0}return function(e,t){return o(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:o}},{"./_an-object":5,"./_ctx":16,"./_is-object":39,"./_object-gopd":56}],75:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_object-dp"),i=e("./_descriptors"),s=e("./_wks")("species");t.exports=function(e){var t=n[e];i&&t&&!t[s]&&o.f(t,s,{configurable:!0,get:function(){return this}})}},{"./_descriptors":18,"./_global":29,"./_object-dp":54,"./_wks":99}],76:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":30,"./_object-dp":54,"./_wks":99}],77:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":78,"./_uid":95}],78:[function(e,t,r){var n=e("./_core"),o=e("./_global"),i="__core-js_shared__",s=o[i]||(o[i]={});(t.exports=function(e,t){return s[e]||(s[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:e("./_library")?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},{"./_core":14,"./_global":29,"./_library":47}],79:[function(e,t,r){var o=e("./_an-object"),i=e("./_a-function"),s=e("./_wks")("species");t.exports=function(e,t){var r,n=o(e).constructor;return void 0===n||null==(r=o(n)[s])?t:i(r)}},{"./_a-function":1,"./_an-object":5,"./_wks":99}],80:[function(e,t,r){var u=e("./_to-integer"),c=e("./_defined");t.exports=function(a){return function(e,t){var r,n,o=String(c(e)),i=u(t),s=o.length;return i<0||s<=i?a?"":void 0:(r=o.charCodeAt(i))<55296||56319<r||i+1===s||(n=o.charCodeAt(i+1))<56320||57343<n?a?o.charAt(i):r:a?o.slice(i,i+2):n-56320+(r-55296<<10)+65536}}},{"./_defined":17,"./_to-integer":87}],81:[function(e,t,r){var n=e("./_is-regexp"),o=e("./_defined");t.exports=function(e,t,r){if(n(t))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(e))}},{"./_defined":17,"./_is-regexp":40}],82:[function(e,t,r){function n(e,t,r){var n={},o=a(function(){return!!u[e]()||"​"!="​"[e]()}),i=n[e]=o?t(f):u[e];r&&(n[r]=i),s(s.P+s.F*o,"String",n)}var s=e("./_export"),o=e("./_defined"),a=e("./_fails"),u=e("./_string-ws"),i="["+u+"]",c=RegExp("^"+i+i+"*"),l=RegExp(i+i+"*$"),f=n.trim=function(e,t){return e=String(o(e)),1&t&&(e=e.replace(c,"")),2&t&&(e=e.replace(l,"")),e};t.exports=n},{"./_defined":17,"./_export":22,"./_fails":24,"./_string-ws":83}],83:[function(e,t,r){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},{}],84:[function(e,t,r){function n(){var e=+this;if(_.hasOwnProperty(e)){var t=_[e];delete _[e],t()}}function o(e){n.call(e.data)}var i,s,a,u=e("./_ctx"),c=e("./_invoke"),l=e("./_html"),f=e("./_dom-create"),d=e("./_global"),p=d.process,h=d.setImmediate,m=d.clearImmediate,v=d.MessageChannel,y=d.Dispatch,g=0,_={},b="onreadystatechange";h&&m||(h=function(e){for(var t=[],r=1;r<arguments.length;)t.push(arguments[r++]);return _[++g]=function(){c("function"==typeof e?e:Function(e),t)},i(g),g},m=function(e){delete _[e]},"process"==e("./_cof")(p)?i=function(e){p.nextTick(u(n,e,1))}:y&&y.now?i=function(e){y.now(u(n,e,1))}:v?(a=(s=new v).port2,s.port1.onmessage=o,i=u(a.postMessage,a,1)):d.addEventListener&&"function"==typeof postMessage&&!d.importScripts?(i=function(e){d.postMessage(e+"","*")},d.addEventListener("message",o,!1)):i=b in f("script")?function(e){l.appendChild(f("script"))[b]=function(){l.removeChild(this),n.call(e)}}:function(e){setTimeout(u(n,e,1),0)}),t.exports={set:h,clear:m}},{"./_cof":13,"./_ctx":16,"./_dom-create":19,"./_global":29,"./_html":32,"./_invoke":35}],85:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return(e=n(e))<0?o(e+t,0):i(e,t)}},{"./_to-integer":87}],86:[function(e,t,r){var n=e("./_to-integer"),o=e("./_to-length");t.exports=function(e){if(void 0===e)return 0;var t=n(e),r=o(t);if(t!==r)throw RangeError("Wrong length!");return r}},{"./_to-integer":87,"./_to-length":89}],87:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(0<e?o:n)(e)}},{}],88:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":17,"./_iobject":36}],89:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return 0<e?o(n(e),9007199254740991):0}},{"./_to-integer":87}],90:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":17}],91:[function(e,t,r){var o=e("./_is-object");t.exports=function(e,t){if(!o(e))return e;var r,n;if(t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;if("function"==typeof(r=e.valueOf)&&!o(n=r.call(e)))return n;if(!t&&"function"==typeof(r=e.toString)&&!o(n=r.call(e)))return n;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":39}],92:[function(e,t,r){"use strict";if(e("./_descriptors")){var y=e("./_library"),g=e("./_global"),_=e("./_fails"),b=e("./_export"),w=e("./_typed"),n=e("./_typed-buffer"),h=e("./_ctx"),j=e("./_an-instance"),o=e("./_property-desc"),x=e("./_hide"),i=e("./_redefine-all"),s=e("./_to-integer"),k=e("./_to-length"),S=e("./_to-index"),a=e("./_to-absolute-index"),u=e("./_to-primitive"),c=e("./_has"),P=e("./_classof"),M=e("./_is-object"),m=e("./_to-object"),v=e("./_is-array-iter"),E=e("./_object-create"),O=e("./_object-gpo"),I=e("./_object-gopn").f,A=e("./core.get-iterator-method"),l=e("./_uid"),f=e("./_wks"),d=e("./_array-methods"),p=e("./_array-includes"),T=e("./_species-constructor"),C=e("./es6.array.iterator"),R=e("./_iterators"),F=e("./_iter-detect"),D=e("./_set-species"),L=e("./_array-fill"),N=e("./_array-copy-within"),z=e("./_object-dp"),W=e("./_object-gopd"),U=z.f,q=W.f,B=g.RangeError,H=g.TypeError,G=g.Uint8Array,V="ArrayBuffer",K="Shared"+V,Y="BYTES_PER_ELEMENT",$="prototype",J=Array[$],Q=n.ArrayBuffer,X=n.DataView,Z=d(0),ee=d(2),te=d(3),re=d(4),ne=d(5),oe=d(6),ie=p(!0),se=p(!1),ae=C.values,ue=C.keys,ce=C.entries,le=J.lastIndexOf,fe=J.reduce,de=J.reduceRight,pe=J.join,he=J.sort,me=J.slice,ve=J.toString,ye=J.toLocaleString,ge=f("iterator"),_e=f("toStringTag"),be=l("typed_constructor"),we=l("def_constructor"),je=w.CONSTR,xe=w.TYPED,ke=w.VIEW,Se="Wrong length!",Pe=d(1,function(e,t){return Ae(T(e,e[we]),t)}),Me=_(function(){return 1===new G(new Uint16Array([1]).buffer)[0]}),Ee=!!G&&!!G[$].set&&_(function(){new G(1).set({})}),Oe=function(e,t){var r=s(e);if(r<0||r%t)throw B("Wrong offset!");return r},Ie=function(e){if(M(e)&&xe in e)return e;throw H(e+" is not a typed array!")},Ae=function(e,t){if(!(M(e)&&be in e))throw H("It is not a typed array constructor!");return new e(t)},Te=function(e,t){return Ce(T(e,e[we]),t)},Ce=function(e,t){for(var r=0,n=t.length,o=Ae(e,n);r<n;)o[r]=t[r++];return o},Re=function(e,t,r){U(e,t,{get:function(){return this._d[r]}})},Fe=function(e,t,r){var n,o,i,s,a,u,c=m(e),l=arguments.length,f=1<l?t:void 0,d=void 0!==f,p=A(c);if(null!=p&&!v(p)){for(u=p.call(c),i=[],n=0;!(a=u.next()).done;n++)i.push(a.value);c=i}for(d&&2<l&&(f=h(f,r,2)),n=0,o=k(c.length),s=Ae(this,o);n<o;n++)s[n]=d?f(c[n],n):c[n];return s},De=function(){for(var e=0,t=arguments.length,r=Ae(this,t);e<t;)r[e]=arguments[e++];return r},Le=!!G&&_(function(){ye.call(new G(1))}),Ne=function(){return ye.apply(Le?me.call(Ie(this)):Ie(this),arguments)},ze={copyWithin:function(e,t,r){return N.call(Ie(this),e,t,2<arguments.length?r:void 0)},every:function(e,t){return re(Ie(this),e,1<arguments.length?t:void 0)},fill:function(e){return L.apply(Ie(this),arguments)},filter:function(e,t){return Te(this,ee(Ie(this),e,1<arguments.length?t:void 0))},find:function(e,t){return ne(Ie(this),e,1<arguments.length?t:void 0)},findIndex:function(e,t){return oe(Ie(this),e,1<arguments.length?t:void 0)},forEach:function(e,t){Z(Ie(this),e,1<arguments.length?t:void 0)},indexOf:function(e,t){return se(Ie(this),e,1<arguments.length?t:void 0)},includes:function(e,t){return ie(Ie(this),e,1<arguments.length?t:void 0)},join:function(e){return pe.apply(Ie(this),arguments)},lastIndexOf:function(e){return le.apply(Ie(this),arguments)},map:function(e,t){return Pe(Ie(this),e,1<arguments.length?t:void 0)},reduce:function(e){return fe.apply(Ie(this),arguments)},reduceRight:function(e){return de.apply(Ie(this),arguments)},reverse:function(){for(var e,t=this,r=Ie(t).length,n=Math.floor(r/2),o=0;o<n;)e=t[o],t[o++]=t[--r],t[r]=e;return t},some:function(e,t){return te(Ie(this),e,1<arguments.length?t:void 0)},sort:function(e){return he.call(Ie(this),e)},subarray:function(e,t){var r=Ie(this),n=r.length,o=a(e,n);return new(T(r,r[we]))(r.buffer,r.byteOffset+o*r.BYTES_PER_ELEMENT,k((void 0===t?n:a(t,n))-o))}},We=function(e,t){return Te(this,me.call(Ie(this),e,t))},Ue=function(e,t){Ie(this);var r=Oe(t,1),n=this.length,o=m(e),i=k(o.length),s=0;if(n<i+r)throw B(Se);for(;s<i;)this[r+s]=o[s++]},qe={entries:function(){return ce.call(Ie(this))},keys:function(){return ue.call(Ie(this))},values:function(){return ae.call(Ie(this))}},Be=function(e,t){return M(e)&&e[xe]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},He=function(e,t){return Be(e,t=u(t,!0))?o(2,e[t]):q(e,t)},Ge=function(e,t,r){return!(Be(e,t=u(t,!0))&&M(r)&&c(r,"value"))||c(r,"get")||c(r,"set")||r.configurable||c(r,"writable")&&!r.writable||c(r,"enumerable")&&!r.enumerable?U(e,t,r):(e[t]=r.value,e)};je||(W.f=He,z.f=Ge),b(b.S+b.F*!je,"Object",{getOwnPropertyDescriptor:He,defineProperty:Ge}),_(function(){ve.call({})})&&(ve=ye=function(){return pe.call(this)});var Ve=i({},ze);i(Ve,qe),x(Ve,ge,qe.values),i(Ve,{slice:We,set:Ue,constructor:function(){},toString:ve,toLocaleString:Ne}),Re(Ve,"buffer","b"),Re(Ve,"byteOffset","o"),Re(Ve,"byteLength","l"),Re(Ve,"length","e"),U(Ve,_e,{get:function(){return this[xe]}}),t.exports=function(e,f,t,i){function d(e,o){U(e,o,{get:function(){return e=o,(t=this._d).v[r](e*f+t.o,Me);var e,t},set:function(e){return t=o,r=e,n=this._d,i&&(r=(r=Math.round(r))<0?0:255<r?255:255&r),void n.v[s](t*f+n.o,r,Me);var t,r,n},enumerable:!0})}var p=e+((i=!!i)?"Clamped":"")+"Array",r="get"+e,s="set"+e,h=g[p],a=h||{},n=h&&O(h),o=!h||!w.ABV,u={},c=h&&h[$];o?(h=t(function(e,t,r,n){j(e,h,p,"_d");var o,i,s,a,u=0,c=0;if(M(t)){if(!(t instanceof Q||(a=P(t))==V||a==K))return xe in t?Ce(h,t):Fe.call(h,t);o=t,c=Oe(r,f);var l=t.byteLength;if(void 0===n){if(l%f)throw B(Se);if((i=l-c)<0)throw B(Se)}else if(l<(i=k(n)*f)+c)throw B(Se);s=i/f}else s=S(t),o=new Q(i=s*f);for(x(e,"_d",{b:o,o:c,l:i,e:s,v:new X(o)});u<s;)d(e,u++)}),c=h[$]=E(Ve),x(c,"constructor",h)):_(function(){h(1)})&&_(function(){new h(-1)})&&F(function(e){new h,new h(null),new h(1.5),new h(e)},!0)||(h=t(function(e,t,r,n){var o;return j(e,h,p),M(t)?t instanceof Q||(o=P(t))==V||o==K?void 0!==n?new a(t,Oe(r,f),n):void 0!==r?new a(t,Oe(r,f)):new a(t):xe in t?Ce(h,t):Fe.call(h,t):new a(S(t))}),Z(n!==Function.prototype?I(a).concat(I(n)):I(a),function(e){e in h||x(h,e,a[e])}),h[$]=c,y||(c.constructor=h));var l=c[ge],m=!!l&&("values"==l.name||null==l.name),v=qe.values;x(h,be,!0),x(c,xe,p),x(c,ke,!0),x(c,we,h),(i?new h(1)[_e]==p:_e in c)||U(c,_e,{get:function(){return p}}),u[p]=h,b(b.G+b.W+b.F*(h!=a),u),b(b.S,p,{BYTES_PER_ELEMENT:f}),b(b.S+b.F*_(function(){a.of.call(h,1)}),p,{from:Fe,of:De}),Y in c||x(c,Y,f),b(b.P,p,ze),D(p),b(b.P+b.F*Ee,p,{set:Ue}),b(b.P+b.F*!m,p,qe),y||c.toString==ve||(c.toString=ve),b(b.P+b.F*_(function(){new h(1).slice()}),p,{slice:We}),b(b.P+b.F*(_(function(){return[1,2].toLocaleString()!=new h([1,2]).toLocaleString()})||!_(function(){c.toLocaleString.call([1,2])})),p,{toLocaleString:Ne}),R[p]=m?l:v,y||m||x(c,ge,v)}}else t.exports=function(){}},{"./_an-instance":4,"./_array-copy-within":6,"./_array-fill":7,"./_array-includes":8,"./_array-methods":9,"./_classof":12,"./_ctx":16,"./_descriptors":18,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array-iter":37,"./_is-object":39,"./_iter-detect":44,"./_iterators":46,"./_library":47,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gpo":60,"./_property-desc":69,"./_redefine-all":70,"./_set-species":75,"./_species-constructor":79,"./_to-absolute-index":85,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_to-object":90,"./_to-primitive":91,"./_typed":94,"./_typed-buffer":93,"./_uid":95,"./_wks":99,"./core.get-iterator-method":100,"./es6.array.iterator":103}],93:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_descriptors"),i=e("./_library"),s=e("./_typed"),a=e("./_hide"),u=e("./_redefine-all"),c=e("./_fails"),l=e("./_an-instance"),f=e("./_to-integer"),d=e("./_to-length"),p=e("./_to-index"),h=e("./_object-gopn").f,m=e("./_object-dp").f,v=e("./_array-fill"),y=e("./_set-to-string-tag"),g="ArrayBuffer",_="DataView",b="prototype",w="Wrong index!",j=n[g],x=n[_],k=n.Math,S=n.RangeError,P=n.Infinity,M=j,E=k.abs,O=k.pow,I=k.floor,A=k.log,T=k.LN2,C="byteLength",R="byteOffset",F=o?"_b":"buffer",D=o?"_l":C,L=o?"_o":R;function N(e,t,r){var n,o,i,s=new Array(r),a=8*r-t-1,u=(1<<a)-1,c=u>>1,l=23===t?O(2,-24)-O(2,-77):0,f=0,d=e<0||0===e&&1/e<0?1:0;for((e=E(e))!=e||e===P?(o=e!=e?1:0,n=u):(n=I(A(e)/T),e*(i=O(2,-n))<1&&(n--,i*=2),2<=(e+=1<=n+c?l/i:l*O(2,1-c))*i&&(n++,i/=2),u<=n+c?(o=0,n=u):1<=n+c?(o=(e*i-1)*O(2,t),n+=c):(o=e*O(2,c-1)*O(2,t),n=0));8<=t;s[f++]=255&o,o/=256,t-=8);for(n=n<<t|o,a+=t;0<a;s[f++]=255&n,n/=256,a-=8);return s[--f]|=128*d,s}function z(e,t,r){var n,o=8*r-t-1,i=(1<<o)-1,s=i>>1,a=o-7,u=r-1,c=e[u--],l=127&c;for(c>>=7;0<a;l=256*l+e[u],u--,a-=8);for(n=l&(1<<-a)-1,l>>=-a,a+=t;0<a;n=256*n+e[u],u--,a-=8);if(0===l)l=1-s;else{if(l===i)return n?NaN:c?-P:P;n+=O(2,t),l-=s}return(c?-1:1)*n*O(2,l-t)}function W(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function U(e){return[255&e]}function q(e){return[255&e,e>>8&255]}function B(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function H(e){return N(e,52,8)}function G(e){return N(e,23,4)}function V(e,t,r){m(e[b],t,{get:function(){return this[r]}})}function K(e,t,r,n){var o=p(+r);if(o+t>e[D])throw S(w);var i=e[F]._b,s=o+e[L],a=i.slice(s,s+t);return n?a:a.reverse()}function Y(e,t,r,n,o,i){var s=p(+r);if(s+t>e[D])throw S(w);for(var a=e[F]._b,u=s+e[L],c=n(+o),l=0;l<t;l++)a[u+l]=c[i?l:t-l-1]}if(s.ABV){if(!c(function(){j(1)})||!c(function(){new j(-1)})||c(function(){return new j,new j(1.5),new j(NaN),j.name!=g})){for(var $,J=(j=function(e){return l(this,j),new M(p(e))})[b]=M[b],Q=h(M),X=0;Q.length>X;)($=Q[X++])in j||a(j,$,M[$]);i||(J.constructor=j)}var Z=new x(new j(2)),ee=x[b].setInt8;Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||u(x[b],{setInt8:function(e,t){ee.call(this,e,t<<24>>24)},setUint8:function(e,t){ee.call(this,e,t<<24>>24)}},!0)}else j=function(e){l(this,j,g);var t=p(e);this._b=v.call(new Array(t),0),this[D]=t},x=function(e,t,r){l(this,x,_),l(e,j,_);var n=e[D],o=f(t);if(o<0||n<o)throw S("Wrong offset!");if(n<o+(r=void 0===r?n-o:d(r)))throw S("Wrong length!");this[F]=e,this[L]=o,this[D]=r},o&&(V(j,C,"_l"),V(x,"buffer","_b"),V(x,C,"_l"),V(x,R,"_o")),u(x[b],{getInt8:function(e){return K(this,1,e)[0]<<24>>24},getUint8:function(e){return K(this,1,e)[0]},getInt16:function(e,t){var r=K(this,2,e,t);return(r[1]<<8|r[0])<<16>>16},getUint16:function(e,t){var r=K(this,2,e,t);return r[1]<<8|r[0]},getInt32:function(e,t){return W(K(this,4,e,t))},getUint32:function(e,t){return W(K(this,4,e,t))>>>0},getFloat32:function(e,t){return z(K(this,4,e,t),23,4)},getFloat64:function(e,t){return z(K(this,8,e,t),52,8)},setInt8:function(e,t){Y(this,1,e,U,t)},setUint8:function(e,t){Y(this,1,e,U,t)},setInt16:function(e,t,r){Y(this,2,e,q,t,r)},setUint16:function(e,t,r){Y(this,2,e,q,t,r)},setInt32:function(e,t,r){Y(this,4,e,B,t,r)},setUint32:function(e,t,r){Y(this,4,e,B,t,r)},setFloat32:function(e,t,r){Y(this,4,e,G,t,r)},setFloat64:function(e,t,r){Y(this,8,e,H,t,r)}});y(j,g),y(x,_),a(x[b],s.VIEW,!0),r[g]=j,r[_]=x},{"./_an-instance":4,"./_array-fill":7,"./_descriptors":18,"./_fails":24,"./_global":29,"./_hide":31,"./_library":47,"./_object-dp":54,"./_object-gopn":58,"./_redefine-all":70,"./_set-to-string-tag":76,"./_to-index":86,"./_to-integer":87,"./_to-length":89,"./_typed":94}],94:[function(e,t,r){for(var n,o=e("./_global"),i=e("./_hide"),s=e("./_uid"),a=s("typed_array"),u=s("view"),c=!(!o.ArrayBuffer||!o.DataView),l=c,f=0,d="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(n=o[d[f++]])?(i(n.prototype,a,!0),i(n.prototype,u,!0)):l=!1;t.exports={ABV:c,CONSTR:l,TYPED:a,VIEW:u}},{"./_global":29,"./_hide":31,"./_uid":95}],95:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],96:[function(e,t,r){var n=e("./_global").navigator;t.exports=n&&n.userAgent||""},{"./_global":29}],97:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),s=e("./_wks-ext"),a=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=!i&&n.Symbol||{});"_"==e.charAt(0)||e in t||a(t,e,{value:s.f(e)})}},{"./_core":14,"./_global":29,"./_library":47,"./_object-dp":54,"./_wks-ext":98}],98:[function(e,t,r){r.f=e("./_wks")},{"./_wks":99}],99:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,s="function"==typeof i;(t.exports=function(e){return n[e]||(n[e]=s&&i[e]||(s?i:o)("Symbol."+e))}).store=n},{"./_global":29,"./_shared":78,"./_uid":95}],100:[function(e,t,r){var n=e("./_classof"),o=e("./_wks")("iterator"),i=e("./_iterators");t.exports=e("./_core").getIteratorMethod=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[n(e)]}},{"./_classof":12,"./_core":14,"./_iterators":46,"./_wks":99}],101:[function(e,t,r){"use strict";var n=e("./_export"),o=e("./_array-methods")(5),i="find",s=!0;i in[]&&Array(1)[i](function(){s=!1}),n(n.P+n.F*s,"Array",{find:function(e,t){return o(this,e,1<arguments.length?t:void 0)}}),e("./_add-to-unscopables")(i)},{"./_add-to-unscopables":2,"./_array-methods":9,"./_export":22}],102:[function(e,t,r){"use strict";var h=e("./_ctx"),n=e("./_export"),m=e("./_to-object"),v=e("./_iter-call"),y=e("./_is-array-iter"),g=e("./_to-length"),_=e("./_create-property"),b=e("./core.get-iterator-method");n(n.S+n.F*!e("./_iter-detect")(function(e){Array.from(e)}),"Array",{from:function(e,t,r){var n,o,i,s,a=m(e),u="function"==typeof this?this:Array,c=arguments.length,l=1<c?t:void 0,f=void 0!==l,d=0,p=b(a);if(f&&(l=h(l,2<c?r:void 0,2)),null==p||u==Array&&y(p))for(o=new u(n=g(a.length));d<n;d++)_(o,d,f?l(a[d],d):a[d]);else for(s=p.call(a),o=new u;!(i=s.next()).done;d++)_(o,d,f?v(s,l,[i.value,d],!0):i.value);return o.length=d,o}})},{"./_create-property":15,"./_ctx":16,"./_export":22,"./_is-array-iter":37,"./_iter-call":41,"./_iter-detect":44,"./_to-length":89,"./_to-object":90,"./core.get-iterator-method":100}],103:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),s=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=s(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?r:"values"==t?e[r]:[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":2,"./_iter-define":43,"./_iter-step":45,"./_iterators":46,"./_to-iobject":88}],104:[function(e,t,r){var n=e("./_object-dp").f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e("./_descriptors")&&n(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(e){return""}}})},{"./_descriptors":18,"./_object-dp":54}],105:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},{"./_export":22}],106:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{fround:e("./_math-fround")})},{"./_export":22,"./_math-fround":48}],107:[function(e,t,r){var n=e("./_export"),o=Math.imul;n(n.S+n.F*e("./_fails")(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(e,t){var r=65535,n=+e,o=+t,i=r&n,s=r&o;return 0|i*s+((r&n>>>16)*s+i*(r&o>>>16)<<16>>>0)}})},{"./_export":22,"./_fails":24}],108:[function(e,t,r){var n=e("./_export");n(n.S,"Math",{trunc:function(e){return(0<e?Math.floor:Math.ceil)(e)}})},{"./_export":22}],109:[function(e,t,r){"use strict";function n(e){var t=l(e,!1);if("string"==typeof t&&2<t.length){var r,n,o,i=(t=_?t.trim():p(t,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=t.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(t.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+t}for(var s,a=t.slice(2),u=0,c=a.length;u<c;u++)if((s=a.charCodeAt(u))<48||o<s)return NaN;return parseInt(a,n)}}return+t}var o=e("./_global"),i=e("./_has"),s=e("./_cof"),a=e("./_inherit-if-required"),l=e("./_to-primitive"),u=e("./_fails"),c=e("./_object-gopn").f,f=e("./_object-gopd").f,d=e("./_object-dp").f,p=e("./_string-trim").trim,h="Number",m=o[h],v=m,y=m.prototype,g=s(e("./_object-create")(y))==h,_="trim"in String.prototype;if(!m(" 0o1")||!m("0b1")||m("+0x1")){m=function(e){var t=arguments.length<1?0:e,r=this;return r instanceof m&&(g?u(function(){y.valueOf.call(r)}):s(r)!=h)?a(new v(n(t)),r,m):n(t)};for(var b,w=e("./_descriptors")?c(v):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),j=0;w.length>j;j++)i(v,b=w[j])&&!i(m,b)&&d(m,b,f(v,b));(m.prototype=y).constructor=m,e("./_redefine")(o,h,m)}},{"./_cof":13,"./_descriptors":18,"./_fails":24,"./_global":29,"./_has":30,"./_inherit-if-required":34,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_redefine":71,"./_string-trim":82,"./_to-primitive":91}],110:[function(e,t,r){var n=e("./_export"),o=e("./_parse-int");n(n.S+n.F*(Number.parseInt!=o),"Number",{parseInt:o})},{"./_export":22,"./_parse-int":66}],111:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":62,"./_object-sap":64,"./_to-object":90}],112:[function(e,t,r){"use strict";var n=e("./_classof"),o={};o[e("./_wks")("toStringTag")]="z",o+""!="[object z]"&&e("./_redefine")(Object.prototype,"toString",function(){return"[object "+n(this)+"]"},!0)},{"./_classof":12,"./_redefine":71,"./_wks":99}],113:[function(r,e,t){"use strict";function n(){}function f(e){var t;return!(!v(e)||"function"!=typeof(t=e.then))&&t}function o(l,r){if(!l._n){l._n=!0;var n=l._c;j(function(){for(var u=l._v,c=1==l._s,e=0,t=function(e){var t,r,n,o=c?e.ok:e.fail,i=e.resolve,s=e.reject,a=e.domain;try{o?(c||(2==l._h&&N(l),l._h=1),!0===o?t=u:(a&&a.enter(),t=o(u),a&&(a.exit(),n=!0)),t===e.promise?s(E("Promise-chain cycle")):(r=f(t))?r.call(t,i,s):i(t)):s(u)}catch(e){a&&!n&&a.exit(),s(e)}};n.length>e;)t(n[e++]);l._c=[],l._n=!1,r&&!l._h&&D(l)})}}function i(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),o(t,!0))}var s,a,u,c,l=r("./_library"),d=r("./_global"),p=r("./_ctx"),h=r("./_classof"),m=r("./_export"),v=r("./_is-object"),y=r("./_a-function"),g=r("./_an-instance"),_=r("./_for-of"),b=r("./_species-constructor"),w=r("./_task").set,j=r("./_microtask")(),x=r("./_new-promise-capability"),k=r("./_perform"),S=r("./_user-agent"),P=r("./_promise-resolve"),M="Promise",E=d.TypeError,O=d.process,I=O&&O.versions,A=I&&I.v8||"",T=d[M],C="process"==h(O),R=a=x.f,F=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[r("./_wks")("species")]=function(e){e(n,n)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(n)instanceof t&&0!==A.indexOf("6.6")&&-1===S.indexOf("Chrome/66")}catch(e){}}(),D=function(i){w.call(d,function(){var e,t,r,n=i._v,o=L(i);if(o&&(e=k(function(){C?O.emit("unhandledRejection",n,i):(t=d.onunhandledrejection)?t({promise:i,reason:n}):(r=d.console)&&r.error&&r.error("Unhandled promise rejection",n)}),i._h=C||L(i)?2:1),i._a=void 0,o&&e.e)throw e.v})},L=function(e){return 1!==e._h&&0===(e._a||e._c).length},N=function(t){w.call(d,function(){var e;C?O.emit("rejectionHandled",t):(e=d.onrejectionhandled)&&e({promise:t,reason:t._v})})},z=function(e){var r,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw E("Promise can't be resolved itself");(r=f(e))?j(function(){var t={_w:n,_d:!1};try{r.call(e,p(z,t,1),p(i,t,1))}catch(e){i.call(t,e)}}):(n._v=e,n._s=1,o(n,!1))}catch(e){i.call({_w:n,_d:!1},e)}}};F||(T=function(e){g(this,T,M,"_h"),y(e),s.call(this);try{e(p(z,this,1),p(i,this,1))}catch(e){i.call(this,e)}},(s=function(){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r("./_redefine-all")(T.prototype,{then:function(e,t){var r=R(b(this,T));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=C?O.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&o(this,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),u=function(){var e=new s;this.promise=e,this.resolve=p(z,e,1),this.reject=p(i,e,1)},x.f=R=function(e){return e===T||e===c?new u:a(e)}),m(m.G+m.W+m.F*!F,{Promise:T}),r("./_set-to-string-tag")(T,M),r("./_set-species")(M),c=r("./_core")[M],m(m.S+m.F*!F,M,{reject:function(e){var t=R(this);return(0,t.reject)(e),t.promise}}),m(m.S+m.F*(l||!F),M,{resolve:function(e){return P(l&&this===c?T:this,e)}}),m(m.S+m.F*!(F&&r("./_iter-detect")(function(e){T.all(e).catch(n)})),M,{all:function(e){var s=this,t=R(s),a=t.resolve,u=t.reject,r=k(function(){var n=[],o=0,i=1;_(e,!1,function(e){var t=o++,r=!1;n.push(void 0),i++,s.resolve(e).then(function(e){r||(r=!0,n[t]=e,--i||a(n))},u)}),--i||a(n)});return r.e&&u(r.v),t.promise},race:function(e){var t=this,r=R(t),n=r.reject,o=k(function(){_(e,!1,function(e){t.resolve(e).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},{"./_a-function":1,"./_an-instance":4,"./_classof":12,"./_core":14,"./_ctx":16,"./_export":22,"./_for-of":27,"./_global":29,"./_is-object":39,"./_iter-detect":44,"./_library":47,"./_microtask":51,"./_new-promise-capability":52,"./_perform":67,"./_promise-resolve":68,"./_redefine-all":70,"./_set-species":75,"./_set-to-string-tag":76,"./_species-constructor":79,"./_task":84,"./_user-agent":96,"./_wks":99}],114:[function(e,t,r){var n=e("./_global"),i=e("./_inherit-if-required"),o=e("./_object-dp").f,s=e("./_object-gopn").f,a=e("./_is-regexp"),u=e("./_flags"),c=n.RegExp,l=c,f=c.prototype,d=/a/g,p=/a/g,h=new c(d)!==d;if(e("./_descriptors")&&(!h||e("./_fails")(function(){return p[e("./_wks")("match")]=!1,c(d)!=d||c(p)==p||"/a/i"!=c(d,"i")}))){c=function(e,t){var r=this instanceof c,n=a(e),o=void 0===t;return!r&&n&&e.constructor===c&&o?e:i(h?new l(n&&!o?e.source:e,t):l((n=e instanceof c)?e.source:e,n&&o?u.call(e):t),r?this:f,c)};function m(t){t in c||o(c,t,{configurable:!0,get:function(){return l[t]},set:function(e){l[t]=e}})}for(var v=s(l),y=0;v.length>y;)m(v[y++]);(f.constructor=c).prototype=f,e("./_redefine")(n,"RegExp",c)}e("./_set-species")("RegExp")},{"./_descriptors":18,"./_fails":24,"./_flags":26,"./_global":29,"./_inherit-if-required":34,"./_is-regexp":40,"./_object-dp":54,"./_object-gopn":58,"./_redefine":71,"./_set-species":75,"./_wks":99}],115:[function(e,t,r){"use strict";var n=e("./_regexp-exec");e("./_export")({target:"RegExp",proto:!0,forced:n!==/./.exec},{exec:n})},{"./_export":22,"./_regexp-exec":73}],116:[function(e,t,r){e("./_descriptors")&&"g"!=/./g.flags&&e("./_object-dp").f(RegExp.prototype,"flags",{configurable:!0,get:e("./_flags")})},{"./_descriptors":18,"./_flags":26,"./_object-dp":54}],117:[function(e,t,r){"use strict";var k=e("./_an-object"),n=e("./_to-object"),S=e("./_to-length"),P=e("./_to-integer"),M=e("./_advance-string-index"),E=e("./_regexp-exec-abstract"),O=Math.max,I=Math.min,d=Math.floor,p=/\$([$&`']|\d\d?|<[^>]*>)/g,h=/\$([$&`']|\d\d?)/g;e("./_fix-re-wks")("replace",2,function(o,i,w,j){return[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):w.call(String(r),e,t)},function(e,t){var r=j(w,e,this,t);if(r.done)return r.value;var n=k(e),o=String(this),i="function"==typeof t;i||(t=String(t));var s=n.global;if(s){var a=n.unicode;n.lastIndex=0}for(var u=[];;){var c=E(n,o);if(null===c)break;if(u.push(c),!s)break;""===String(c[0])&&(n.lastIndex=M(o,S(n.lastIndex),a))}for(var l,f="",d=0,p=0;p<u.length;p++){c=u[p];for(var h=String(c[0]),m=O(I(P(c.index),o.length),0),v=[],y=1;y<c.length;y++)v.push(void 0===(l=c[y])?l:String(l));var g=c.groups;if(i){var _=[h].concat(v,m,o);void 0!==g&&_.push(g);var b=String(t.apply(void 0,_))}else b=x(h,o,m,v,g,t);d<=m&&(f+=o.slice(d,m)+b,d=m+h.length)}return f+o.slice(d)}];function x(i,s,a,u,c,e){var l=a+i.length,f=u.length,t=h;return void 0!==c&&(c=n(c),t=p),w.call(e,t,function(e,t){var r;switch(t.charAt(0)){case"$":return"$";case"&":return i;case"`":return s.slice(0,a);case"'":return s.slice(l);case"<":r=c[t.slice(1,-1)];break;default:var n=+t;if(0==n)return e;if(f<n){var o=d(n/10);return 0===o?e:o<=f?void 0===u[o-1]?t.charAt(1):u[o-1]+t.charAt(1):e}r=u[n-1]}return void 0===r?"":r})}})},{"./_advance-string-index":3,"./_an-object":5,"./_fix-re-wks":25,"./_regexp-exec-abstract":72,"./_to-integer":87,"./_to-length":89,"./_to-object":90}],118:[function(e,t,r){"use strict";var f=e("./_is-regexp"),_=e("./_an-object"),b=e("./_species-constructor"),w=e("./_advance-string-index"),j=e("./_to-length"),x=e("./_regexp-exec-abstract"),d=e("./_regexp-exec"),n=e("./_fails"),k=Math.min,p=[].push,s="split",h="length",m="lastIndex",S=4294967295,P=!n(function(){RegExp(S,"y")});e("./_fix-re-wks")("split",2,function(o,i,v,y){var g;return g="c"=="abbc"[s](/(b)*/)[1]||4!="test"[s](/(?:)/,-1)[h]||2!="ab"[s](/(?:ab)*/)[h]||4!="."[s](/(.?)(.?)/)[h]||1<"."[s](/()()/)[h]||""[s](/.?/)[h]?function(e,t){var r=String(this);if(void 0===e&&0===t)return[];if(!f(e))return v.call(r,e,t);for(var n,o,i,s=[],a=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),u=0,c=void 0===t?S:t>>>0,l=new RegExp(e.source,a+"g");(n=d.call(l,r))&&!(u<(o=l[m])&&(s.push(r.slice(u,n.index)),1<n[h]&&n.index<r[h]&&p.apply(s,n.slice(1)),i=n[0][h],u=o,s[h]>=c));)l[m]===n.index&&l[m]++;return u===r[h]?!i&&l.test("")||s.push(""):s.push(r.slice(u)),s[h]>c?s.slice(0,c):s}:"0"[s](void 0,0)[h]?function(e,t){return void 0===e&&0===t?[]:v.call(this,e,t)}:v,[function(e,t){var r=o(this),n=null==e?void 0:e[i];return void 0!==n?n.call(e,r,t):g.call(String(r),e,t)},function(e,t){var r=y(g,e,this,t,g!==v);if(r.done)return r.value;var n=_(e),o=String(this),i=b(n,RegExp),s=n.unicode,a=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(P?"y":"g"),u=new i(P?n:"^(?:"+n.source+")",a),c=void 0===t?S:t>>>0;if(0==c)return[];if(0===o.length)return null===x(u,o)?[o]:[];for(var l=0,f=0,d=[];f<o.length;){u.lastIndex=P?f:0;var p,h=x(u,P?o:o.slice(f));if(null===h||(p=k(j(u.lastIndex+(P?0:f)),o.length))===l)f=w(o,f,s);else{if(d.push(o.slice(l,f)),d.length===c)return d;for(var m=1;m<=h.length-1;m++)if(d.push(h[m]),d.length===c)return d;f=l=p}}return d.push(o.slice(l)),d}]})},{"./_advance-string-index":3,"./_an-object":5,"./_fails":24,"./_fix-re-wks":25,"./_is-regexp":40,"./_regexp-exec":73,"./_regexp-exec-abstract":72,"./_species-constructor":79,"./_to-length":89}],119:[function(t,e,r){"use strict";t("./es6.regexp.flags");function n(e){t("./_redefine")(RegExp.prototype,a,e,!0)}var o=t("./_an-object"),i=t("./_flags"),s=t("./_descriptors"),a="toString",u=/./[a];t("./_fails")(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?n(function(){var e=o(this);return"/".concat(e.source,"/","flags"in e?e.flags:!s&&e instanceof RegExp?i.call(e):void 0)}):u.name!=a&&n(function(){return u.call(this)})},{"./_an-object":5,"./_descriptors":18,"./_fails":24,"./_flags":26,"./_redefine":71,"./es6.regexp.flags":116}],120:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":43,"./_string-at":80}],121:[function(e,t,r){"use strict";var n=e("./_export"),i=e("./_to-length"),s=e("./_string-context"),a="startsWith",u=""[a];n(n.P+n.F*e("./_fails-is-regexp")(a),"String",{startsWith:function(e,t){var r=s(this,e,a),n=i(Math.min(1<arguments.length?t:void 0,r.length)),o=String(e);return u?u.call(r,o,n):r.slice(n,n+o.length)===o}})},{"./_export":22,"./_fails-is-regexp":23,"./_string-context":81,"./_to-length":89}],122:[function(e,t,r){"use strict";function n(e){var t=K[e]=I(z[q]);return t._k=e,t}function o(e,t){k(e);for(var r,n=j(t=M(t)),o=0,i=n.length;o<i;)te(e,r=n[o++],t[r]);return e}function i(e){var t=G.call(this,e=E(e,!0));return!(this===$&&l(K,e)&&!l(Y,e))&&(!(t||!l(this,e)||!l(K,e)||l(this,B)&&this[B][e])||t)}function s(e,t){if(e=M(e),t=E(t,!0),e!==$||!l(K,t)||l(Y,t)){var r=D(e,t);return!r||!l(K,t)||l(e,B)&&e[B][t]||(r.enumerable=!0),r}}function a(e){for(var t,r=N(M(e)),n=[],o=0;r.length>o;)l(K,t=r[o++])||t==B||t==h||n.push(t);return n}function u(e){for(var t,r=e===$,n=N(r?Y:M(e)),o=[],i=0;n.length>i;)!l(K,t=n[i++])||r&&!l($,t)||o.push(K[t]);return o}var c=e("./_global"),l=e("./_has"),f=e("./_descriptors"),d=e("./_export"),p=e("./_redefine"),h=e("./_meta").KEY,m=e("./_fails"),v=e("./_shared"),y=e("./_set-to-string-tag"),g=e("./_uid"),_=e("./_wks"),b=e("./_wks-ext"),w=e("./_wks-define"),j=e("./_enum-keys"),x=e("./_is-array"),k=e("./_an-object"),S=e("./_is-object"),P=e("./_to-object"),M=e("./_to-iobject"),E=e("./_to-primitive"),O=e("./_property-desc"),I=e("./_object-create"),A=e("./_object-gopn-ext"),T=e("./_object-gopd"),C=e("./_object-gops"),R=e("./_object-dp"),F=e("./_object-keys"),D=T.f,L=R.f,N=A.f,z=c.Symbol,W=c.JSON,U=W&&W.stringify,q="prototype",B=_("_hidden"),H=_("toPrimitive"),G={}.propertyIsEnumerable,V=v("symbol-registry"),K=v("symbols"),Y=v("op-symbols"),$=Object[q],J="function"==typeof z&&!!C.f,Q=c.QObject,X=!Q||!Q[q]||!Q[q].findChild,Z=f&&m(function(){return 7!=I(L({},"a",{get:function(){return L(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=D($,t);n&&delete $[t],L(e,t,r),n&&e!==$&&L($,t,n)}:L,ee=J&&"symbol"==typeof z.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof z},te=function(e,t,r){return e===$&&te(Y,t,r),k(e),t=E(t,!0),k(r),l(K,t)?(r.enumerable?(l(e,B)&&e[B][t]&&(e[B][t]=!1),r=I(r,{enumerable:O(0,!1)})):(l(e,B)||L(e,B,O(1,{})),e[B][t]=!0),Z(e,t,r)):L(e,t,r)};J||(p((z=function(e){if(this instanceof z)throw TypeError("Symbol is not a constructor!");var t=g(0<arguments.length?e:void 0),r=function(e){this===$&&r.call(Y,e),l(this,B)&&l(this[B],t)&&(this[B][t]=!1),Z(this,t,O(1,e))};return f&&X&&Z($,t,{configurable:!0,set:r}),n(t)})[q],"toString",function(){return this._k}),T.f=s,R.f=te,e("./_object-gopn").f=A.f=a,e("./_object-pie").f=i,C.f=u,f&&!e("./_library")&&p($,"propertyIsEnumerable",i,!0),b.f=function(e){return n(_(e))}),d(d.G+d.W+d.F*!J,{Symbol:z});for(var re="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;re.length>ne;)_(re[ne++]);for(var oe=F(_.store),ie=0;oe.length>ie;)w(oe[ie++]);d(d.S+d.F*!J,"Symbol",{for:function(e){return l(V,e+="")?V[e]:V[e]=z(e)},keyFor:function(e){if(!ee(e))throw TypeError(e+" is not a symbol!");for(var t in V)if(V[t]===e)return t},useSetter:function(){X=!0},useSimple:function(){X=!1}}),d(d.S+d.F*!J,"Object",{create:function(e,t){return void 0===t?I(e):o(I(e),t)},defineProperty:te,defineProperties:o,getOwnPropertyDescriptor:s,getOwnPropertyNames:a,getOwnPropertySymbols:u});var se=m(function(){C.f(1)});d(d.S+d.F*se,"Object",{getOwnPropertySymbols:function(e){return C.f(P(e))}}),W&&d(d.S+d.F*(!J||m(function(){var e=z();return"[null]"!=U([e])||"{}"!=U({a:e})||"{}"!=U(Object(e))})),"JSON",{stringify:function(e){for(var t,r,n=[e],o=1;o<arguments.length;)n.push(arguments[o++]);if(r=t=n[1],(S(t)||void 0!==e)&&!ee(e))return x(t)||(t=function(e,t){if("function"==typeof r&&(t=r.call(this,e,t)),!ee(t))return t}),n[1]=t,U.apply(W,n)}}),z[q][H]||e("./_hide")(z[q],H,z[q].valueOf),y(z,"Symbol"),y(Math,"Math",!0),y(c.JSON,"JSON",!0)},{"./_an-object":5,"./_descriptors":18,"./_enum-keys":21,"./_export":22,"./_fails":24,"./_global":29,"./_has":30,"./_hide":31,"./_is-array":38,"./_is-object":39,"./_library":47,"./_meta":50,"./_object-create":53,"./_object-dp":54,"./_object-gopd":56,"./_object-gopn":58,"./_object-gopn-ext":57,"./_object-gops":59,"./_object-keys":62,"./_object-pie":63,"./_property-desc":69,"./_redefine":71,"./_set-to-string-tag":76,"./_shared":78,"./_to-iobject":88,"./_to-object":90,"./_to-primitive":91,"./_uid":95,"./_wks":99,"./_wks-define":97,"./_wks-ext":98}],123:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}})},{"./_typed-array":92}],124:[function(e,t,r){e("./_typed-array")("Uint8",1,function(n){return function(e,t,r){return n(this,e,t,r)}},!0)},{"./_typed-array":92}],125:[function(e,t,r){var n=e("./_export"),u=e("./_own-keys"),c=e("./_to-iobject"),l=e("./_object-gopd"),f=e("./_create-property");n(n.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,r,n=c(e),o=l.f,i=u(n),s={},a=0;i.length>a;)void 0!==(r=o(n,t=i[a++]))&&f(s,t,r);return s}})},{"./_create-property":15,"./_export":22,"./_object-gopd":56,"./_own-keys":65,"./_to-iobject":88}],126:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":97}],127:[function(e,t,r){for(var n=e("./es6.array.iterator"),o=e("./_object-keys"),i=e("./_redefine"),s=e("./_global"),a=e("./_hide"),u=e("./_iterators"),c=e("./_wks"),l=c("iterator"),f=c("toStringTag"),d=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},h=o(p),m=0;m<h.length;m++){var v,y=h[m],g=p[y],_=s[y],b=_&&_.prototype;if(b&&(b[l]||a(b,l,d),b[f]||a(b,f,y),u[y]=d,g))for(v in n)b[v]||i(b,v,n[v],!0)}},{"./_global":29,"./_hide":31,"./_iterators":46,"./_object-keys":62,"./_redefine":71,"./_wks":99,"./es6.array.iterator":103}],128:[function(e,t,r){var n=function(s){"use strict";var u,e=Object.prototype,l=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},o=t.iterator||"@@iterator",r=t.asyncIterator||"@@asyncIterator",n=t.toStringTag||"@@toStringTag";function a(e,t,r,n){var i,s,a,u,o=t&&t.prototype instanceof y?t:y,c=Object.create(o.prototype),l=new M(n||[]);return c._invoke=(i=e,s=r,a=l,u=d,function(e,t){if(u===h)throw new Error("Generator is already running");if(u===m){if("throw"===e)throw t;return O()}for(a.method=e,a.arg=t;;){var r=a.delegate;if(r){var n=k(r,a);if(n){if(n===v)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(u===d)throw u=m,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);u=h;var o=f(i,s,a);if("normal"===o.type){if(u=a.done?m:p,o.arg===v)continue;return{value:o.arg,done:a.done}}"throw"===o.type&&(u=m,a.method="throw",a.arg=o.arg)}}),c}function f(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}s.wrap=a;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function y(){}function i(){}function c(){}var g={};g[o]=function(){return this};var _=Object.getPrototypeOf,b=_&&_(_(E([])));b&&b!==e&&l.call(b,o)&&(g=b);var w=c.prototype=y.prototype=Object.create(g);function j(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function x(u,c){var t;this._invoke=function(r,n){function e(){return new c(function(e,t){!function t(e,r,n,o){var i=f(u[e],u,r);if("throw"!==i.type){var s=i.arg,a=s.value;return a&&"object"==typeof a&&l.call(a,"__await")?c.resolve(a.__await).then(function(e){t("next",e,n,o)},function(e){t("throw",e,n,o)}):c.resolve(a).then(function(e){s.value=e,n(s)},function(e){return t("throw",e,n,o)})}o(i.arg)}(r,n,e,t)})}return t=t?t.then(e,e):e()}}function k(e,t){var r=e.iterator[t.method];if(r===u){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=u,k(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var n=f(r,e.iterator,t.arg);if("throw"===n.type)return t.method="throw",t.arg=n.arg,t.delegate=null,v;var o=n.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=u),t.delegate=null,v):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,n=function e(){for(;++r<t.length;)if(l.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=u,e.done=!0,e};return n.next=n}}return{next:O}}function O(){return{value:u,done:!0}}return i.prototype=w.constructor=c,c.constructor=i,c[n]=i.displayName="GeneratorFunction",s.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===i||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,c):(e.__proto__=c,n in e||(e[n]="GeneratorFunction")),e.prototype=Object.create(w),e},s.awrap=function(e){return{__await:e}},j(x.prototype),x.prototype[r]=function(){return this},s.AsyncIterator=x,s.async=function(e,t,r,n,o){void 0===o&&(o=Promise);var i=new x(a(e,t,r,n),o);return s.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},j(w),w[n]="Generator",w[o]=function(){return this},w.toString=function(){return"[object Generator]"},s.keys=function(r){var n=[];for(var e in r)n.push(e);return n.reverse(),function e(){for(;n.length;){var t=n.pop();if(t in r)return e.value=t,e.done=!1,e}return e.done=!0,e}},s.values=E,M.prototype={constructor:M,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=u,this.done=!1,this.delegate=null,this.method="next",this.arg=u,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&l.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=u)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function e(e,t){return i.type="throw",i.arg=r,n.next=e,t&&(n.method="next",n.arg=u),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var s=l.call(o,"catchLoc"),a=l.call(o,"finallyLoc");if(s&&a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&l.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:E(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=u),v}},s}("object"==typeof t?t.exports:{});try{regeneratorRuntime=n}catch(e){Function("r","regeneratorRuntime = r")(n)}},{}],129:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.Build={version:"0.71.0 (d4bfb2efc0046f1c59c6bf222cd30533)",buildSeed:1630491930431,"wdosbox.wasm":{size:1461250,gzSize:491232},"wdosbox.js":{size:107589,gzSize:27656},"wlibzip.wasm":{size:112300,gzSize:54090},"wlibzip.js":{size:80251,gzSize:20720}}},{}],130:[function(e,t,r){"use strict";function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var i=function(){function e(){s(this,e)}return o(e,[{key:"close",value:function(){}},{key:"put",value:function(){return Promise.resolve()}},{key:"get",value:function(e,t){return void 0!==t?Promise.resolve(t):Promise.reject("Cache is not supported on this host")}},{key:"forEach",value:function(e,t){t()}}]),e}();r.CacheNoop=i,r.CacheDb=function(e,r){return new Promise(function(t){new a(e,t,function(e){r.onErr(e),t(new i)})})};var a=function(){function i(e,t,r){var n=this;if(s(this,i),this.storeName="files",this.db=null,this.version=e,this.indexedDB="undefined"==typeof window?void 0:window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,this.indexedDB){var o=this.indexedDB.open("js-dos-cache ("+e+")",1);o.onerror=function(e){var t;r("Can't open cache database: "+(null===(t=o.error)||void 0===t?void 0:t.message))},o.onsuccess=function(e){n.db=o.result,t(n)},o.onupgradeneeded=function(e){try{n.db=o.result,n.db.onerror=function(e){r("Can't upgrade cache database")},n.db.createObjectStore(n.storeName)}catch(e){r("Can't upgrade cache database")}}}else r("Indexed db is not supported on this host")}return o(i,[{key:"close",value:function(){null!==this.db&&(this.db.close(),this.db=null)}},{key:"put",value:function(r,n){var o=this;return new Promise(function(e){if(null!==o.db){var t=o.db.transaction(o.storeName,"readwrite");t.oncomplete=function(){return e()},t.objectStore(o.storeName).put(n,r)}else e()})}},{key:"get",value:function(o,i){var s=this;return new Promise(function(t,r){function e(e){void 0===i?r(new Error(e)):t(i)}if(null!==s.db){var n=s.db.transaction(s.storeName,"readonly").objectStore(s.storeName).get(o);n.onerror=function(){return r(new Error("Can't read value for key '"+o+"'"))},n.onsuccess=function(){n.result?t(n.result):e("Result is empty for key '"+o+"', result: "+n.result)}}else e("db is not initalized")})}},{key:"forEach",value:function(r,n){if(null!==this.db){var e=this.db.transaction(this.storeName,"readonly").objectStore(this.storeName).openCursor();e.onerror=function(){return n()},e.onsuccess=function(e){var t=e.target.result;t?(r(t.key.toString(),t.value),t.continue()):n()}}else n()}}]),i}()},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119}],131:[function(e,t,r){"use strict";function v(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=a(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e){return function(e){if(Array.isArray(e))return n(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.array.from"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.promise"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.string.iterator"),e("regenerator-runtime/runtime");var o=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var y=e("./dos-conf"),g=o(e("../../libzip/libzip")),_=e("../../http"),c=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.config=y.createDosConfig(),this.sources=[],this.libzipWasm=e,this.cache=t}var e,t,n,a,o;return e=r,(t=[{key:"autoexec",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return this.config.autoexec.options.script.value=t.join("\n"),this}},{key:"cycles",value:function(e){return this.config.cpu.options.cycles.value=e,this}},{key:"extract",value:function(e,t,r){var n=1<arguments.length&&void 0!==t?t:"/",o=2<arguments.length&&void 0!==r?r:"zip";return this.extractAll([{url:e,path:n,type:o}])}},{key:"extractAll",value:function(e){var t;return(t=this.sources).push.apply(t,i(e)),this}},{key:"toUint8Array",value:(a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d,p,h=this,m=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=0<m.length&&void 0!==m[0]&&m[0],r={},e.next=4,this.libzipWasm.instantiate(r);case 4:return n=new g.default(r,"/home/web_user"),e.next=7,y.toDosboxConf(this.config);case 7:o=e.sent,i=[],s=v(this.sources);try{for(u=function(){var t=a.value;if("zip"!==t.type)throw new Error("Only Zip is supported");var e=_.HTTPRequest(t.url,{cache:h.cache,responseType:"arraybuffer"}).then(function(e){return{source:t,data:new Uint8Array(e)}});i.push(e)},s.s();!(a=s.n()).done;)u()}catch(e){s.e(e)}finally{s.f()}if(t){e.next=18;break}return e.next=14,n.writeFile(".jsdos/dosbox.conf",o);case 14:return e.next=16,n.writeFile(".jsdos/readme.txt",b);case 16:return e.next=18,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 18:return e.next=20,Promise.all(i);case 20:c=e.sent,l=v(c);try{for(l.s();!(f=l.n()).done;)d=f.value,n.zipToFs(d.data,d.source.path)}catch(e){l.e(e)}finally{l.f()}if(t)return e.next=26,n.writeFile(".jsdos/dosbox.conf",o);e.next=30;break;case 26:return e.next=28,n.writeFile(".jsdos/readme.txt",b);case 28:return e.next=30,n.writeFile(".jsdos/jsdos.json",JSON.stringify(this.config,null,2));case 30:return e.next=32,n.zipFromFs();case 32:return p=e.sent,n.destroy(),e.abrupt("return",p);case 35:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(){return o.apply(this,arguments)})}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=c;var b="\nPlease visit our website:\n\n        _                __\n       (_)____      ____/ /___  _____ _________  ____ ___\n      / / ___/_____/ __  / __ \\/ ___// ___/ __ \\/ __ `__ \\\n     / (__  )_____/ /_/ / /_/ (__  )/ /__/ /_/ / / / / / /\n  __/ /____/      \\__,_/\\____/____(_)___/\\____/_/ /_/ /_/\n /___/\n"},{"../../http":136,"../../libzip/libzip":141,"./dos-conf":132,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],132:[function(e,t,r){"use strict";function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){o(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("regenerator-runtime/runtime"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.string.starts-with"),e("core-js/modules/es6.array.find"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var f=function e(){l(this,e),this.name="sdl",this.description="This section contains all of the low level system settings for how DOSBox interacts with your real hardware. You can define what resolutions are emulated, how DOSBox should treat errors or listen to your keyboard and mouse. You can often achieve a fair level of optimization by working with these setting, though for the most part leaving them at their default settings will create the best experience. These settings are passed on to the SDL Library which handles low level things like input and thread priority.",this.options={autolock:{name:"autolock",description:"Mouse will automatically lock, if you click on the screen.",value:!1,allowedValues:[!0,!1]}}};r.OutputCategory=f;var d=function e(){l(this,e),this.name="dosbox",this.description="The [dosbox] section contains various settings that do not pertain to any other section (e.g. setting the language used in DOSBox help texts, where to store screen captures, etc.)",this.options={machine:{name:"machine",description:"The type of machine tries to emulate.",value:"svga_s3",allowedValues:["hercules","cga","tandy","pcjr","ega","vgaonly","svga_s3","svga_et3000","svga_et4000","svga_paradise","vesa_nolfb","vesa_oldvbe"]}}};r.DosboxCategory=d;var p=function e(){l(this,e),this.name="cpu",this.description="The CPU section controls how DOSBox tries to emulate the CPU, how fast the emulation should be, and to adjust it. DOSBox offers 4 different methods of CPU emulation.",this.options={core:{name:"core",description:"CPU Core used in emulation. auto will switch to dynamic if available and appropriate.",value:"auto",allowedValues:["auto","normal","simple"]},cputype:{name:"cputype",description:"CPU Type used in emulation. auto is the fastest choice.",value:"auto",allowedValues:["auto","386","386_slow","486_slow","pentium_slow","386_prefetch"]},cycles:{name:"cycles",description:"Amount of instructions DOSBox tries to emulate each millisecond. Setting this value too high results in sound dropouts and lags.\nCycles can be set in 3 ways:\n'auto'          tries to guess what a game needs.\n                It usually works, but can fail for certain games.\n'fixed #number' will set a fixed amount of cycles. This is what you usually need if 'auto' fails.\n                (Example: fixed 4000).\n'max'           will allocate as much cycles as your computer is able to handle.\n",value:"auto",allowedValues:["auto","fixed","max"]}}};r.CpuCategory=p;var m=function e(){l(this,e),this.name="mixer",this.description="Here you can define the quality of emulated audio.",this.options={rate:{name:"rate",description:"Frequency rate of sound",value:44100,allowedValues:[]},nosound:{name:"nosound",description:"Enable silent mode, sound is still emulated though.",value:!1,allowedValues:[!0,!1]}}};r.MixerCategory=m;var v=function e(){l(this,e),this.name="autoexec",this.description="Lines in this section will be run at startup",this.options={script:{name:"lines",description:"Use \\n to separate lines",value:"",allowedValues:[]}}};function y(){return{output:new f,dosbox:new d,cpu:new p,mixer:new m,autoexec:new v}}function g(f,d){var p="sdl"===d.name?"output":d.name;return new Promise(function(e,n){if(f)if(f.name===d.name){for(var t=0,r=Object.keys(f.options);t<r.length;t++){var o=r[t],i=f.options[o],s=d.options[o];if(void 0===s)return void n(new Error("Unknown option '"+(i.name||o)+"' in '"+f.name+"'"));if(0<s.allowedValues.length){var a=function(){var t=i.value,e=s.allowedValues.find(function(e){return e===t});if("cpu"===p&&"cycles"===i.name&&(t+"").startsWith("fixed ")){var r=Number.parseInt(t.substr("fixed ".length),10);if(isNaN(r))return n(new Error("Fixed value should conatain number")),{v:void 0}}else if(void 0===e)return n(new Error("Incorrect value '"+t+"' ("+h(t)+") for '"+f.name+"."+(i.name||o)+"' allowed is "+JSON.stringify(s.allowedValues))),{v:void 0}}();if("object"===h(a))return a.v}}for(var u=0,c=Object.keys(d.options);u<c.length;u++){var l=c[u];if(!(l in f.options))return void n(new Error("Option '"+l+"' is missed in '"+p+"'"))}e()}else n(new Error("Incorrect category name '"+f.name+"' should be '"+d.name+"'"));else n(new Error("Category '"+p+"' is missed"))})}function _(){return b.apply(this,arguments)}function b(){return(b=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,g(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function w(){return j.apply(this,arguments)}function j(){return(j=i(regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a,u;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===t)return e.abrupt("return");e.next=2;break;case 2:n=0,o=Object.keys(t.options||{});case 3:if(!(n<o.length)){e.next=16;break}if(i=o[n],"string"!=typeof(s=t.options[i])&&"number"!=typeof s&&!Array.isArray(s)){e.next=13;break}if(a=r.options[i]){e.next=10;break}return e.abrupt("continue",13);case 10:u=s,t.options[i]=c({},a),t.options[i].value=u;case 13:n++,e.next=3;break;case 16:case"end":return e.stop()}},e)}))).apply(this,arguments)}function x(){return k.apply(this,arguments)}function k(){return(k=i(regeneratorRuntime.mark(function e(t){var r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:r=y(),n=0,o=Object.keys(r);case 2:if(n<o.length)return i=o[n],e.next=6,w(t[i],r[i]);e.next=9;break;case 6:n++,e.next=2;break;case 9:case"end":return e.stop()}},e)}))).apply(this,arguments)}function S(){return(S=i(regeneratorRuntime.mark(function e(r){var n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x(r);case 2:return e.next=4,_(r);case 4:return n=P(r.output)+"\nfullscreen=false\nfulldouble=false\nfullresolution=original\nwindowresolution=original\noutput=surface\nsensitivity=100\nwaitonerror=true\npriority=higher,normal\nmapperfile=mapper-jsdos.map\nusescancodes=true\nvsync=false\n"+P(r.dosbox)+"\nlanguage=\ncaptures=capture\nmemsize=16\n"+P(r.cpu)+"\ncycleup=10\ncycledown=20\n"+P(r.mixer)+"\nblocksize=1024\nprebuffer=20\n\n[render]\n# frameskip: How many frames DOSBox skips before drawing one.\n#    aspect: Do aspect correction, if your output method doesn't support scaling this can slow things down!.\n#    scaler: Scaler used to enlarge/enhance low resolution modes.\n#              If 'forced' is appended, then the scaler will be used even if the result might not be desired.\n#            Possible values: none, normal2x, normal3x, advmame2x, advmame3x, advinterp2x, advinterp3x, hq2x, hq3x, 2xsai, super2xsai, supereagle, tv2x, tv3x, rgb2x, rgb3x, scan2x, scan3x.\n\nframeskip=0\naspect=false\nscaler=none\n\n[midi]\n#     mpu401: Type of MPU-401 to emulate.\n#             Possible values: intelligent, uart, none.\n# mididevice: Device that will receive the MIDI data from MPU-401.\n#             Possible values: default, win32, alsa, oss, coreaudio, coremidi, none.\n# midiconfig: Special configuration options for the device driver. This is usually the id of the device you want to use.\n#               See the README/Manual for more details.\n\nmpu401=intelligent\nmididevice=default\nmidiconfig=\n\n[sblaster]\n#  sbtype: Type of Soundblaster to emulate. gb is Gameblaster.\n#          Possible values: sb1, sb2, sbpro1, sbpro2, sb16, gb, none.\n#  sbbase: The IO address of the soundblaster.\n#          Possible values: 220, 240, 260, 280, 2a0, 2c0, 2e0, 300.\n#     irq: The IRQ number of the soundblaster.\n#          Possible values: 7, 5, 3, 9, 10, 11, 12.\n#     dma: The DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n#    hdma: The High DMA number of the soundblaster.\n#          Possible values: 1, 5, 0, 3, 6, 7.\n# sbmixer: Allow the soundblaster mixer to modify the DOSBox mixer.\n# oplmode: Type of OPL emulation. On 'auto' the mode is determined by sblaster type. All OPL modes are Adlib-compatible, except for 'cms'.\n#          Possible values: auto, cms, opl2, dualopl2, opl3, none.\n#  oplemu: Provider for the OPL emulation. compat might provide better quality (see oplrate as well).\n#          Possible values: default, compat, fast.\n# oplrate: Sample rate of OPL music emulation. Use 49716 for highest quality (set the mixer rate accordingly).\n#          Possible values: 44100, 49716, 48000, 32000, 22050, 16000, 11025, 8000.\n\nsbtype=sb16\nsbbase=220\nirq=7\ndma=1\nhdma=5\nsbmixer=true\noplmode=auto\noplemu=default\noplrate=44100\n\n[gus]\n#      gus: Enable the Gravis Ultrasound emulation.\n#  gusrate: Sample rate of Ultrasound emulation.\n#           Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#  gusbase: The IO base address of the Gravis Ultrasound.\n#           Possible values: 240, 220, 260, 280, 2a0, 2c0, 2e0, 300.\n#   gusirq: The IRQ number of the Gravis Ultrasound.\n#           Possible values: 5, 3, 7, 9, 10, 11, 12.\n#   gusdma: The DMA channel of the Gravis Ultrasound.\n#           Possible values: 3, 0, 1, 5, 6, 7.\n# ultradir: Path to Ultrasound directory. In this directory\n#           there should be a MIDI directory that contains\n#           the patch files for GUS playback. Patch sets used\n#           with Timidity should work fine.\n\ngus=false\ngusrate=44100\ngusbase=240\ngusirq=5\ngusdma=3\nultradir=C:\\ULTRASND\n\n[speaker]\n# pcspeaker: Enable PC-Speaker emulation.\n#    pcrate: Sample rate of the PC-Speaker sound generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#     tandy: Enable Tandy Sound System emulation. For 'auto', emulation is present only if machine is set to 'tandy'.\n#            Possible values: auto, on, off.\n# tandyrate: Sample rate of the Tandy 3-Voice generation.\n#            Possible values: 44100, 48000, 32000, 22050, 16000, 11025, 8000, 49716.\n#    disney: Enable Disney Sound Source emulation. (Covox Voice Master and Speech Thing compatible).\n\npcspeaker=true\npcrate=44100\ntandy=auto\ntandyrate=44100\ndisney=true\n\n[joystick]\n# joysticktype: Type of joystick to emulate: auto (default), none,\n#               2axis (supports two joysticks),\n#               4axis (supports one joystick, first joystick used),\n#               4axis_2 (supports one joystick, second joystick used),\n#               fcs (Thrustmaster), ch (CH Flightstick).\n#               none disables joystick emulation.\n#               auto chooses emulation depending on real joystick(s).\n#               (Remember to reset dosbox's mapperfile if you saved it earlier)\n#               Possible values: auto, 2axis, 4axis, 4axis_2, fcs, ch, none.\n#        timed: enable timed intervals for axis. Experiment with this option, if your joystick drifts (away).\n#     autofire: continuously fires as long as you keep the button pressed.\n#       swap34: swap the 3rd and the 4th axis. can be useful for certain joysticks.\n#   buttonwrap: enable button wrapping at the number of emulated buttons.\n\njoysticktype=auto\ntimed=true\nautofire=false\nswap34=false\nbuttonwrap=false\n\n[serial]\n# serial1: set type of device connected to com port.\n#          Can be disabled, dummy, modem, nullmodem, directserial.\n#          Additional parameters must be in the same line in the form of\n#          parameter:value. Parameter for all types is irq (optional).\n#          for directserial: realport (required), rxdelay (optional).\n#                           (realport:COM1 realport:ttyS0).\n#          for modem: listenport (optional).\n#          for nullmodem: server, rxdelay, txdelay, telnet, usedtr,\n#                         transparent, port, inhsocket (all optional).\n#          Example: serial1=modem listenport:5000\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial2: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial3: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n# serial4: see serial1\n#          Possible values: dummy, disabled, modem, nullmodem, directserial.\n\nserial1=dummy\nserial2=dummy\nserial3=disabled\nserial4=disabled\n\n[dos]\n#            xms: Enable XMS support.\n#            ems: Enable EMS support.\n#            umb: Enable UMB support.\n# keyboardlayout: Language code of the keyboard layout (or none).\n\nxms=true\nems=true\numb=true\nkeyboardlayout=auto\n\n[ipx]\n# ipx: Enable ipx over UDP/IP emulation.\n\nipx=false\n"+(t=r.autoexec,"[autoexec]\necho off\nmount c .\nc:\n\ntype jsdos~1/readme.txt\necho on\n\n".concat(t.options.script.value,"\n\n# Generated using https://js-dos.com\n# █▀▀▀▀▀█ █  ▄▄▄▀▀█ █▀▀▀▀▀█\n# █ ███ █ ██▄ █ ▀ ▄ █ ███ █\n# █ ▀▀▀ █ ▄██ ▀ ▀▀█ █ ▀▀▀ █\n# ▀▀▀▀▀▀▀ ▀ █▄▀▄▀ █ ▀▀▀▀▀▀▀\n# █▀▄▄█▀▀▄▄ ▀ ▀█▄▄▄▄ ▀▄█▀█▀\n# █▀ ▀ ▀▀▄ █▀ ▄ ▄▀▀▀▄ █▀█▄\n# ▄ ▄▄ █▀▀▄ ▄▀▄▀▀█  ▀▀▄▀▀█▀\n#   ▄▀▀█▀▀ █▀█▀█▀▀▄ ▀██▀█▄\n# ▀▀▀ ▀ ▀ █▄█ ▀█▄▄█▀▀▀█▀▀\n# █▀▀▀▀▀█ ▄▄▄ ▄ ▄ █ ▀ █▄▄▄▄\n# █ ███ █ ▀█▀▀▄▀▀▄████▀▀█▄█\n# █ ▀▀▀ █ ▄▀▀█▀█▀▄ ▀▀▄▄█▄█\n# ▀▀▀▀▀▀▀ ▀   ▀▀ ▀  ▀   ▀▀▀\n")),e.abrupt("return",Promise.resolve(n));case 6:case"end":return e.stop()}var t},e)}))).apply(this,arguments)}function P(e){var t="";t+="[".concat(e.name,"]\n");var r,n=s(Object.keys(e.options).sort());try{for(n.s();!(r=n.n()).done;){var o=r.value,i=e.options[o];t+="".concat(i.name,"=").concat(i.value,"\n")}}catch(e){n.e(e)}finally{n.f()}return t}r.AutoexecCategory=v,r.createDosConfig=y,r.toDosboxConf=function(e){return S.apply(this,arguments)}},{"core-js/modules/es6.array.find":101,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],133:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r){var n,o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return n=new c.MessagesQueue,o=n.handler.bind(n),s=function(e){var t=e.data;"ws-sync-sleep"===(null==t?void 0:t.name)&&t.props.sessionId===r&&postMessage({name:"wc-sync-sleep",props:t.props},"*")},(a={sessionId:r,sendMessageToServer:function(e,t){i.messageHandler({data:{name:e,props:t}})},initMessageHandler:function(e){o=e,n.sendTo(o)},exit:function(){"undefined"!=typeof window&&window.removeEventListener("message",s)}}).module=i={postMessage:function(e,t){o(e,t)}},"undefined"!=typeof window&&window.addEventListener("message",s,{passive:!0}),e.next=10,t.instantiate(i);case 10:return i.callMain([r]),e.abrupt("return",a);case 12:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosDirect=function(e,t){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],134:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}e("core-js/modules/es6.function.name"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var c=e("../../../protocol/messages-queue");function n(){var a;return a=regeneratorRuntime.mark(function e(t,r,n){var o,i,s,a;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return o=new c.MessagesQueue,i=o.handler.bind(o),(s=new Worker(t)).onerror=function(e){i("ws-err",{type:e.type,filename:e.filename,message:e.message})},s.onmessage=function(e){var t=e.data;void 0!==(null==t?void 0:t.name)&&i(t.name,t.props)},e.next=7,r.instantiate({});case 7:a={sessionId:n,sendMessageToServer:function(e,t){s.postMessage({name:e,props:t})},initMessageHandler:function(e){i=e,o.sendTo(i)},exit:function(){s.terminate()}};try{a.sendMessageToServer("wc-install",{module:r.wasmModule,sessionId:n})}catch(e){a.sendMessageToServer("wc-install",{sessionId:n})}return e.abrupt("return",a);case 10:case"end":return e.stop()}},e)}),(n=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}r.dosWorker=function(e,t,r){return n.apply(this,arguments)}},{"../../../protocol/messages-queue":142,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],135:[function(n,e,o){(function(e){"use strict";var t=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(o,"__esModule",{value:!0});var r=t(n("./impl/emulators-impl"));"undefined"!=typeof window&&(window.emulators=r.default),void 0!==e&&(e.emulators=r.default)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./impl/emulators-impl":138}],136:[function(e,t,r){"use strict";function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach(function(e){s(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}e("core-js/modules/es7.object.get-own-property-descriptors"),e("core-js/modules/es6.symbol"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es6.array.iterator"),e("core-js/modules/es6.object.keys"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("./cache");r.HTTPRequest=function(r,n){return new Promise(function(e,t){new u(r,i(i({},n),{},{success:e,fail:function(e){t(new Error(e))}}))})};var u=function(){function n(e,t){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),this.xhr=null,this.total=0,this.loaded=0,this.resource=e,this.options=t,this.options.method=t.method||"GET",this.cache=t.cache||new a.CacheNoop,"GET"===this.options.method&&this.cache.get(this.resource).then(function(e){void 0!==r.options.success&&r.options.success(e)}).catch(function(){r.makeHttpRequest()})}var e,t,r;return e=n,(t=[{key:"makeHttpRequest",value:function(){var e,t,r=this;this.xhr=new XMLHttpRequest,this.xhr.open(this.options.method||"GET",this.resource,!0),"POST"===this.options.method&&this.xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded"),this.xhr.overrideMimeType("text/plain; charset=x-user-defined"),"function"==typeof(e=this.xhr).addEventListener&&e.addEventListener("progress",function(e){if(r.total=e.total,r.loaded=e.loaded,r.options.progress)return r.options.progress(e.total,e.loaded)}),"function"==typeof(t=this.xhr).addEventListener&&t.addEventListener("error",function(){if(r.options.fail)return r.options.fail("Unalbe to download '"+r.resource+"', code: "+r.xhr.status),delete r.options.fail}),this.xhr.onreadystatechange=function(){return r.onReadyStateChange()},this.options.responseType&&(this.xhr.responseType=this.options.responseType),this.xhr.send(this.options.data)}},{key:"onReadyStateChange",value:function(){var e=this.xhr;if(4===e.readyState)if(200===e.status){if(this.options.success){var t=Math.max(this.total,this.loaded);return void 0!==this.options.progress&&this.options.progress(t,t),"GET"===this.options.method&&this.resource.indexOf("?")<0&&this.cache.put(this.resource,e.response),this.options.success(e.response)}}else if(this.options.fail)return this.options.fail("Unable to download '"+this.resource+"', code: "+e.status),delete this.options.fail}}])&&o(e.prototype,t),r&&o(e,r),n}()},{"./cache":130,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.object.keys":111,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.symbol":122,"core-js/modules/es7.object.get-own-property-descriptors":125,"core-js/modules/web.dom.iterable":127}],137:[function(e,t,r){"use strict";function a(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});r.CommandInterfaceEventsImpl=function e(){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.delayedStdout=[],this.onStdoutConsumers=[],this.onFrameSizeConsumers=[],this.onFrameConsumers=[],this.onSoundPushConsumers=[],this.onExitConsumers=[],this.onMessageConsumers=[],this.onStdout=function(e){if(s.onStdoutConsumers.push(e),1===s.onStdoutConsumers.length){var t,r=a(s.delayedStdout);try{for(r.s();!(t=r.n()).done;){var n=t.value;s.fireStdout(n)}}catch(e){r.e(e)}finally{r.f()}s.delayedStdout=[]}},this.onFrameSize=function(e){s.onFrameSizeConsumers.push(e)},this.onFrame=function(e){s.onFrameConsumers.push(e)},this.onSoundPush=function(e){s.onSoundPushConsumers.push(e)},this.onExit=function(e){s.onExitConsumers.push(e)},this.onMessage=function(e){s.onMessageConsumers.push(e)},this.fireStdout=function(e){if(0!==s.onStdoutConsumers.length){var t,r=a(s.onStdoutConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}}else s.delayedStdout.push(e)},this.fireFrameSize=function(e,t){var r,n=a(s.onFrameSizeConsumers);try{for(n.s();!(r=n.n()).done;){(0,r.value)(e,t)}}catch(e){n.e(e)}finally{n.f()}},this.fireFrame=function(e){var t,r=a(s.onFrameConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireSoundPush=function(e){var t,r=a(s.onSoundPushConsumers);try{for(r.s();!(t=r.n()).done;){(0,t.value)(e)}}catch(e){r.e(e)}finally{r.f()}},this.fireExit=function(){var e,t=a(s.onExitConsumers);try{for(t.s();!(e=t.n()).done;){(0,e.value)()}}catch(e){t.e(e)}finally{t.f()}s.onStdoutConsumers=[],s.onFrameSizeConsumers=[],s.onFrameConsumers=[],s.onSoundPushConsumers=[],s.onExitConsumers=[],s.onMessageConsumers=[]},this.fireMessage=function(e){for(var t=arguments.length,r=new Array(1<t?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];var o,i=a(s.onMessageConsumers);try{for(i.s();!(o=i.n()).done;){o.value.apply(void 0,[e].concat(r))}}catch(e){i.e(e)}finally{i.f()}}}},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],138:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function d(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function p(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("regenerator-runtime/runtime");var n=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var h=e("../build"),m=e("../cache"),v=e("./modules"),y=n(e("../dos/bundle/dos-bundle")),g=e("../dos/dosbox/ts/direct"),_=e("../dos/dosbox/ts/worker"),b=n(e("../janus/janus-impl")),w=e("../protocol/protocol"),o=new(function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.pathPrefix="",this.cacheSeed="",this.cachePromises={}}var t,r,n,o,i,s,a,u,c,l,f;return t=e,(r=[{key:"cache",value:function(e){if(null!=e&&0!==e.length||(e=h.Build.version+" "+this.cacheSeed),void 0===this.cachePromises[e]){var t=m.CacheDb(e,{onErr:console.error});this.cachePromises[e]=t}return this.cachePromises[e]}},{key:"dosBundle",value:(f=d(regeneratorRuntime.mark(function e(){var t,r,n;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return t=e.sent,e.next=5,t.libzip();case 5:return r=e.sent,e.next=8,this.cache();case 8:return n=e.sent,e.abrupt("return",new y.default(r,n));case 10:case"end":return e.stop()}},e,this)})),function(){return f.apply(this,arguments)})},{key:"dosboxNode",value:(l=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return l.apply(this,arguments)})},{key:"dosboxDirect",value:(c=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,g.dosDirect(n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return c.apply(this,arguments)})},{key:"dosboxWorker",value:(u=d(regeneratorRuntime.mark(function e(t){var r,n,o;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.wasmModules();case 2:return r=e.sent,e.next=5,r.dosbox();case 5:return n=e.sent,e.next=8,_.dosWorker(this.pathPrefix+"wdosbox.js",n,"session-"+Date.now());case 8:return o=e.sent,e.abrupt("return",this.backend(t,o));case 10:case"end":return e.stop()}},e,this)})),function(e){return u.apply(this,arguments)})},{key:"janus",value:(a=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",b.default(t));case 1:case"end":return e.stop()}},e)})),function(e){return a.apply(this,arguments)})},{key:"backend",value:(s=d(regeneratorRuntime.mark(function e(o,i){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise(function(t,r){var n=new w.CommandInterfaceOverTransportLayer(Array.isArray(o)?o:[o],i,function(e){null!==e?r(e):setTimeout(function(){return t(n)},4)})}));case 1:case"end":return e.stop()}},e)})),function(e,t){return s.apply(this,arguments)})},{key:"wasmModules",value:function(){var r=this;if(void 0!==this.wasmModulesPromise)return this.wasmModulesPromise;var e=function(){var e=d(regeneratorRuntime.mark(function e(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.cache();case 2:return t=e.sent,e.abrupt("return",new v.WasmModulesImpl(r.pathPrefix,t));case 4:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}();return this.wasmModulesPromise=e(),this.wasmModulesPromise}},{key:"dosDirect",value:(i=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxDirect(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return i.apply(this,arguments)})},{key:"dosWorker",value:(o=d(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.dosboxWorker(t));case 1:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})}])&&p(t.prototype,r),n&&p(t,n),e}());r.default=o},{"../build":129,"../cache":130,"../dos/bundle/dos-bundle":131,"../dos/dosbox/ts/direct":133,"../dos/dosbox/ts/worker":134,"../janus/janus-impl":140,"../protocol/protocol":143,"./modules":139,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"regenerator-runtime/runtime":128}],139:[function(o,e,y){"use strict";function g(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),e}function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}o("core-js/modules/es6.array.from"),o("core-js/modules/es6.function.name"),o("core-js/modules/es6.regexp.to-string"),o("core-js/modules/web.dom.iterable"),o("core-js/modules/es6.array.iterator"),o("core-js/modules/es6.string.iterator"),o("core-js/modules/es6.regexp.replace"),o("regenerator-runtime/runtime"),o("core-js/modules/es6.promise"),o("core-js/modules/es6.object.to-string"),o("core-js/modules/es7.symbol.async-iterator"),o("core-js/modules/es6.symbol"),o("core-js/modules/es6.math.trunc"),o("core-js/modules/es6.math.clz32"),o("core-js/modules/es6.math.fround"),o("core-js/modules/es6.math.imul"),o("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(y,"__esModule",{value:!0});var _=o("../http");y.host=new function e(){if(a(this,e),this.wasmSupported=!1,this.globals="undefined"==typeof window?{}:window,this.globals.exports||(this.globals.exports={}),this.globals.compiled||(this.globals.compiled={}),"object"===("undefined"==typeof WebAssembly?"undefined":r(WebAssembly))&&"function"==typeof WebAssembly.instantiate&&"function"==typeof WebAssembly.compile){var t=new WebAssembly.Module(Uint8Array.of(0,97,115,109,1,0,0,0));t instanceof WebAssembly.Module&&(this.wasmSupported=new WebAssembly.Instance(t)instanceof WebAssembly.Instance)}Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(e,t){var r=65535&e,n=65535&t;return r*n+((e>>>16)*n+r*(t>>>16)<<16)|0}),Math.imul=Math.imul,Math.fround||(Math.fround=function(e){return e}),Math.fround=Math.fround,Math.clz32||(Math.clz32=function(e){e>>>=0;for(var t=0;t<32;t++)if(e&1<<31-t)return t;return 32}),Math.clz32=Math.clz32,Math.trunc||(Math.trunc=function(e){return e<0?Math.ceil(e):Math.floor(e)}),Math.trunc=Math.trunc};var t=function(){function r(e,t){a(this,r),this.wasmSupported=!1,0<e.length&&"/"!==e[e.length-1]&&(e+="/"),this.pathPrefix=e,this.cache=t}return s(r,[{key:"libzip",value:function(){return void 0!==this.libzipPromise||(this.libzipPromise=this.loadModule(this.pathPrefix+"wlibzip.js","WLIBZIP")),this.libzipPromise}},{key:"dosbox",value:function(){return void 0!==this.dosboxPromise||(this.dosboxPromise=this.loadModule(this.pathPrefix+"wdosbox.js","WDOSBOX")),this.dosboxPromise}},{key:"loadModule",value:function(e,t){return c(e,t,this.cache,function(){})}}]),r}();function c(e,t,r,n){return"undefined"==typeof XMLHttpRequest?function(e,t){if(void 0!==y.host.globals.compiled[t])return y.host.globals.compiled[t];var r=o(e),n=Promise.resolve(new l(r));t&&(y.host.globals.compiled[t]=n);return n}(e,t):function(p,h,m,v){if(void 0!==y.host.globals.compiled[h])return y.host.globals.compiled[h];function e(){var a;return a=regeneratorRuntime.mark(function e(){var t,r,n,o,i,s,a,u,c,l,f,d;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=p.lastIndexOf("/"),r=p.indexOf("w",t),n=r===t+1&&0<=r,y.host.wasmSupported&&n){e.next=5;break}throw new Error("Starting from js-dos 6.22.60 js environment is not supported");case 5:return o=p.replace(".js",".wasm"),i=_.HTTPRequest(o,{cache:m,responseType:"arraybuffer",progress:function(e,t){v("Resolving DosBox ("+p+")",e,t)}}),s=_.HTTPRequest(p,{cache:m,progress:function(e,t){v("Resolving DosBox",e,t)}}),e.next=10,Promise.all([i,s]);case 10:return a=e.sent,u=g(a,2),c=u[0],l=u[1],e.next=16,WebAssembly.compile(c);case 16:return f=e.sent,d=function(e,t){e.env=e.env||{},WebAssembly.instantiate(f,e).then(function(e){return t(e,f)})},eval.call(window,l),e.abrupt("return",new b(f,y.host.globals.exports[h],d));case 20:case"end":return e.stop()}},e)}),(e=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}).apply(this,arguments)}var t=function(){return e.apply(this,arguments)}();h&&(y.host.globals.compiled[h]=t);return t}(e,t,r,n)}y.WasmModulesImpl=t,y.loadWasmModule=c;var l=function(){function t(e){a(this,t),this.emModule=e}return s(t,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.onRuntimeInitialized=function(){e()},new r.emModule(t)})}}]),t}(),b=function(){function n(e,t,r){a(this,n),this.wasmModule=e,this.module=t,this.instantiateWasm=r}return s(n,[{key:"instantiate",value:function(t){var r=this;return new Promise(function(e){t.instantiateWasm=r.instantiateWasm,t.onRuntimeInitialized=function(){e()},new r.module(t)})}}]),n}()},{"../http":136,"core-js/modules/es6.array.from":102,"core-js/modules/es6.array.iterator":103,"core-js/modules/es6.function.name":104,"core-js/modules/es6.math.clz32":105,"core-js/modules/es6.math.fround":106,"core-js/modules/es6.math.imul":107,"core-js/modules/es6.math.trunc":108,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],140:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function c(a){return function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})}}function m(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.number.constructor"),e("core-js/modules/es6.number.parse-int"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.string.starts-with"),Object.defineProperty(r,"__esModule",{value:!0});var a=e("../impl/ci-impl");function l(o,i){var s="";return function e(t){var r=t.indexOf("\n");if(-1===r)s+=t;else{var n=s+t.substr(0,r);s="";try{o(function(e){for(var t=atob(e),r=new Uint8Array(t.length),n=0;n<r.length;n++)r[n]=t.charCodeAt(n);return(new TextDecoder).decode(r)}(n))}catch(e){i(e)}e(t.substr(r+1))}}}var f=function(){function r(e,t){var h=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.live=!0,this.startedAt=Date.now(),this.exitResolveFn=function(){},this.configResolveFn=function(){},this.handleResolveFn=function(){},this.keyMatrix={},this.frameWidth=0,this.frameHeight=0,this.eventQueue="",this.eventIntervalId=-1,this.rttIntervalId=-1,this.logIntervalId=-1,this.logColor="not set",this.logWhiteMs=0,this.logRedMs=0,this.logYellowMs=0,this.onDataMessage=function(e){if(e.startsWith("config="))h.configResolveFn(JSON.parse(e.substr("config=".length)));else if(e.startsWith("frame=")){var t=m(e.substr("frame=".length).split("x"),2),r=t[0],n=t[1];h.frameWidth=Number.parseInt(r,10)||0,h.frameHeight=Number.parseInt(n,10)||0}else if(e.startsWith("rtt=")){var o,i=m(e.substr("rtt=".length).split(" "),3),s=i[0],a=i[1],u=i[2],c=Number.parseInt(a,10),l=Number.parseInt(u,10),f=Date.now(),d=(null===(o=h.handle)||void 0===o?void 0:o.getBitrate())||"0 kbits/sec",p=Number.parseInt(d.split(" ")[0],10);h.sendPipeMessage("rtt-data",Date.now(),c,l,f,p),s===h.opaqueId&&h.eventsImpl.fireStdout("rtt-data="+(f-c)+" "+p)}else if(e.startsWith("log-visual-"))switch(e){case"log-visual-white":h.eventsImpl.fireStdout("yellow-frame:"+(Date.now()-h.logYellowMs));break;case"log-visual-red":h.eventsImpl.fireStdout("white-frame:"+(Date.now()-h.logWhiteMs));break;case"log-visual-yellow":h.eventsImpl.fireStdout("red-frame:"+(Date.now()-h.logRedMs))}else if(e.startsWith("log-command-"))switch(e){case"log-command-white":h.eventsImpl.fireStdout("yellow-pipe:"+(Date.now()-h.logYellowMs));break;case"log-command-red":h.eventsImpl.fireStdout("white-pipe:"+(Date.now()-h.logWhiteMs));break;case"log-command-yellow":h.eventsImpl.fireStdout("red-pipe:"+(Date.now()-h.logRedMs))}else h.eventsImpl.fireStdout(e)},this.onJanusMessage=function(t,e,r){null!=r&&t.createAnswer({jsep:r,media:{audioSend:!1,videoSend:!1,data:!0},success:function(e){h.fireMessage("started"),t.send({message:{request:"start"},jsep:e})},error:h.onError})},this.onError=function(e){h.fireMessage("error",e)},this.eventsImpl=new a.CommandInterfaceEventsImpl,this.janus=e,this.opaqueId=t,this.exitPromise=new Promise(function(e){h.exitResolveFn=e}),this.configPromise=new Promise(function(e){h.configResolveFn=e}),this.handlePromise=new Promise(function(t,r){h.handleResolveFn=function(e){h.handle=e,h.live?(setTimeout(function(){h.live&&e.data({text:"pipe "+h.opaqueId+" config"})},1e3),h.config().then(function(){h.live&&(h.eventIntervalId=setInterval(function(){h.sendEventsData(e)},8),h.rttIntervalId=setInterval(function(){h.sendPipeMessage("rtt",Date.now())},1e3))}),t(e)):r(new Error("exit() was called"))}}),this.attach()}var e,t,n,o,i;return e=r,(t=[{key:"fireMessage",value:function(e){for(var t,r=arguments.length,n=new Array(1<r?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(t=this.eventsImpl).fireMessage.apply(t,[e].concat(n))}},{key:"attach",value:function(){var r,n=this;this.janus.attach({plugin:"janus.plugin.streaming",opaqueId:this.opaqueId,error:this.onError,success:function(e){r=e,n.fireMessage("attached"),e.send({message:{request:"watch",id:1}})},onmessage:function(e,t){n.onJanusMessage(r,e,t)},onremotestream:function(e){n.fireMessage("onremotestream",e)},ondataopen:function(){return n.handleResolveFn(r)},ondata:l(this.onDataMessage,this.onError)})}},{key:"onDestroyed",value:function(){this.fireMessage("destroyed"),this.exitResolveFn()}},{key:"config",value:(i=c(regeneratorRuntime.mark(function e(){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",this.configPromise);case 1:case"end":return e.stop()}},e,this)})),function(){return i.apply(this,arguments)})},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return 44100}},{key:"screenshot",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){if(!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendPipeMessage("k"+(t?"down":"up"),e,r),-1!==this.logIntervalId&&t))switch(this.logColor){case"white":this.logWhiteMs=Date.now();break;case"red":this.logRedMs=Date.now();break;case"yellow":this.logYellowMs=Date.now()}}},{key:"sendMouseMotion",value:function(e,t){this.sendPipeMessage("mmove",e,t,Date.now()-this.startedAt)}},{key:"sendMouseRelativeMotion",value:function(){throw new Error("not implemented")}},{key:"sendMouseButton",value:function(e,t){this.sendPipeMessage("m"+(t?"down":"up"),e,Date.now()-this.startedAt)}},{key:"sendMouseSync",value:function(){this.sendPipeMessage("msync",Date.now()-this.startedAt)}},{key:"logVisual",value:function(s){var a=this;this.sendPipeMessage("log-visual-on");var e=document.createElement("canvas"),u=e.getContext("2d");e.width=1,e.height=1,this.logIntervalId=setInterval(c(regeneratorRuntime.mark(function e(){var t,r,n,o,i;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=Date.now(),null!=u&&u.drawImage(s,0,0,1,1,0,0,1,1),n=null==u||null===(t=u.getImageData(0,0,1,1))||void 0===t?void 0:t.data,o=Date.now()-r,i="not set",200<n[0]&&200<n[1]&&200<n[2]?i="white":200<n[0]&&n[1]<200&&n[2]<200?i="red":200<n[0]&&200<n[1]&&n[2]<200&&(i="yellow"),i===a.logColor){e.next=17;break}e.t0=i,e.next="white"===e.t0?10:"red"===e.t0?12:"yellow"===e.t0?14:16;break;case 10:return a.eventsImpl.fireStdout("yellow-stream:"+(Date.now()-a.logYellowMs-o)),e.abrupt("break",16);case 12:return a.eventsImpl.fireStdout("white-stream:"+(Date.now()-a.logWhiteMs-o)),e.abrupt("break",16);case 14:return a.eventsImpl.fireStdout("red-stream:"+(Date.now()-a.logRedMs-o)),e.abrupt("break",16);case 16:a.logColor=i;case 17:case"end":return e.stop()}},e)})),16)}},{key:"sendPipeMessage",value:function(){this.eventQueue+="pipe "+this.opaqueId;for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0,o=t;n<o.length;n++){var i=o[n];this.eventQueue+=" "+i}this.eventQueue+="\n"}},{key:"sendEventsData",value:(o=c(regeneratorRuntime.mark(function e(t){return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(0===this.eventQueue.length)return e.abrupt("return");e.next=2;break;case 2:t.data({text:this.eventQueue}),this.eventQueue="";case 4:case"end":return e.stop()}},e,this)})),function(e){return o.apply(this,arguments)})},{key:"persist",value:function(){return Promise.reject(new Error("Not supported"))}},{key:"pause",value:function(){console.warn("pause/resume is not implemented")}},{key:"resume",value:function(){}},{key:"mute",value:function(){console.warn("mute/unmute is not implemented")}},{key:"unmute",value:function(){}},{key:"exit",value:function(){return this.live=!1,clearInterval(this.logIntervalId),this.logIntervalId=-1,clearInterval(this.eventIntervalId),this.eventIntervalId=-1,clearInterval(this.rttIntervalId),this.rttIntervalId=-1,this.janus.destroy(),this.exitPromise}},{key:"events",value:function(){return this.eventsImpl}}])&&s(e.prototype,t),n&&s(e,n),r}();r.default=function(s,e){var a=e||window.Janus;return void 0===a?Promise.reject(new Error("Janus is not defined, you should load janus.js before this")):a.isWebrtcSupported()?new Promise(function(e,t){var r=null,n={error:function(e){null===r?t(e):r.onError(e)},destroyed:function(){null!==r&&r.onDestroyed()}},o={server:s,success:function(){r=new f(i,"js-dos-"+a.randomString(12)),e(r)},error:n.error,destroyed:n.destroyed,destroyOnUnload:!0},i=new a(o)}):Promise.reject(new Error("WebRTC not supported"))}},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.number.constructor":109,"core-js/modules/es6.number.parse-int":110,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.string.starts-with":121,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127,"regenerator-runtime/runtime":128}],141:[function(e,t,r){"use strict";function u(e,t,r,n,o,i,s){try{var a=e[i](s),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/es6.regexp.constructor"),e("core-js/modules/es6.regexp.replace"),e("regenerator-runtime/runtime"),e("core-js/modules/es6.typed.uint8-array"),e("core-js/modules/es6.regexp.split"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function r(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.module=e,this.home=t,this.module.callMain([]),this.chdirToHome()}var e,t,n,a,o;return e=r,(t=[{key:"zipFromFs",value:function(e){var t=0<arguments.length&&void 0!==e?e:-1;this.chdirToHome();var r=this.module._zip_from_fs(t);if(0===r)return Promise.reject(new Error("Can't create zip, see more info in logs"));var n=this.module.HEAPU32[r/4],o=this.module.HEAPU8.slice(r+4,r+4+n);return this.module._free(r),Promise.resolve(o)}},{key:"zipToFs",value:function(e,t){var r=1<arguments.length&&void 0!==t?t:"/";r=this.normalizeFilename(r);var n=this.normalizeFilename(r).split("/");this.createPath(n,0,n.length),this.chdir(r);var o=new Uint8Array(e),i=this.module._malloc(o.length);this.module.HEAPU8.set(o,i);var s=this.module._zip_to_fs(i,o.length);return this.module._free(i),this.chdirToHome(),0===s?Promise.resolve():Promise.reject(new Error("Can't extract zip, retcode "+s+", see more info in logs"))}},{key:"writeFile",value:function(e,t){e=this.normalizeFilename(e),t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r=e.split("/");if(0===r.length)throw new Error("Can't create file '"+e+"', because it's not valid file path");var n=r[r.length-1].trim();if(0===n.length)throw new Error("Can't create file '"+e+"', because file name is empty");var o=this.createPath(r,0,r.length-1);this.module.FS.writeFile(o+"/"+n,t)}},{key:"readFile",value:(a=regeneratorRuntime.mark(function e(t){var r,n=arguments;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=1<n.length&&void 0!==n[1]?n[1]:"utf8",t=this.normalizeFilename(t),e.abrupt("return",this.module.FS.readFile(t,{encoding:r}));case 3:case"end":return e.stop()}},e,this)}),o=function(){var e=this,s=arguments;return new Promise(function(t,r){var n=a.apply(e,s);function o(e){u(n,t,r,o,i,"next",e)}function i(e){u(n,t,r,o,i,"throw",e)}o(void 0)})},function(e){return o.apply(this,arguments)})},{key:"exists",value:function(e){e=this.normalizeFilename(e);try{return this.module.FS.lookupPath(e),!0}catch(e){return!1}}},{key:"destroy",value:function(){try{this.module._libzip_destroy()}catch(e){return e}}},{key:"normalizeFilename",value:function(e){for(e=e.replace(new RegExp("^[a-zA-z]+:"),"").replace(new RegExp("\\\\","g"),"/");"/"===e[0];)e=e.substr(1);return e}},{key:"createPath",value:function(e,t,r){for(var n=".",o=t;o<r;++o){var i=e[o].trim();0!==i.length&&(this.module.FS.createPath(n,i,!0,!0),n=n+"/"+i)}return n}},{key:"chdirToHome",value:function(){this.module.FS.chdir(this.home)}},{key:"chdir",value:function(e){this.module.FS.chdir(this.home+"/"+e)}}])&&i(e.prototype,t),n&&i(e,n),r}();r.default=n},{"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.constructor":114,"core-js/modules/es6.regexp.replace":117,"core-js/modules/es6.regexp.split":118,"core-js/modules/es6.typed.uint8-array":123,"regenerator-runtime/runtime":128}],142:[function(e,t,r){"use strict";function o(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.function.name"),Object.defineProperty(r,"__esModule",{value:!0});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.messages=[]}var t,r,n;return t=e,(r=[{key:"handler",value:function(e,t){this.messages.push({name:e,props:t})}},{key:"sendTo",value:function(e){var t,r=o(this.messages);try{for(r.s();!(t=r.n()).done;){var n=t.value;e(n.name,n.props)}}catch(e){r.e(e)}finally{r.f()}this.messages=[]}}])&&i(t.prototype,r),n&&i(t,n),e}();r.MessagesQueue=n},{"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}],143:[function(e,t,r){"use strict";function i(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return a(e,t)}(e))){var t=0,r=function(){};return{s:r,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,o,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e("core-js/modules/web.dom.iterable"),e("core-js/modules/es7.symbol.async-iterator"),e("core-js/modules/es6.symbol"),e("core-js/modules/es6.string.iterator"),e("core-js/modules/es6.array.from"),e("core-js/modules/es6.function.name"),e("core-js/modules/es6.regexp.to-string"),e("core-js/modules/es6.typed.uint8-clamped-array"),e("core-js/modules/es6.promise"),e("core-js/modules/es6.object.to-string"),e("core-js/modules/es6.typed.uint8-array"),Object.defineProperty(r,"__esModule",{value:!0});var s=e("../impl/ci-impl"),o=function(){function o(e,t,r){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),this.startedAt=Date.now(),this.frameWidth=0,this.frameHeight=0,this.rgb=new Uint8Array,this.freq=0,this.eventsImpl=new s.CommandInterfaceEventsImpl,this.keyMatrix={},this.configResolve=function(){},this.panicMessages=[],this.bundles=e,this.transport=t,this.ready=r,this.configPromise=new Promise(function(e){return n.configResolve=e}),this.transport.initMessageHandler(this.onServerMessage.bind(this))}var e,t,r;return e=o,(t=[{key:"sendClientMessage",value:function(e,t){(t=t||{}).sessionId=t.sessionId||this.transport.sessionId,this.transport.sendMessageToServer(e,t)}},{key:"onServerMessage",value:function(e,t){if(!(void 0===e||e.length<3||"w"!==e[0]||"s"!==e[1]||"-"!==e[2])&&void 0!==t&&t.sessionId===this.transport.sessionId)switch(e){case"ws-ready":this.sendClientMessage("wc-run",{bundles:this.bundles}),delete this.bundles;break;case"ws-server-ready":0<this.panicMessages.length?(void 0!==this.transport.exit&&this.transport.exit(),this.ready(new Error(JSON.stringify(this.panicMessages)))):this.ready(null),delete this.ready;break;case"ws-frame-set-size":this.onFrameSize(t.width,t.height);break;case"ws-update-lines":this.onFrameLines(t.lines);break;case"ws-exit":this.onExit();break;case"ws-log":this.onLog(t.tag,t.message);break;case"ws-warn":this.onWarn(t.tag,t.message);break;case"ws-err":this.onErr(t.tag,t.message);break;case"ws-stdout":this.onStdout(t.message);break;case"ws-persist":this.onPersist(t.bundle);break;case"ws-sound-init":this.onSoundInit(t.freq);break;case"ws-sound-push":this.onSoundPush(t.samples);break;case"ws-config":this.onConfig(JSON.parse(t.content));break;case"ws-sync-sleep":this.sendClientMessage("wc-sync-sleep",t);break;default:console.log("Unknown server message (ws):",e)}}},{key:"onConfig",value:function(e){this.configResolve(e)}},{key:"onFrameSize",value:function(e,t){this.frameWidth===e&&this.frameHeight===t||(this.frameWidth=e,this.frameHeight=t,this.rgb=new Uint8Array(e*t*3),this.eventsImpl.fireFrameSize(e,t))}},{key:"onFrameLines",value:function(e){var t,r=i(e);try{for(r.s();!(t=r.n()).done;){var n=t.value;this.rgb.set(n.heapu8,n.start*this.frameWidth*3)}}catch(e){r.e(e)}finally{r.f()}this.eventsImpl.fireFrame(this.rgb)}},{key:"onSoundInit",value:function(e){this.freq=e}},{key:"onSoundPush",value:function(e){this.eventsImpl.fireSoundPush(e)}},{key:"onLog",value:function(e,t){this.eventsImpl.fireMessage("log","["+e+"]"+t)}},{key:"onWarn",value:function(e,t){this.eventsImpl.fireMessage("warn","["+e+"]"+t)}},{key:"onErr",value:function(e,t){"panic"===e?(this.panicMessages.push(t),console.error("["+e+"]"+t)):console.log("["+e+"]"+t),this.eventsImpl.fireMessage("error","["+e+"]"+t)}},{key:"onStdout",value:function(e){this.eventsImpl.fireStdout(e)}},{key:"config",value:function(){return this.configPromise}},{key:"width",value:function(){return this.frameWidth}},{key:"height",value:function(){return this.frameHeight}},{key:"soundFrequency",value:function(){return this.freq}},{key:"screenshot",value:function(){for(var e=new Uint8ClampedArray(this.rgb.length/3*4),t=0,r=0;r<e.length;)e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=this.rgb[t++],e[r++]=255;return Promise.resolve(new ImageData(e,this.frameWidth,this.frameHeight))}},{key:"simulateKeyPress",value:function(){for(var t=this,r=Date.now()-this.startedAt,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];n.forEach(function(e){return t.addKey(e,!0,r)}),n.forEach(function(e){return t.addKey(e,!1,16+r)})}},{key:"sendKeyEvent",value:function(e,t){this.addKey(e,t,Date.now()-this.startedAt)}},{key:"addKey",value:function(e,t,r){!0===this.keyMatrix[e]!==t&&(this.keyMatrix[e]=t,this.sendClientMessage("wc-add-key",{key:e,pressed:t,timeMs:r}))}},{key:"sendMouseMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!1,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseRelativeMotion",value:function(e,t){this.sendClientMessage("wc-mouse-move",{x:e,y:t,relative:!0,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseButton",value:function(e,t){this.sendClientMessage("wc-mouse-button",{button:e,pressed:t,timeMs:Date.now()-this.startedAt})}},{key:"sendMouseSync",value:function(){this.sendClientMessage("wc-mouse-sync",{timeMs:Date.now()-this.startedAt})}},{key:"persist",value:function(){var t=this;if(void 0!==this.persistPromise)return this.persistPromise;var e=new Promise(function(e){return t.persistResolve=e});return this.persistPromise=e,this.sendClientMessage("wc-pack-fs-to-bundle"),e}},{key:"onPersist",value:function(e){this.persistResolve&&(this.persistResolve(e),delete this.persistPromise,delete this.persistResolve)}},{key:"pause",value:function(){this.sendClientMessage("wc-pause")}},{key:"resume",value:function(){this.sendClientMessage("wc-resume")}},{key:"mute",value:function(){this.sendClientMessage("wc-mute")}},{key:"unmute",value:function(){this.sendClientMessage("wc-unmute")}},{key:"exit",value:function(){var t=this;return void 0!==this.exitPromise||(this.exitPromise=new Promise(function(e){return t.exitResolve=e}),this.exitPromise.then(function(){t.events().fireExit()}),this.resume(),this.sendClientMessage("wc-exit")),this.exitPromise}},{key:"onExit",value:function(){void 0!==this.transport.exit&&this.transport.exit(),this.exitResolve&&(this.exitResolve(),delete this.exitPromise,delete this.exitResolve)}},{key:"events",value:function(){return this.eventsImpl}}])&&n(e.prototype,t),r&&n(e,r),o}();r.CommandInterfaceOverTransportLayer=o},{"../impl/ci-impl":137,"core-js/modules/es6.array.from":102,"core-js/modules/es6.function.name":104,"core-js/modules/es6.object.to-string":112,"core-js/modules/es6.promise":113,"core-js/modules/es6.regexp.to-string":119,"core-js/modules/es6.string.iterator":120,"core-js/modules/es6.symbol":122,"core-js/modules/es6.typed.uint8-array":123,"core-js/modules/es6.typed.uint8-clamped-array":124,"core-js/modules/es7.symbol.async-iterator":126,"core-js/modules/web.dom.iterable":127}]},{},[135]);


!function r(o,i,s){function a(e,t){if(!i[e]){if(!o[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(l)return l(e,!0);throw(n=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",n}n=i[e]={exports:{}},o[e][0].call(n.exports,function(t){return a(o[e][1][t]||t)},n,n.exports,r,o,i,s)}return i[e].exports}for(var l="function"==typeof require&&require,t=0;t<s.length;t++)a(s[t]);return a}({1:[function(t,e,n){"use strict";n.byteLength=function(t){var e=u(t),t=e[0],e=e[1];return 3*(t+e)/4-e},n.toByteArray=function(t){var e,n,r=u(t),o=r[0],r=r[1],i=new c(function(t,e){return 3*(t+e)/4-e}(o,r)),s=0,a=0<r?o-4:o;for(n=0;n<a;n+=4)e=l[t.charCodeAt(n)]<<18|l[t.charCodeAt(n+1)]<<12|l[t.charCodeAt(n+2)]<<6|l[t.charCodeAt(n+3)],i[s++]=e>>16&255,i[s++]=e>>8&255,i[s++]=255&e;2===r&&(e=l[t.charCodeAt(n)]<<2|l[t.charCodeAt(n+1)]>>4,i[s++]=255&e);1===r&&(e=l[t.charCodeAt(n)]<<10|l[t.charCodeAt(n+1)]<<4|l[t.charCodeAt(n+2)]>>2,i[s++]=e>>8&255,i[s++]=255&e);return i},n.fromByteArray=function(t){for(var e,n=t.length,r=n%3,o=[],i=0,s=n-r;i<s;i+=16383)o.push(function(t,e,n){for(var r,o=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(function(t){return a[t>>18&63]+a[t>>12&63]+a[t>>6&63]+a[63&t]}(r));return o.join("")}(t,i,s<i+16383?s:i+16383));1==r?(e=t[n-1],o.push(a[e>>2]+a[e<<4&63]+"==")):2==r&&(e=(t[n-2]<<8)+t[n-1],o.push(a[e>>10]+a[e>>4&63]+a[e<<2&63]+"="));return o.join("")};for(var a=[],l=[],c="undefined"!=typeof Uint8Array?Uint8Array:Array,r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,i=r.length;o<i;++o)a[o]=r[o],l[r.charCodeAt(o)]=o;function u(t){var e=t.length;if(0<e%4)throw new Error("Invalid string. Length must be a multiple of 4");t=t.indexOf("=");return[t=-1===t?e:t,t===e?0:4-t%4]}l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63},{}],2:[function(t,e,n){e.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},{}],3:[function(t,e,n){var r=t("../internals/is-object");e.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},{"../internals/is-object":56}],4:[function(t,e,n){var r=t("../internals/well-known-symbol"),o=t("../internals/object-create"),t=t("../internals/object-define-property"),i=r("unscopables"),s=Array.prototype;null==s[i]&&t.f(s,i,{configurable:!0,value:o(null)}),e.exports=function(t){s[i][t]=!0}},{"../internals/object-create":68,"../internals/object-define-property":70,"../internals/well-known-symbol":110}],5:[function(t,e,n){e.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},{}],6:[function(t,e,n){var r=t("../internals/is-object");e.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},{"../internals/is-object":56}],7:[function(t,e,n){"use strict";var d=t("../internals/function-bind-context"),h=t("../internals/to-object"),y=t("../internals/call-with-safe-iteration-closing"),v=t("../internals/is-array-iterator-method"),b=t("../internals/to-length"),g=t("../internals/create-property"),m=t("../internals/get-iterator"),w=t("../internals/get-iterator-method");e.exports=function(t){var e,n,r,o,i,s,a=h(t),l="function"==typeof this?this:Array,c=arguments.length,u=1<c?arguments[1]:void 0,f=void 0!==u,t=w(a),p=0;if(f&&(u=d(u,2<c?arguments[2]:void 0,2)),null==t||l==Array&&v(t))for(n=new l(e=b(a.length));p<e;p++)s=f?u(a[p],p):a[p],g(n,p,s);else for(i=(o=m(a,t)).next,n=new l;!(r=i.call(o)).done;p++)s=f?y(o,u,[r.value,p],!0):r.value,g(n,p,s);return n.length=p,n}},{"../internals/call-with-safe-iteration-closing":15,"../internals/create-property":24,"../internals/function-bind-context":40,"../internals/get-iterator":43,"../internals/get-iterator-method":42,"../internals/is-array-iterator-method":53,"../internals/to-length":101,"../internals/to-object":102}],8:[function(t,e,n){var l=t("../internals/to-indexed-object"),c=t("../internals/to-length"),u=t("../internals/to-absolute-index"),t=function(a){return function(t,e,n){var r,o=l(t),i=c(o.length),s=u(n,i);if(a&&e!=e){for(;s<i;)if((r=o[s++])!=r)return!0}else for(;s<i;s++)if((a||s in o)&&o[s]===e)return a||s||0;return!a&&-1}};e.exports={includes:t(!0),indexOf:t(!1)}},{"../internals/to-absolute-index":98,"../internals/to-indexed-object":99,"../internals/to-length":101}],9:[function(t,e,n){var w=t("../internals/function-bind-context"),j=t("../internals/indexed-object"),x=t("../internals/to-object"),k=t("../internals/to-length"),S=t("../internals/array-species-create"),O=[].push,t=function(p){var d=1==p,h=2==p,y=3==p,v=4==p,b=6==p,g=7==p,m=5==p||b;return function(t,e,n,r){for(var o,i,s=x(t),a=j(s),l=w(e,n,3),c=k(a.length),u=0,r=r||S,f=d?r(t,c):h||g?r(t,0):void 0;u<c;u++)if((m||u in a)&&(i=l(o=a[u],u,s),p))if(d)f[u]=i;else if(i)switch(p){case 3:return!0;case 5:return o;case 6:return u;case 2:O.call(f,o)}else switch(p){case 4:return!1;case 7:O.call(f,o)}return b?-1:y||v?v:f}};e.exports={forEach:t(0),map:t(1),filter:t(2),some:t(3),every:t(4),find:t(5),findIndex:t(6),filterReject:t(7)}},{"../internals/array-species-create":14,"../internals/function-bind-context":40,"../internals/indexed-object":50,"../internals/to-length":101,"../internals/to-object":102}],10:[function(t,e,n){"use strict";var o=t("../internals/to-indexed-object"),i=t("../internals/to-integer"),s=t("../internals/to-length"),t=t("../internals/array-method-is-strict"),a=Math.min,l=[].lastIndexOf,c=!!l&&1/[1].lastIndexOf(1,-0)<0,t=t("lastIndexOf");e.exports=c||!t?function(t){if(c)return l.apply(this,arguments)||0;var e=o(this),n=s(e.length),r=n-1;for((r=1<arguments.length?a(r,i(arguments[1])):r)<0&&(r=n+r);0<=r;r--)if(r in e&&e[r]===t)return r||0;return-1}:l},{"../internals/array-method-is-strict":12,"../internals/to-indexed-object":99,"../internals/to-integer":100,"../internals/to-length":101}],11:[function(t,e,n){var r=t("../internals/fails"),o=t("../internals/well-known-symbol"),i=t("../internals/engine-v8-version"),s=o("species");e.exports=function(e){return 51<=i||!r(function(){var t=[];return(t.constructor={})[s]=function(){return{foo:1}},1!==t[e](Boolean).foo})}},{"../internals/engine-v8-version":36,"../internals/fails":39,"../internals/well-known-symbol":110}],12:[function(t,e,n){"use strict";var r=t("../internals/fails");e.exports=function(t,e){var n=[][t];return!!n&&r(function(){n.call(null,e||function(){throw 1},1)})}},{"../internals/fails":39}],13:[function(t,e,n){var r=t("../internals/is-object"),o=t("../internals/is-array"),i=t("../internals/well-known-symbol")("species");e.exports=function(t){var e;return void 0===(e=o(t)&&("function"==typeof(e=t.constructor)&&(e===Array||o(e.prototype))||r(e)&&null===(e=e[i]))?void 0:e)?Array:e}},{"../internals/is-array":54,"../internals/is-object":56,"../internals/well-known-symbol":110}],14:[function(t,e,n){var r=t("../internals/array-species-constructor");e.exports=function(t,e){return new(r(t))(0===e?0:e)}},{"../internals/array-species-constructor":13}],15:[function(t,e,n){var o=t("../internals/an-object"),i=t("../internals/iterator-close");e.exports=function(e,t,n,r){try{return r?t(o(n)[0],n[1]):t(n)}catch(t){i(e,"throw",t)}}},{"../internals/an-object":6,"../internals/iterator-close":60}],16:[function(t,e,n){var o=t("../internals/well-known-symbol")("iterator"),i=!1;try{var r=0,s={next:function(){return{done:!!r++}},return:function(){i=!0}};s[o]=function(){return this},Array.from(s,function(){throw 2})}catch(t){}e.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var r={};r[o]=function(){return{next:function(){return{done:n=!0}}}},t(r)}catch(t){}return n}},{"../internals/well-known-symbol":110}],17:[function(t,e,n){var r={}.toString;e.exports=function(t){return r.call(t).slice(8,-1)}},{}],18:[function(t,e,n){var r=t("../internals/to-string-tag-support"),o=t("../internals/classof-raw"),i=t("../internals/well-known-symbol")("toStringTag"),s="Arguments"==o(function(){return arguments}());e.exports=r?o:function(t){var e;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(t=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?t:s?o(e):"Object"==(t=o(e))&&"function"==typeof e.callee?"Arguments":t}},{"../internals/classof-raw":17,"../internals/to-string-tag-support":105,"../internals/well-known-symbol":110}],19:[function(t,e,n){var a=t("../internals/has"),l=t("../internals/own-keys"),c=t("../internals/object-get-own-property-descriptor"),u=t("../internals/object-define-property");e.exports=function(t,e){for(var n=l(e),r=u.f,o=c.f,i=0;i<n.length;i++){var s=n[i];a(t,s)||r(t,s,o(e,s))}}},{"../internals/has":45,"../internals/object-define-property":70,"../internals/object-get-own-property-descriptor":71,"../internals/own-keys":82}],20:[function(t,e,n){t=t("../internals/fails");e.exports=!t(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype})},{"../internals/fails":39}],21:[function(t,e,n){"use strict";function r(){return this}var o=t("../internals/iterators-core").IteratorPrototype,i=t("../internals/object-create"),s=t("../internals/create-property-descriptor"),a=t("../internals/set-to-string-tag"),l=t("../internals/iterators");e.exports=function(t,e,n){e+=" Iterator";return t.prototype=i(o,{next:s(1,n)}),a(t,e,!1,!0),l[e]=r,t}},{"../internals/create-property-descriptor":23,"../internals/iterators":62,"../internals/iterators-core":61,"../internals/object-create":68,"../internals/set-to-string-tag":91}],22:[function(t,e,n){var r=t("../internals/descriptors"),o=t("../internals/object-define-property"),i=t("../internals/create-property-descriptor");e.exports=r?function(t,e,n){return o.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},{"../internals/create-property-descriptor":23,"../internals/descriptors":27,"../internals/object-define-property":70}],23:[function(t,e,n){e.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},{}],24:[function(t,e,n){"use strict";var r=t("../internals/to-property-key"),o=t("../internals/object-define-property"),i=t("../internals/create-property-descriptor");e.exports=function(t,e,n){e=r(e);e in t?o.f(t,e,i(0,n)):t[e]=n}},{"../internals/create-property-descriptor":23,"../internals/object-define-property":70,"../internals/to-property-key":104}],25:[function(t,e,n){"use strict";function y(){return this}var v=t("../internals/export"),b=t("../internals/create-iterator-constructor"),g=t("../internals/object-get-prototype-of"),m=t("../internals/object-set-prototype-of"),w=t("../internals/set-to-string-tag"),j=t("../internals/create-non-enumerable-property"),x=t("../internals/redefine"),r=t("../internals/well-known-symbol"),k=t("../internals/is-pure"),S=t("../internals/iterators"),t=t("../internals/iterators-core"),O=t.IteratorPrototype,C=t.BUGGY_SAFARI_ITERATORS,L=r("iterator"),P="values",T="entries";e.exports=function(t,e,n,r,o,i,s){b(n,e,r);function a(t){if(t===o&&h)return h;if(!C&&t in p)return p[t];switch(t){case"keys":case P:case T:return function(){return new n(this,t)}}return function(){return new n(this)}}var l,c,u=e+" Iterator",f=!1,p=t.prototype,d=p[L]||p["@@iterator"]||o&&p[o],h=!C&&d||a(o),r="Array"==e&&p.entries||d;if(r&&(t=g(r.call(new t)),O!==Object.prototype&&t.next&&(k||g(t)===O||(m?m(t,O):"function"!=typeof t[L]&&j(t,L,y)),w(t,u,!0,!0),k&&(S[u]=y))),o==P&&d&&d.name!==P&&(f=!0,h=function(){return d.call(this)}),k&&!s||p[L]===h||j(p,L,h),S[e]=h,o)if(l={values:a(P),keys:i?h:a("keys"),entries:a(T)},s)for(c in l)!C&&!f&&c in p||x(p,c,l[c]);else v({target:e,proto:!0,forced:C||f},l);return l}},{"../internals/create-iterator-constructor":21,"../internals/create-non-enumerable-property":22,"../internals/export":38,"../internals/is-pure":57,"../internals/iterators":62,"../internals/iterators-core":61,"../internals/object-get-prototype-of":75,"../internals/object-set-prototype-of":79,"../internals/redefine":87,"../internals/set-to-string-tag":91,"../internals/well-known-symbol":110}],26:[function(t,e,n){var r=t("../internals/path"),o=t("../internals/has"),i=t("../internals/well-known-symbol-wrapped"),s=t("../internals/object-define-property").f;e.exports=function(t){var e=r.Symbol||(r.Symbol={});o(e,t)||s(e,t,{value:i.f(t)})}},{"../internals/has":45,"../internals/object-define-property":70,"../internals/path":83,"../internals/well-known-symbol-wrapped":109}],27:[function(t,e,n){t=t("../internals/fails");e.exports=!t(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]})},{"../internals/fails":39}],28:[function(t,e,n){var r=t("../internals/global"),t=t("../internals/is-object"),o=r.document,i=t(o)&&t(o.createElement);e.exports=function(t){return i?o.createElement(t):{}}},{"../internals/global":44,"../internals/is-object":56}],29:[function(t,e,n){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},{}],30:[function(t,e,n){e.exports="object"==typeof window},{}],31:[function(t,e,n){var r=t("../internals/engine-user-agent"),t=t("../internals/global");e.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==t.Pebble},{"../internals/engine-user-agent":35,"../internals/global":44}],32:[function(t,e,n){t=t("../internals/engine-user-agent");e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(t)},{"../internals/engine-user-agent":35}],33:[function(t,e,n){var r=t("../internals/classof-raw"),t=t("../internals/global");e.exports="process"==r(t.process)},{"../internals/classof-raw":17,"../internals/global":44}],34:[function(t,e,n){t=t("../internals/engine-user-agent");e.exports=/web0s(?!.*chrome)/i.test(t)},{"../internals/engine-user-agent":35}],35:[function(t,e,n){t=t("../internals/get-built-in");e.exports=t("navigator","userAgent")||""},{"../internals/get-built-in":41}],36:[function(t,e,n){var r,o,i=t("../internals/global"),s=t("../internals/engine-user-agent"),t=i.process,i=i.Deno,i=t&&t.versions||i&&i.version,i=i&&i.v8;i?o=(r=i.split("."))[0]<4?1:r[0]+r[1]:s&&(!(r=s.match(/Edge\/(\d+)/))||74<=r[1])&&(r=s.match(/Chrome\/(\d+)/))&&(o=r[1]),e.exports=o&&+o},{"../internals/engine-user-agent":35,"../internals/global":44}],37:[function(t,e,n){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},{}],38:[function(t,e,n){var c=t("../internals/global"),u=t("../internals/object-get-own-property-descriptor").f,f=t("../internals/create-non-enumerable-property"),p=t("../internals/redefine"),d=t("../internals/set-global"),h=t("../internals/copy-constructor-properties"),y=t("../internals/is-forced");e.exports=function(t,e){var n,r,o,i=t.target,s=t.global,a=t.stat,l=s?c:a?c[i]||d(i,{}):(c[i]||{}).prototype;if(l)for(n in e){if(r=e[n],o=t.noTargetGet?(o=u(l,n))&&o.value:l[n],!y(s?n:i+(a?".":"#")+n,t.forced)&&void 0!==o){if(typeof r==typeof o)continue;h(r,o)}(t.sham||o&&o.sham)&&f(r,"sham",!0),p(l,n,r,t)}}},{"../internals/copy-constructor-properties":19,"../internals/create-non-enumerable-property":22,"../internals/global":44,"../internals/is-forced":55,"../internals/object-get-own-property-descriptor":71,"../internals/redefine":87,"../internals/set-global":89}],39:[function(t,e,n){e.exports=function(t){try{return!!t()}catch(t){return!0}}},{}],40:[function(t,e,n){var i=t("../internals/a-function");e.exports=function(r,o,t){if(i(r),void 0===o)return r;switch(t){case 0:return function(){return r.call(o)};case 1:return function(t){return r.call(o,t)};case 2:return function(t,e){return r.call(o,t,e)};case 3:return function(t,e,n){return r.call(o,t,e,n)}}return function(){return r.apply(o,arguments)}}},{"../internals/a-function":2}],41:[function(t,e,n){var r=t("../internals/global");e.exports=function(t,e){return arguments.length<2?"function"==typeof(n=r[t])?n:void 0:r[t]&&r[t][e];var n}},{"../internals/global":44}],42:[function(t,e,n){var r=t("../internals/classof"),o=t("../internals/iterators"),i=t("../internals/well-known-symbol")("iterator");e.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},{"../internals/classof":18,"../internals/iterators":62,"../internals/well-known-symbol":110}],43:[function(t,e,n){var r=t("../internals/an-object"),o=t("../internals/get-iterator-method");e.exports=function(t,e){var n=arguments.length<2?o(t):e;if("function"!=typeof n)throw TypeError(String(t)+" is not iterable");return r(n.call(t))}},{"../internals/an-object":6,"../internals/get-iterator-method":42}],44:[function(t,n,e){!function(e){!function(){function t(t){return t&&t.Math==Math&&t}n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof e&&e)||function(){return this}()||Function("return this")()}.call(this)}.call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(t,e,n){var r=t("../internals/to-object"),o={}.hasOwnProperty;e.exports=Object.hasOwn||function(t,e){return o.call(r(t),e)}},{"../internals/to-object":102}],46:[function(t,e,n){e.exports={}},{}],47:[function(t,e,n){var r=t("../internals/global");e.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},{"../internals/global":44}],48:[function(t,e,n){t=t("../internals/get-built-in");e.exports=t("document","documentElement")},{"../internals/get-built-in":41}],49:[function(t,e,n){var r=t("../internals/descriptors"),o=t("../internals/fails"),i=t("../internals/document-create-element");e.exports=!r&&!o(function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a})},{"../internals/descriptors":27,"../internals/document-create-element":28,"../internals/fails":39}],50:[function(t,e,n){var r=t("../internals/fails"),o=t("../internals/classof-raw"),i="".split;e.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},{"../internals/classof-raw":17,"../internals/fails":39}],51:[function(t,e,n){var t=t("../internals/shared-store"),r=Function.toString;"function"!=typeof t.inspectSource&&(t.inspectSource=function(t){return r.call(t)}),e.exports=t.inspectSource},{"../internals/shared-store":93}],52:[function(t,e,n){var r,o,i,s,a,l,c,u,f=t("../internals/native-weak-map"),p=t("../internals/global"),d=t("../internals/is-object"),h=t("../internals/create-non-enumerable-property"),y=t("../internals/has"),v=t("../internals/shared-store"),b=t("../internals/shared-key"),t=t("../internals/hidden-keys"),g="Object already initialized",p=p.WeakMap;c=f||v.state?(r=v.state||(v.state=new p),o=r.get,i=r.has,s=r.set,a=function(t,e){if(i.call(r,t))throw new TypeError(g);return e.facade=t,s.call(r,t,e),e},l=function(t){return o.call(r,t)||{}},function(t){return i.call(r,t)}):(t[u=b("state")]=!0,a=function(t,e){if(y(t,u))throw new TypeError(g);return e.facade=t,h(t,u,e),e},l=function(t){return y(t,u)?t[u]:{}},function(t){return y(t,u)}),e.exports={set:a,get:l,has:c,enforce:function(t){return c(t)?l(t):a(t,{})},getterFor:function(n){return function(t){var e;if(!d(t)||(e=l(t)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return e}}}},{"../internals/create-non-enumerable-property":22,"../internals/global":44,"../internals/has":45,"../internals/hidden-keys":46,"../internals/is-object":56,"../internals/native-weak-map":66,"../internals/shared-key":92,"../internals/shared-store":93}],53:[function(t,e,n){var r=t("../internals/well-known-symbol"),o=t("../internals/iterators"),i=r("iterator"),s=Array.prototype;e.exports=function(t){return void 0!==t&&(o.Array===t||s[i]===t)}},{"../internals/iterators":62,"../internals/well-known-symbol":110}],54:[function(t,e,n){var r=t("../internals/classof-raw");e.exports=Array.isArray||function(t){return"Array"==r(t)}},{"../internals/classof-raw":17}],55:[function(t,e,n){var r=t("../internals/fails"),o=/#|\.prototype\./,t=function(t,e){t=s[i(t)];return t==l||t!=a&&("function"==typeof e?r(e):!!e)},i=t.normalize=function(t){return String(t).replace(o,".").toLowerCase()},s=t.data={},a=t.NATIVE="N",l=t.POLYFILL="P";e.exports=t},{"../internals/fails":39}],56:[function(t,e,n){e.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},{}],57:[function(t,e,n){e.exports=!1},{}],58:[function(t,e,n){var r=t("../internals/get-built-in"),t=t("../internals/use-symbol-as-uid");e.exports=t?function(t){return"symbol"==typeof t}:function(t){var e=r("Symbol");return"function"==typeof e&&Object(t)instanceof e}},{"../internals/get-built-in":41,"../internals/use-symbol-as-uid":108}],59:[function(t,e,n){function v(t,e){this.stopped=t,this.result=e}var b=t("../internals/an-object"),g=t("../internals/is-array-iterator-method"),m=t("../internals/to-length"),w=t("../internals/function-bind-context"),j=t("../internals/get-iterator"),x=t("../internals/get-iterator-method"),k=t("../internals/iterator-close");e.exports=function(t,e,n){function r(t){return i&&k(i,"normal",t),new v(!0,t)}function o(t){return p?(b(t),h?y(t[0],t[1],r):y(t[0],t[1])):h?y(t,r):y(t)}var i,s,a,l,c,u,f=n&&n.that,p=!(!n||!n.AS_ENTRIES),d=!(!n||!n.IS_ITERATOR),h=!(!n||!n.INTERRUPTED),y=w(e,f,1+p+h);if(d)i=t;else{if("function"!=typeof(d=x(t)))throw TypeError("Target is not iterable");if(g(d)){for(s=0,a=m(t.length);s<a;s++)if((l=o(t[s]))&&l instanceof v)return l;return new v(!1)}i=j(t,d)}for(c=i.next;!(u=c.call(i)).done;){try{l=o(u.value)}catch(t){k(i,"throw",t)}if("object"==typeof l&&l&&l instanceof v)return l}return new v(!1)}},{"../internals/an-object":6,"../internals/function-bind-context":40,"../internals/get-iterator":43,"../internals/get-iterator-method":42,"../internals/is-array-iterator-method":53,"../internals/iterator-close":60,"../internals/to-length":101}],60:[function(t,e,n){var i=t("../internals/an-object");e.exports=function(t,e,n){var r,o;i(t);try{if(void 0===(r=t.return)){if("throw"===e)throw n;return n}r=r.call(t)}catch(t){o=!0,r=t}if("throw"===e)throw n;if(o)throw r;return i(r),n}},{"../internals/an-object":6}],61:[function(t,e,n){"use strict";var r,o=t("../internals/fails"),i=t("../internals/object-get-prototype-of"),s=t("../internals/create-non-enumerable-property"),a=t("../internals/has"),l=t("../internals/well-known-symbol"),c=t("../internals/is-pure"),u=l("iterator"),t=!1;[].keys&&("next"in(l=[].keys())?(l=i(i(l)))!==Object.prototype&&(r=l):t=!0);o=null==r||o(function(){var t={};return r[u].call(t)!==t});o&&(r={}),c&&!o||a(r,u)||s(r,u,function(){return this}),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:t}},{"../internals/create-non-enumerable-property":22,"../internals/fails":39,"../internals/has":45,"../internals/is-pure":57,"../internals/object-get-prototype-of":75,"../internals/well-known-symbol":110}],62:[function(t,e,n){arguments[4][46][0].apply(n,arguments)},{dup:46}],63:[function(t,e,n){var r,o,i,s,a,l,c,u,f=t("../internals/global"),p=t("../internals/object-get-own-property-descriptor").f,d=t("../internals/task").set,h=t("../internals/engine-is-ios"),y=t("../internals/engine-is-ios-pebble"),v=t("../internals/engine-is-webos-webkit"),b=t("../internals/engine-is-node"),g=f.MutationObserver||f.WebKitMutationObserver,m=f.document,w=f.process,t=f.Promise,p=p(f,"queueMicrotask"),p=p&&p.value;p||(r=function(){var t,e;for(b&&(t=w.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?s():i=void 0,t}}i=void 0,t&&t.enter()},s=h||b||v||!g||!m?!y&&t&&t.resolve?((c=t.resolve(void 0)).constructor=t,u=c.then,function(){u.call(c,r)}):b?function(){w.nextTick(r)}:function(){d.call(f,r)}:(a=!0,l=m.createTextNode(""),new g(r).observe(l,{characterData:!0}),function(){l.data=a=!a})),e.exports=p||function(t){t={fn:t,next:void 0};i&&(i.next=t),o||(o=t,s()),i=t}},{"../internals/engine-is-ios":32,"../internals/engine-is-ios-pebble":31,"../internals/engine-is-node":33,"../internals/engine-is-webos-webkit":34,"../internals/global":44,"../internals/object-get-own-property-descriptor":71,"../internals/task":97}],64:[function(t,e,n){t=t("../internals/global");e.exports=t.Promise},{"../internals/global":44}],65:[function(t,e,n){var r=t("../internals/engine-v8-version"),t=t("../internals/fails");e.exports=!!Object.getOwnPropertySymbols&&!t(function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&r&&r<41})},{"../internals/engine-v8-version":36,"../internals/fails":39}],66:[function(t,e,n){var r=t("../internals/global"),t=t("../internals/inspect-source"),r=r.WeakMap;e.exports="function"==typeof r&&/native code/.test(t(r))},{"../internals/global":44,"../internals/inspect-source":51}],67:[function(t,e,n){"use strict";function r(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=o(n),this.reject=o(r)}var o=t("../internals/a-function");e.exports.f=function(t){return new r(t)}},{"../internals/a-function":2}],68:[function(t,e,n){function r(){}function o(t){t.write(y("")),t.close();var e=t.parentWindow.Object;return t=null,e}var i,s=t("../internals/an-object"),a=t("../internals/object-define-properties"),l=t("../internals/enum-bug-keys"),c=t("../internals/hidden-keys"),u=t("../internals/html"),f=t("../internals/document-create-element"),t=t("../internals/shared-key"),p="prototype",d="script",h=t("IE_PROTO"),y=function(t){return"<"+d+">"+t+"</"+d+">"},v=function(){try{i=new ActiveXObject("htmlfile")}catch(t){}var t,e;v="undefined"==typeof document||document.domain&&i?o(i):(t=f("iframe"),e="java"+d+":",t.style.display="none",u.appendChild(t),t.src=String(e),(t=t.contentWindow.document).open(),t.write(y("document.F=Object")),t.close(),t.F);for(var n=l.length;n--;)delete v[p][l[n]];return v()};c[h]=!0,e.exports=Object.create||function(t,e){var n;return null!==t?(r[p]=s(t),n=new r,r[p]=null,n[h]=t):n=v(),void 0===e?n:a(n,e)}},{"../internals/an-object":6,"../internals/document-create-element":28,"../internals/enum-bug-keys":37,"../internals/hidden-keys":46,"../internals/html":48,"../internals/object-define-properties":69,"../internals/shared-key":92}],69:[function(t,e,n){var r=t("../internals/descriptors"),s=t("../internals/object-define-property"),a=t("../internals/an-object"),l=t("../internals/object-keys");e.exports=r?Object.defineProperties:function(t,e){a(t);for(var n,r=l(e),o=r.length,i=0;i<o;)s.f(t,n=r[i++],e[n]);return t}},{"../internals/an-object":6,"../internals/descriptors":27,"../internals/object-define-property":70,"../internals/object-keys":77}],70:[function(t,e,n){var r=t("../internals/descriptors"),o=t("../internals/ie8-dom-define"),i=t("../internals/an-object"),s=t("../internals/to-property-key"),a=Object.defineProperty;n.f=r?a:function(t,e,n){if(i(t),e=s(e),i(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},{"../internals/an-object":6,"../internals/descriptors":27,"../internals/ie8-dom-define":49,"../internals/to-property-key":104}],71:[function(t,e,n){var r=t("../internals/descriptors"),o=t("../internals/object-property-is-enumerable"),i=t("../internals/create-property-descriptor"),s=t("../internals/to-indexed-object"),a=t("../internals/to-property-key"),l=t("../internals/has"),c=t("../internals/ie8-dom-define"),u=Object.getOwnPropertyDescriptor;n.f=r?u:function(t,e){if(t=s(t),e=a(e),c)try{return u(t,e)}catch(t){}if(l(t,e))return i(!o.f.call(t,e),t[e])}},{"../internals/create-property-descriptor":23,"../internals/descriptors":27,"../internals/has":45,"../internals/ie8-dom-define":49,"../internals/object-property-is-enumerable":78,"../internals/to-indexed-object":99,"../internals/to-property-key":104}],72:[function(t,e,n){var r=t("../internals/to-indexed-object"),o=t("../internals/object-get-own-property-names").f,i={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(t){return s&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return s.slice()}}(t):o(r(t))}},{"../internals/object-get-own-property-names":73,"../internals/to-indexed-object":99}],73:[function(t,e,n){var r=t("../internals/object-keys-internal"),o=t("../internals/enum-bug-keys").concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},{"../internals/enum-bug-keys":37,"../internals/object-keys-internal":76}],74:[function(t,e,n){n.f=Object.getOwnPropertySymbols},{}],75:[function(t,e,n){var r=t("../internals/has"),o=t("../internals/to-object"),i=t("../internals/shared-key"),t=t("../internals/correct-prototype-getter"),s=i("IE_PROTO"),a=Object.prototype;e.exports=t?Object.getPrototypeOf:function(t){return t=o(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},{"../internals/correct-prototype-getter":20,"../internals/has":45,"../internals/shared-key":92,"../internals/to-object":102}],76:[function(t,e,n){var s=t("../internals/has"),a=t("../internals/to-indexed-object"),l=t("../internals/array-includes").indexOf,c=t("../internals/hidden-keys");e.exports=function(t,e){var n,r=a(t),o=0,i=[];for(n in r)!s(c,n)&&s(r,n)&&i.push(n);for(;e.length>o;)s(r,n=e[o++])&&(~l(i,n)||i.push(n));return i}},{"../internals/array-includes":8,"../internals/has":45,"../internals/hidden-keys":46,"../internals/to-indexed-object":99}],77:[function(t,e,n){var r=t("../internals/object-keys-internal"),o=t("../internals/enum-bug-keys");e.exports=Object.keys||function(t){return r(t,o)}},{"../internals/enum-bug-keys":37,"../internals/object-keys-internal":76}],78:[function(t,e,n){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);n.f=i?function(t){t=o(this,t);return!!t&&t.enumerable}:r},{}],79:[function(t,e,n){var o=t("../internals/an-object"),i=t("../internals/a-possible-prototype");e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,r=!1,t={};try{(n=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(t,[]),r=t instanceof Array}catch(t){}return function(t,e){return o(t),i(e),r?n.call(t,e):t.__proto__=e,t}}():void 0)},{"../internals/a-possible-prototype":3,"../internals/an-object":6}],80:[function(t,e,n){"use strict";var r=t("../internals/to-string-tag-support"),o=t("../internals/classof");e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},{"../internals/classof":18,"../internals/to-string-tag-support":105}],81:[function(t,e,n){var o=t("../internals/is-object");e.exports=function(t,e){var n,r;if("string"===e&&"function"==typeof(n=t.toString)&&!o(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!o(r=n.call(t)))return r;if("string"!==e&&"function"==typeof(n=t.toString)&&!o(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},{"../internals/is-object":56}],82:[function(t,e,n){var r=t("../internals/get-built-in"),o=t("../internals/object-get-own-property-names"),i=t("../internals/object-get-own-property-symbols"),s=t("../internals/an-object");e.exports=r("Reflect","ownKeys")||function(t){var e=o.f(s(t)),n=i.f;return n?e.concat(n(t)):e}},{"../internals/an-object":6,"../internals/get-built-in":41,"../internals/object-get-own-property-names":73,"../internals/object-get-own-property-symbols":74}],83:[function(t,e,n){t=t("../internals/global");e.exports=t},{"../internals/global":44}],84:[function(t,e,n){e.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},{}],85:[function(t,e,n){var r=t("../internals/an-object"),o=t("../internals/is-object"),i=t("../internals/new-promise-capability");e.exports=function(t,e){if(r(t),o(e)&&e.constructor===t)return e;t=i.f(t);return(0,t.resolve)(e),t.promise}},{"../internals/an-object":6,"../internals/is-object":56,"../internals/new-promise-capability":67}],86:[function(t,e,n){var o=t("../internals/redefine");e.exports=function(t,e,n){for(var r in e)o(t,r,e[r],n);return t}},{"../internals/redefine":87}],87:[function(t,e,n){var a=t("../internals/global"),l=t("../internals/create-non-enumerable-property"),c=t("../internals/has"),u=t("../internals/set-global"),r=t("../internals/inspect-source"),t=t("../internals/internal-state"),o=t.get,f=t.enforce,p=String(String).split("String");(e.exports=function(t,e,n,r){var o=!!r&&!!r.unsafe,i=!!r&&!!r.enumerable,s=!!r&&!!r.noTargetGet;"function"==typeof n&&("string"!=typeof e||c(n,"name")||l(n,"name",e),(r=f(n)).source||(r.source=p.join("string"==typeof e?e:""))),t!==a?(o?!s&&t[e]&&(i=!0):delete t[e],i?t[e]=n:l(t,e,n)):i?t[e]=n:u(e,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&o(this).source||r(this)})},{"../internals/create-non-enumerable-property":22,"../internals/global":44,"../internals/has":45,"../internals/inspect-source":51,"../internals/internal-state":52,"../internals/set-global":89}],88:[function(t,e,n){e.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},{}],89:[function(t,e,n){var r=t("../internals/global");e.exports=function(e,n){try{Object.defineProperty(r,e,{value:n,configurable:!0,writable:!0})}catch(t){r[e]=n}return n}},{"../internals/global":44}],90:[function(t,e,n){"use strict";var r=t("../internals/get-built-in"),o=t("../internals/object-define-property"),i=t("../internals/well-known-symbol"),s=t("../internals/descriptors"),a=i("species");e.exports=function(t){var e=r(t),t=o.f;s&&e&&!e[a]&&t(e,a,{configurable:!0,get:function(){return this}})}},{"../internals/descriptors":27,"../internals/get-built-in":41,"../internals/object-define-property":70,"../internals/well-known-symbol":110}],91:[function(t,e,n){var r=t("../internals/object-define-property").f,o=t("../internals/has"),i=t("../internals/well-known-symbol")("toStringTag");e.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,i)&&r(t,i,{configurable:!0,value:e})}},{"../internals/has":45,"../internals/object-define-property":70,"../internals/well-known-symbol":110}],92:[function(t,e,n){var r=t("../internals/shared"),o=t("../internals/uid"),i=r("keys");e.exports=function(t){return i[t]||(i[t]=o(t))}},{"../internals/shared":94,"../internals/uid":107}],93:[function(t,e,n){var r=t("../internals/global"),o=t("../internals/set-global"),t="__core-js_shared__",t=r[t]||o(t,{});e.exports=t},{"../internals/global":44,"../internals/set-global":89}],94:[function(t,e,n){var r=t("../internals/is-pure"),o=t("../internals/shared-store");(e.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.17.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},{"../internals/is-pure":57,"../internals/shared-store":93}],95:[function(t,e,n){var r=t("../internals/an-object"),o=t("../internals/a-function"),i=t("../internals/well-known-symbol")("species");e.exports=function(t,e){var n,t=r(t).constructor;return void 0===t||null==(n=r(t)[i])?e:o(n)}},{"../internals/a-function":2,"../internals/an-object":6,"../internals/well-known-symbol":110}],96:[function(t,e,n){var s=t("../internals/to-integer"),a=t("../internals/to-string"),l=t("../internals/require-object-coercible"),t=function(i){return function(t,e){var n,r=a(l(t)),o=s(e),t=r.length;return o<0||t<=o?i?"":void 0:(e=r.charCodeAt(o))<55296||56319<e||o+1===t||(n=r.charCodeAt(o+1))<56320||57343<n?i?r.charAt(o):e:i?r.slice(o,o+2):n-56320+(e-55296<<10)+65536}};e.exports={codeAt:t(!1),charAt:t(!0)}},{"../internals/require-object-coercible":88,"../internals/to-integer":100,"../internals/to-string":106}],97:[function(t,e,n){var r,o,i=t("../internals/global"),s=t("../internals/fails"),a=t("../internals/function-bind-context"),l=t("../internals/html"),c=t("../internals/document-create-element"),u=t("../internals/engine-is-ios"),f=t("../internals/engine-is-node"),p=i.setImmediate,d=i.clearImmediate,h=i.process,y=i.MessageChannel,v=i.Dispatch,b=0,g={},m="onreadystatechange";try{r=i.location}catch(t){}function w(t){return function(){x(t)}}function j(t){x(t.data)}var x=function(t){var e;g.hasOwnProperty(t)&&(e=g[t],delete g[t],e())},t=function(t){i.postMessage(String(t),r.protocol+"//"+r.host)};p&&d||(p=function(t){for(var e=[],n=arguments.length,r=1;r<n;)e.push(arguments[r++]);return g[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},o(b),b},d=function(t){delete g[t]},f?o=function(t){h.nextTick(w(t))}:v&&v.now?o=function(t){v.now(w(t))}:y&&!u?(y=(u=new y).port2,u.port1.onmessage=j,o=a(y.postMessage,y,1)):i.addEventListener&&"function"==typeof postMessage&&!i.importScripts&&r&&"file:"!==r.protocol&&!s(t)?(o=t,i.addEventListener("message",j,!1)):o=m in c("script")?function(t){l.appendChild(c("script"))[m]=function(){l.removeChild(this),x(t)}}:function(t){setTimeout(w(t),0)}),e.exports={set:p,clear:d}},{"../internals/document-create-element":28,"../internals/engine-is-ios":32,"../internals/engine-is-node":33,"../internals/fails":39,"../internals/function-bind-context":40,"../internals/global":44,"../internals/html":48}],98:[function(t,e,n){var r=t("../internals/to-integer"),o=Math.max,i=Math.min;e.exports=function(t,e){t=r(t);return t<0?o(t+e,0):i(t,e)}},{"../internals/to-integer":100}],99:[function(t,e,n){var r=t("../internals/indexed-object"),o=t("../internals/require-object-coercible");e.exports=function(t){return r(o(t))}},{"../internals/indexed-object":50,"../internals/require-object-coercible":88}],100:[function(t,e,n){var r=Math.ceil,o=Math.floor;e.exports=function(t){return isNaN(t=+t)?0:(0<t?o:r)(t)}},{}],101:[function(t,e,n){var r=t("../internals/to-integer"),o=Math.min;e.exports=function(t){return 0<t?o(r(t),9007199254740991):0}},{"../internals/to-integer":100}],102:[function(t,e,n){var r=t("../internals/require-object-coercible");e.exports=function(t){return Object(r(t))}},{"../internals/require-object-coercible":88}],103:[function(t,e,n){var r=t("../internals/is-object"),o=t("../internals/is-symbol"),i=t("../internals/ordinary-to-primitive"),s=t("../internals/well-known-symbol")("toPrimitive");e.exports=function(t,e){if(!r(t)||o(t))return t;var n=t[s];if(void 0===n)return i(t,e=void 0===e?"number":e);if(e=n.call(t,e=void 0===e?"default":e),!r(e)||o(e))return e;throw TypeError("Can't convert object to primitive value")}},{"../internals/is-object":56,"../internals/is-symbol":58,"../internals/ordinary-to-primitive":81,"../internals/well-known-symbol":110}],104:[function(t,e,n){var r=t("../internals/to-primitive"),o=t("../internals/is-symbol");e.exports=function(t){t=r(t,"string");return o(t)?t:String(t)}},{"../internals/is-symbol":58,"../internals/to-primitive":103}],105:[function(t,e,n){var r={};r[t("../internals/well-known-symbol")("toStringTag")]="z",e.exports="[object z]"===String(r)},{"../internals/well-known-symbol":110}],106:[function(t,e,n){var r=t("../internals/is-symbol");e.exports=function(t){if(r(t))throw TypeError("Cannot convert a Symbol value to a string");return String(t)}},{"../internals/is-symbol":58}],107:[function(t,e,n){var r=0,o=Math.random();e.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++r+o).toString(36)}},{}],108:[function(t,e,n){t=t("../internals/native-symbol");e.exports=t&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},{"../internals/native-symbol":65}],109:[function(t,e,n){t=t("../internals/well-known-symbol");n.f=t},{"../internals/well-known-symbol":110}],110:[function(t,e,n){var r=t("../internals/global"),o=t("../internals/shared"),i=t("../internals/has"),s=t("../internals/uid"),a=t("../internals/native-symbol"),t=t("../internals/use-symbol-as-uid"),l=o("wks"),c=r.Symbol,u=t?c:c&&c.withoutSetter||s;e.exports=function(t){return i(l,t)&&(a||"string"==typeof l[t])||(a&&i(c,t)?l[t]=c[t]:l[t]=u("Symbol."+t)),l[t]}},{"../internals/global":44,"../internals/has":45,"../internals/native-symbol":65,"../internals/shared":94,"../internals/uid":107,"../internals/use-symbol-as-uid":108}],111:[function(t,e,n){var r=t("../internals/export"),o=t("../internals/array-from");r({target:"Array",stat:!0,forced:!t("../internals/check-correctness-of-iteration")(function(t){Array.from(t)})},{from:o})},{"../internals/array-from":7,"../internals/check-correctness-of-iteration":16,"../internals/export":38}],112:[function(t,e,n){"use strict";var r=t("../internals/to-indexed-object"),o=t("../internals/add-to-unscopables"),i=t("../internals/iterators"),s=t("../internals/internal-state"),t=t("../internals/define-iterator"),a="Array Iterator",l=s.set,c=s.getterFor(a);e.exports=t(Array,"Array",function(t,e){l(this,{type:a,target:r(t),index:0,kind:e})},function(){var t=c(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?{value:t.target=void 0,done:!0}:"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}},"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},{"../internals/add-to-unscopables":4,"../internals/define-iterator":25,"../internals/internal-state":52,"../internals/iterators":62,"../internals/to-indexed-object":99}],113:[function(t,e,n){var r=t("../internals/export"),t=t("../internals/array-last-index-of");r({target:"Array",proto:!0,forced:t!==[].lastIndexOf},{lastIndexOf:t})},{"../internals/array-last-index-of":10,"../internals/export":38}],114:[function(t,e,n){"use strict";var r=t("../internals/export"),c=t("../internals/is-object"),u=t("../internals/is-array"),f=t("../internals/to-absolute-index"),p=t("../internals/to-length"),d=t("../internals/to-indexed-object"),h=t("../internals/create-property"),o=t("../internals/well-known-symbol"),t=t("../internals/array-method-has-species-support")("slice"),y=o("species"),v=[].slice,b=Math.max;r({target:"Array",proto:!0,forced:!t},{slice:function(t,e){var n,r,o,i=d(this),s=p(i.length),a=f(t,s),l=f(void 0===e?s:e,s);if(u(i)&&((n="function"==typeof(n=i.constructor)&&(n===Array||u(n.prototype))||c(n)&&null===(n=n[y])?void 0:n)===Array||void 0===n))return v.call(i,a,l);for(r=new(void 0===n?Array:n)(b(l-a,0)),o=0;a<l;a++,o++)a in i&&h(r,o,i[a]);return r.length=o,r}})},{"../internals/array-method-has-species-support":11,"../internals/create-property":24,"../internals/export":38,"../internals/is-array":54,"../internals/is-object":56,"../internals/to-absolute-index":98,"../internals/to-indexed-object":99,"../internals/to-length":101,"../internals/well-known-symbol":110}],115:[function(t,e,n){var r=t("../internals/descriptors"),o=t("../internals/object-define-property").f,t=Function.prototype,i=t.toString,s=/^\s*function ([^ (]*)/;!r||"name"in t||o(t,"name",{configurable:!0,get:function(){try{return i.call(this).match(s)[1]}catch(t){return""}}})},{"../internals/descriptors":27,"../internals/object-define-property":70}],116:[function(t,e,n){var r=t("../internals/export"),o=t("../internals/to-object"),i=t("../internals/object-keys");r({target:"Object",stat:!0,forced:t("../internals/fails")(function(){i(1)})},{keys:function(t){return i(o(t))}})},{"../internals/export":38,"../internals/fails":39,"../internals/object-keys":77,"../internals/to-object":102}],117:[function(t,e,n){var r=t("../internals/to-string-tag-support"),o=t("../internals/redefine"),t=t("../internals/object-to-string");r||o(Object.prototype,"toString",t,{unsafe:!0})},{"../internals/object-to-string":80,"../internals/redefine":87,"../internals/to-string-tag-support":105}],118:[function(t,e,n){"use strict";var r,o,i,s,a=t("../internals/export"),l=t("../internals/is-pure"),y=t("../internals/global"),c=t("../internals/get-built-in"),u=t("../internals/native-promise-constructor"),f=t("../internals/redefine"),p=t("../internals/redefine-all"),d=t("../internals/object-set-prototype-of"),h=t("../internals/set-to-string-tag"),v=t("../internals/set-species"),b=t("../internals/is-object"),g=t("../internals/a-function"),m=t("../internals/an-instance"),w=t("../internals/inspect-source"),j=t("../internals/iterate"),x=t("../internals/check-correctness-of-iteration"),k=t("../internals/species-constructor"),S=t("../internals/task").set,O=t("../internals/microtask"),C=t("../internals/promise-resolve"),L=t("../internals/host-report-errors"),P=t("../internals/new-promise-capability"),T=t("../internals/perform"),E=t("../internals/internal-state"),M=t("../internals/is-forced"),A=t("../internals/well-known-symbol"),I=t("../internals/engine-is-browser"),_=t("../internals/engine-is-node"),B=t("../internals/engine-v8-version"),D=A("species"),z="Promise",F=E.get,N=E.set,R=E.getterFor(z),E=u&&u.prototype,H=u,U=E,V=y.TypeError,q=y.document,G=y.process,W=P.f,J=W,K=!!(q&&q.createEvent&&y.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,X="unhandledrejection",$="rejectionhandled",Q=1,Z=2,tt=1,et=2,nt=!1,M=M(z,function(){var t=w(H),e=t!==String(H);if(!e&&66===B)return!0;if(l&&!U.finally)return!0;if(51<=B&&/native code/.test(t))return!1;var n=new H(function(t){t(1)}),t=function(t){t(function(){},function(){})};return(n.constructor={})[D]=t,!(nt=n.then(function(){})instanceof t)||!e&&I&&!Y}),x=M||!x(function(t){H.all(t).catch(function(){})}),rt=function(t){var e;return!(!b(t)||"function"!=typeof(e=t.then))&&e},ot=function(p,d){var h;p.notified||(p.notified=!0,h=p.reactions,O(function(){for(var o,t=p.value,e=p.state==Q,n=0;h.length>n;){var r,i,s,a=h[n++],l=e?a.ok:a.fail,c=a.resolve,u=a.reject,f=a.domain;try{l?(e||(p.rejection===et&&function(e){S.call(y,function(){var t=e.facade;if(_)G.emit("rejectionHandled",t);else it($,t,e.value)})}(p),p.rejection=tt),!0===l?r=t:(f&&f.enter(),r=l(t),f&&(f.exit(),s=!0)),r===a.promise?u(V("Promise-chain cycle")):(i=rt(r))?i.call(r,c,u):c(r)):u(t)}catch(t){f&&!s&&f.exit(),u(t)}}p.reactions=[],p.notified=!1,d&&!p.rejection&&(o=p,S.call(y,function(){var t,e=o.facade,n=o.value,r=st(o);if(r&&(t=T(function(){_?G.emit("unhandledRejection",n,e):it(X,e,n)}),o.rejection=_||st(o)?et:tt,t.error))throw t.value}))}))},it=function(t,e,n){var r,o;K?((r=q.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),y.dispatchEvent(r)):r={promise:e,reason:n},!Y&&(o=y["on"+t])?o(r):t===X&&L("Unhandled promise rejection",n)},st=function(t){return t.rejection!==tt&&!t.parent},at=function(e,n,r){return function(t){e(n,t,r)}},lt=function(t,e,n){t.done||(t.done=!0,(t=n?n:t).value=e,t.state=Z,ot(t,!0))},ct=function(n,t,e){if(!n.done){n.done=!0,e&&(n=e);try{if(n.facade===t)throw V("Promise can't be resolved itself");var r=rt(t);r?O(function(){var e={done:!1};try{r.call(t,at(ct,e,n),at(lt,e,n))}catch(t){lt(e,t,n)}}):(n.value=t,n.state=Q,ot(n,!1))}catch(t){lt({done:!1},t,n)}}};if(M&&(U=(H=function(t){m(this,H,z),g(t),r.call(this);var e=F(this);try{t(at(ct,e),at(lt,e))}catch(t){lt(e,t)}}).prototype,(r=function(t){N(this,{type:z,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(U,{then:function(t,e){var n=R(this),r=W(k(this,H));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=_?G.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&ot(n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,e=F(t);this.promise=t,this.resolve=at(ct,e),this.reject=at(lt,e)},P.f=W=function(t){return t===H||t===i?new o:J(t)},!l&&"function"==typeof u&&E!==Object.prototype)){s=E.then,nt||(f(E,"then",function(t,e){var n=this;return new H(function(t,e){s.call(n,t,e)}).then(t,e)},{unsafe:!0}),f(E,"catch",U.catch,{unsafe:!0}));try{delete E.constructor}catch(t){}d&&d(E,U)}a({global:!0,wrap:!0,forced:M},{Promise:H}),h(H,z,!1,!0),v(z),i=c(z),a({target:z,stat:!0,forced:M},{reject:function(t){var e=W(this);return e.reject.call(void 0,t),e.promise}}),a({target:z,stat:!0,forced:l||M},{resolve:function(t){return C(l&&this===i?H:this,t)}}),a({target:z,stat:!0,forced:x},{all:function(t){var a=this,e=W(a),l=e.resolve,c=e.reject,n=T(function(){var r=g(a.resolve),o=[],i=0,s=1;j(t,function(t){var e=i++,n=!1;o.push(void 0),s++,r.call(a,t).then(function(t){n||(n=!0,o[e]=t,--s||l(o))},c)}),--s||l(o)});return n.error&&c(n.value),e.promise},race:function(t){var n=this,r=W(n),o=r.reject,e=T(function(){var e=g(n.resolve);j(t,function(t){e.call(n,t).then(r.resolve,o)})});return e.error&&o(e.value),r.promise}})},{"../internals/a-function":2,"../internals/an-instance":5,"../internals/check-correctness-of-iteration":16,"../internals/engine-is-browser":30,"../internals/engine-is-node":33,"../internals/engine-v8-version":36,"../internals/export":38,"../internals/get-built-in":41,"../internals/global":44,"../internals/host-report-errors":47,"../internals/inspect-source":51,"../internals/internal-state":52,"../internals/is-forced":55,"../internals/is-object":56,"../internals/is-pure":57,"../internals/iterate":59,"../internals/microtask":63,"../internals/native-promise-constructor":64,"../internals/new-promise-capability":67,"../internals/object-set-prototype-of":79,"../internals/perform":84,"../internals/promise-resolve":85,"../internals/redefine":87,"../internals/redefine-all":86,"../internals/set-species":90,"../internals/set-to-string-tag":91,"../internals/species-constructor":95,"../internals/task":97,"../internals/well-known-symbol":110}],119:[function(t,e,n){"use strict";var r=t("../internals/string-multibyte").charAt,o=t("../internals/to-string"),i=t("../internals/internal-state"),t=t("../internals/define-iterator"),s="String Iterator",a=i.set,l=i.getterFor(s);t(String,"String",function(t){a(this,{type:s,string:o(t),index:0})},function(){var t=l(this),e=t.string,n=t.index;return n>=e.length?{value:void 0,done:!0}:(n=r(e,n),t.index+=n.length,{value:n,done:!1})})},{"../internals/define-iterator":25,"../internals/internal-state":52,"../internals/string-multibyte":96,"../internals/to-string":106}],120:[function(t,e,n){"use strict";var r,o,i,s,a,l=t("../internals/export"),c=t("../internals/descriptors"),u=t("../internals/global"),f=t("../internals/has"),p=t("../internals/is-object"),d=t("../internals/object-define-property").f,t=t("../internals/copy-constructor-properties"),h=u.Symbol;!c||"function"!=typeof h||"description"in h.prototype&&void 0===h().description||(r={},t(o=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),e=this instanceof o?new h(t):void 0===t?h():h(t);return""===t&&(r[e]=!0),e},h),(t=o.prototype=h.prototype).constructor=o,i=t.toString,s="Symbol(test)"==String(h("test")),a=/^Symbol\((.*)\)[^)]+$/,d(t,"description",{configurable:!0,get:function(){var t=p(this)?this.valueOf():this,e=i.call(t);if(f(r,t))return"";e=s?e.slice(7,-1):e.replace(a,"$1");return""===e?void 0:e}}),l({global:!0,forced:!0},{Symbol:o}))},{"../internals/copy-constructor-properties":19,"../internals/descriptors":27,"../internals/export":38,"../internals/global":44,"../internals/has":45,"../internals/is-object":56,"../internals/object-define-property":70}],121:[function(t,e,n){t("../internals/define-well-known-symbol")("iterator")},{"../internals/define-well-known-symbol":26}],122:[function(t,e,n){"use strict";function r(t,e){var n=tt[t]=x(K[q]);return G(n,{type:V,tag:t,description:e}),c||(n.description=e),n}function o(e,t){v(e);var n=g(t),t=k(n).concat(lt(n));return H(t,function(t){c&&!at.call(n,t)||st(e,t,n[t])}),e}var i=t("../internals/export"),s=t("../internals/global"),a=t("../internals/get-built-in"),l=t("../internals/is-pure"),c=t("../internals/descriptors"),u=t("../internals/native-symbol"),f=t("../internals/fails"),p=t("../internals/has"),d=t("../internals/is-array"),h=t("../internals/is-object"),y=t("../internals/is-symbol"),v=t("../internals/an-object"),b=t("../internals/to-object"),g=t("../internals/to-indexed-object"),m=t("../internals/to-property-key"),w=t("../internals/to-string"),j=t("../internals/create-property-descriptor"),x=t("../internals/object-create"),k=t("../internals/object-keys"),S=t("../internals/object-get-own-property-names"),O=t("../internals/object-get-own-property-names-external"),C=t("../internals/object-get-own-property-symbols"),L=t("../internals/object-get-own-property-descriptor"),P=t("../internals/object-define-property"),T=t("../internals/object-property-is-enumerable"),E=t("../internals/create-non-enumerable-property"),M=t("../internals/redefine"),A=t("../internals/shared"),I=t("../internals/shared-key"),_=t("../internals/hidden-keys"),B=t("../internals/uid"),D=t("../internals/well-known-symbol"),z=t("../internals/well-known-symbol-wrapped"),F=t("../internals/define-well-known-symbol"),N=t("../internals/set-to-string-tag"),R=t("../internals/internal-state"),H=t("../internals/array-iteration").forEach,U=I("hidden"),V="Symbol",q="prototype",I=D("toPrimitive"),G=R.set,W=R.getterFor(V),J=Object[q],K=s.Symbol,Y=a("JSON","stringify"),X=L.f,$=P.f,Q=O.f,Z=T.f,tt=A("symbols"),et=A("op-symbols"),nt=A("string-to-symbol-registry"),rt=A("symbol-to-string-registry"),a=A("wks"),A=s.QObject,ot=!A||!A[q]||!A[q].findChild,it=c&&f(function(){return 7!=x($({},"a",{get:function(){return $(this,"a",{value:7}).a}})).a})?function(t,e,n){var r=X(J,e);r&&delete J[e],$(t,e,n),r&&t!==J&&$(J,e,r)}:$,st=function(t,e,n){t===J&&st(et,e,n),v(t);e=m(e);return v(n),p(tt,e)?(n.enumerable?(p(t,U)&&t[U][e]&&(t[U][e]=!1),n=x(n,{enumerable:j(0,!1)})):(p(t,U)||$(t,U,j(1,{})),t[U][e]=!0),it(t,e,n)):$(t,e,n)},at=function(t){var e=m(t),t=Z.call(this,e);return!(this===J&&p(tt,e)&&!p(et,e))&&(!(t||!p(this,e)||!p(tt,e)||p(this,U)&&this[U][e])||t)},s=function(t,e){var n=g(t),t=m(e);if(n!==J||!p(tt,t)||p(et,t)){e=X(n,t);return!e||!p(tt,t)||p(n,U)&&n[U][t]||(e.enumerable=!0),e}},A=function(t){var t=Q(g(t)),e=[];return H(t,function(t){p(tt,t)||p(_,t)||e.push(t)}),e},lt=function(t){var e=t===J,t=Q(e?et:g(t)),n=[];return H(t,function(t){!p(tt,t)||e&&!p(J,t)||n.push(tt[t])}),n};u||(M((K=function(){if(this instanceof K)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?w(arguments[0]):void 0,e=B(t),n=function(t){this===J&&n.call(et,t),p(this,U)&&p(this[U],e)&&(this[U][e]=!1),it(this,e,j(1,t))};return c&&ot&&it(J,e,{configurable:!0,set:n}),r(e,t)})[q],"toString",function(){return W(this).tag}),M(K,"withoutSetter",function(t){return r(B(t),t)}),T.f=at,P.f=st,L.f=s,S.f=O.f=A,C.f=lt,z.f=function(t){return r(D(t),t)},c&&($(K[q],"description",{configurable:!0,get:function(){return W(this).description}}),l||M(J,"propertyIsEnumerable",at,{unsafe:!0}))),i({global:!0,wrap:!0,forced:!u,sham:!u},{Symbol:K}),H(k(a),function(t){F(t)}),i({target:V,stat:!0,forced:!u},{for:function(t){var e=w(t);if(p(nt,e))return nt[e];t=K(e);return nt[e]=t,rt[t]=e,t},keyFor:function(t){if(!y(t))throw TypeError(t+" is not a symbol");if(p(rt,t))return rt[t]},useSetter:function(){ot=!0},useSimple:function(){ot=!1}}),i({target:"Object",stat:!0,forced:!u,sham:!c},{create:function(t,e){return void 0===e?x(t):o(x(t),e)},defineProperty:st,defineProperties:o,getOwnPropertyDescriptor:s}),i({target:"Object",stat:!0,forced:!u},{getOwnPropertyNames:A,getOwnPropertySymbols:lt}),i({target:"Object",stat:!0,forced:f(function(){C.f(1)})},{getOwnPropertySymbols:function(t){return C.f(b(t))}}),Y&&i({target:"JSON",stat:!0,forced:!u||f(function(){var t=K();return"[null]"!=Y([t])||"{}"!=Y({a:t})||"{}"!=Y(Object(t))})},{stringify:function(t,e,n){for(var r,o=[t],i=1;i<arguments.length;)o.push(arguments[i++]);if((h(r=e)||void 0!==t)&&!y(t))return d(e)||(e=function(t,e){if("function"==typeof r&&(e=r.call(this,t,e)),!y(e))return e}),o[1]=e,Y.apply(null,o)}}),K[q][I]||E(K[q],I,K[q].valueOf),N(K,V),_[U]=!0},{"../internals/an-object":6,"../internals/array-iteration":9,"../internals/create-non-enumerable-property":22,"../internals/create-property-descriptor":23,"../internals/define-well-known-symbol":26,"../internals/descriptors":27,"../internals/export":38,"../internals/fails":39,"../internals/get-built-in":41,"../internals/global":44,"../internals/has":45,"../internals/hidden-keys":46,"../internals/internal-state":52,"../internals/is-array":54,"../internals/is-object":56,"../internals/is-pure":57,"../internals/is-symbol":58,"../internals/native-symbol":65,"../internals/object-create":68,"../internals/object-define-property":70,"../internals/object-get-own-property-descriptor":71,"../internals/object-get-own-property-names":73,"../internals/object-get-own-property-names-external":72,"../internals/object-get-own-property-symbols":74,"../internals/object-keys":77,"../internals/object-property-is-enumerable":78,"../internals/redefine":87,"../internals/set-to-string-tag":91,"../internals/shared":94,"../internals/shared-key":92,"../internals/to-indexed-object":99,"../internals/to-object":102,"../internals/to-property-key":104,"../internals/to-string":106,"../internals/uid":107,"../internals/well-known-symbol":110,"../internals/well-known-symbol-wrapped":109}],123:[function(t,e,n){var r,o=t("../internals/global"),i=t("../internals/dom-iterables"),s=t("../modules/es.array.iterator"),a=t("../internals/create-non-enumerable-property"),t=t("../internals/well-known-symbol"),l=t("iterator"),c=t("toStringTag"),u=s.values;for(r in i){var f=o[r],p=f&&f.prototype;if(p){if(p[l]!==u)try{a(p,l,u)}catch(t){p[l]=u}if(p[c]||a(p,c,r),i[r])for(var d in s)if(p[d]!==s[d])try{a(p,d,s[d])}catch(t){p[d]=s[d]}}}},{"../internals/create-non-enumerable-property":22,"../internals/dom-iterables":29,"../internals/global":44,"../internals/well-known-symbol":110,"../modules/es.array.iterator":112}],124:[function(t,e,n){e=function(s){"use strict";var l,t=Object.prototype,c=t.hasOwnProperty,e="function"==typeof Symbol?Symbol:{},r=e.iterator||"@@iterator",n=e.asyncIterator||"@@asyncIterator",o=e.toStringTag||"@@toStringTag";function i(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{i({},"")}catch(t){i=function(t,e,n){return t[e]=n}}function a(t,e,n,r){var o,i,s,a,e=e&&e.prototype instanceof v?e:v,e=Object.create(e.prototype),r=new O(r||[]);return e._invoke=(o=t,i=n,s=r,a=f,function(t,e){if(a===d)throw new Error("Generator is already running");if(a===h){if("throw"===t)throw e;return L()}for(s.method=t,s.arg=e;;){var n=s.delegate;if(n){var r=function t(e,n){var r=e.iterator[n.method];if(r===l){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=l,t(e,n),"throw"===n.method))return y;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return y}var r=u(r,e.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,y;r=r.arg;if(!r)return n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,y;{if(!r.done)return r;n[e.resultName]=r.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=l)}n.delegate=null;return y}(n,s);if(r){if(r===y)continue;return r}}if("next"===s.method)s.sent=s._sent=s.arg;else if("throw"===s.method){if(a===f)throw a=h,s.arg;s.dispatchException(s.arg)}else"return"===s.method&&s.abrupt("return",s.arg);a=d;r=u(o,i,s);if("normal"===r.type){if(a=s.done?h:p,r.arg!==y)return{value:r.arg,done:s.done}}else"throw"===r.type&&(a=h,s.method="throw",s.arg=r.arg)}}),e}function u(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}s.wrap=a;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",y={};function v(){}function b(){}function g(){}var m={};i(m,r,function(){return this});e=Object.getPrototypeOf,e=e&&e(e(C([])));e&&e!==t&&c.call(e,r)&&(m=e);var w=g.prototype=v.prototype=Object.create(m);function j(t){["next","throw","return"].forEach(function(e){i(t,e,function(t){return this._invoke(e,t)})})}function x(s,a){var e;this._invoke=function(n,r){function t(){return new a(function(t,e){!function e(t,n,r,o){t=u(s[t],s,n);if("throw"!==t.type){var i=t.arg;return(n=i.value)&&"object"==typeof n&&c.call(n,"__await")?a.resolve(n.__await).then(function(t){e("next",t,r,o)},function(t){e("throw",t,r,o)}):a.resolve(n).then(function(t){i.value=t,r(i)},function(t){return e("throw",t,r,o)})}o(t.arg)}(n,r,t,e)})}return e=e?e.then(t,t):t()}}function k(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function S(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(k,this),this.reset(!0)}function C(e){if(e){var t=e[r];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,t=function t(){for(;++n<e.length;)if(c.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=l,t.done=!0,t};return t.next=t}}return{next:L}}function L(){return{value:l,done:!0}}return i(w,"constructor",b.prototype=g),i(g,"constructor",b),b.displayName=i(g,o,"GeneratorFunction"),s.isGeneratorFunction=function(t){t="function"==typeof t&&t.constructor;return!!t&&(t===b||"GeneratorFunction"===(t.displayName||t.name))},s.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,i(t,o,"GeneratorFunction")),t.prototype=Object.create(w),t},s.awrap=function(t){return{__await:t}},j(x.prototype),i(x.prototype,n,function(){return this}),s.AsyncIterator=x,s.async=function(t,e,n,r,o){void 0===o&&(o=Promise);var i=new x(a(t,e,n,r),o);return s.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},j(w),i(w,o,"Generator"),i(w,r,function(){return this}),i(w,"toString",function(){return"[object Generator]"}),s.keys=function(n){var t,r=[];for(t in n)r.push(t);return r.reverse(),function t(){for(;r.length;){var e=r.pop();if(e in n)return t.value=e,t.done=!1,t}return t.done=!0,t}},s.values=C,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(S),!t)for(var e in this)"t"===e.charAt(0)&&c.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=l)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function t(t,e){return i.type="throw",i.arg=n,r.next=t,e&&(r.method="next",r.arg=l),!!e}for(var e=this.tryEntries.length-1;0<=e;--e){var o=this.tryEntries[e],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var s=c.call(o,"catchLoc"),a=c.call(o,"finallyLoc");if(s&&a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!a)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;0<=n;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&c.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}var i=(o=o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc?null:o)?o.completion:{};return i.type=t,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,y):this.complete(i)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),S(n),y}},catch:function(t){for(var e=this.tryEntries.length-1;0<=e;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r,o=n.completion;return"throw"===o.type&&(r=o.arg,S(n)),r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:C(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=l),y}},s}("object"==typeof e?e.exports:{});try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},{}],125:[function(t,e,n){"use strict";t("core-js/modules/es.array.last-index-of.js"),Object.defineProperty(n,"__esModule",{value:!0}),n.getPersonalBundleUrl=n.getPersonalBundleKey=n.uploadsS3Bucket=void 0,n.uploadsS3Bucket="doszone-uploads";function r(t,e,n){var r=n.lastIndexOf("/"),r=n.substr(r+1);return"doszone"===t?"personal/"+e+"/"+r:"personal-v2/"+t+"/"+e+"/"+r}n.getPersonalBundleKey=r,n.getPersonalBundleUrl=function(t,e,n){return"https://doszone-uploads.s3.dualstack.eu-central-1.amazonaws.com/"+r(t,e,n)}},{"core-js/modules/es.array.last-index-of.js":113}],126:[function(t,e,n){"use strict";function s(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Map"===(n="Object"===n&&t.constructor?t.constructor.name:n)||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,e=function(){};return{s:e,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:e}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return i=t.done,t},e:function(t){s=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t("core-js/modules/es.array.slice.js"),t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.function.name.js"),t("core-js/modules/es.array.from.js"),t("core-js/modules/es.string.iterator.js"),t("core-js/modules/es.symbol.js"),t("core-js/modules/es.symbol.description.js"),t("core-js/modules/es.symbol.iterator.js"),t("core-js/modules/es.array.iterator.js"),t("core-js/modules/web.dom-collections.iterator.js"),Object.defineProperty(n,"__esModule",{value:!0}),n.click=n.createDiv=n.activeClass=n.primaryClass=n.disabledClass=n.goneClass=void 0,n.goneClass="jsdos-player-gone",n.disabledClass="jsdos-player-button-disabled",n.primaryClass="jsdos-player-button-primary",n.activeClass="jsdos-player-button-active",n.createDiv=function(t,e){var n=document.createElement("div");if("string"==typeof t)n.className=t;else{var r,o=s(t);try{for(o.s();!(r=o.n()).done;){var i=r.value;n.classList.add(i)}}catch(t){o.e(t)}finally{o.f()}}return void 0!==e&&(n.innerHTML=e),n},n.click=function(t,e){var n,r=s(emulatorsUi.dom.pointers.bind.enders);try{for(r.s();!(n=r.n()).done;){var o=n.value;t.addEventListener(o,function(){t.classList.contains("jsdos-player-button-disabled")||e(t)})}}catch(t){r.e(t)}finally{r.f()}}},{"core-js/modules/es.array.from.js":111,"core-js/modules/es.array.iterator.js":112,"core-js/modules/es.array.slice.js":114,"core-js/modules/es.function.name.js":115,"core-js/modules/es.object.to-string.js":117,"core-js/modules/es.string.iterator.js":119,"core-js/modules/es.symbol.description.js":120,"core-js/modules/es.symbol.iterator.js":121,"core-js/modules/es.symbol.js":122,"core-js/modules/web.dom-collections.iterator.js":123}],127:[function(t,e,n){"use strict";function l(t,e,n,r,o,i,s){try{var a=t[i](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(r,o)}function s(a){return function(){var t=this,s=arguments;return new Promise(function(e,n){var r=a.apply(t,s);function o(t){l(r,e,n,o,i,"next",t)}function i(t){l(r,e,n,o,i,"throw",t)}o(void 0)})}}function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.promise.js"),t("core-js/modules/es.array.slice.js"),t("core-js/modules/es.function.name.js"),t("regenerator-runtime/runtime.js");var r=Object.create?function(t,e,n,r){void 0===r&&(r=n),Object.defineProperty(t,r,{enumerable:!0,get:function(){return e[n]}})}:function(t,e,n,r){t[r=void 0===r?n:r]=e[n]},o=Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e},i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.hasOwnProperty.call(t,n)&&r(e,t,n);return o(e,t),e};Object.defineProperty(n,"__esModule",{value:!0}),n.hardwareTransportLayerFactory=n.HardwareTransportLayerFactory=void 0;var u=i(t("base64-js")),f=new TextDecoder,p=function(){function e(t){a(this,e),this.sessionId=Date.now()+"",this.alive=!0,this.frameWidth=0,this.frameHeight=0,this.handler=function(){},this.hardware=t}var t,n,r,o,i;return t=e,(n=[{key:"callMain",value:function(){this.hardware.sendMessage("wc-install\n"+this.sessionId+"\n"),requestAnimationFrame(this.update.bind(this))}},{key:"sendMessageToServer",value:(i=s(regeneratorRuntime.mark(function t(e,n){var r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===n||(null==n?void 0:n.sessionId)!==this.sessionId)return t.abrupt("return");t.next=2;break;case 2:t.t0=e,t.next="wc-run"===t.t0?5:"wc-add-key"===t.t0?17:"wc-pause"===t.t0?19:"wc-resume"===t.t0?21:"wc-mute"===t.t0?23:"wc-unmute"===t.t0?25:"wc-exit"===t.t0?27:"wc-mouse-move"===t.t0?30:"wc-mouse-button"===t.t0?32:"wc-pack-fs-to-bundle"===t.t0?34:36;break;case 5:if(0<(r=this.hardware.writeFile("bundle_0.zip",h(n.bundles[0]))).length)throw console.error(r),new Error(r);t.next=9;break;case 9:if(void 0===n.bundles[1]){t.next=14;break}if(0<(r=this.hardware.writeFile("bundle_1.zip",h(n.bundles[0]))).length)throw console.error(r),new Error(r);t.next=14;break;case 14:return this.hardware.sendMessage("wc-run\n"),t.abrupt("break",38);case 17:return this.hardware.addKey(n.key,n.pressed?1:0,n.timeMs),t.abrupt("break",38);case 19:return this.hardware.sendMessage("wc-pause\n"+this.sessionId+"\n"),t.abrupt("break",38);case 21:return this.hardware.sendMessage("wc-resume\n"+this.sessionId+"\n"),t.abrupt("break",38);case 23:return this.hardware.sendMessage("wc-mute\n"+this.sessionId+"\n"),t.abrupt("break",38);case 25:return this.hardware.sendMessage("wc-unmute\n"+this.sessionId+"\n"),t.abrupt("break",38);case 27:return this.alive=!1,this.hardware.sendMessage("wc-exit\n"+this.sessionId+"\n"),t.abrupt("break",38);case 30:return this.hardware.mouseMove(n.x,n.y,n.timeMs),t.abrupt("break",38);case 32:return this.hardware.mouseButton(n.button,n.pressed?1:0,n.timeMs),t.abrupt("break",38);case 34:return this.hardware.sendMessage("wc-pack-fs-to-bundle\n"+this.sessionId+"\n"),t.abrupt("break",38);case 36:return console.log("Unhandled client message (wc):",e,n),t.abrupt("break",38);case 38:case"end":return t.stop()}},t,this)})),function(t,e){return i.apply(this,arguments)})},{key:"initMessageHandler",value:function(t){this.handler=t}},{key:"exit",value:function(){this.alive=!1}},{key:"onServerMessage",value:(o=s(regeneratorRuntime.mark(function t(e,n){var r,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:r=n||{},t.t0=e,t.next="ws-server-ready"===t.t0?4:"ws-sound-init"===t.t0?7:"ws-frame-set-size"===t.t0?10:"ws-sound-push"===t.t0||"ws-update-lines"===t.t0?14:"ws-persist"===t.t0?16:"ws-log"===t.t0||"ws-warn"===t.t0||"ws-err"===t.t0||"ws-stdout"===t.t0?19:22;break;case 4:return o=this.hardware.readConfig(),this.handler("ws-config",{sessionId:this.sessionId,content:o}),t.abrupt("break",23);case 7:return this.handler(e,r),this.handler("ws-server-ready",{sessionId:this.sessionId}),t.abrupt("break",23);case 10:return this.frameWidth=r.width,this.frameHeight=r.height,this.handler(e,r),t.abrupt("break",23);case 14:return console.error(e,"should not be called"),t.abrupt("break",23);case 16:return r.bundle=d(r.bundle),this.handler(e,r),t.abrupt("break",23);case 19:return void 0!==r.message&&null!==r.message&&0<r.message.length&&(r.message=f.decode(d(r.message))),this.handler(e,r),t.abrupt("break",23);case 22:this.handler(e,r);case 23:case"end":return t.stop()}},t,this)})),function(t,e){return o.apply(this,arguments)})},{key:"update",value:function(){this.alive&&requestAnimationFrame(this.update.bind(this)),this.updateFrame()}},{key:"updateFrame",value:function(){if(0!==this.frameWidth&&0!==this.frameHeight){var t=this.hardware.getFramePayload();if(0!==t.length){var e=d(t);if(0!==e.length){for(var n=[],r=3*this.frameWidth,o=this.frameHeight,i=-1,s=0;s<this.frameHeight;++s){var a,l=s===this.frameHeight-1;1===e[s]&&-1===i?i=s:!l&&0!==e[s]||-1===i||(a=((1===e[s]?s:s-1)-i+1)*r,l=e.slice(o,o+a),n.push({start:i,heapu8:l}),o+=a,i=-1)}this.handler("ws-update-lines",{sessionId:this.sessionId,lines:n})}}}}}])&&c(t.prototype,n),r&&c(t,r),e}(),t=function t(){var n=this;a(this,t),this.serverMessageHandler=function(){},this.createTransportLayer=function(t){t=new p(t);return n.serverMessageHandler=t.onServerMessage.bind(t),t.callMain(),t},window.serverMessage=function(e){e=f.decode(d(e));try{var t=JSON.parse("{"+e.slice(0,-1)+"}");n.serverMessageHandler(t.name,t)}catch(t){throw console.error("Can't parse",e,t),t}}};function d(t){return u.toByteArray(t)}function h(t){return u.fromByteArray(t)}n.HardwareTransportLayerFactory=t,n.hardwareTransportLayerFactory=new t},{"base64-js":1,"core-js/modules/es.array.slice.js":114,"core-js/modules/es.function.name.js":115,"core-js/modules/es.object.to-string.js":117,"core-js/modules/es.promise.js":118,"regenerator-runtime/runtime.js":124}],128:[function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Object.defineProperty(n,"__esModule",{value:!0}),n.Navbar=void 0;var b=t("./dom"),t=function(){function v(t,e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,v),this.onFullscreen=function(){r.dos.layers.toggleFullscreen()},this.onSave=function(){r.dos.layers.save()},this.onKeyboard=function(){r.dos.layers.toggleKeyboard()},this.onMute=function(e,n){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){e.classList.add(b.goneClass),n.classList.remove(b.goneClass),t.mute()})},this.onUnmute=function(e,n){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){e.classList.add(b.goneClass),n.classList.remove(b.goneClass),t.unmute()})},this.onPlay=function(e,n){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){e.classList.add(b.goneClass),n.classList.remove(b.goneClass),t.resume()})},this.onStop=function(e,n){var t;null!==(t=r.dos.ciPromise)&&void 0!==t&&t.then(function(t){e.classList.add(b.goneClass),n.classList.remove(b.goneClass),t.pause()})},this.onMobileControls=function(){r.dos.mobileControls?r.dos.disableMobileControls():r.dos.enableMobileControls()},this.onToggleSettings=function(t,e){e.classList.contains(b.activeClass)?(t.classList.remove(b.activeClass),e.classList.remove(b.activeClass),r.dos.settings.hide()):(t.classList.add(b.activeClass),e.classList.add(b.activeClass),r.dos.settings.show())},this.root=t,this.dos=e;var o=n.title||"JS-DOS",i=b.createDiv("jsdos-player-logo"),s=this.createTitle(o),t=b.createDiv("jsdos-player-spring"),e=this.createFullScreenButton(),a=this.createSaveButton(),l=this.createKeyboardButton(),c=this.createMuteButton(),u=this.createUnmuteButton(),f=this.createStopButton(),p=this.createPlayButton(),d=this.createMobileButton(),n=b.createDiv("jsdos-player-divider"),h=this.createWarnButton(),y=this.createSettingsButton();this.root.appendChild(i),this.root.appendChild(s),this.root.appendChild(t),this.root.appendChild(h),this.root.appendChild(y),this.root.appendChild(n),this.root.appendChild(d),this.root.appendChild(p),this.root.appendChild(f),this.root.appendChild(u),this.root.appendChild(c),this.root.appendChild(l),this.root.appendChild(a),this.root.appendChild(e),b.click(e,this.onFullscreen),b.click(a,this.onSave),b.click(l,this.onKeyboard),b.click(c,function(t){return r.onMute(t,u)}),b.click(u,function(t){return r.onUnmute(t,c)}),b.click(f,function(t){return r.onStop(t,p)}),b.click(p,function(t){return r.onPlay(t,f)}),b.click(d,this.onMobileControls),b.click(h,function(){return r.onToggleSettings(h,y)}),b.click(y,function(){return r.onToggleSettings(h,y)}),this.dos.layers.setOnSaveStarted(function(){a.classList.add(b.disabledClass),s.innerText="Saving..."}),this.dos.layers.setOnSaveEnded(function(){a.classList.remove(b.disabledClass),s.innerText=o}),this.dos.layers.setOnKeyboardVisibility(function(t){t?l.classList.add(b.primaryClass):l.classList.remove(b.primaryClass)}),this.dos.layers.setOnFullscreen(function(t){t?r.root.classList.add(b.goneClass):r.root.classList.remove(b.goneClass)});e=function(t){t?d.classList.add(b.primaryClass):d.classList.remove(b.primaryClass)};this.dos.setOnMobileControlsChanged(e),e(this.dos.mobileControls),this.warnButtonDiv=h,this.settingsButtonDiv=y}var t,e,n;return t=v,(e=[{key:"showWarn",value:function(){this.warnButtonDiv.classList.remove(b.goneClass),this.settingsButtonDiv.classList.add(b.goneClass)}},{key:"hideWarn",value:function(){this.warnButtonDiv.classList.add(b.goneClass),this.settingsButtonDiv.classList.remove(b.goneClass)}},{key:"createTitle",value:function(t){return b.createDiv("jsdos-player-title",t)}},{key:"createFullScreenButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="maximize" class="jsdos-player-icon jsdos-player-icon-maximize">\n\t\t\t\t<svg data-icon="maximize" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>maximize</desc>\n\t\t\t\t\t<path d="M5.99 8.99c-.28 0-.53.11-.71.29l-3.29 3.29v-1.59c0-.55-.45-1-1-1s-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1s-.45-1-1-1H3.41L6.7 10.7a1.003 1.003 0 00-.71-1.71zm9-9h-4c-.55 0-1 .45-1 1s.45 1 1 1h1.59l-3.3 3.3a.99.99 0 00-.29.7 1.003 1.003 0 001.71.71l3.29-3.29V5c0 .55.45 1 1 1s1-.45 1-1V1c0-.56-.45-1.01-1-1.01z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createSaveButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="save" class="jsdos-player-icon jsdos-player-icon-save">\n\t\t\t\t<svg data-icon="save" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>save</desc>\n\t\t\t\t\t<path d="M15.71 2.29l-2-2A.997.997 0 0013 0h-1v6H4V0H1C.45 0 0 .45 0 1v14c0 .55.45 1 1 1h14c.55 0 1-.45 1-1V3c0-.28-.11-.53-.29-.71zM14 15H2V9c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v6zM11 1H9v4h2V1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createKeyboardButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="keyboard" class="jsdos-player-icon jsdos-player-icon-keyboard">\n\t\t\t\t<svg data-icon="keyboard" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>keyboard</desc>\n\t\t\t\t\t<path d="M1 8h3.76l2-2H1c-.55 0-1 .45-1 1s.45 1 1 1zm14.49-4.01c.31-.32.51-.76.51-1.24C16 1.78 15.22 1 14.25 1c-.48 0-.92.2-1.24.51l-1.44 1.44 2.47 2.47 1.45-1.43zM1 4h7.76l2-2H1c-.55 0-1 .45-1 1s.45 1 1 1zm0 6c-.55 0-1 .45-1 1 0 .48.35.86.8.96L2.76 10H1zm9.95-6.43l-6.69 6.69 2.47 2.47 6.69-6.69-2.47-2.47zm4.25 2.47L13.24 8H15c.55 0 1-.45 1-1 0-.48-.35-.86-.8-.96zM2 15l3.86-1.39-2.46-2.44L2 15zm13-5h-3.76l-2 2H15c.55 0 1-.45 1-1s-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createMuteButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="mute" class="jsdos-player-icon jsdos-player-icon-mute">\n\t\t\t\t<svg data-icon="mute" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>mute</desc>\n\t\t\t\t\t<path d="M7 1.86c-.28 0-.53.11-.71.29l-2.7 2.71H1c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2.59l2.71 2.71a1.003 1.003 0 001.71-.71v-10c-.01-.55-.46-1-1.01-1zm6.74-.99l-1.58 1.22A9.985 9.985 0 0114 7.86c0 2.16-.69 4.15-1.85 5.78l1.58 1.22c1.42-1.97 2.26-4.38 2.26-7 .01-2.61-.84-5.02-2.25-6.99zM8.98 4.52C9.62 5.48 10 6.63 10 7.86s-.38 2.39-1.02 3.34l1.59 1.22c.9-1.29 1.43-2.86 1.43-4.56 0-1.7-.53-3.27-1.43-4.56L8.98 4.52z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createUnmuteButton",value:function(){return b.createDiv(["jsdos-player-button",b.goneClass],'\n\t\t\t<span icon="unmute" class="jsdos-player-icon jsdos-player-icon-unmute">\n\t\t\t\t<svg data-icon="unmute" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>unmute</desc>\n\t\t\t\t\t<path d="M11 2c-.28 0-.53.11-.71.29L7.59 5H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2.59l2.71 2.71c.17.18.42.29.7.29.55 0 1-.45 1-1V3c0-.55-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createStopButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="stop" class="jsdos-player-icon jsdos-player-icon-stop">\n\t\t\t\t<svg data-icon="stop" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>stop</desc>\n\t\t\t\t\t<path d="M6 3H4c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h2c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zm6 0h-2c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1h2c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createPlayButton",value:function(){return b.createDiv(["jsdos-player-button",b.goneClass],'\n\t\t\t<span icon="play" class="jsdos-player-icon jsdos-player-icon-play">\n\t\t\t\t<svg data-icon="play" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>play</desc>\n\t\t\t\t\t<path d="M12 8c0-.35-.19-.64-.46-.82l.01-.02-6-4-.01.02A.969.969 0 005 3c-.55 0-1 .45-1 1v8c0 .55.45 1 1 1 .21 0 .39-.08.54-.18l.01.02 6-4-.01-.02c.27-.18.46-.47.46-.82z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createMobileButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="mobile" class="jsdos-player-icon jsdos-player-icon-mobile">\n\t\t\t\t<svg data-icon="mobile" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>mobile</desc>\n\t\t\t\t\t<path d="M12 0H4c-.55 0-1 .45-1 1v14c0 .55.45 1 1 1h8c.55 0 1-.45 1-1V1c0-.55-.45-1-1-1zM8 15c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm3-3H5V3h6v9z" fill-rule="evenodd">\n\t\t\t\t\t</path>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createWarnButton",value:function(){return b.createDiv(["jsdos-player-button",b.goneClass],'\n\t\t\t<span icon="warn" class="jsdos-player-icon jsdos-player-icon-warn">\n\t\t\t\t<svg data-icon="warn" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>warn</desc>\n\t\t\t\t\t<path fill-rule="evenodd" clip-rule="evenodd" d="M15.84,13.5l0.01-0.01l-7-12L8.84,1.5c-0.17-0.3-0.48-0.5-0.85-0.5\n\t\t\t\t\t\tS7.32,1.2,7.14,1.5c0,0-0.01-0.01-0.01-0.01l-7,12l0.01,0.01c-0.09,0.15-0.15,0.31-0.15,0.5c0,0.55,0.45,1,1,1h14\n\t\t\t\t\t\tc0.55,0,1-0.45,1-1C15.99,13.81,15.93,13.65,15.84,13.5z M8.99,12.99h-2v-2h2V12.99z M8.99,9.99h-2v-5h2V9.99z"/>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}},{key:"createSettingsButton",value:function(){return b.createDiv("jsdos-player-button",'\n\t\t\t<span icon="settings" class="jsdos-player-icon jsdos-player-icon-settings">\n\t\t\t\t<svg data-icon="settings" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>settings</desc>\n\t\t\t\t\t<path fill-rule="evenodd" clip-rule="evenodd" d="M15.19,6.39h-1.85c-0.11-0.37-0.27-0.71-0.45-1.04l1.36-1.36\n\t\t\t\t\t\tc0.31-0.31,0.31-0.82,0-1.13l-1.13-1.13c-0.31-0.31-0.82-0.31-1.13,0l-1.36,1.36C10.3,2.92,9.96,2.76,9.59,2.65V0.79\n\t\t\t\t\t\tc0-0.44-0.36-0.8-0.8-0.8h-1.6c-0.44,0-0.8,0.36-0.8,0.8v1.86c-0.39,0.12-0.75,0.28-1.1,0.47l-1.3-1.3c-0.3-0.3-0.79-0.3-1.09,0\n\t\t\t\t\t\tL1.82,2.91c-0.3,0.3-0.3,0.79,0,1.09l1.3,1.3C2.92,5.64,2.76,6,2.64,6.39H0.79c-0.44,0-0.8,0.36-0.8,0.8v1.6\n\t\t\t\t\t\tc0,0.44,0.36,0.8,0.8,0.8h1.85c0.11,0.37,0.27,0.71,0.45,1.04l-1.36,1.36c-0.31,0.31-0.31,0.82,0,1.13l1.13,1.13\n\t\t\t\t\t\tc0.31,0.31,0.82,0.31,1.13,0l1.36-1.36c0.33,0.18,0.67,0.33,1.04,0.44v1.86c0,0.44,0.36,0.8,0.8,0.8h1.6c0.44,0,0.8-0.36,0.8-0.8\n\t\t\t\t\t\tv-1.86c0.39-0.12,0.75-0.28,1.1-0.47l1.3,1.3c0.3,0.3,0.79,0.3,1.09,0l1.09-1.09c0.3-0.3,0.3-0.79,0-1.09l-1.3-1.3\n\t\t\t\t\t\tc0.19-0.35,0.36-0.71,0.48-1.1h1.85c0.44,0,0.8-0.36,0.8-0.8v-1.6C15.99,6.75,15.63,6.39,15.19,6.39z M7.99,10.99\n\t\t\t\t\t\tc-1.66,0-3-1.34-3-3s1.34-3,3-3s3,1.34,3,3S9.65,10.99,7.99,10.99z"/>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}}])&&r(t.prototype,e),n&&r(t,n),v}();n.Navbar=t},{"./dom":126}],129:[function(t,e,n){"use strict";function l(t,e,n,r,o,i,s){try{var a=t[i](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(r,o)}t("regenerator-runtime/runtime.js"),t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.promise.js"),Object.defineProperty(n,"__esModule",{value:!0}),n.putPersonalBundle=n.getPersonalBundleUrl=void 0;var r=t("../sls/src/personal"),c=t("./xhr"),t="https://kdhkdsv558.execute-api.eu-central-1.amazonaws.com/dev",u=t+"/personal/put",f=t+"/personal/acl";function o(){var a;return a=regeneratorRuntime.mark(function t(e,n,r,o){var i,s,a;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,c.POST_OBJECT(u+"?namespace="+e+"&id="+n+"&bundleUrl="+encodeURIComponent(r));case 2:if((i=t.sent).success){t.next=5;break}throw new Error("Unable to put personal bundle");case 5:return a=JSON.parse(i.payload),s=a.signature,a=a.url,s["x-amz-content-sha256"]="UNSIGNED-PAYLOAD",t.next=11,c.SEND("put",a,"text",o.buffer,void 0,s);case 11:return t.next=13,c.POST_OBJECT(f+"?namespace="+e+"&id="+n+"&bundleUrl="+r);case 13:if(t.sent.success){t.next=15;break}throw new Error("Can't set ACL to personal bundle");case 15:case"end":return t.stop()}},t)}),(o=function(){var t=this,s=arguments;return new Promise(function(e,n){var r=a.apply(t,s);function o(t){l(r,e,n,o,i,"next",t)}function i(t){l(r,e,n,o,i,"throw",t)}o(void 0)})}).apply(this,arguments)}n.getPersonalBundleUrl=function(t,e,n){return r.getPersonalBundleUrl(t,e,n)},n.putPersonalBundle=function(t,e,n,r){return o.apply(this,arguments)}},{"../sls/src/personal":125,"./xhr":132,"core-js/modules/es.object.to-string.js":117,"core-js/modules/es.promise.js":118,"regenerator-runtime/runtime.js":124}],130:[function(t,e,n){"use strict";function l(t,e,n,r,o,i,s){try{var a=t[i](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(r,o)}function c(a){return function(){var t=this,s=arguments;return new Promise(function(e,n){var r=a.apply(t,s);function o(t){l(r,e,n,o,i,"next",t)}function i(t){l(r,e,n,o,i,"throw",t)}o(void 0)})}}t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.promise.js"),t("regenerator-runtime/runtime.js"),Object.defineProperty(n,"__esModule",{value:!0}),n.DosPlayer=void 0;var u=t("./js-dos-navbar"),f=t("./dom"),p=t("./hardware-transport-layer"),d=t("./js-dos-settings"),h=t("./js-dos-personal"),y=Dos;function r(t,r){if("none"===(r=r||{}).style)return console.warn("If you don't need the jsdos topbar, please use emulatros + emulators-ui instead"),y(t,r||{});"dark"===r.style&&t.classList.add("jsdos-player-dark"),t.classList.add("jsdos-player-root");var e=f.createDiv("jsdos-player-navbar"),n=f.createDiv("jsdos-player-window"),o=f.createDiv("jsdos-player-settings"),i=f.createDiv("jsdos-player-keyboard");t.appendChild(e),t.appendChild(n),t.appendChild(o),t.appendChild(i),r.layersOptions=r.layersOptions||{},r.layersOptions.keyboardDiv=i,r.layersOptions.fullscreenElement=t;var s=r.hardware;null!=s&&(r.createTransportLayer=function(){return p.hardwareTransportLayerFactory.createTransportLayer(s)},r.emulatorFunction="backend");var a=y(n,r);a.navbar=new u.Navbar(e,a,r),a.settings=new d.Settings(o,a,r),a.requestClientId=function(){var e=c(regeneratorRuntime.mark(function t(e){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(void 0===(null===(n=r)||void 0===n?void 0:n.clientId))return t.abrupt("return",null);t.next=2;break;case 2:return t.next=4,r.clientId(e);case 4:return null===(n=t.sent)?a.navbar.showWarn():a.navbar.hideWarn(),a.settings.updateClientId(n),t.abrupt("return",n);case 8:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}();var l=a.run;return a.run=function(){var r=c(regeneratorRuntime.mark(function t(r,e,n){var o,i,s;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a.requestClientId(!1);case 2:return o=t.sent,void 0===e&&void 0===n&&null!==o&&(e=h.getPersonalBundleUrl(o.namespace,o.id,r)+"?dt="+Date.now()),t.next=6,l.call(a,r,e,n);case 6:return i=t.sent,s=a.layers.getOnSave(),a.layers.setOnSave(c(regeneratorRuntime.mark(function t(){var e,n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,a.requestClientId(!1);case 2:if(null!==(e=t.sent))return t.next=6,i.persist();t.next=10;break;case 6:return n=t.sent,t.abrupt("return",h.putPersonalBundle(e.namespace,e.id,r,n));case 10:return t.abrupt("return",s.call(a.layers));case 11:case"end":return t.stop()}},t)}))),t.abrupt("return",i);case 10:case"end":return t.stop()}},t)}));return function(t,e,n){return r.apply(this,arguments)}}(),a.requestClientId(!1),a}n.DosPlayer=r,window.Dos=r},{"./dom":126,"./hardware-transport-layer":127,"./js-dos-navbar":128,"./js-dos-personal":129,"./js-dos-settings":131,"core-js/modules/es.object.to-string.js":117,"core-js/modules/es.promise.js":118,"regenerator-runtime/runtime.js":124}],131:[function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}Object.defineProperty(n,"__esModule",{value:!0}),n.Settings=void 0;var l=t("./dom"),t=function(){function a(t,e,n){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),this.onClientIdLogin=function(){r.dos.requestClientId(!0)},this.root=t,this.dos=e,this.root.classList.add(l.goneClass);var o=document.createElement("h2");o.innerText="ClientId";var t=l.createDiv("jsdos-player-client-id-row"),e=l.createDiv("jsdos-player-client-id-info","\n\t\t\tBy default js-dos store your game progress in indexed db. This data can be suddenly wiped. Please log-in to store progress on backend, and\n\t\t\tactivate all other features.\n\t\t"),i=this.createLoginButton(),s=l.createDiv("jsdos-player-client-id");this.root.appendChild(o),this.root.appendChild(t),this.root.appendChild(e),t.appendChild(s),t.appendChild(i),l.click(i,this.onClientIdLogin),this.updateClientId=function(t){null===t?(i.classList.remove(l.goneClass),s.classList.add("jsdos-player-color-warn"),s.innerText="!!! NOT-SET !!!"):(i.classList.add(l.goneClass),s.classList.remove("jsdos-player-color-warn"),s.innerText=t.id+"@"+t.namespace)}}var t,e,n;return t=a,(e=[{key:"show",value:function(){this.root.classList.remove(l.goneClass)}},{key:"hide",value:function(){this.root.classList.add(l.goneClass)}},{key:"createLoginButton",value:function(){return l.createDiv(["jsdos-player-button",l.primaryClass],'\n\t\t\t<span icon="login" class="jsdos-player-icon jsdos-player-icon-login">\n\t\t\t\t<svg data-icon="settings" width="16" height="16" viewBox="0 0 16 16">\n\t\t\t\t\t<desc>login</desc>\n\t\t\t\t\t<path fill-rule="evenodd" clip-rule="evenodd" d="M11,8c0-0.28-0.11-0.53-0.29-0.71l-3-3C7.53,4.11,7.28,4,7,4C6.45,4,6,4.45,6,5\n\t\t\t\t\t\tc0,0.28,0.11,0.53,0.29,0.71L7.59,7H1C0.45,7,0,7.45,0,8c0,0.55,0.45,1,1,1h6.59l-1.29,1.29C6.11,10.47,6,10.72,6,11\n\t\t\t\t\t\tc0,0.55,0.45,1,1,1c0.28,0,0.53-0.11,0.71-0.29l3-3C10.89,8.53,11,8.28,11,8z M15,0H9C8.45,0,8,0.45,8,1c0,0.55,0.45,1,1,1h5v12H9\n\t\t\t\t\t\tc-0.55,0-1,0.45-1,1c0,0.55,0.45,1,1,1h6c0.55,0,1-0.45,1-1V1C16,0.45,15.55,0,15,0z"/>\n\t\t\t\t</svg>\n\t\t\t</span>\n\t\t')}}])&&r(t.prototype,e),n&&r(t,n),a}();n.Settings=t},{"./dom":126}],132:[function(t,e,n){"use strict";function l(t,e,n,r,o,i,s){try{var a=t[i](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(r,o)}function r(s,a,l,c,u,f){return new Promise(function(t,e){var n=new XMLHttpRequest;if(n.responseType=l,n.open(s,a,!0),n.addEventListener("load",function(){200!==n.status?e("Wrong status code "+n.status):"text"===l?t(n.responseText):"arraybuffer"===l?t(n.response):e("Unsupported responseType "+l)},!1),n.addEventListener("error",function(){e("HTTP GET failed for url "+a)},!1),n.addEventListener("abort",function(){e("HTTP GET canceled for url "+a)},!1),void 0!==u&&(n.onprogress=function(t){t.loaded&&t.total&&0<t.total&&(t=Math.round(1e4*t.loaded/t.total)/100,u(t))}),void 0!==f)for(var r=0,o=Object.keys(f);r<o.length;r++){var i=o[r];n.setRequestHeader(i,f[i])}n.send(c)})}function o(){var a;return a=regeneratorRuntime.mark(function t(e,n){var r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.t0=JSON,t.next=3,i(e,"text",n);case 3:if(t.t1=t.sent,(r=t.t0.parse.call(t.t0,t.t1)).success)return t.abrupt("return",r);t.next=7;break;case 7:throw new Error("POST Request failed:\n Payload:\n"+JSON.stringify(r.body,null,2));case 8:case"end":return t.stop()}},t)}),(o=function(){var t=this,s=arguments;return new Promise(function(e,n){var r=a.apply(t,s);function o(t){l(r,e,n,o,i,"next",t)}function i(t){l(r,e,n,o,i,"throw",t)}o(void 0)})}).apply(this,arguments)}function i(t,e,n){return r("post",t,e,n)}t("regenerator-runtime/runtime.js"),t("core-js/modules/es.object.to-string.js"),t("core-js/modules/es.promise.js"),t("core-js/modules/es.object.keys.js"),Object.defineProperty(n,"__esModule",{value:!0}),n._POST=n.POST_OBJECT=n.SEND=void 0,n.SEND=r,n.POST_OBJECT=function(t,e){return o.apply(this,arguments)},n._POST=i},{"core-js/modules/es.object.keys.js":116,"core-js/modules/es.object.to-string.js":117,"core-js/modules/es.promise.js":118,"regenerator-runtime/runtime.js":124}]},{},[130]);


//# sourceMappingURL=data:application/json;charset=utf8;base64,
